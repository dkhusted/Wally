/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 12.10.2022 17:37:42

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 241344;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[71];
TfLiteEvalTensor tflEvalTensors[71];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[27];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int8_t tensor_data2[16*3*3*1] = { 
  /* [0][0][][] */ -88, -112, -31, 
  /* [0][1][][] */ 66, -38, 16, 
  /* [0][2][][] */ 31, 127, 19, 
  /* [1][0][][] */ 105, -95, -11, 
  /* [1][1][][] */ -127, 104, 23, 
  /* [1][2][][] */ 14, -1, -13, 
  /* [2][0][][] */ -23, -2, -48, 
  /* [2][1][][] */ 36, 95, 127, 
  /* [2][2][][] */ -12, -94, -79, 
  /* [3][0][][] */ 119, 125, 57, 
  /* [3][1][][] */ 1, -22, -15, 
  /* [3][2][][] */ -102, -127, -44, 
  /* [4][0][][] */ 26, -55, -9, 
  /* [4][1][][] */ 23, -127, -7, 
  /* [4][2][][] */ 11, -89, -19, 
  /* [5][0][][] */ -68, 25, -4, 
  /* [5][1][][] */ -127, 34, 1, 
  /* [5][2][][] */ -78, 28, -3, 
  /* [6][0][][] */ -18, 79, 127, 
  /* [6][1][][] */ -52, 55, -17, 
  /* [6][2][][] */ -37, -53, -90, 
  /* [7][0][][] */ 35, 21, -27, 
  /* [7][1][][] */ 127, 62, -17, 
  /* [7][2][][] */ 43, 13, -15, 
  /* [8][0][][] */ -21, -31, 53, 
  /* [8][1][][] */ -54, -87, 127, 
  /* [8][2][][] */ -26, -62, 96, 
  /* [9][0][][] */ -23, 52, -11, 
  /* [9][1][][] */ -17, 127, -12, 
  /* [9][2][][] */ -9, 86, -6, 
  /* [10][0][][] */ 25, 88, 12, 
  /* [10][1][][] */ -37, -127, -29, 
  /* [10][2][][] */ 12, 40, 18, 
  /* [11][0][][] */ 7, -19, 10, 
  /* [11][1][][] */ 65, -93, 35, 
  /* [11][2][][] */ -85, 127, -46, 
  /* [12][0][][] */ -41, 50, -9, 
  /* [12][1][][] */ -127, 115, 6, 
  /* [12][2][][] */ -78, 80, 5, 
  /* [13][0][][] */ 85, 24, -12, 
  /* [13][1][][] */ 127, 101, -9, 
  /* [13][2][][] */ 67, 99, 36, 
  /* [14][0][][] */ -30, -28, 47, 
  /* [14][1][][] */ 44, 98, -127, 
  /* [14][2][][] */ -16, -70, 81, 
  /* [15][0][][] */ -89, -26, 16, 
  /* [15][1][][] */ -123, -127, 13, 
  /* [15][2][][] */ -13, -75, -11, 
};
const TfArray<4, int> tensor_dimension2 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant2_scale = { 16, { 0.053057659417390823, 0.26712122559547424, 0.065542027354240417, 0.03971799835562706, 0.0054923887364566326, 0.0074600079096853733, 0.033879797905683517, 0.0068494328297674656, 0.04271819069981575, 0.0081870732828974724, 0.12711569666862488, 0.23200418055057526, 0.084196329116821289, 0.0038991221226751804, 0.21339540183544159, 0.0088837184011936188, } };
const TfArray<16, int> quant2_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[16] = { 1708, 263, -44, 1486, 61472, 47469, 5769, 16237, 5101, 16607, 926, -150, 4859, 18979, 128, 25372, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<16, float> quant3_scale = { 16, { 0.00020806926477234811, 0.001047534286044538, 0.00025702756829559803, 0.00015575686120428145, 2.1538780856644735e-05, 2.9254933906486258e-05, 0.00013286195462569594, 2.6860521757043898e-05, 0.00016752233204897493, 3.2106170692713931e-05, 0.00049849296920001507, 0.00090982037363573909, 0.00033018170506693423, 1.5290675946744159e-05, 0.00083684478886425495, 3.483811451587826e-05, } };
const TfArray<16, int> quant3_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[1*3*3*16] = { 
  /* [0][0][][] */ 3,-3,4,2,-22,12,9,17,-6,-11,3,-9,1,-7,6,0, 5,-1,1,3,11,-1,15,-25,-7,9,-2,91,-6,20,7,0, 2,-1,-1,3,-1,-12,-1,12,2,3,0,-12,1,-6,-3,-1, 
  /* [0][1][][] */ 11,-8,3,2,127,-23,-127,-20,127,127,-2,-7,111,-24,0,-18, -127,127,127,0,-94,-90,-12,-100,20,-105,127,127,127,127,127,127, 18,-1,-5,-1,-14,127,9,-9,-4,-12,-3,-10,7,-5,-12,-9, 
  /* [0][2][][] */ 1,-2,1,-15,-20,17,49,8,-13,-8,3,-1,-9,0,-4,-11, 18,-14,-4,-127,5,-15,-15,127,-4,1,3,-17,-15,-58,-7,-37, -3,-4,-3,-5,-2,-4,-1,-1,1,2,-6,0,-4,-6,-9,-13, 
};
const TfArray<4, int> tensor_dimension4 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant4_scale = { 16, { 0.0047837882302701473, 0.00895733293145895, 0.0079972837120294571, 0.007700036745518446, 0.047168642282485962, 0.036185137927532196, 0.0076182698830962181, 0.033099114894866943, 0.011369802057743073, 0.050786443054676056, 0.01050746813416481, 0.008311455138027668, 0.0044876928441226482, 0.013238744810223579, 0.008856629952788353, 0.030941927805542946, } };
const TfArray<16, int> quant4_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 3 };
const ALIGN(16) int32_t tensor_data5[16] = { 20880, -784, -158, 3209, -8, 9, 9449, 1081, 93, 80, -2553, 3113, 1046, -881, -415, -982, };
const TfArray<1, int> tensor_dimension5 = { 1, { 16 } };
const TfArray<16, float> quant5_scale = { 16, { 0.00011255972640356049, 0.00021076077246107161, 0.00018817138334270567, 0.00018117733998224139, 0.0011098504764959216, 0.00085141503950580955, 0.00017925341671798378, 0.00077880272874608636, 0.0002675247669685632, 0.0011949751060456038, 0.00024723453680053353, 0.00019556365441530943, 0.00010559277143329382, 0.00031149989808909595, 0.00020839129865635186, 0.00072804535739123821, } };
const TfArray<16, int> quant5_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[8*1*1*16] = { 
  /* [0][0][][] */ -10,-10,-14,-67,-23,-35,17,-21,37,9,-28,-3,107,127,-15,-95, 
  /* [1][0][][] */ 127,-59,-40,12,-45,71,-68,-46,-39,84,-36,-54,-9,6,-61,-15, 
  /* [2][0][][] */ -32,-97,44,38,54,-58,-86,-26,34,-91,26,-127,50,-22,-76,27, 
  /* [3][0][][] */ 36,11,15,15,-15,73,-56,-21,127,48,15,24,0,-15,12,21, 
  /* [4][0][][] */ -90,-35,-32,-127,-7,39,53,-114,30,-15,-51,-39,-121,31,-40,-16, 
  /* [5][0][][] */ 88,49,72,-29,46,-45,-127,-123,-16,-71,61,47,-56,48,62,-43, 
  /* [6][0][][] */ 103,41,-127,-79,32,-72,4,-89,-37,20,-118,95,93,-84,5,74, 
  /* [7][0][][] */ -127,-3,99,-26,-63,0,-1,-58,-46,57,80,-31,64,-26,29,24, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant6_scale = { 8, { 0.0076696104370057583, 0.0093127479776740074, 0.0072473781183362007, 0.010267558507621288, 0.0082819927483797073, 0.0067705148831009865, 0.00728210574015975, 0.011932944878935814, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { -7463, -3314, 11733, -9307, 22385, 7909, -9780, 11099, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 0.00018046142940875143, 0.0002191234816564247, 0.00017052654584404081, 0.00024158961605280638, 0.00019487041572574526, 0.00015930623339954764, 0.00017134366498794407, 0.00028077518800273538, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[48*1*1*8] = { 
  /* [0][0][][] */ -47,35,3,-26,-74,-34,-127,32, 
  /* [1][0][][] */ 87,-83,-58,-50,127,-87,100,30, 
  /* [2][0][][] */ -98,118,-38,-127,54,-31,-14,31, 
  /* [3][0][][] */ 48,20,79,15,91,121,127,-21, 
  /* [4][0][][] */ -65,-127,74,19,-57,-104,9,-50, 
  /* [5][0][][] */ 127,-23,67,59,-69,-7,1,-17, 
  /* [6][0][][] */ 25,34,127,-19,42,-30,-42,30, 
  /* [7][0][][] */ 25,5,-127,-31,-42,87,89,-71, 
  /* [8][0][][] */ 3,127,-34,1,65,90,49,37, 
  /* [9][0][][] */ 3,102,-70,87,0,-101,44,127, 
  /* [10][0][][] */ -1,-127,-8,-30,-74,-124,-59,-81, 
  /* [11][0][][] */ -127,-80,110,50,-9,-65,105,58, 
  /* [12][0][][] */ -26,44,-127,83,33,-57,-81,104, 
  /* [13][0][][] */ 87,-127,89,77,5,33,35,-57, 
  /* [14][0][][] */ -15,83,-33,-127,-22,-111,-31,-64, 
  /* [15][0][][] */ 37,120,25,-16,32,-59,96,-127, 
  /* [16][0][][] */ -123,-127,-64,107,-56,24,-23,86, 
  /* [17][0][][] */ -36,-112,-127,95,-74,79,-52,74, 
  /* [18][0][][] */ -90,-84,-55,83,-6,61,-6,127, 
  /* [19][0][][] */ 62,-127,98,-123,5,-62,30,-24, 
  /* [20][0][][] */ -3,70,29,19,35,127,76,-9, 
  /* [21][0][][] */ 25,117,48,-33,40,-67,99,-127, 
  /* [22][0][][] */ 22,18,106,19,-5,127,37,-40, 
  /* [23][0][][] */ -105,-62,36,-73,97,100,-58,-127, 
  /* [24][0][][] */ -94,-87,41,-81,94,96,-47,-127, 
  /* [25][0][][] */ 127,11,-61,-14,17,36,-65,-6, 
  /* [26][0][][] */ -127,-30,-122,-30,-49,-33,14,-6, 
  /* [27][0][][] */ 79,32,1,-55,-127,-17,85,94, 
  /* [28][0][][] */ -127,-85,3,35,-65,-111,2,2, 
  /* [29][0][][] */ 127,89,32,-120,34,5,-52,-102, 
  /* [30][0][][] */ -85,-62,39,-69,79,97,-40,-127, 
  /* [31][0][][] */ 46,42,0,127,2,-66,13,10, 
  /* [32][0][][] */ -28,127,-8,29,24,60,-20,43, 
  /* [33][0][][] */ -42,127,-72,20,26,-43,-19,-5, 
  /* [34][0][][] */ -127,-116,-48,120,-3,13,16,110, 
  /* [35][0][][] */ -47,127,-25,-3,74,105,58,67, 
  /* [36][0][][] */ 76,26,6,-43,-127,-28,99,110, 
  /* [37][0][][] */ -66,113,26,25,-127,117,-24,-96, 
  /* [38][0][][] */ 46,27,34,25,127,70,106,51, 
  /* [39][0][][] */ -23,-68,36,-11,2,37,-93,127, 
  /* [40][0][][] */ -77,-62,-79,127,-31,-5,9,67, 
  /* [41][0][][] */ 127,14,61,89,-40,-3,4,-21, 
  /* [42][0][][] */ -40,2,-71,-127,47,-102,4,75, 
  /* [43][0][][] */ 26,-4,89,-6,40,127,93,7, 
  /* [44][0][][] */ -34,-25,-74,127,48,13,-47,-36, 
  /* [45][0][][] */ 62,127,101,-105,46,-62,5,-107, 
  /* [46][0][][] */ -40,-127,-41,32,-11,38,-65,121, 
  /* [47][0][][] */ 44,37,121,6,88,122,127,-25, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant8_scale = { 48, { 0.0040944437496364117, 0.0041283904574811459, 0.0029616588726639748, 0.0032517337240278721, 0.00066285033244639635, 0.003086139215156436, 0.005262280348688364, 0.0021803760901093483, 0.0032486801501363516, 0.0062708305194973946, 0.003398974658921361, 0.0028402279131114483, 0.0021561249159276485, 0.0036894960794597864, 0.0031128008849918842, 0.003374630119651556, 0.0021885642781853676, 0.00082905014278367162, 0.0025367352645844221, 0.0035506859421730042, 0.0042475382797420025, 0.0018803686834871769, 0.0045884423889219761, 0.0034022529143840075, 0.0053820940665900707, 0.0083035454154014587, 0.0031201452948153019, 0.0098551828414201736, 0.0027742348611354828, 0.00078559177927672863, 0.0033208322711288929, 0.0084445253014564514, 0.0041241510771214962, 0.0038315355777740479, 0.0029166082385927439, 0.0035893903113901615, 0.0046083489432930946, 0.0064550228416919708, 0.0041008349508047104, 0.0051514902152121067, 0.0033184350468218327, 0.0032422794029116631, 0.0033799898810684681, 0.0046637905761599541, 0.0046295663341879845, 0.0024068071506917477, 0.0026212893426418304, 0.0031343861483037472, } };
const TfArray<48, int> quant8_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[48] = { 1209, -490, -236, 1087, 13985, 1896, -468, 3817, 1347, 987, 140, 2990, 1116, 483, -777, 181, 3027, 10092, 2722, -782, 882, -1121, -9, 2022, -205, -553, 1603, -17, 2596, 11027, 2109, -8, 456, -29, 2192, 67, 440, -162, 944, 947, 1428, 1771, 235, -203, 540, 1916, 1241, -213, };
const TfArray<1, int> tensor_dimension9 = { 1, { 48 } };
const TfArray<48, float> quant9_scale = { 48, { 0.00045502325519919395, 0.0004587958101183176, 0.00032913472387008369, 0.00036137129063718021, 7.3663803050294518e-05, 0.00034296847297810018, 0.00058480713050812483, 0.00024230931012425572, 0.00036103193997405469, 0.00069688918301835656, 0.00037773445365019143, 0.00031563988886773586, 0.00023961422266438603, 0.00041002064244821668, 0.00034593141754157841, 0.00037502899067476392, 0.00024321927048731595, 9.2133901489432901e-05, 0.00028191215824335814, 0.00039459441904909909, 0.00047203691792674363, 0.00020896890782751143, 0.00050992227625101805, 0.00037809877539984882, 0.00059812224935740232, 0.00092278863303363323, 0.00034674763446673751, 0.0010952249867841601, 0.00030830595642328262, 8.7304295448120683e-05, 0.0003690503363031894, 0.00093845598166808486, 0.000458324677310884, 0.00042580577428452671, 0.00032412816653959453, 0.00039889570325613022, 0.00051213451661169529, 0.00071735883830115199, 0.00045573350507766008, 0.00057249481324106455, 0.00036878394894301891, 0.00036032061325386167, 0.00037562462966889143, 0.00051829585572704673, 0.00051449245074763894, 0.00026747302035801113, 0.00029130882467143238, 0.00034833024255931377, } };
const TfArray<48, int> quant9_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[1*3*3*48] = { 
  /* [0][0][][] */ -42,-96,-5,-28,127,-58,73,-69,-98,-84,-13,-45,106,43,65,-127,53,-10,-1,-42,-84,127,2,16,-24,92,70,-34,70,-73,22,-56,-103,-85,39,61,27,69,111,-67,-125,-12,43,62,49,-127,87,66, -63,-125,-76,44,-79,105,47,-52,-77,44,87,-112,127,86,109,-88,-75,-71,36,-58,-83,117,-79,127,-81,122,91,-115,98,-54,10,-127,-39,-71,68,121,114,112,127,-56,-127,-61,69,86,91,109,83,63, 0,-45,-55,88,-29,-32,25,-10,67,23,66,-79,31,68,-29,-16,-71,-18,37,-29,-37,5,-87,0,-59,41,21,-92,39,54,118,-84,15,21,-6,33,65,67,50,-9,-26,94,66,25,40,29,14,-127, 
  /* [0][1][][] */ -127,-81,-12,-71,-76,-77,110,-104,-127,-127,81,-68,76,55,-115,-55,127,-127,-60,-74,-89,96,-74,12,-22,96,113,-45,-114,-77,7,-46,-89,-127,-127,71,36,90,24,-84,57,-14,75,122,83,107,125,-120, -121,-127,-127,-97,-24,127,127,-127,71,56,127,-127,91,127,60,-88,56,-87,-127,-127,-127,66,-127,122,-127,127,127,-127,-127,127,-13,-123,-127,-97,42,127,127,127,-1,-127,94,-92,127,127,127,-5,127,110, -30,-59,-124,127,71,-45,53,-22,54,25,16,-63,10,72,79,-42,-9,3,-10,-67,-41,-16,-84,-13,-103,49,25,-110,-51,38,127,-107,-69,19,57,74,69,72,-16,-25,49,127,78,17,51,-48,29,19, 
  /* [0][2][][] */ -111,-18,24,13,-43,-30,29,-52,29,-49,15,-58,-6,25,-34,-12,-73,-25,97,-29,5,44,-73,-10,-23,53,83,-4,36,54,-3,3,-3,-83,-39,58,17,10,-53,-41,22,-3,38,43,26,47,17,-62, -90,-32,-44,-73,89,41,59,-60,94,19,-46,-79,6,38,-127,-59,34,9,50,-60,-4,26,-72,61,-58,63,73,-22,37,5,-25,-28,-68,-22,-57,64,28,14,-95,-53,35,-40,86,76,40,-114,26,4, -27,-16,-50,-18,-21,-22,13,-28,-50,9,-14,-32,-3,12,26,-17,31,37,0,-47,-11,-16,-23,-20,-63,10,24,-26,11,-63,50,-25,-91,22,23,43,10,16,-56,-20,8,39,20,30,15,-9,5,49, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.0037221929524093866, 0.0040586637333035469, 0.0072797713801264763, 0.0066577829420566559, 0.034766655415296555, 0.0070074978284537792, 0.0069657699204981327, 0.0045515983365476131, 0.0062432773411273956, 0.0034109882544726133, 0.0027693873271346092, 0.002210504375398159, 0.0039174510166049004, 0.002512611448764801, 0.011400419287383556, 0.009683903306722641, 0.0049587287940084934, 0.015376408584415913, 0.0056981290690600872, 0.0053149024024605751, 0.0050118062645196915, 0.021608725190162659, 0.0046617081388831139, 0.0099175907671451569, 0.0065644383430480957, 0.0025787253398448229, 0.0025449211243540049, 0.0032419837079942226, 0.007505838293582201, 0.032686386257410049, 0.010007033124566078, 0.0032191711943596601, 0.0046308697201311588, 0.0067669269628822803, 0.0069596096873283386, 0.0026840977370738983, 0.0034188628196716309, 0.0019957371987402439, 0.0051223598420619965, 0.0031766151078045368, 0.0063886190764605999, 0.0066960183903574944, 0.0028973827138543129, 0.0033282863441854715, 0.0031802633311599493, 0.015400523319840431, 0.0028652586042881012, 0.0086191100999712944, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 3 };
const ALIGN(16) int32_t tensor_data11[48] = { 13234, 3913, 4624, -107, -517, -321, 459, 31725, 808, 2477, 8027, 61778, 1618, 5114, -21, 8927, -2179, 11957, -163, 7417, 10092, 277, 4816, -10506, 9989, 1960, -168, 14953, -150, -698, -10553, 11671, 5593, 1732, -149, 3928, -9142, 10502, -2404, 15121, -890, -1369, 5510, 2176, 887, -203, 1338, -483, };
const TfArray<1, int> tensor_dimension11 = { 1, { 48 } };
const TfArray<48, float> quant11_scale = { 48, { 8.7581014668103307e-05, 9.5497969596181065e-05, 0.00017128874605987221, 0.00015665372484363616, 0.00081803894136101007, 0.00016488230903632939, 0.00016390047676395625, 0.00010709643538575619, 0.00014690065290778875, 8.0258549132850021e-05, 6.5162057580891997e-05, 5.201187013881281e-05, 9.2175316240172833e-05, 5.9120269725099206e-05, 0.00026824517408385873, 0.00022785655164625496, 0.00011667597573250532, 0.00036179786548018456, 0.00013407363439910114, 0.00012505652557592839, 0.00011792485747719184, 0.00050844060024246573, 0.00010968725109705701, 0.00023335508012678474, 0.00015445737517438829, 6.0675891290884465e-05, 5.9880498156417161e-05, 7.6281969086267054e-05, 0.00017660796584095806, 0.00076909147901460528, 0.00023545960721094161, 7.5745207141153514e-05, 0.00010896164167206734, 0.00015922181773930788, 0.00016375552513636649, 6.3155239331535995e-05, 8.0443831393495202e-05, 4.6958524762885645e-05, 0.00012052611418766901, 7.4743889854289591e-05, 0.00015032045484986156, 0.00015755338245071471, 6.8173714680597186e-05, 7.8312623372767121e-05, 7.4829724326264113e-05, 0.00036236527375876904, 6.7417851823847741e-05, 0.00020280259195715189, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int8_t tensor_data12[8*1*1*48] = { 
  /* [0][0][][] */ -46,-3,31,16,-33,-13,7,7,-44,-8,-69,-56,-25,-65,-11,-32,42,-41,37,41,-18,33,-40,14,-1,-40,57,-15,-7,-20,17,10,86,34,32,-127,15,2,-14,-34,4,-15,44,47,35,5,24,7, 
  /* [1][0][][] */ -1,43,66,-22,-13,45,-47,-29,-1,22,-21,-91,11,89,-21,61,-22,20,-30,-55,5,-75,-30,22,-71,-15,-4,-114,-31,-18,29,-52,41,80,-41,5,127,-24,7,50,-37,37,-84,-30,112,-21,-33,-25, 
  /* [2][0][][] */ -3,-15,-58,14,-1,45,29,8,-13,37,-4,28,67,-93,15,-59,33,-89,25,36,-27,55,-6,26,-18,64,-21,-66,13,0,14,-69,-45,-87,33,-28,101,23,-4,-55,-2,23,79,27,127,11,22,24, 
  /* [3][0][][] */ -9,24,-68,38,16,-36,-71,-101,15,-24,-35,1,7,24,35,78,-14,16,-31,22,8,-95,29,-55,-77,-10,127,-10,-41,5,-62,16,-2,-80,9,-13,-24,-41,-25,101,-50,-37,1,12,39,7,-40,42, 
  /* [4][0][][] */ -26,-44,-7,7,31,-28,-9,-9,27,-27,59,-77,6,29,9,14,-16,-26,14,-15,-3,-54,7,-18,14,-10,41,46,32,22,-15,25,-11,-1,4,-1,-65,83,36,-27,29,-18,-19,-21,-74,11,127,8, 
  /* [5][0][][] */ 48,-22,0,14,28,-38,34,-127,27,-26,-8,116,-77,71,25,-67,3,-92,17,2,-34,66,-37,-48,-62,85,-23,0,-24,53,-40,-38,26,58,36,-1,-37,-8,-45,-42,21,-38,-44,-4,-30,56,92,21, 
  /* [6][0][][] */ 55,-24,21,-15,-37,-20,-33,22,-42,4,-42,127,-43,-39,-7,56,16,48,14,35,35,-79,-20,14,24,38,-64,7,10,-42,13,41,8,13,-15,-2,11,3,-3,-3,-3,-19,40,56,-4,-35,75,-18, 
  /* [7][0][][] */ -25,3,-13,65,29,30,2,28,23,10,69,-4,121,106,62,51,40,42,-12,0,22,-21,-90,-27,12,-2,-29,61,35,-23,-28,-19,35,5,40,-92,-70,36,34,51,-31,35,84,127,-54,-28,-103,59, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant12_scale = { 8, { 0.010416236706078053, 0.0055306325666606426, 0.0063834637403488159, 0.0059870677068829536, 0.0080477548763155937, 0.0065482286736369133, 0.0092338649556040764, 0.0055322502739727497, } };
const TfArray<8, int> quant12_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int32_t tensor_data13[8] = { 8256, 15390, -5072, 6836, -679, 3219, -11964, -18109, };
const TfArray<1, int> tensor_dimension13 = { 1, { 8 } };
const TfArray<8, float> quant13_scale = { 8, { 0.00024508792557753623, 0.00013013253919780254, 0.0001501991500845179, 0.00014087218733038753, 0.00018935893604066223, 0.00015407596947625279, 0.00021726741397287697, 0.00013017059245612472, } };
const TfArray<8, int> quant13_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int8_t tensor_data14[48*1*1*8] = { 
  /* [0][0][][] */ 56,127,-84,-76,17,85,9,83, 
  /* [1][0][][] */ 56,-73,48,-127,-65,65,-97,-46, 
  /* [2][0][][] */ -37,127,126,45,97,1,51,7, 
  /* [3][0][][] */ 111,57,-88,78,3,-109,-127,-21, 
  /* [4][0][][] */ -33,27,18,-72,-31,94,127,39, 
  /* [5][0][][] */ 21,74,-127,-71,40,80,28,-21, 
  /* [6][0][][] */ -10,127,56,46,71,14,15,-86, 
  /* [7][0][][] */ 127,-22,-28,32,23,-1,93,18, 
  /* [8][0][][] */ 49,127,63,100,94,87,102,-96, 
  /* [9][0][][] */ 33,127,-114,-80,8,112,-4,62, 
  /* [10][0][][] */ -71,-47,17,-59,-6,-36,-55,127, 
  /* [11][0][][] */ 16,-118,-127,-25,30,-13,40,-6, 
  /* [12][0][][] */ -34,-101,-127,-24,-125,7,-82,38, 
  /* [13][0][][] */ -9,3,-103,98,-127,-25,2,-15, 
  /* [14][0][][] */ -66,-49,-127,-9,34,-4,-10,-61, 
  /* [15][0][][] */ 20,-111,-127,8,-107,-24,-28,0, 
  /* [16][0][][] */ 127,-62,-18,71,-86,21,36,103, 
  /* [17][0][][] */ -26,124,127,-27,-58,-26,-31,-28, 
  /* [18][0][][] */ 17,-127,38,67,-7,-64,48,-83, 
  /* [19][0][][] */ 127,-46,-66,35,-106,5,35,106, 
  /* [20][0][][] */ -30,-127,81,77,-15,-86,-3,-72, 
  /* [21][0][][] */ -6,-56,-10,-31,127,-2,49,27, 
  /* [22][0][][] */ -127,32,-83,44,48,47,-98,-110, 
  /* [23][0][][] */ -100,-56,57,1,-102,114,127,-51, 
  /* [24][0][][] */ -28,67,-11,-45,-49,112,127,16, 
  /* [25][0][][] */ -67,-116,-127,-59,-52,-14,-42,-56, 
  /* [26][0][][] */ -9,56,-8,127,-87,34,-55,-7, 
  /* [27][0][][] */ 16,-127,40,81,24,-46,8,-119, 
  /* [28][0][][] */ 15,127,46,35,104,-8,22,-59, 
  /* [29][0][][] */ 96,21,-25,-9,81,-127,-81,22, 
  /* [30][0][][] */ 23,-13,27,-127,13,-22,17,-23, 
  /* [31][0][][] */ 48,-35,8,64,-11,28,6,127, 
  /* [32][0][][] */ -94,-70,21,-53,-52,127,74,104, 
  /* [33][0][][] */ -25,52,45,-36,37,127,-114,68, 
  /* [34][0][][] */ 29,127,-65,-40,15,45,-63,60, 
  /* [35][0][][] */ 8,-127,34,55,-22,-62,31,-71, 
  /* [36][0][][] */ -17,-31,-83,-7,-127,-62,-22,11, 
  /* [37][0][][] */ -43,-127,77,82,-42,-81,-2,-34, 
  /* [38][0][][] */ -74,24,65,-68,-127,-76,-53,84, 
  /* [39][0][][] */ 69,-127,78,54,-15,-77,-27,-74, 
  /* [40][0][][] */ 10,55,18,45,-127,-15,-61,15, 
  /* [41][0][][] */ 101,127,-64,-99,61,33,1,17, 
  /* [42][0][][] */ -10,-45,-21,14,127,15,56,13, 
  /* [43][0][][] */ 127,13,77,20,-75,-21,66,97, 
  /* [44][0][][] */ 93,32,-45,2,94,-127,-119,15, 
  /* [45][0][][] */ 50,21,24,27,92,-127,0,-52, 
  /* [46][0][][] */ 53,-33,-3,127,34,56,19,69, 
  /* [47][0][][] */ -100,-83,48,69,-37,22,127,-81, 
};
const TfArray<4, int> tensor_dimension14 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant14_scale = { 48, { 0.0028436684515327215, 0.0030228276737034321, 0.0010077047627419233, 0.0022650482133030891, 0.0030661320779472589, 0.0037744974251836538, 0.0027409256435930729, 0.0013338429853320122, 0.0023863764945417643, 0.0029910004232078791, 0.0035635987296700478, 0.0030942987650632858, 0.0007208982715383172, 0.0030746432021260262, 0.0034324126318097115, 0.00072880141669884324, 0.0042546805925667286, 0.0031936606392264366, 0.0034226495772600174, 0.0026711435057222843, 0.0025589738506823778, 0.0029189130291342735, 0.0047228937037289143, 0.00061411113711073995, 0.0020987880416214466, 0.002141148317605257, 0.0012258526403456926, 0.0032884145621210337, 0.0022316600661724806, 0.0023222072049975395, 0.0064372080378234386, 0.0060955933295190334, 0.0033643308561295271, 0.0025910809636116028, 0.0035416851751506329, 0.0036552031524479389, 0.0024599102325737476, 0.0034845678601413965, 0.0040570572018623352, 0.002917837118729949, 0.0026104303542524576, 0.0033957450650632381, 0.0032412030268460512, 0.0025738568510860205, 0.002151956083253026, 0.0035149366594851017, 0.0050193914212286472, 0.0016748704947531223, } };
const TfArray<48, int> quant14_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int32_t tensor_data15[48] = { 2714, 3613, 13016, 2058, 2289, -1422, 3564, 9347, 3224, -1069, 3308, -2275, 18711, -1970, 1932, 19968, -303, 2008, 267, 3319, 3719, 3635, 474, 24352, 5295, 3758, 11032, 1590, 4819, 4545, 628, 754, 706, 2278, -371, 274, -3409, -757, 2019, 2467, 4182, 1752, 3213, 4464, 4615, 2614, 1902, 7006, };
const TfArray<1, int> tensor_dimension15 = { 1, { 48 } };
const TfArray<48, float> quant15_scale = { 48, { 0.00020801692153327167, 0.00022112258011475205, 7.3714516474865377e-05, 0.00016569031868129969, 0.00022429032833315432, 0.00027610789402388036, 0.00020050119201187044, 9.7571821243036538e-05, 0.00017456558998674154, 0.00021879437554161996, 0.00026068047736771405, 0.00022635074856225401, 5.2734358177985996e-05, 0.0002249129320262, 0.00025108407135121524, 5.3312480304157361e-05, 0.00031123371445573866, 0.00023361915373243392, 0.00025036992155946791, 0.00019539655477274209, 0.00018719125364441425, 0.00021352112526074052, 0.00034548394614830613, 4.4922784582013264e-05, 0.00015352823538705707, 0.00015662693476770073, 8.9672226749826223e-05, 0.00024055049289017916, 0.00016324795433320105, 0.00016987154958769679, 0.00047088757855817676, 0.0004458981566131115, 0.00024610385298728943, 0.00018953991821035743, 0.00025907746748998761, 0.00026738140149973333, 0.00017994466179516166, 0.00025489929248578846, 0.00029677740531042218, 0.00021344241395127028, 0.00019095533934887499, 0.00024840180412866175, 0.00023709693050477654, 0.00018827995518222451, 0.00015741752577014267, 0.00025712078786455095, 0.00036717302282340825, 0.00012251829321030527, } };
const TfArray<48, int> quant15_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int8_t tensor_data16[1*3*3*48] = { 
  /* [0][0][][] */ 0,-65,10,5,-19,-90,-36,31,-36,0,-12,14,41,-3,-15,4,102,6,27,10,11,-18,-68,27,-16,-11,-8,-18,-55,76,-9,-126,42,-8,-58,-60,-12,-33,0,-1,-19,46,11,10,-15,57,127,-25, -127,-122,-22,127,-64,65,-86,127,32,19,26,1,51,23,-3,-41,-31,45,17,9,3,127,9,127,126,-27,-56,38,71,-125,-8,-74,64,-7,-48,-127,21,18,-57,-49,-124,-2,-98,-117,31,49,47,95, -21,-27,11,7,-27,50,41,54,12,-37,-3,6,-22,-5,0,5,-60,35,-68,-30,-6,-25,127,29,-60,3,9,9,15,37,15,6,-2,-13,-50,64,6,8,11,54,21,-3,30,-18,-8,29,-31,-33, 
  /* [0][1][][] */ -12,-7,-27,-5,34,-107,127,-104,-14,11,17,38,127,21,-1,-28,-22,-32,25,54,80,-69,45,13,-89,127,-80,-10,127,-99,52,-127,-48,3,-90,11,7,-59,-46,17,112,127,18,-127,-65,-60,-2,76, 100,-127,127,0,127,55,-59,-64,32,127,127,-127,-99,127,127,127,127,127,102,127,127,107,0,0,104,-100,-127,124,38,127,127,-9,-127,127,127,119,-127,127,-127,-127,36,39,-127,-28,127,-127,-18,65, 16,23,-39,-6,-47,127,-107,88,110,-73,-1,62,-42,7,14,-57,21,13,-127,9,24,-119,-35,-1,67,-13,-22,127,-77,-40,39,-57,-29,20,94,-23,35,1,-6,-111,102,21,39,65,-56,89,80,-91, 
  /* [0][2][][] */ -2,33,5,-33,4,-66,-8,-2,3,7,-12,10,-16,-17,0,3,-51,24,3,-40,12,-31,88,-7,-127,1,58,-13,2,0,-3,33,-12,-12,-78,27,-4,-7,11,51,-36,3,10,14,-19,20,-12,10, 43,-18,-34,-36,30,28,116,-104,127,-33,-10,13,-80,-24,-24,-63,-18,120,-9,25,10,20,-25,-32,-89,57,105,-1,-106,6,-42,-17,-26,-1,-45,0,49,-26,-1,105,-127,3,-17,71,26,55,7,-127, -11,16,3,-22,-14,1,-2,-62,-17,-19,-26,10,9,-17,-16,18,53,48,-37,-17,-2,-31,-49,-13,30,-17,35,-2,-15,-2,-12,20,24,-9,-16,-46,-12,8,25,-10,-20,-4,4,31,-16,21,65,-55, 
};
const TfArray<4, int> tensor_dimension16 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.011767003685235977, 0.006110072135925293, 0.031136596575379372, 0.011605554260313511, 0.0096673201769590378, 0.010008268989622593, 0.010198036208748817, 0.012736366130411625, 0.0038650068454444408, 0.010541987605392933, 0.010369768366217613, 0.070459194481372833, 0.018255807459354401, 0.033200431615114212, 0.018524900078773499, 0.034081492573022842, 0.0077368225902318954, 0.0029243642929941416, 0.011626778170466423, 0.013100492767989635, 0.010199812240898609, 0.010201231576502323, 0.003945463802665472, 0.017805984243750572, 0.0065340534783899784, 0.01701558381319046, 0.017893524840474129, 0.0077414358966052532, 0.0094295535236597061, 0.015877537429332733, 0.004740346223115921, 0.0040140370838344097, 0.0044716335833072662, 0.0089774252846837044, 0.0052961548790335655, 0.015088332816958427, 0.15423195064067841, 0.017183979973196983, 0.0061661135405302048, 0.0076126651838421822, 0.0076958001591265202, 0.0054114190861582756, 0.012226210907101631, 0.0098021877929568291, 0.015617498196661472, 0.0036566751077771187, 0.0029569617472589016, 0.0075240503065288067, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 3 };
const ALIGN(16) int32_t tensor_data17[48] = { 272, 12559, -593, -175, 438, -1201, 215, 1438, -3987, -143, -4682, -195, 1009, -713, -2210, 2623, 6477, 1380, 1001, -4336, -8290, 1338, 16116, -5264, 1325, -910, 3573, -8283, -305, 553, -9753, 10197, 6495, -144, 4741, 343, 28, -714, 10935, 1557, 7807, -4068, 2554, 2680, -471, 9440, -210, 3287, };
const TfArray<1, int> tensor_dimension17 = { 1, { 48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.0002768706763163209, 0.00014376640319824219, 0.00073262583464384079, 0.00027307186974212527, 0.00022746635659132153, 0.00023548868193756789, 0.00023995379160623997, 0.00029967920272611082, 9.0941342932637781e-05, 0.00024804676650092006, 0.00024399455287493765, 0.0016578633803874254, 0.00042954841046594083, 0.00078118662349879742, 0.00043588000698946416, 0.00080191751476377249, 0.00018204288790002465, 6.8808571086265147e-05, 0.00027357126236893237, 0.00030824690475128591, 0.00023999558470677584, 0.00024002898135222495, 9.283444524044171e-05, 0.00041896433685906231, 0.00015374243957921863, 0.00040036669815890491, 0.00042102413135580719, 0.00018215143063571304, 0.00022187185822986066, 0.00037358913687057793, 0.00011153756349813193, 9.444793249713257e-05, 0.00010521490912651643, 0.00021123353508301079, 0.00012461541336961091, 0.00035501961247064173, 0.0036289871204644442, 0.00040432895184494555, 0.00014508502499666065, 0.00017912153271026909, 0.00018107765936292708, 0.00012732751201838255, 0.00028767556068487465, 0.00023063972184900194, 0.00036747055128216743, 8.603941387264058e-05, 6.9575573434121907e-05, 0.00017703647608868778, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const ALIGN(16) int8_t tensor_data18[8*1*1*48] = { 
  /* [0][0][][] */ -40,-55,-22,-75,-7,-11,103,95,-106,-86,-35,18,-54,-6,-68,31,-94,8,21,127,69,-36,23,104,75,79,30,7,-100,-60,-86,-57,-42,105,36,-48,36,-36,92,2,25,7,3,-100,42,-33,-36,-83, 
  /* [1][0][][] */ -11,51,-23,-30,-72,62,-21,-44,-32,67,-12,17,51,40,-39,-3,-16,-121,77,-44,127,5,-63,23,54,-3,-80,57,35,-9,69,31,-34,-12,4,-10,-2,96,-16,-22,66,34,-9,19,93,13,-24,62, 
  /* [2][0][][] */ -27,-38,119,7,87,-46,-18,26,-34,0,-9,47,9,-39,-47,-127,-51,-103,-20,22,-95,16,-41,-31,-47,14,-2,-43,-41,7,-25,-12,-2,-6,23,-5,22,-31,-52,10,40,-31,32,-46,-52,-47,-65,-45, 
  /* [3][0][][] */ 55,18,58,12,16,-36,32,71,-56,-24,48,-25,-73,54,-9,43,61,30,-32,28,-99,-62,127,-5,1,1,-66,-42,-47,63,104,-58,9,-105,-11,42,-15,-73,-20,65,-76,-63,63,-2,-91,-63,56,-7, 
  /* [4][0][][] */ 17,-17,71,-19,6,-12,1,0,-59,-11,-20,9,41,-73,39,-102,48,46,-14,-33,6,36,19,7,3,0,57,-21,22,22,-127,-15,-20,-21,5,10,45,-3,32,0,-35,-16,-65,27,-19,-93,3,22, 
  /* [5][0][][] */ 25,-47,64,36,37,18,29,4,-74,-2,-42,23,31,5,14,-37,94,76,2,-15,93,-54,127,-91,-16,41,2,46,16,15,-31,-47,-21,-41,-35,12,37,34,60,2,-67,30,31,29,52,-23,79,-1, 
  /* [6][0][][] */ -49,50,-125,77,44,32,28,20,-17,-11,54,-71,-91,-12,-28,39,-127,24,2,86,20,51,-94,-88,-10,-22,35,79,-31,-42,-35,11,43,69,-44,-23,-14,-14,89,2,80,64,-123,-62,-36,117,-56,-33, 
  /* [7][0][][] */ 37,73,-74,35,28,39,115,69,45,70,-91,-7,-41,0,-67,-51,34,41,106,108,71,13,127,22,106,92,-52,85,-69,29,-5,-69,19,-63,-28,10,-3,86,-56,73,-55,52,-2,-78,69,-21,52,-40, 
};
const TfArray<4, int> tensor_dimension18 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant18_scale = { 8, { 0.0038687996566295624, 0.005303562618792057, 0.0062597449868917465, 0.0052317697554826736, 0.0052867964841425419, 0.0050237090326845646, 0.0034630855079740286, 0.0037331064231693745, } };
const TfArray<8, int> quant18_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int32_t tensor_data19[8] = { 1895, 575, 22396, -4803, 4277, -16001, 3005, -15075, };
const TfArray<1, int> tensor_dimension19 = { 1, { 8 } };
const TfArray<8, float> quant19_scale = { 8, { 9.1030582552775741e-05, 0.00012478971621021628, 0.00014728812675457448, 0.00012310047168284655, 0.00012439521378837526, 0.00011820492363767698, 8.1484366091899574e-05, 8.7837797764223069e-05, } };
const TfArray<8, int> quant19_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int8_t tensor_data20[48*1*1*8] = { 
  /* [0][0][][] */ 60,28,127,-33,58,100,-74,-47, 
  /* [1][0][][] */ 17,-86,-127,-5,44,20,27,-3, 
  /* [2][0][][] */ -127,-2,-38,-24,49,31,-73,-33, 
  /* [3][0][][] */ 47,71,127,-80,-18,-115,-12,-14, 
  /* [4][0][][] */ -127,22,-51,-25,34,10,-41,-59, 
  /* [5][0][][] */ -113,30,-61,-16,9,40,-86,-127, 
  /* [6][0][][] */ -41,-127,-119,45,110,1,0,48, 
  /* [7][0][][] */ -68,-127,-80,-64,-59,-57,27,74, 
  /* [8][0][][] */ 86,26,-13,2,86,-84,-127,13, 
  /* [9][0][][] */ -36,51,-57,81,-58,-42,127,-32, 
  /* [10][0][][] */ -29,124,37,73,127,-21,-4,61, 
  /* [11][0][][] */ -81,-32,-25,-8,-85,106,127,-3, 
  /* [12][0][][] */ 68,36,-127,35,-13,-33,-65,-14, 
  /* [13][0][][] */ 54,-22,-69,3,10,-127,-35,-26, 
  /* [14][0][][] */ 9,-89,86,16,127,-120,-62,28, 
  /* [15][0][][] */ -45,-53,4,127,57,81,-71,20, 
  /* [16][0][][] */ 113,28,-33,26,80,-91,-127,-15, 
  /* [17][0][][] */ 53,127,53,70,50,58,21,-82, 
  /* [18][0][][] */ 32,-17,-1,-5,127,10,26,-5, 
  /* [19][0][][] */ 11,127,29,7,-118,18,20,-30, 
  /* [20][0][][] */ -39,14,70,-127,23,40,-11,105, 
  /* [21][0][][] */ -42,74,42,-122,34,59,-13,127, 
  /* [22][0][][] */ -72,-74,-84,24,-127,127,119,-20, 
  /* [23][0][][] */ 95,32,-127,15,6,-39,-63,-17, 
  /* [24][0][][] */ -55,36,4,4,-23,69,-127,99, 
  /* [25][0][][] */ -108,-63,-127,16,-53,-70,70,104, 
  /* [26][0][][] */ 55,-9,-41,-39,106,-19,127,-41, 
  /* [27][0][][] */ 127,-67,27,92,-2,30,-22,106, 
  /* [28][0][][] */ 53,49,44,-1,127,-81,66,-58, 
  /* [29][0][][] */ -14,-8,-29,-48,-68,11,127,-33, 
  /* [30][0][][] */ 50,-127,-71,-70,-111,12,1,-48, 
  /* [31][0][][] */ 11,30,-13,-14,-127,8,-24,-9, 
  /* [32][0][][] */ 44,-61,-62,72,-10,-84,103,-127, 
  /* [33][0][][] */ 42,127,39,36,48,-18,-30,-9, 
  /* [34][0][][] */ -123,-37,127,-10,-29,110,106,10, 
  /* [35][0][][] */ -28,69,127,-15,-61,-62,-39,25, 
  /* [36][0][][] */ -105,9,96,-11,-16,127,83,25, 
  /* [37][0][][] */ -28,-85,-6,-127,-31,-76,86,53, 
  /* [38][0][][] */ 44,-12,89,-55,56,55,-127,13, 
  /* [39][0][][] */ -18,89,-127,-34,-30,-1,1,80, 
  /* [40][0][][] */ 57,-52,26,34,8,2,5,127, 
  /* [41][0][][] */ -39,68,127,-9,19,82,-44,25, 
  /* [42][0][][] */ 63,-112,-124,-16,-127,12,22,-93, 
  /* [43][0][][] */ -9,-86,31,-59,127,-44,14,49, 
  /* [44][0][][] */ -7,127,113,17,9,65,-74,17, 
  /* [45][0][][] */ -41,42,6,84,-112,65,-127,25, 
  /* [46][0][][] */ -40,-42,60,41,-127,-121,-28,-6, 
  /* [47][0][][] */ -15,58,37,-110,-127,43,-21,58, 
};
const TfArray<4, int> tensor_dimension20 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant20_scale = { 48, { 0.0023075025528669357, 0.0036346956621855497, 0.0034567364491522312, 0.0028807134367525578, 0.0024056429974734783, 0.0022089295089244843, 0.0023406159598380327, 0.0020347812678664923, 0.00278682098723948, 0.003208536421880126, 0.0022301606368273497, 0.0021019144915044308, 0.0029498434159904718, 0.0029580234549939632, 0.002703044330701232, 0.0019291858188807964, 0.0026538039091974497, 0.0030151710379868746, 0.0018798649543896317, 0.0037374512758105993, 0.002953497227281332, 0.0021566690411418676, 0.002323859604075551, 0.0017443840624764562, 0.0023499720264226198, 0.0024975878186523914, 0.0033892979845404625, 0.003017037408426404, 0.0012913297396153212, 0.0031496628653258085, 0.0020688907243311405, 0.0019527659751474857, 0.0020670096855610609, 0.0024712763261049986, 0.0021626290399581194, 0.0035443401429802179, 0.0023075123317539692, 0.0029937382787466049, 0.0023667162749916315, 0.0018545942148193717, 0.0034777678083628416, 0.0012231646105647087, 0.0014688899973407388, 0.0030885403975844383, 0.0013013018760830164, 0.0028321342542767525, 0.0023320571053773165, 0.0028310043271631002, } };
const TfArray<48, int> quant20_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int32_t tensor_data21[48] = { 2199, -1090, 525, -1557, 3495, -908, 3498, -3020, 1484, 640, 1995, 3982, 580, -473, 934, 4319, -1764, 2714, 5129, 692, -849, 2609, -952, 5112, 2039, 1751, 814, -985, 7822, -384, 2368, -1818, -693, 3500, -1210, 1663, 1997, 732, 378, 4859, 1455, 7851, -3923, 1463, 7270, 56, 2651, 2389, };
const TfArray<1, int> tensor_dimension21 = { 1, { 48 } };
const TfArray<48, float> quant21_scale = { 48, { 0.00021041941363364458, 0.00033144513145089149, 0.00031521718483418226, 0.00026269006775692105, 0.00021936876873951405, 0.00020143060828559101, 0.00021343899425119162, 0.00018555016140453517, 0.00025412809918634593, 0.00029258400900289416, 0.00020336665329523385, 0.0001916719920700416, 0.00026899398653768003, 0.00026973991771228611, 0.00024648857652209699, 0.00017592099902685732, 0.00024199836479965597, 0.00027495116228237748, 0.00017142346769105643, 0.00034081534249708056, 0.00026932716718874872, 0.00019666501611936837, 0.00021191099949646741, 0.00015906906628515571, 0.00021429217304103076, 0.00022775314573664218, 0.00030906751635484397, 0.00027512136148288846, 0.00011775537859648466, 0.00028721537091769278, 0.00018866057507693768, 0.00017807124822866172, 0.00018848905165214092, 0.00022535381140187383, 0.00019720850104931742, 0.0003232056915294379, 0.00021042030130047351, 0.00027299672365188599, 0.00021581906185019761, 0.00016911904094740748, 0.00031713501084595919, 0.00011153945524711162, 0.0001339469599770382, 0.00028164166724309325, 0.00011866473505506292, 0.00025826017372310162, 0.00021265851682983339, 0.00025815714616328478, } };
const TfArray<48, int> quant21_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int8_t tensor_data22[1*3*3*48] = { 
  /* [0][0][][] */ -99,90,-124,86,-106,65,-53,127,-78,-64,77,-45,60,-69,-46,-49,67,85,88,-73,92,-94,59,-94,-97,-41,87,127,-90,-61,-105,54,72,-100,62,-125,-82,-127,92,-40,-11,-93,123,-111,118,75,-74,-55, -121,103,-65,101,-73,109,-39,113,-122,-93,116,-75,87,-98,-71,-77,101,114,127,-117,104,-121,81,-127,-84,-71,109,127,37,-79,-127,77,119,-127,85,-120,-93,-124,114,-66,-92,101,127,-106,-26,114,-74,-92, -66,63,-15,27,11,62,-32,39,-47,-43,52,-43,39,-32,-25,-22,53,52,65,-35,32,-78,32,-48,-80,-30,43,37,94,-32,-57,13,46,-82,37,-30,-17,-36,46,-26,-127,-32,55,-42,-63,73,-25,-57, 
  /* [0][1][][] */ -94,96,-72,118,-95,100,-127,117,-99,-102,89,-83,85,-96,-90,-98,93,89,-37,-100,96,-118,93,-74,-101,-81,114,120,-127,-106,-94,108,103,59,91,-127,-108,-124,107,-88,-97,-122,94,-127,127,67,-90,-87, -127,127,-127,127,-127,127,-126,109,-127,-127,127,-127,127,-127,-127,-127,127,127,-34,-127,127,-127,127,-120,-127,-127,127,110,13,-127,-99,127,127,49,127,-123,-127,-121,127,-127,-87,127,81,-109,-60,127,-127,-127, -84,73,-121,49,-36,40,-76,88,-41,-42,57,-59,61,-33,-57,-40,68,55,-27,-27,40,-86,48,-56,-127,-48,54,28,99,-77,-53,93,44,17,48,-52,-25,-40,60,-60,-29,-52,22,-66,-87,78,-24,-62, 
  /* [0][2][][] */ -39,52,7,40,-28,37,-79,33,-51,-54,30,-58,40,-64,-45,-71,69,33,-72,-23,29,-45,56,-29,-69,-45,30,17,-68,-55,-22,102,43,82,39,-62,-42,-52,30,-49,-110,-46,23,-101,83,24,-66,-26, -68,55,-99,41,-59,43,-81,76,-71,-55,56,-80,71,-101,-66,-78,93,44,-83,-6,27,-45,53,-54,-62,-66,36,28,2,-77,-53,98,37,105,54,-57,-74,-49,31,-70,-47,55,9,-93,-29,55,-83,-47, -24,34,-97,1,-33,4,-47,35,-22,-12,28,-43,31,-33,-33,-9,53,18,-59,14,1,-7,29,-19,-34,-28,25,6,61,-26,-16,49,15,48,21,-17,-14,13,28,-37,14,-13,5,-21,-52,34,-14,-31, 
};
const TfArray<4, int> tensor_dimension22 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.0033621408510953188, 0.0041742995381355286, 0.0021328250877559185, 0.0067076859995722771, 0.0045244144275784492, 0.003729179734364152, 0.0017306272638961673, 0.0092559158802032471, 0.0050471373833715916, 0.0031639270018786192, 0.0025247945450246334, 0.0039255046285688877, 0.0039589912630617619, 0.0047013997100293636, 0.002015366218984127, 0.0029862504452466965, 0.0045894458889961243, 0.0030752662569284439, 0.0063390638679265976, 0.0027637965977191925, 0.0028080528136342764, 0.0021295261103659868, 0.0037603676319122314, 0.0047912150621414185, 0.0026207156479358673, 0.0035518328659236431, 0.0025190003216266632, 0.0020312308333814144, 0.0097362659871578217, 0.0041187838651239872, 0.0031215725466609001, 0.013360947370529175, 0.003975285217165947, 0.0063962214626371861, 0.0033942693844437599, 0.0037613124586641788, 0.0033682172652333975, 0.0024714409373700619, 0.0032674954272806644, 0.0046698530204594135, 0.0024416330270469189, 0.0080339061096310616, 0.012148969806730747, 0.0029373364523053169, 0.0069754729047417641, 0.0025599629152566195, 0.0019487976096570492, 0.0030527876224368811, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 3 };
const ALIGN(16) int32_t tensor_data23[48] = { 14500, -1143, 22957, -609, 14300, -1165, 43715, 385, 12156, 30330, 2619, 24945, -1907, 11402, 36038, 26662, -66, -907, 935, 36302, 545, 20349, 2680, 17605, 17732, 29867, -704, -1149, -2386, 14809, 19597, -459, 1007, -3524, 2334, 18089, 8421, 31752, 3867, 18355, 23939, 1157, 607, 15682, -963, 1601, 40937, 22225, };
const TfArray<1, int> tensor_dimension23 = { 1, { 48 } };
const TfArray<48, float> quant23_scale = { 48, { 7.9109195212367922e-05, 9.8218813946004957e-05, 5.0184120482299477e-05, 0.00015782790433149785, 0.00010645681322785094, 8.7745407654438168e-05, 4.0720642573432997e-05, 0.00021778626251034439, 0.00011875617929035798, 7.4445342761464417e-05, 5.9406931541161612e-05, 9.2364818556234241e-05, 9.3152739282231778e-05, 0.00011062117118854076, 4.7420384362339973e-05, 7.026471575954929e-05, 0.00010798696166602895, 7.2359209298156202e-05, 0.00014915445353835821, 6.503050826722756e-05, 6.6071828769054264e-05, 5.0106496928492561e-05, 8.8479238911531866e-05, 0.00011273447307758033, 6.1663900851272047e-05, 8.357253682333976e-05, 5.927059828536585e-05, 4.7793666453799233e-05, 0.00022908861865289509, 9.6912561275530607e-05, 7.3448769398964942e-05, 0.00031437524012289941, 9.3536124040838331e-05, 0.00015049932699184865, 7.9865159932523966e-05, 8.850147423800081e-05, 7.9252175055444241e-05, 5.8151552366325632e-05, 7.6882250141352415e-05, 0.00010987889982061461, 5.7450190070085227e-05, 0.00018903308955486864, 0.000285858113784343, 6.9113797508180141e-05, 0.0001641287817619741, 6.0234422562643886e-05, 4.5854063500883058e-05, 7.1830298111308366e-05, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const ALIGN(16) int8_t tensor_data24[16*1*1*48] = { 
  /* [0][0][][] */ 26,35,20,-29,62,61,-36,58,-12,112,1,50,-36,41,-17,47,35,81,49,-65,-66,75,-9,47,62,49,34,51,-46,-48,-15,86,-32,20,-71,53,48,-127,-30,21,14,-26,55,-3,-6,-51,-66,-20, 
  /* [1][0][][] */ -49,4,-83,-43,15,95,-56,26,-16,-40,-43,29,60,-13,-23,-28,-36,-31,-4,19,-62,44,-102,-45,-56,-43,50,70,-19,-33,44,-43,15,-57,-31,49,9,-60,127,-39,-22,31,-46,-18,31,55,23,17, 
  /* [2][0][][] */ 6,-3,66,-27,-22,-84,25,18,109,77,-74,19,112,-50,127,92,-68,-21,-26,25,83,-80,-25,-101,19,-30,34,-76,37,43,-52,20,26,-21,58,47,-63,15,3,-30,36,31,69,-7,22,-89,98,-59, 
  /* [3][0][][] */ 41,9,-20,-25,39,106,21,-9,44,-44,21,-19,-49,9,10,44,-39,-69,42,-127,-5,-2,-22,-21,-39,84,125,60,-12,-49,25,45,55,-26,87,36,-47,-61,3,38,29,19,-14,3,21,22,-5,-25, 
  /* [4][0][][] */ 98,-17,7,-54,82,90,49,4,79,-17,-107,29,44,-24,23,-8,-99,-122,-29,-94,-19,24,-40,-35,-80,127,-103,112,-62,-51,25,81,37,-51,15,-29,-4,15,-31,20,-50,-10,-3,63,-45,102,-23,-54, 
  /* [5][0][][] */ 6,-3,-58,8,-15,56,17,-26,65,55,40,88,53,-25,33,-4,-38,127,-20,35,12,-1,-62,-12,33,-5,-64,-39,-11,27,21,-17,-40,-1,43,15,-44,8,-84,1,90,-19,28,48,-20,9,-32,32, 
  /* [6][0][][] */ 57,0,17,68,1,-33,107,-69,5,72,125,111,39,48,-48,57,31,-44,-84,87,43,-61,-52,53,-92,94,79,-11,109,62,-27,-5,90,-57,-127,-10,102,44,-11,-8,6,58,43,-28,64,124,42,-2, 
  /* [7][0][][] */ -100,-4,-23,23,-63,-56,21,45,82,112,-51,-76,-107,15,-24,-17,-77,101,2,121,-47,39,27,45,-25,-93,-32,-84,27,40,2,3,-27,14,21,-19,2,-51,127,8,4,40,21,-13,56,64,-20,1, 
  /* [8][0][][] */ -11,-86,47,-51,50,-59,63,-37,-19,-108,28,15,-34,3,15,30,5,8,-37,94,-1,29,-15,31,70,-7,-55,-35,-127,-25,-54,-105,-2,-67,-1,86,-3,27,105,19,15,-8,63,110,-10,-67,-35,78, 
  /* [9][0][][] */ 12,-40,21,-78,41,92,-45,56,7,-45,-33,-26,11,-41,120,-25,-6,-121,41,60,-71,43,57,-47,-33,-89,-24,90,60,81,-37,-36,-53,34,-7,127,-37,-41,-64,-39,-34,3,33,108,61,87,-72,20, 
  /* [10][0][][] */ -14,20,-26,-6,15,31,-69,-38,44,41,64,-6,-31,-13,46,-51,-58,127,-4,48,3,-12,16,30,-44,41,4,92,37,9,-32,-9,69,0,-4,22,-10,-45,-35,17,-80,-4,23,-18,17,47,27,31, 
  /* [11][0][][] */ -30,40,-21,38,31,52,7,11,12,25,-127,-65,73,16,-5,-46,1,23,-39,-48,-12,-9,100,7,43,11,-25,30,-6,28,-11,53,27,-8,-49,-6,41,79,100,19,35,-27,64,-4,-56,-19,78,-2, 
  /* [12][0][][] */ -63,-6,33,20,-65,-60,3,-3,-34,-30,-127,25,72,-98,17,36,49,102,82,-118,-34,43,-45,-82,4,-13,34,-35,5,20,-21,76,62,80,32,-27,-52,-31,31,-1,-31,17,59,-2,42,-16,-30,-32, 
  /* [13][0][][] */ -55,-106,-51,-108,10,33,48,8,-123,11,127,-73,46,49,123,-2,107,29,-14,-92,83,-82,126,1,-85,-8,-25,16,-37,-98,-101,4,46,-22,-67,63,27,-50,78,-88,-13,53,62,41,56,-25,115,-55, 
  /* [14][0][][] */ 67,22,-50,5,-39,11,-79,-25,-28,55,51,48,-14,-58,11,-46,53,-107,24,8,84,-54,26,-6,-8,127,-84,6,-51,-30,-93,4,120,48,84,-17,-78,12,-17,63,-12,-41,108,-20,-59,-47,-57,56, 
  /* [15][0][][] */ -62,22,37,18,91,7,-1,38,15,70,-14,49,53,-16,-30,-21,10,34,-5,-40,27,-39,-45,-52,45,-68,-38,68,-27,1,15,6,-50,0,127,-9,-90,11,48,-14,-46,-18,20,-1,-30,-26,-20,6, 
};
const TfArray<4, int> tensor_dimension24 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant24_scale = { 16, { 0.0074815042316913605, 0.0066386205144226551, 0.0056246942840516567, 0.0064500672742724419, 0.0034498826134949923, 0.0064345230348408222, 0.0047814664430916309, 0.0054156803525984287, 0.00400514155626297, 0.0036841826513409615, 0.0064173340797424316, 0.0076390570029616356, 0.0047724498435854912, 0.0032150470651686192, 0.0059805121272802353, 0.0062338910065591335, } };
const TfArray<16, int> quant24_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int32_t tensor_data25[16] = { -4029, 12406, -20615, 2071, 12330, -15927, -39766, -8766, -4959, 9012, -15183, -12334, 5327, -9245, -4167, -824, };
const TfArray<1, int> tensor_dimension25 = { 1, { 16 } };
const TfArray<16, float> quant25_scale = { 16, { 0.00017603539163246751, 0.00015620283375028521, 0.00013234575453680009, 0.00015176628949120641, 8.1173711805604398e-05, 0.00015140054165385664, 0.0001125050985137932, 0.000127427774714306, 9.4238625024445355e-05, 8.6686653958167881e-05, 0.00015099610027391464, 0.00017974252114072442, 0.00011229293886572123, 7.564816769445315e-05, 0.00014071793702896684, 0.00014667979849036783, } };
const TfArray<16, int> quant25_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int8_t tensor_data26[96*1*1*16] = { 
  /* [0][0][][] */ 59,7,-2,62,-127,-35,99,45,48,88,-28,39,22,3,20,75, 
  /* [1][0][][] */ -43,45,-99,-3,127,122,-6,-5,-35,21,-49,30,-68,100,-70,-51, 
  /* [2][0][][] */ -38,64,80,-2,69,84,3,40,37,0,39,-13,54,-127,-6,10, 
  /* [3][0][][] */ 127,-21,22,13,23,31,-13,7,36,34,-52,-19,-47,67,-31,61, 
  /* [4][0][][] */ -97,-20,3,43,-104,-18,-117,-55,-13,67,-27,-60,-30,35,-42,127, 
  /* [5][0][][] */ -113,7,36,10,127,13,9,26,-42,23,-30,12,-69,65,-100,-48, 
  /* [6][0][][] */ -127,43,-43,35,-21,-73,82,5,-3,-29,-48,41,8,6,-56,7, 
  /* [7][0][][] */ 27,127,67,-84,67,51,113,-22,44,20,2,38,103,9,-17,-11, 
  /* [8][0][][] */ -15,-14,-66,55,-41,97,-23,-71,21,-47,79,26,127,45,-95,9, 
  /* [9][0][][] */ -31,-127,-40,72,-58,-81,-15,67,37,57,19,86,-104,25,9,-26, 
  /* [10][0][][] */ -27,-65,-79,109,-127,95,43,-71,-5,-88,72,-52,33,85,-80,75, 
  /* [11][0][][] */ -46,-85,-22,13,-9,84,47,-8,2,19,41,-105,20,95,-127,111, 
  /* [12][0][][] */ -4,-109,-91,85,-117,-127,44,55,109,53,-47,118,5,-91,-37,-19, 
  /* [13][0][][] */ -72,-13,-39,-6,-17,7,33,20,-17,127,-4,-31,32,27,6,-9, 
  /* [14][0][][] */ -84,-12,-40,-26,-22,86,-24,-93,127,-60,68,14,68,-64,-67,-86, 
  /* [15][0][][] */ -7,-127,103,-64,-64,-54,-2,62,16,-52,-97,-53,74,-41,-37,-55, 
  /* [16][0][][] */ -15,-38,27,-46,23,29,-22,-22,65,-127,36,1,-14,-4,-68,-89, 
  /* [17][0][][] */ 2,-1,50,-77,-2,-10,-31,8,86,-71,28,89,105,-74,-4,-127, 
  /* [18][0][][] */ 79,-22,-26,-119,15,-27,96,-22,41,58,-21,49,-3,57,1,-127, 
  /* [19][0][][] */ -41,-35,-42,-68,-127,38,-17,8,32,-50,37,-120,-22,-24,-12,3, 
  /* [20][0][][] */ 16,95,84,-91,80,-4,-50,76,-127,-124,38,-106,-40,115,-25,-30, 
  /* [21][0][][] */ 9,-106,-127,-5,81,30,90,109,-89,-107,-12,14,102,-106,-42,36, 
  /* [22][0][][] */ 79,-30,97,-19,15,18,86,33,37,118,15,17,10,-10,127,-18, 
  /* [23][0][][] */ -113,-57,0,75,74,23,7,-12,-20,26,1,-71,-12,81,80,127, 
  /* [24][0][][] */ 27,-21,48,31,27,-90,21,-60,21,126,-127,78,-16,-75,75,-82, 
  /* [25][0][][] */ 114,-59,103,127,30,4,-8,47,-123,61,59,-57,-13,32,74,-8, 
  /* [26][0][][] */ -16,23,17,44,-47,107,-18,31,-55,-27,-82,35,5,18,40,-127, 
  /* [27][0][][] */ 33,-3,-14,-45,-46,10,-97,9,-108,-22,-67,-49,-91,39,-13,127, 
  /* [28][0][][] */ -63,17,29,2,20,-20,-127,-3,-2,-30,-1,-17,7,-47,-75,-33, 
  /* [29][0][][] */ -40,-101,-37,76,-29,13,127,2,52,49,-104,61,16,-21,-62,82, 
  /* [30][0][][] */ 27,-42,-62,1,-127,3,34,-33,-14,9,5,-27,-26,56,-5,74, 
  /* [31][0][][] */ -127,-20,17,81,-30,9,-35,1,-38,-57,0,-22,-6,-48,-23,95, 
  /* [32][0][][] */ -127,-84,-112,5,-115,-76,-1,-22,122,48,-62,-68,41,54,23,-19, 
  /* [33][0][][] */ -8,21,-95,62,-117,-91,54,-7,-127,26,-46,-66,-29,108,74,72, 
  /* [34][0][][] */ 45,45,7,34,-61,-53,33,9,25,-127,-29,42,-12,-12,46,78, 
  /* [35][0][][] */ 39,1,-65,-13,-127,6,99,-18,24,42,-8,-29,25,74,16,56, 
  /* [36][0][][] */ 15,-2,-49,62,127,-24,43,72,-68,13,-80,-84,21,-20,11,7, 
  /* [37][0][][] */ -96,45,8,-76,44,-77,-24,-40,3,-19,-32,51,68,-73,16,-127, 
  /* [38][0][][] */ 54,86,42,-44,-72,-63,-127,-49,-25,-61,35,72,-50,-109,72,1, 
  /* [39][0][][] */ 23,-63,11,102,-9,90,90,-52,-21,22,30,-9,5,119,51,127, 
  /* [40][0][][] */ 96,50,89,108,-78,-77,-1,32,-105,66,-9,-26,-47,-16,127,12, 
  /* [41][0][][] */ -16,-7,9,51,-98,104,-2,48,-49,27,-101,16,15,39,46,-127, 
  /* [42][0][][] */ 13,-114,23,-18,127,33,84,28,-29,-120,-86,-20,-13,-5,-16,44, 
  /* [43][0][][] */ -51,-83,-57,26,125,28,-6,100,-98,-78,-119,-92,127,14,-88,75, 
  /* [44][0][][] */ -54,-78,-90,-116,20,82,52,7,-38,-127,-68,72,-63,52,31,110, 
  /* [45][0][][] */ -14,-57,-100,10,-127,60,-32,-46,53,-56,36,-43,-8,38,-30,63, 
  /* [46][0][][] */ 39,-85,-9,4,78,-83,-30,97,5,-32,40,63,-51,-53,66,-127, 
  /* [47][0][][] */ -77,-18,7,64,-1,13,32,10,3,127,51,82,-31,79,12,81, 
  /* [48][0][][] */ 41,-15,-84,-90,45,-67,6,57,40,-75,-7,18,-65,1,-40,-127, 
  /* [49][0][][] */ 72,27,12,42,-25,-37,55,65,-38,127,-44,43,-30,-32,107,97, 
  /* [50][0][][] */ 4,0,2,5,-127,-23,-10,-39,47,10,25,46,-22,-61,6,3, 
  /* [51][0][][] */ 9,1,-14,-127,-36,103,57,-58,2,13,46,-55,66,93,-34,28, 
  /* [52][0][][] */ 24,-12,-7,-101,71,-109,-5,-37,46,-3,127,-55,36,0,-42,98, 
  /* [53][0][][] */ -56,-49,33,-27,-47,-127,16,-98,-9,97,-82,63,-50,-4,17,-76, 
  /* [54][0][][] */ 102,65,40,-9,-127,-61,-94,-94,-18,27,36,88,-68,-65,88,-5, 
  /* [55][0][][] */ 5,26,-34,73,-40,30,51,-24,-7,127,27,49,-8,2,-7,50, 
  /* [56][0][][] */ 65,-127,-84,91,-80,22,4,79,124,10,47,57,-16,-47,49,87, 
  /* [57][0][][] */ 54,31,95,-125,79,-4,-10,14,125,-60,11,123,62,-55,127,-79, 
  /* [58][0][][] */ 69,-54,9,-69,14,7,1,127,50,61,-1,59,35,25,80,5, 
  /* [59][0][][] */ -31,32,10,-41,-11,-96,-20,14,0,18,-100,-88,-127,-67,78,-12, 
  /* [60][0][][] */ 49,-27,31,43,-1,-28,13,-62,17,127,-13,70,-9,-28,-13,-37, 
  /* [61][0][][] */ 67,56,-10,-27,-94,-127,-7,-54,-60,-31,-25,12,-68,-59,109,115, 
  /* [62][0][][] */ -13,86,-43,25,-48,127,-51,11,-44,3,-47,44,-30,29,65,-79, 
  /* [63][0][][] */ 19,-1,-66,-127,-12,-37,72,-10,-8,-86,-21,24,-43,66,29,-23, 
  /* [64][0][][] */ -34,28,20,-9,49,-72,30,54,-127,-8,-74,-34,-22,85,61,62, 
  /* [65][0][][] */ -55,-9,-30,2,81,40,-54,-76,-127,-30,13,-24,-121,87,-41,26, 
  /* [66][0][][] */ -24,67,-9,30,-45,127,-15,24,-70,25,-27,40,-37,56,46,-80, 
  /* [67][0][][] */ 27,-37,-22,-44,4,-73,68,-81,6,17,-2,99,-50,-38,-17,-127, 
  /* [68][0][][] */ 18,-127,-27,77,2,11,26,82,33,28,48,3,-55,24,-26,-13, 
  /* [69][0][][] */ 11,69,85,-97,55,4,-32,110,41,91,58,83,90,-88,24,-127, 
  /* [70][0][][] */ 34,25,47,-43,107,7,-106,-37,-127,-86,0,45,-37,78,-112,-4, 
  /* [71][0][][] */ -37,-94,40,-32,84,-18,40,51,-94,78,-127,-60,18,107,-38,44, 
  /* [72][0][][] */ 10,20,59,5,-74,-38,-125,-71,10,82,-25,54,17,109,-127,-18, 
  /* [73][0][][] */ -2,-36,-20,-40,39,-126,33,-52,51,101,110,-9,26,-13,-73,127, 
  /* [74][0][][] */ 3,10,-46,75,-79,-3,98,33,69,61,30,120,127,28,-63,15, 
  /* [75][0][][] */ -26,50,-23,41,-51,127,-14,18,-32,33,-45,49,-21,62,27,-81, 
  /* [76][0][][] */ -60,93,-63,87,-110,-21,-7,10,40,54,-50,-39,63,-50,-127,45, 
  /* [77][0][][] */ 102,127,-113,112,56,81,85,50,31,2,105,-44,80,58,51,32, 
  /* [78][0][][] */ 13,-35,3,-57,74,-122,30,-54,55,47,127,-28,4,-19,-45,119, 
  /* [79][0][][] */ -43,60,1,16,-5,-37,-32,0,-127,-8,54,9,106,48,-81,-45, 
  /* [80][0][][] */ -66,31,91,-16,63,59,21,-127,-75,59,-60,-12,8,-90,13,47, 
  /* [81][0][][] */ 86,85,-23,3,28,-35,71,107,-108,126,-59,-32,-43,28,118,127, 
  /* [82][0][][] */ 46,88,-26,-72,-4,-30,105,-81,15,13,-64,85,127,-15,47,-52, 
  /* [83][0][][] */ 18,-26,28,23,6,25,-10,-99,58,-33,83,19,44,-52,-51,-127, 
  /* [84][0][][] */ -127,-112,-54,-18,-21,95,67,16,92,57,111,116,47,69,-76,5, 
  /* [85][0][][] */ 108,-14,89,-71,56,-8,-29,80,18,92,-49,32,-33,66,127,32, 
  /* [86][0][][] */ -79,69,-37,10,27,84,15,20,85,34,127,-23,-30,62,-5,-14, 
  /* [87][0][][] */ 13,-56,28,-44,48,-127,32,-38,47,-8,62,-32,38,-38,-40,70, 
  /* [88][0][][] */ -92,77,23,-2,98,-27,44,22,-72,-84,113,-64,54,127,79,-109, 
  /* [89][0][][] */ -29,34,-12,25,-26,127,-17,29,-38,12,-35,16,-13,56,23,-82, 
  /* [90][0][][] */ 55,-76,26,13,127,8,53,19,2,-84,-113,-12,-1,-20,-40,26, 
  /* [91][0][][] */ -15,92,-32,-6,-6,-102,-108,48,-89,25,-93,-119,-127,-77,0,31, 
  /* [92][0][][] */ 85,53,82,33,-127,-90,12,8,-16,39,-30,-21,-18,-67,32,-8, 
  /* [93][0][][] */ -24,-127,-107,68,-66,-76,-37,124,107,80,14,48,-89,73,-11,-32, 
  /* [94][0][][] */ 115,-8,119,-7,19,-41,5,50,14,84,1,64,9,8,127,-9, 
  /* [95][0][][] */ -56,-30,-19,-41,127,-22,61,77,-25,-11,-121,-57,32,32,-55,37, 
};
const TfArray<4, int> tensor_dimension26 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant26_scale = { 96, { 0.0050767622888088226, 0.0019459910690784454, 0.0046505327336490154, 0.0053817401640117168, 0.0023730343673378229, 0.0011430713348090649, 0.0038327320944517851, 0.0020930413156747818, 0.0020113985519856215, 0.002736963564530015, 0.00099134643096476793, 0.0021013696677982807, 0.0032061520032584667, 0.0058918124996125698, 0.0030501426663249731, 0.0023040426895022392, 0.0041682124137878418, 0.0021096724085509777, 0.0027993093244731426, 0.0011434964835643768, 0.0036962828598916531, 0.0015277633210644126, 0.0025767800398170948, 0.0031880571041256189, 0.00102925521787256, 0.0032513018231838942, 0.0040352707728743553, 0.0033326512202620506, 0.0022525431122630835, 0.0046063726767897606, 0.0029110945761203766, 0.0027522025629878044, 0.0044414065778255463, 0.0012279725633561611, 0.0032054758630692959, 0.0026662291493266821, 0.0038400008343160152, 0.0027342315297573805, 0.0030109949875622988, 0.0031705682631582022, 0.0011628367938101292, 0.0040386565960943699, 0.0025348304770886898, 0.0024228624533861876, 0.0019844300113618374, 0.0012742439284920692, 0.0021402416750788689, 0.0019447176018729806, 0.004767389502376318, 0.0040480084717273712, 0.0053433049470186234, 0.0020238438155502081, 0.0033625205978751183, 0.0022799922153353691, 0.0018706417176872492, 0.0044858320616185665, 0.0024946860503405333, 0.00081407360266894102, 0.0039660143665969372, 0.003629292594268918, 0.0026034917682409286, 0.0014427861897274852, 0.003329654224216938, 0.0041742413304746151, 0.0016082883812487125, 0.0014325105585157871, 0.004174758680164814, 0.0027446772437542677, 0.0021500582806766033, 0.0021811311598867178, 0.0035526736173778772, 0.0028996139299124479, 0.0023716799914836884, 0.0029257745482027531, 0.0041377092711627483, 0.0038023181259632111, 0.0036756729241460562, 0.0015108882216736674, 0.0032240475993603468, 0.0021821011323481798, 0.0022174648474901915, 0.0032327889930456877, 0.00158386689145118, 0.0013882206985726953, 0.0025108936242759228, 0.0018729824805632234, 0.0020369391422718763, 0.0043179858475923538, 0.0036162673495709896, 0.0045354943722486496, 0.0027301637455821037, 0.001299113966524601, 0.0027384213171899319, 0.0018132299883291125, 0.0020918033551424742, 0.002598470076918602, } };
const TfArray<96, int> quant26_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int32_t tensor_data27[96] = { 1030, 7278, 467, 1607, 5192, 15484, 374, 3351, 8344, -1324, 17294, 4658, 2150, 730, 3845, 875, 2726, 5989, -203, 15762, 1092, 10276, -1956, 1551, -15116, 1093, 2210, 2073, 7987, 1054, 3609, 3802, 1677, 13256, 2986, 4678, 2973, 2959, 2841, 2294, 15509, 1470, 3030, 1921, 3962, 13741, 6187, 7545, 1306, -1253, 1380, 7038, 3179, -3915, 7336, 501, 2554, 21959, 994, 1612, 3206, 12086, 3785, -96, 11131, 11853, 1801, 4300, 7364, 4473, 2965, 1357, -4886, 4104, 1886, 3138, 185, 10074, 3613, 7644, 3943, 1007, 7331, 13165, -131, 7716, 6283, 1904, -733, 2295, 1360, 13537, 3745, 5318, 4783, 4921, };
const TfArray<1, int> tensor_dimension27 = { 1, { 96 } };
const TfArray<96, float> quant27_scale = { 96, { 0.00025760327116586268, 9.8742784757632762e-05, 0.00023597567633260041, 0.00027307833079248667, 0.0001204116633743979, 5.8001318393507972e-05, 0.0001944791292771697, 0.00010620435205055401, 0.00010206166916759685, 0.0001388780219713226, 5.0302547606406733e-05, 0.00010662694694474339, 0.00016268542094621807, 0.00029896025080233812, 0.00015476925182156265, 0.00011691090912790969, 0.00021150194515939802, 0.00010704824671847746, 0.00014204155013430864, 5.8022891607834026e-05, 0.00018755545897874981, 7.7521217463072389e-05, 0.00013075004972051829, 0.00016176725330296904, 5.222609979682602e-05, 0.00016497640172019601, 0.00020475627388805151, 0.00016910419799387455, 0.00011429773439886048, 0.00023373491421807557, 0.00014771372661925852, 0.00013965128164272755, 0.00022536425967700779, 6.2309343775268644e-05, 0.00016265110753010958, 0.00013528885028790683, 0.00019484794756863266, 0.00013873940042685717, 0.0001527828280813992, 0.00016087984840851277, 5.9004250942962244e-05, 0.00020492807379923761, 0.00012862146832048893, 0.00012294002226553857, 0.00010069323616335168, 6.4657229813747108e-05, 0.00010859937901841477, 9.8678166978061199e-05, 0.00024190517433453351, 0.00020540259720291942, 0.00027112808311358094, 0.00010269315680488944, 0.00017061982362065464, 0.00011569054913707078, 9.4919436378404498e-05, 0.00022761848231311888, 0.00012658446212299168, 4.1307430365122855e-05, 0.00020124208822380751, 0.00018415626254864037, 0.00013210544420871884, 7.3209339461755008e-05, 0.00016895213047973812, 0.00021180785552132875, 8.1607191532384604e-05, 7.2687937063165009e-05, 0.00021183410717640072, 0.00013926942483521998, 0.00010909749107668176, 0.00011067417653976008, 0.00018026850011665374, 0.00014713116979692131, 0.00012034294195473194, 0.00014845861005596817, 0.00020995415979996324, 0.00019293586956337094, 0.00018650968559086323, 7.6664953667204827e-05, 0.00016359347500838339, 0.00011072339839302003, 0.00011251780961174518, 0.00016403701738454401, 8.0368008639197797e-05, 7.0440597482956946e-05, 0.00012740686361212283, 9.5038209110498428e-05, 0.00010335764090996236, 0.00021910169743932784, 0.0001834953436627984, 0.00023013843747321516, 0.00013853299606125802, 6.5919179178308696e-05, 0.00013895198935642838, 9.2006266640964895e-05, 0.00010614153870847076, 0.00013185064017307013, } };
const TfArray<96, int> quant27_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int8_t tensor_data28[1*3*3*96] = { 
  /* [0][0][][] */ -92,-2,13,-21,98,-21,45,-19,-10,-12,-13,-37,-21,-1,-11,-23,-14,17,6,-19,4,18,44,34,5,-11,-32,-3,22,8,24,2,-22,3,-9,-21,1,-89,-37,26,4,6,36,-35,-44,34,-44,-30,-50,13,-9,40,-65,11,44,-9,-11,-17,11,-25,-4,-24,-24,-63,-37,-14,-40,-49,-21,27,35,-2,20,9,-6,6,-26,-5,127,-10,-127,20,-104,-21,-24,-14,8,21,-33,-21,17,-42,-12,12,-14,9, -49,37,63,-62,-40,-6,127,-57,-5,-14,-38,-7,-63,-10,-100,62,-2,74,97,-36,-15,127,115,114,30,-6,51,55,127,44,127,-34,-127,-20,-73,-28,-16,-127,127,-72,-25,-127,-10,-50,42,-38,-29,-15,43,-2,25,127,-102,36,-72,3,-80,-13,0,21,-8,-127,-127,-77,-58,5,0,-96,-22,20,-38,123,-127,-2,9,-27,-127,-101,-4,-95,-118,4,25,-64,88,79,-66,48,-127,-1,42,-28,4,117,-36,-80, -56,-2,11,-3,72,-20,47,-36,-22,10,-12,-8,4,-10,-17,-38,-12,5,-7,-31,-3,1,38,21,2,-18,-6,-20,4,17,13,6,-14,1,-12,67,1,-71,-30,26,-1,10,31,-21,-24,-35,-49,-25,-32,-7,-13,23,-10,-10,13,-9,55,-22,13,-29,-10,-14,-46,-34,-40,-30,127,-48,-17,25,58,8,11,13,-5,24,-40,24,-39,-14,-120,5,-118,-19,-3,-22,4,-20,-28,-33,13,32,4,15,-18,17, 
  /* [0][1][][] */ -110,1,43,-62,47,111,-36,-26,-4,-7,-24,-42,-127,35,19,72,-8,38,112,18,38,-27,122,-36,33,19,55,16,-9,6,-6,-22,-105,-12,77,-15,-13,-106,-73,-127,-17,-14,90,-44,-75,127,-99,-76,51,68,11,-52,-127,61,67,-20,8,-36,37,-24,13,-9,86,-109,-46,18,-25,-49,-14,-3,-117,10,64,127,3,-70,-99,-85,-67,-39,-46,2,-30,-46,32,31,-126,53,-34,127,90,-106,127,5,-42,-3, 112,127,127,127,-127,-127,83,-72,127,127,-70,-55,-75,127,-21,127,127,-127,127,127,127,-94,96,-127,-127,-127,127,127,-125,127,-33,127,-48,127,127,-88,127,99,-1,-31,127,-1,-127,-127,127,-28,127,127,127,-127,127,-111,111,127,-127,127,-127,127,-127,127,-99,110,94,-127,127,127,-19,127,-109,-127,-26,-127,19,113,127,68,19,-127,86,-127,124,127,127,127,127,72,-127,127,-88,53,-5,-28,-95,-9,-127,-30, -127,-35,45,-75,18,68,-48,-6,-38,-9,0,127,-112,19,18,63,-19,43,93,3,18,-32,86,-35,33,12,53,1,-11,-3,9,-19,-70,-28,94,127,-6,-107,-73,-101,-24,-23,27,-47,-67,-75,-97,-85,38,65,-4,-29,119,4,83,-38,85,-32,51,-57,3,-29,-127,-49,-75,-9,-56,-59,-30,6,-127,-2,29,-82,4,127,-70,-51,-59,1,-90,-14,-77,-83,4,31,-101,48,-19,-78,127,127,-46,-23,-50,-7, 
  /* [0][2][][] */ -4,-29,-21,-38,45,4,-18,9,-10,9,32,-38,27,8,-2,-41,0,-15,-43,-26,-1,-19,27,-32,-6,-19,-18,12,7,-8,-33,-1,-6,2,0,-20,-4,-39,-20,-41,-16,4,35,4,22,5,-50,14,-63,6,-14,-28,-20,-23,37,-10,-2,-24,9,-24,1,10,11,-12,-34,-13,110,34,25,27,-3,-1,-4,-7,-20,-34,14,30,-35,-14,-63,5,-82,-2,-7,0,39,-11,24,17,1,-38,-22,-18,-24,6, -44,-53,32,-119,-22,10,27,127,-65,61,127,-28,-84,36,127,75,7,-37,125,-56,-14,-44,127,0,19,-21,47,28,-13,7,-105,-55,-34,-26,-68,-14,-88,-93,51,-117,-17,-105,-32,113,33,-19,-36,16,3,-12,-7,-18,58,20,-50,-32,-43,-56,48,-61,127,18,103,-31,-78,-40,-27,-38,127,26,-33,14,15,-29,7,-24,10,-75,-9,42,-92,-27,-81,-81,28,-127,-9,10,-49,4,63,-24,9,-127,-61,127, -7,14,-14,-31,38,-7,-17,24,-24,5,17,32,52,12,-10,-32,3,3,-20,-31,-4,-10,4,-22,-5,-12,-15,-7,-3,-8,-45,-5,23,7,-4,-10,-16,-58,-13,-30,-22,2,1,-6,16,-13,-59,30,-54,-8,-14,-21,2,-41,12,-8,51,-18,17,-36,8,11,-19,-12,-25,-16,-22,28,27,13,-14,-7,-52,-37,-18,-7,-5,-5,81,-9,-60,-6,-62,-9,-13,9,44,-8,10,2,-3,16,-5,-34,-17,-9, 
};
const TfArray<4, int> tensor_dimension28 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant28_scale = { 96, { 0.004613588098436594, 0.011806605383753777, 0.0069427117705345154, 0.0071500372141599655, 0.011308941058814526, 0.020331941545009613, 0.0053236265666782856, 0.010190868750214577, 0.012880080379545689, 0.01040597353130579, 0.011825764551758766, 0.0083205578848719597, 0.0051879170350730419, 0.006235701497644186, 0.0085405297577381134, 0.0087153958156704903, 0.011943565681576729, 0.014849184080958366, 0.0049478602595627308, 0.01550538744777441, 0.0093743382021784782, 0.011047148145735264, 0.004744682926684618, 0.0083792423829436302, 0.14019058644771576, 0.0066685187630355358, 0.010832116007804871, 0.0066270581446588039, 0.012455378659069538, 0.0079487515613436699, 0.0082262037321925163, 0.013926228508353233, 0.0035537006333470345, 0.020197099074721336, 0.0061725242994725704, 0.0091916834935545921, 0.012554116547107697, 0.0039598057046532631, 0.0093505475670099258, 0.003692766884341836, 0.027180038392543793, 0.010600405745208263, 0.012405268847942352, 0.0055954670533537865, 0.0082395859062671661, 0.012729370966553688, 0.0079964697360992432, 0.013212133198976517, 0.0088842567056417465, 0.016689717769622803, 0.012528215534985065, 0.0087432460859417915, 0.0066939233802258968, 0.020263783633708954, 0.012964330613613129, 0.012871299870312214, 0.0071639413945376873, 0.017478166148066521, 0.016120908781886101, 0.010838924907147884, 0.015111506916582584, 0.011851955205202103, 0.0069666705094277859, 0.0043236808851361275, 0.010113957338035107, 0.020588560029864311, 0.0047100610099732876, 0.0064537222497165203, 0.0084834545850753784, 0.014354197308421135, 0.0071435286663472652, 0.012160005979239941, 0.020651506260037422, 0.007559522520750761, 0.0079410737380385399, 0.0086452877148985863, 0.0036523321177810431, 0.004969398956745863, 0.0056779882870614529, 0.0068784118629992008, 0.0041827410459518433, 0.0099360132589936256, 0.0057172547094523907, 0.014006432145833969, 0.0052636978216469288, 0.013308549299836159, 0.0046465178020298481, 0.011075279675424099, 0.0050872801803052425, 0.0092619350180029869, 0.0048846853896975517, 0.0092891780659556389, 0.012992376461625099, 0.0069620488211512566, 0.0048322300426661968, 0.013614471070468426, } };
const TfArray<96, int> quant28_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 3 };
const ALIGN(16) int32_t tensor_data29[96] = { 11720, -1479, -6678, 8219, -2266, 457, 681, 658, 3495, -4040, -376, -703, 10449, -3166, -1112, -6253, -1276, 209, -12660, 1081, -3334, 2746, -7905, 2325, 11, 8440, -9546, -4836, -251, -3711, 1586, 345, 14627, -347, -2879, -1258, 330, 12995, 2866, 13762, -1299, 5557, -390, 7777, 1049, 1298, 8433, 142, -2642, -13, -3147, 1262, 1096, -2137, -580, 1305, 930, 3853, -131, 3474, -395, 1969, 790, 11798, 10984, -1907, 15547, 9361, 200, -575, 6521, -1036, 191, 120, -2027, -85, 15791, 12778, 11408, 10578, 13506, -1359, 9615, 8500, -711, -2826, 11652, -7318, 10075, -181, -8725, 1973, 530, 2178, 16154, -1999, };
const TfArray<1, int> tensor_dimension29 = { 1, { 96 } };
const TfArray<96, float> quant29_scale = { 96, { 0.00010315726103726774, 0.00026398911722935736, 0.0001552351750433445, 0.0001598708622623235, 0.00025286164600402117, 0.00045461091212928295, 0.00011903332779183984, 0.00022786215413361788, 0.00028799142455682158, 0.00023267178039532155, 0.00026441752561368048, 0.00018604304932523519, 0.00011599894060054794, 0.00013942681835033, 0.00019096149480901659, 0.00019487140525598079, 0.0002670514804776758, 0.00033201949554495513, 0.0001106314011849463, 0.00034669184242375195, 0.00020960498659405857, 0.00024700807989574969, 0.00010608846787363291, 0.00018735519552137703, 0.0031345835886895657, 0.00014910436584614217, 0.0002422000834485516, 0.00014817733608651906, 0.00027849533944390714, 0.00017772967112250626, 0.00018393334175925702, 0.00031138272606767714, 7.9458768595941365e-05, 0.00045159590081311762, 0.00013801420573145151, 0.0002055209333775565, 0.00028070306871086359, 8.8539054559078068e-05, 0.00020907304133288562, 8.2568214565981179e-05, 0.00060773052973672748, 0.00023701917962171137, 0.00027737490017898381, 0.00012511153181549162, 0.0001842325582401827, 0.00028462166665121913, 0.00017879661754705012, 0.00029541595722548664, 0.00019864704518113285, 0.00037317280657589436, 0.00028012393158860505, 0.00019549412536434829, 0.00014967239985708147, 0.00045308691915124655, 0.00028987522819079459, 0.00028779511922039092, 0.00016018174937926233, 0.00039080207352526486, 0.00036045454908162355, 0.00024235232558567077, 0.00033788487780839205, 0.00026500312378630042, 0.00015577087469864637, 9.6675103122834116e-05, 0.0002261424669995904, 0.00046034876140765846, 0.00010531434236327186, 0.00014430163719225675, 0.00018968532094731927, 0.00032095186179503798, 0.0001597253285581246, 0.0002718909818213433, 0.00046175619354471564, 0.00016902672359719872, 0.00017755798762664199, 0.00019330382929183543, 8.1664111348800361e-05, 0.0001111129968194291, 0.00012695665645878762, 0.00015379746037069708, 9.3523762188851833e-05, 0.00022216372599359602, 0.00012783463171217591, 0.00031317604589276016, 0.00011769335833378136, 0.00029757176525890827, 0.00010389355156803504, 0.00024763710098341107, 0.00011374875612091273, 0.00020709171076305211, 0.00010921884677372873, 0.00020770085393451154, 0.00029050229932181537, 0.00015566754154860973, 0.00010804597695823759, 0.00030441200942732394, } };
const TfArray<96, int> quant29_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const ALIGN(16) int8_t tensor_data30[16*1*1*96] = { 
  /* [0][0][][] */ 6,31,12,15,-10,-77,-8,1,-22,-75,9,-2,57,-58,63,29,-81,-42,34,9,80,15,-76,15,-6,65,127,68,21,76,83,-39,10,5,11,-21,27,24,-8,-14,124,22,21,-13,-7,1,24,-39,32,-22,105,-5,-74,-1,50,33,-6,-42,7,33,-4,31,-71,-14,19,6,55,25,4,-31,24,29,17,46,7,37,58,-27,42,19,-26,50,26,32,-53,1,-11,68,14,2,-95,-13,34,6,111,65, 
  /* [1][0][][] */ 31,28,-56,-8,18,-43,104,-86,-76,-41,-78,-41,2,-42,-11,-61,-35,-28,-41,-28,-13,-85,113,-29,-8,23,12,69,-58,1,-55,28,-42,25,7,4,-30,65,-56,83,28,16,-2,-52,64,-61,-3,26,-91,-10,53,-98,-55,40,70,55,39,27,-69,11,-51,4,-19,-24,27,16,107,16,-77,-127,-2,-3,22,71,-27,38,-68,-42,103,-40,48,-16,67,-64,-29,-71,-26,20,-26,-45,26,-7,68,-71,-29,67, 
  /* [2][0][][] */ 0,-16,14,-13,43,40,-47,15,-49,44,23,-23,24,-7,32,23,30,-32,-127,-7,-25,-50,-18,29,1,-10,-42,21,-31,-15,-2,62,-13,-27,1,14,-43,22,-26,-26,68,11,3,40,13,57,9,7,-81,19,-13,14,-18,49,14,-60,30,13,43,42,-31,-15,-19,51,47,5,-42,-12,10,-14,-13,-30,22,46,27,67,-51,1,-27,-38,28,34,46,-23,-10,-38,-17,-46,-17,-32,-12,83,8,-16,87,-50, 
  /* [3][0][][] */ 20,-37,-23,-115,-20,-33,112,-24,24,120,-71,-20,1,-23,-17,64,58,32,-21,23,-58,13,16,9,-38,74,49,-4,-36,-6,-50,58,0,-16,34,-22,7,-50,-33,61,4,5,-29,23,65,-52,-1,45,49,-14,33,-40,99,43,29,-9,2,-23,-8,-25,-36,32,61,-7,-23,-19,120,-38,-31,-25,-38,29,17,-79,2,-76,21,-36,127,-3,-11,-49,-44,-44,-30,-40,78,80,-42,41,-54,9,15,-82,-24,18, 
  /* [4][0][][] */ -42,83,27,17,-22,10,-31,-33,15,-35,1,-7,10,38,-6,13,-4,-54,-20,-69,29,-39,-70,27,-29,-33,-26,23,-32,127,-36,-16,8,-36,5,-23,72,43,-26,-10,20,16,13,-29,-43,0,69,-14,27,-2,-58,-5,-64,31,46,19,0,55,-28,32,-37,-73,-23,5,62,33,-81,-14,-2,-6,9,-70,-7,67,54,69,-42,24,-75,31,12,67,24,-67,48,-75,-36,-70,-50,-53,-60,2,10,4,41,-33, 
  /* [5][0][][] */ -18,-12,36,-23,-13,-26,-13,13,40,9,-14,-9,-24,-31,22,-17,-6,0,-49,-28,-23,11,-22,12,24,-47,69,-18,2,46,20,76,-9,-80,25,11,-31,-29,-39,-1,-51,-8,-30,10,7,22,-82,30,-21,22,49,-15,23,-71,11,12,-18,-57,9,-32,45,22,24,46,-34,14,111,-25,-6,-26,16,17,0,22,41,6,-2,-9,127,37,-25,-8,-34,23,40,64,8,91,-1,-31,-4,12,11,-12,-33,6, 
  /* [6][0][][] */ 26,-56,71,12,-72,107,-67,-99,-16,-82,-76,48,15,16,-39,87,11,56,16,-31,-97,-37,-89,-74,6,-47,-11,66,-127,51,-46,-33,51,75,-22,-2,5,-47,12,0,-63,27,32,-26,16,39,-110,3,45,12,-89,-126,77,8,-44,-20,24,-32,28,-8,-29,-54,40,9,67,-66,-60,-71,-95,16,-12,-73,-38,-103,7,-107,101,21,-71,53,-34,71,14,-101,60,-35,-18,-5,-59,82,-81,88,44,-39,67,-100, 
  /* [7][0][][] */ -25,-12,-59,57,-61,-7,36,-15,-90,18,79,55,-15,-70,-10,-29,-1,-9,7,8,-57,-29,-32,-34,68,40,-5,79,3,39,25,28,-47,-127,35,99,8,18,-44,2,-4,-15,-3,-80,37,53,62,98,-15,60,-41,0,25,-41,43,-66,-20,34,-74,-17,48,8,20,-36,86,-41,106,-20,-42,-34,82,1,-28,-41,-83,-27,36,-29,88,-28,-2,-14,-79,-24,44,14,-69,33,-14,20,12,50,72,-17,83,-23, 
  /* [8][0][][] */ -21,-53,8,9,-19,-3,26,-9,-7,-3,49,56,9,30,-31,-11,78,-7,10,11,-11,-77,-42,-13,-30,-32,78,6,-16,47,26,-29,-16,5,9,11,-50,-15,25,-42,-6,52,35,-41,12,-8,38,-15,37,6,55,5,3,6,-48,-1,-23,111,-69,3,-8,-59,-61,-7,-89,-25,-32,22,2,7,37,-22,-23,-127,50,-103,6,23,-71,13,-33,-9,0,60,76,-70,-48,49,-48,93,7,-9,-52,-1,3,-68, 
  /* [9][0][][] */ -30,-41,-21,24,-13,21,-1,36,-49,5,58,52,-30,53,7,-47,-12,42,-17,-43,0,34,2,6,-25,28,6,18,18,-7,7,-4,-18,-27,0,45,-23,-6,27,9,-19,-34,14,9,9,37,-2,44,-45,7,-10,25,127,21,-22,-6,11,-23,46,21,-41,-5,82,11,12,9,62,6,33,0,-18,15,-1,-127,-43,-125,-34,-13,38,2,1,22,-4,-45,42,15,-56,-6,3,113,38,31,50,30,-12,36, 
  /* [10][0][][] */ 35,40,13,1,-18,18,-40,-30,62,7,-37,16,27,10,-17,-57,-43,8,18,-6,28,-6,-20,-32,7,-15,-93,46,-29,48,-17,13,16,24,-27,-3,14,6,5,-1,39,-10,64,-47,-31,-5,11,20,13,-11,6,-18,-22,-18,-7,33,-8,6,-7,-18,-15,-37,-5,7,-9,-21,-87,-24,-50,-11,38,-19,-24,34,29,23,47,-27,-90,10,-10,31,6,-7,3,9,-74,-127,-24,28,10,11,41,-31,21,39, 
  /* [11][0][][] */ 35,-44,2,14,-46,40,13,12,74,-22,-28,-44,42,21,-4,-16,-50,73,20,-68,14,42,16,-36,36,18,63,-1,18,-66,-52,20,17,107,-118,2,22,-15,62,10,-56,54,-14,11,-53,2,-16,-17,44,-26,-37,-5,-11,9,-82,97,-21,5,0,-42,30,-5,-10,-72,-19,-57,-127,-79,3,-23,-105,33,52,17,-11,1,37,47,-108,-41,-13,-1,-11,9,-27,-1,56,87,21,-45,3,-11,-37,43,88,48, 
  /* [12][0][][] */ 6,25,-39,-29,7,-28,4,48,60,-38,25,-4,-5,-9,-1,11,15,-43,-25,21,9,46,0,52,-34,-38,-127,-13,81,-22,42,-2,-16,-71,81,-4,31,-16,-8,19,-4,-62,12,35,44,6,27,-5,-62,9,-45,87,75,-22,34,-79,12,22,-34,-20,20,46,79,3,-9,-9,31,19,118,21,33,32,7,-24,-8,-10,-31,-49,44,-66,17,-46,22,-38,6,7,6,-109,-7,42,-38,25,21,65,10,36, 
  /* [13][0][][] */ -22,18,-69,31,9,12,-5,15,21,67,-28,34,-65,-22,62,-48,18,50,56,9,-32,-49,-9,10,36,52,-21,28,13,38,41,-16,-22,62,1,38,17,-31,-53,-44,-5,-13,8,18,55,40,-38,57,-38,40,10,-9,-11,-39,60,42,13,-50,-7,-6,12,15,12,-28,16,87,127,31,25,-1,-39,-20,39,46,-70,45,16,-63,126,-38,-2,-38,30,-4,40,53,-35,-21,-16,-15,9,52,40,11,64,43, 
  /* [14][0][][] */ -22,47,24,19,-65,-47,20,51,-69,-18,76,5,-81,4,69,-29,-40,33,-59,30,-26,13,-100,11,-46,-2,-48,-115,17,4,43,77,-51,28,23,-13,-29,-68,-14,-43,22,-39,44,-19,-11,51,-69,33,-13,-33,90,21,-13,26,-31,31,-51,29,9,50,45,55,-5,41,18,-45,4,-73,58,56,77,39,-47,31,19,10,34,-5,42,14,-76,116,-10,-127,89,-3,-2,10,-107,-11,-14,3,-25,9,35,27, 
  /* [15][0][][] */ 96,-34,25,33,65,12,-18,-10,23,34,-74,-23,81,78,-19,-13,-24,26,-85,47,11,-20,26,22,70,-42,91,27,41,-27,-65,68,65,53,-6,-88,68,67,67,59,93,42,-17,5,-50,-127,30,-47,-36,-33,-24,-2,-11,-56,-22,57,-13,15,-14,-2,14,-50,-41,36,29,40,-68,44,-25,-14,-10,-2,-6,-120,-42,-102,-20,-2,-117,36,84,-32,57,36,-61,-2,-8,-9,39,91,12,-85,-39,-20,30,-21, 
};
const TfArray<4, int> tensor_dimension30 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant30_scale = { 16, { 0.0033221992198377848, 0.0023130676709115505, 0.0025933301076292992, 0.0027160812169313431, 0.003798874095082283, 0.0059260902926325798, 0.002368550281971693, 0.0028437541332095861, 0.0042716162279248238, 0.0044665848836302757, 0.004498086404055357, 0.0029993571806699038, 0.0033064798917621374, 0.0034556169994175434, 0.002647079061716795, 0.0033530225045979023, } };
const TfArray<16, int> quant30_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int32_t tensor_data31[16] = { -27151, -3352, 2702, -15395, 15468, -13069, 23496, -8556, 12100, -7400, 14437, 11951, -6401, -29673, 452, 3093, };
const TfArray<1, int> tensor_dimension31 = { 1, { 16 } };
const TfArray<16, float> quant31_scale = { 16, { 7.816939614713192e-05, 5.4425123380497098e-05, 6.1019534769002348e-05, 6.3907791627570987e-05, 8.9385277533438057e-05, 0.00013943742669653147, 5.5730597523506731e-05, 6.6911859903484583e-05, 0.00010050861601484939, 0.00010509611456654966, 0.00010583733092062175, 7.0573114498984069e-05, 7.779953011777252e-05, 8.1308637163601816e-05, 6.2284212617669255e-05, 7.8894649050198495e-05, } };
const TfArray<16, int> quant31_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int8_t tensor_data32[96*1*1*16] = { 
  /* [0][0][][] */ -44,38,-3,-39,-8,-48,-66,-28,48,-46,43,-52,92,-127,25,-122, 
  /* [1][0][][] */ -122,83,-127,-93,-92,61,-19,56,-9,1,119,-50,48,122,29,82, 
  /* [2][0][][] */ -55,8,-84,12,-35,-40,15,-20,-64,127,61,-12,21,53,-45,114, 
  /* [3][0][][] */ -44,-80,12,-45,-87,4,-70,-127,-8,2,44,-74,-74,-52,-123,-68, 
  /* [4][0][][] */ 75,-11,-8,48,-61,-15,-127,33,17,54,21,60,12,-5,-41,-89, 
  /* [5][0][][] */ -94,72,-73,-45,66,-75,-36,-93,97,-27,14,-58,14,-127,-126,-124, 
  /* [6][0][][] */ -11,-40,-34,21,-98,75,33,-39,-19,-47,127,-27,-2,-3,-100,17, 
  /* [7][0][][] */ -13,105,127,-65,68,70,-34,-34,13,57,-58,-21,58,35,9,63, 
  /* [8][0][][] */ -43,16,37,5,66,15,74,127,-68,-14,-68,-83,48,117,-68,-77, 
  /* [9][0][][] */ 54,50,127,16,-93,-86,-114,-121,52,-3,110,33,-23,-83,40,-28, 
  /* [10][0][][] */ -12,-118,-8,-76,-127,57,39,-6,-44,-63,-5,28,-26,36,-121,29, 
  /* [11][0][][] */ 119,-46,-11,81,-114,-38,60,-12,126,127,-36,45,37,-86,-13,101, 
  /* [12][0][][] */ -23,-83,127,-12,81,-21,21,37,66,-33,87,72,-10,11,-102,21, 
  /* [13][0][][] */ -17,-31,14,23,22,19,127,43,-98,10,19,14,-30,119,85,-64, 
  /* [14][0][][] */ 116,-94,127,-16,106,68,121,71,75,70,65,72,70,-32,31,-71, 
  /* [15][0][][] */ -5,127,7,-22,19,92,-75,60,-47,-24,-39,-24,-50,104,-34,-24, 
  /* [16][0][][] */ -42,80,126,-53,25,95,5,-30,-23,11,-20,37,92,5,87,127, 
  /* [17][0][][] */ 4,92,78,-127,28,-43,-18,-62,-50,79,-28,49,-81,-20,90,-46, 
  /* [18][0][][] */ -77,17,-69,-96,116,78,-65,-84,39,86,124,84,-14,127,-39,-14, 
  /* [19][0][][] */ 35,103,83,68,50,-31,-9,6,-11,127,34,101,53,58,-52,25, 
  /* [20][0][][] */ 95,-10,15,65,-59,-9,-34,49,-32,-54,-127,-42,81,-50,25,-16, 
  /* [21][0][][] */ -75,-65,-12,97,-14,-3,-127,50,4,-11,29,31,-45,26,-69,1, 
  /* [22][0][][] */ -2,17,-50,-45,127,-5,-42,36,54,102,30,68,-14,36,-12,32, 
  /* [23][0][][] */ -49,38,-19,15,4,63,92,88,-13,127,-25,-37,4,31,-58,-30, 
  /* [24][0][][] */ 15,-61,26,7,127,35,70,-33,41,28,46,23,-73,40,-11,-18, 
  /* [25][0][][] */ 122,-69,67,13,0,-22,-43,97,114,-38,-41,5,127,-47,88,62, 
  /* [26][0][][] */ 47,36,127,120,92,-16,-66,-12,8,79,7,126,41,-68,17,-70, 
  /* [27][0][][] */ -40,44,-83,25,-30,120,14,-97,56,-98,114,26,54,-39,127,93, 
  /* [28][0][][] */ -31,36,-75,-127,34,-83,-5,-49,-98,99,-55,8,-23,27,-36,50, 
  /* [29][0][][] */ 109,107,-72,53,55,108,-50,-34,67,59,9,85,-127,23,-29,78, 
  /* [30][0][][] */ -32,76,-121,-54,80,-28,14,20,-60,57,-60,-18,10,68,-13,127, 
  /* [31][0][][] */ 44,-127,102,38,70,-86,-91,15,-12,-6,10,-10,-68,57,59,117, 
  /* [32][0][][] */ -38,38,-1,20,-102,51,11,48,32,-127,6,-93,21,3,33,34, 
  /* [33][0][][] */ -82,-3,56,97,-9,28,-38,30,-34,-51,13,-19,-14,10,7,127, 
  /* [34][0][][] */ -10,3,-85,-90,76,-24,-14,63,7,-16,2,-20,-53,-37,-36,127, 
  /* [35][0][][] */ 62,-12,28,-18,6,8,-64,-24,-10,-127,-45,6,-4,-36,37,-31, 
  /* [36][0][][] */ 6,20,-127,-15,30,122,-14,30,-21,10,53,36,12,18,-80,38, 
  /* [37][0][][] */ 30,17,57,-55,49,-127,31,-26,-68,58,-58,-18,1,11,69,26, 
  /* [38][0][][] */ -45,127,24,-52,32,26,81,-86,16,5,-125,34,-64,-107,-87,13, 
  /* [39][0][][] */ 92,37,-120,-112,-11,-25,26,-62,18,-12,0,-36,76,1,-127,-78, 
  /* [40][0][][] */ -40,21,-77,-85,-56,-6,23,-127,-3,-10,11,-37,41,73,37,65, 
  /* [41][0][][] */ -40,-107,-16,127,-4,-27,-71,-14,1,-57,73,-70,-63,-12,-5,29, 
  /* [42][0][][] */ -26,70,-17,-127,-6,22,22,-28,81,9,-60,18,88,-26,-7,14, 
  /* [43][0][][] */ -6,37,13,15,127,26,26,38,19,61,-8,-81,-112,-43,-18,-22, 
  /* [44][0][][] */ 117,-7,22,17,-27,-24,-5,29,18,-61,37,18,127,1,-55,-46, 
  /* [45][0][][] */ 20,-82,-61,39,-50,-88,-6,49,35,-24,9,27,-88,127,34,-30, 
  /* [46][0][][] */ -12,-73,56,82,-12,-12,-111,55,24,-48,56,-19,26,90,90,127, 
  /* [47][0][][] */ -27,-64,27,71,2,-13,48,13,17,-78,-127,-31,42,-38,-64,12, 
  /* [48][0][][] */ -93,95,3,-39,21,57,9,-127,21,-18,41,-49,65,-110,-53,0, 
  /* [49][0][][] */ -62,17,47,-41,6,1,127,126,-25,-32,-11,21,-60,34,-58,32, 
  /* [50][0][][] */ 52,9,-77,21,34,-127,-48,7,-50,31,-34,0,12,-69,-110,-46, 
  /* [51][0][][] */ -42,45,-46,93,-16,59,-40,-88,-47,-127,10,-55,10,25,-28,119, 
  /* [52][0][][] */ -107,5,31,-12,30,42,38,7,20,-101,-50,-48,-102,-62,-127,-27, 
  /* [53][0][][] */ -45,-104,-53,-127,-24,12,7,78,45,-73,-67,28,-8,27,74,94, 
  /* [54][0][][] */ 8,-63,17,-9,-78,63,64,-38,-16,-88,57,27,-13,-21,-127,49, 
  /* [55][0][][] */ -11,-16,-32,27,64,-24,56,78,-66,-58,-127,-38,64,-29,-22,30, 
  /* [56][0][][] */ 60,-14,-50,-14,-127,5,-116,-11,-8,-16,-16,37,79,-7,45,36, 
  /* [57][0][][] */ -43,-3,23,-32,127,34,59,24,-22,33,5,1,-44,64,-102,-19, 
  /* [58][0][][] */ 35,11,9,-28,45,-26,-54,-60,42,-127,-55,10,-70,-35,-38,51, 
  /* [59][0][][] */ -49,-6,-11,16,-2,48,-103,-36,77,127,-86,6,-16,23,-16,6, 
  /* [60][0][][] */ 6,-62,-8,7,-127,-34,37,12,-2,63,-13,34,-4,-43,25,49, 
  /* [61][0][][] */ 20,23,-72,-2,-44,-29,-127,-74,-19,11,38,109,80,-50,101,63, 
  /* [62][0][][] */ 41,-12,26,-29,-16,27,43,127,-64,93,37,75,23,43,64,106, 
  /* [63][0][][] */ 24,-127,-16,-6,-77,13,37,-24,-15,-20,-3,-10,-41,119,109,41, 
  /* [64][0][][] */ -16,-4,-127,-25,41,40,29,6,-9,-85,47,-14,73,-18,-79,103, 
  /* [65][0][][] */ -11,-8,89,89,97,-36,78,95,-46,-3,-127,-110,35,127,-84,-19, 
  /* [66][0][][] */ -54,-127,-27,-86,-49,-98,57,-29,-11,-22,40,105,-61,-38,-50,108, 
  /* [67][0][][] */ -19,-70,-74,-8,-68,102,-16,-127,-92,-32,-31,-79,11,-15,-60,33, 
  /* [68][0][][] */ 127,67,30,-2,-103,0,-85,-53,-80,-90,-34,-3,30,-29,89,-59, 
  /* [69][0][][] */ 18,16,17,-29,0,-50,-39,30,-5,127,-7,16,-11,47,54,-17, 
  /* [70][0][][] */ 28,-22,-13,71,-101,43,-11,-95,101,127,23,57,39,-78,-4,12, 
  /* [71][0][][] */ 127,-73,69,114,-84,-32,26,-20,106,6,-60,41,58,-57,29,15, 
  /* [72][0][][] */ 0,-56,54,83,66,-30,-127,84,109,-36,42,11,-42,-94,-98,83, 
  /* [73][0][][] */ 93,0,66,-127,49,-101,-79,41,7,99,-23,37,7,-112,60,-32, 
  /* [74][0][][] */ 81,16,31,27,-127,-24,53,-26,-78,-50,17,-44,29,-73,7,17, 
  /* [75][0][][] */ 73,111,-119,39,72,76,-14,-25,-27,-7,60,95,-127,48,74,98, 
  /* [76][0][][] */ -78,-36,18,-46,-47,-5,85,-24,-81,32,95,48,-44,-127,-21,81, 
  /* [77][0][][] */ -47,127,-29,20,-56,-85,39,77,43,-59,-9,75,-27,61,-1,79, 
  /* [78][0][][] */ 127,61,-54,26,-82,23,-112,-27,-22,-29,-47,16,35,-75,13,57, 
  /* [79][0][][] */ -69,-46,127,56,-50,-122,-56,-60,-15,16,32,24,-71,116,-54,102, 
  /* [80][0][][] */ 74,93,44,-127,-4,33,94,-36,6,26,-55,38,98,-59,12,-16, 
  /* [81][0][][] */ 33,-70,16,-115,98,43,-8,127,108,33,-18,-54,-11,24,-84,-65, 
  /* [82][0][][] */ 67,54,69,12,127,-100,20,50,5,126,-21,23,-27,-34,28,-103, 
  /* [83][0][][] */ -51,92,27,45,83,51,127,93,-26,49,-14,-61,-110,103,-58,-76, 
  /* [84][0][][] */ 32,-103,-7,90,-14,-127,-88,26,-87,36,-77,-15,-127,56,-6,-74, 
  /* [85][0][][] */ -127,29,-40,21,-1,-49,-42,-53,-15,40,17,-90,-122,-121,-86,62, 
  /* [86][0][][] */ -39,55,68,105,23,-51,31,43,12,54,-28,-62,-4,74,-127,-46, 
  /* [87][0][][] */ -14,53,127,-20,-105,-22,14,11,23,-20,6,47,-51,27,-2,-2, 
  /* [88][0][][] */ -37,-69,-127,30,23,41,3,30,-9,-68,-105,-100,114,-5,14,54, 
  /* [89][0][][] */ 25,23,15,-127,3,-65,-48,53,115,-41,42,-100,1,-36,46,-69, 
  /* [90][0][][] */ -10,68,12,12,-38,33,47,118,-10,-64,1,127,43,5,-44,90, 
  /* [91][0][][] */ -59,2,-22,67,84,62,-43,-105,-44,50,-4,14,-106,-127,-67,-31, 
  /* [92][0][][] */ -34,48,-4,-29,-127,17,-85,53,-41,46,99,82,-12,-36,72,3, 
  /* [93][0][][] */ 99,37,99,46,-127,-82,32,22,-8,-60,-41,-96,40,-66,-27,-1, 
  /* [94][0][][] */ -40,-127,18,-89,5,28,-32,12,72,-19,10,49,21,65,-40,56, 
  /* [95][0][][] */ -37,-62,-8,-45,127,103,-16,30,81,44,-88,27,-14,119,-87,24, 
};
const TfArray<4, int> tensor_dimension32 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant32_scale = { 96, { 0.0015694556059315801, 0.0010688974289223552, 0.0018251176225021482, 0.0023892351891845465, 0.0019268037285655737, 0.0010746605694293976, 0.001341853872872889, 0.0026398543268442154, 0.002353584161028266, 0.0012112309923395514, 0.0028359268326312304, 0.0015872836811468005, 0.0018742735264822841, 0.0020661924500018358, 0.0019607099238783121, 0.0020830128341913223, 0.0019627436995506287, 0.0013649413594976068, 0.0014987756730988622, 0.0022257438395172358, 0.0016340896254405379, 0.001088707591407001, 0.0013042249483987689, 0.002177889458835125, 0.0024618781171739101, 0.0016426588408648968, 0.00093447754625231028, 0.0017225201008841395, 0.0022470604162663221, 0.0019099132623523474, 0.0012898001587018371, 0.001758432830683887, 0.0013139508664608002, 0.0023946578148752451, 0.0020324683282524347, 0.0018662763759493828, 0.0023412033915519714, 0.0022738527040928602, 0.0018330123275518417, 0.0024934865068644285, 0.0024050869978964329, 0.0021893132943660021, 0.0028221290558576584, 0.0031612343154847622, 0.0030948556959629059, 0.0021250087302178144, 0.0014230395900085568, 0.0015099567826837301, 0.0019704021979123354, 0.0023481901735067368, 0.0017457497306168079, 0.0022848930675536394, 0.0018400158733129501, 0.0026519778184592724, 0.0027737624477595091, 0.0025649587623775005, 0.0023292233236134052, 0.001957619795575738, 0.0015796400839462876, 0.0026688827201724052, 0.003151807701215148, 0.0019292171346023679, 0.0017649061046540737, 0.0022557035554200411, 0.0017866052221506834, 0.0014984608860686421, 0.0019568626303225756, 0.0025819358415901661, 0.0012664062669500709, 0.0030794537160545588, 0.0016356392297893763, 0.0016468992689624429, 0.0015202373033389449, 0.0016245798906311393, 0.0020447846036404371, 0.0014191908994689584, 0.0026771808043122292, 0.0020023935940116644, 0.0021270234137773514, 0.0017121839337050915, 0.0017777811735868454, 0.0020425275433808565, 0.001351290731690824, 0.0017813100712373853, 0.0017474493943154812, 0.0017967872554436326, 0.0024154409766197205, 0.0042752507142722607, 0.00072941748658195138, 0.0025361694861203432, 0.0027147906366735697, 0.0023375824093818665, 0.0010034231236204505, 0.0017205728217959404, 0.003144456073641777, 0.0020538957323879004, } };
const TfArray<96, int> quant32_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int32_t tensor_data33[96] = { 6603, 4764, 1574, -1400, 5266, 10279, 9006, 1359, -265, 8849, 1150, -4157, 3762, 3026, 660, -761, 4550, 7515, -555, 158, 5077, 11126, 8838, -1997, -3187, -1474, 12874, -382, 1652, 1276, 8868, -2625, 8692, 2886, 4570, -4584, 685, -3550, 110, 1776, 2712, 1774, 1555, -516, 1453, 2716, 5840, 6097, 4355, 2978, 5595, 2289, -3290, 1688, 1144, 2127, 2147, 2968, 6625, 979, -769, 4880, 4993, 3774, 4864, 6512, -4487, 2221, 7556, -346, 5538, 1905, 3376, 3492, 3758, 2501, -942, 2495, 2557, 4359, 3198, 2867, 7769, 986, 2986, 5303, 1096, -795, 19023, -763, 1037, -1092, 12231, 3551, -121, -596, };
const TfArray<1, int> tensor_dimension33 = { 1, { 96 } };
const TfArray<96, float> quant33_scale = { 96, { 0.00011295981676084921, 7.6932701631449163e-05, 0.00013136080815456808, 0.00017196252883877605, 0.0001386795483995229, 7.7347496699076146e-05, 9.6578434749972075e-05, 0.00019000055908691138, 0.00016939658962655813, 8.717699529370293e-05, 0.0002041126717813313, 0.00011424296826589853, 0.00013489874254446477, 0.00014871188614051789, 0.00014111990458332002, 0.00014992251817602664, 0.00014126628229860216, 9.8240132501814514e-05, 0.00010787270730361342, 0.00016019542817957699, 0.00011761177302105352, 7.8358512837439775e-05, 9.3870134151075035e-05, 0.0001567511644680053, 0.00017719093011692166, 0.00011822853412013501, 6.7257977207191288e-05, 0.00012397645332384855, 0.00016172966570593417, 0.00013746386684942991, 9.2831927759107202e-05, 0.00012656123726628721, 9.4570146757178009e-05, 0.00017235282575711608, 0.00014628464123234153, 0.00013432315608952194, 0.00016850550309754908, 0.0001636580127524212, 0.00013192901678849012, 0.0001794659037841484, 0.0001731034426484257, 0.00015757337678223848, 0.00020311959087848663, 0.0002275263104820624, 0.00022274878574535251, 0.00015294512559194118, 0.00010242168355034664, 0.00010867745004361495, 0.00014181749429553747, 0.00016900835908018053, 0.00012564838107209653, 0.00016445262008346617, 0.00013243308058008552, 0.00019087313557974994, 0.00019963845261372626, 0.00018461003492120653, 0.00016764324391260743, 0.00014089749311096966, 0.00011369283311069012, 0.00019208985031582415, 0.00022684784198645502, 0.00013885325461160392, 0.00012702714593615383, 0.00016235174553003162, 0.00012858891568612307, 0.00010785004997160286, 0.00014084299618843943, 0.00018583194469101727, 9.1148176579736173e-05, 0.00022164023539517075, 0.00011772330617532134, 0.00011853373143821955, 0.00010941737855318934, 0.00011692732368828729, 0.00014717108570039272, 0.00010214468056801707, 0.00019268709002062678, 0.00014412004384212196, 0.00015309013542719185, 0.00012323253031354398, 0.00012795381189789623, 0.00014700864267069846, 9.7257638117298484e-05, 0.00012820780102629215, 0.00012577071902342141, 0.00012932175013702363, 0.00017384866077918559, 0.00030770638841204345, 5.2499010052997619e-05, 0.00018253795860800892, 0.00019539402273949236, 0.00016824487829580903, 7.2220260335598141e-05, 0.00012383630382828414, 0.00022631870524492115, 0.00014782685320824385, } };
const TfArray<96, int> quant33_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int8_t tensor_data34[1*3*3*96] = { 
  /* [0][0][][] */ 36,127,6,25,-38,0,29,35,38,-82,-108,20,-20,-7,37,-53,-91,20,37,62,37,65,76,76,21,-28,-46,-4,-12,23,15,-21,-56,-4,-33,101,1,58,6,-7,21,-50,-10,37,-110,-75,2,-26,-41,-82,-37,-33,25,73,-23,-5,-64,-72,-46,-127,-127,16,-90,26,-54,56,44,-4,-22,46,40,5,-11,16,28,17,30,-55,-86,28,3,-57,58,-52,-64,-68,-26,4,-127,9,-94,42,87,-15,92,-5, -42,-25,-5,80,-9,98,-23,-8,87,39,-127,56,-36,-63,-63,127,-117,68,61,112,127,13,99,127,35,5,14,30,-1,127,-14,-117,107,71,5,40,74,88,-15,-127,127,-17,85,127,-44,-127,127,-69,-39,-120,-99,-88,28,127,-25,-127,11,38,-118,-77,-59,-127,-49,95,-62,92,127,-15,-7,127,127,6,-69,30,-30,-84,36,-76,-21,127,-18,-37,127,-101,-127,-59,127,31,78,107,-116,-4,127,-31,127,42, 26,-115,-7,-1,-16,-21,-12,42,20,66,-65,29,-18,44,9,-91,-31,11,32,49,38,45,46,92,23,-49,22,24,2,27,-11,-51,-37,-78,-35,71,10,-5,24,13,-9,25,-5,60,-43,-47,-8,5,22,-60,14,-13,-6,5,28,10,60,-78,5,-69,-89,32,-71,0,32,23,-36,3,-38,2,8,5,10,-25,-5,10,34,-31,-86,10,-16,-101,34,-26,-26,-51,2,-19,-94,-2,-27,22,30,24,34,-26, 
  /* [0][1][][] */ 84,13,64,101,3,-64,127,52,-41,-127,-101,127,10,-127,-48,39,-53,-44,83,27,-108,-3,-127,-36,-8,59,-127,127,-78,81,127,89,18,42,15,127,-127,72,-17,-75,56,-127,15,65,-127,-77,2,-127,-127,-83,-127,-15,127,-68,86,-13,-127,-9,-68,30,-39,-74,-44,51,-100,-23,80,-87,-50,26,-44,-127,-90,78,127,-80,127,65,-117,-33,127,-126,-26,108,-14,-31,-13,72,-17,16,-71,34,-9,-91,66,-33, -127,17,-52,127,-94,-127,-116,-127,101,4,-54,58,-71,-118,-42,113,-127,-127,127,127,37,-127,-123,100,-127,127,8,70,-70,-16,-101,88,-127,64,127,-71,6,127,127,-97,-51,24,15,33,-9,-123,-74,-125,-6,-127,-95,125,50,60,53,-86,15,29,87,-14,-43,-51,-127,127,-8,-127,124,127,45,58,-78,-77,-16,59,-98,-127,107,127,93,-36,-82,3,-90,65,-76,-123,102,127,98,127,-127,-127,-122,-64,70,127, 37,9,80,56,-1,-39,-1,49,-55,101,-100,69,13,3,-127,66,50,-42,37,3,-110,0,-86,-26,1,-4,120,2,127,94,15,-127,-47,-127,-13,123,-118,33,-23,-65,-18,94,24,98,-24,-64,-15,-62,119,-77,-123,-38,48,-86,-127,28,89,-6,-127,73,-27,-53,0,51,127,-42,-19,-1,-62,-6,-23,-51,-127,-127,-2,-58,17,-39,-127,-35,-99,-127,-16,127,-85,2,-17,-9,-39,-25,0,53,-20,127,7,-31, 
  /* [0][2][][] */ 16,-116,42,-9,10,15,38,50,-29,-64,-1,-47,36,4,-2,39,-9,13,-20,21,-18,37,-2,-38,21,94,-4,-14,-12,10,6,25,-63,-18,-26,67,39,49,4,-32,-2,8,-31,-29,-26,-79,-23,2,-47,39,-66,32,-14,-4,-46,-14,-7,-11,-17,52,-59,-10,32,0,-37,43,-71,-18,18,-7,28,71,-33,21,11,-10,-47,-41,-26,13,19,-12,-15,-21,-115,32,-38,1,-86,48,2,34,0,1,-14,-36, -74,4,127,2,127,89,-28,20,-127,19,-61,-32,127,-5,-50,32,17,64,-25,-56,10,11,46,-22,73,-62,-11,30,-27,83,-13,10,-93,15,13,-38,69,85,34,-108,-23,5,-127,12,-53,-48,-50,-58,-19,-85,-61,127,115,-56,-43,-85,-12,127,-69,17,55,-114,70,77,-17,21,-41,7,127,-7,20,88,-76,11,-24,-72,-2,-101,-39,-25,-9,-71,-42,-55,-74,127,33,14,81,60,71,34,-17,-20,-41,-10, -3,89,18,-21,-2,-11,-19,56,1,60,-17,-12,25,15,-11,48,27,3,-6,35,-29,31,4,-35,16,87,17,33,2,15,-20,-83,-72,-29,-18,-38,31,20,0,-4,-17,4,-8,21,-54,-97,-25,10,22,39,-45,4,-24,-10,28,16,32,11,3,72,-79,16,13,0,27,23,-50,20,21,-10,18,56,40,-21,5,-12,14,-19,9,12,-29,-68,-11,6,-81,23,-44,-11,-72,55,13,44,-7,10,-22,-34, 
};
const TfArray<4, int> tensor_dimension34 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant34_scale = { 96, { 0.010098203085362911, 0.0083656692877411842, 0.0057981992140412331, 0.0093596568331122398, 0.010736211203038692, 0.011337629519402981, 0.014029017649590969, 0.0085006700828671455, 0.0089960852637887001, 0.0067190187983214855, 0.0050488812848925591, 0.015470412559807301, 0.010429945774376392, 0.0058972560800611973, 0.0075220111757516861, 0.0064495806582272053, 0.0061071151867508888, 0.0094740353524684906, 0.0057137194089591503, 0.004153094720095396, 0.0077349003404378891, 0.014420971274375916, 0.0086985472589731216, 0.010122210718691349, 0.030444268137216568, 0.0081315254792571068, 0.011390657164156437, 0.0067086736671626568, 0.010310141369700432, 0.003460525069385767, 0.01522358413785696, 0.01017586886882782, 0.0064575043506920338, 0.0099919820204377174, 0.01302033569663763, 0.01763695664703846, 0.0079883178696036339, 0.014249095693230629, 0.01410759799182415, 0.0055516231805086136, 0.0084703657776117325, 0.009587237611413002, 0.009736514650285244, 0.0061805518344044685, 0.0057668411172926426, 0.0027536207344383001, 0.009952218271791935, 0.0054577016271650791, 0.0078637022525072098, 0.003854444483295083, 0.0052831447683274746, 0.0053564272820949554, 0.011763742193579674, 0.0074266274459660053, 0.0088731339201331139, 0.0073335198685526848, 0.0084694903343915939, 0.0091946832835674286, 0.0078698704019188881, 0.005248368252068758, 0.006629482377320528, 0.006706584244966507, 0.0060608731582760811, 0.0049735261127352715, 0.0083573153242468834, 0.009120602160692215, 0.011692437343299389, 0.01030484214425087, 0.0097654061391949654, 0.0072463206015527248, 0.011582887731492519, 0.0078499075025320053, 0.0058472482487559319, 0.0092916982248425484, 0.014946465380489826, 0.0046193399466574192, 0.0076902136206626892, 0.0085227545350790024, 0.0061110798269510269, 0.010812408290803432, 0.0097912093624472618, 0.0045793093740940094, 0.0099559752270579338, 0.0074347485788166523, 0.0040214243344962597, 0.0065200417302548885, 0.0066347289830446243, 0.0098583940416574478, 0.01040031760931015, 0.0083799771964550018, 0.0040928279049694538, 0.015333761461079121, 0.0091946786269545555, 0.011124742217361927, 0.0060838311910629272, 0.012031950987875462, } };
const TfArray<96, int> quant34_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 3 };
const ALIGN(16) int32_t tensor_data35[96] = { 1618, -1209, -2904, -4085, 492, 3221, -221, -731, -769, -1154, 11615, -2006, -1893, 8266, 6920, -4379, 11467, 1567, -5826, -323, -110, -206, 1754, -1831, 211, -3814, -72, -3750, 165, -8082, -354, -457, 13707, 1957, -1586, 81, 75, -1873, -1596, 8526, 479, -154, 2023, -5220, 12878, 22992, 1738, 13839, 2452, 11389, 16525, -1027, -792, 53, -253, 9742, -1441, -433, 13879, 5554, 9650, 11921, 8211, -9315, 1939, 844, -2247, 565, -2222, -2103, -1229, 2581, 8930, -1026, -831, 11437, -1726, 2685, 10110, -2073, 1579, 14159, -1384, 2041, 16481, 4318, -2957, -3099, 4195, -5156, 12428, -356, -1592, 743, -3061, -2516, };
const TfArray<1, int> tensor_dimension35 = { 1, { 96 } };
const TfArray<96, float> quant35_scale = { 96, { 0.00023245747433975339, 0.00019257508392911404, 0.00013347272761166096, 0.0002154563699150458, 0.00024714422761462629, 0.00026098868693225086, 0.00032294358243234456, 0.00019568276184145361, 0.00020708705415017903, 0.00015466970216948539, 0.00011622366582741961, 0.00035612404462881386, 0.00024009408662095666, 0.00013575298362411559, 0.0001731543306959793, 0.00014846732665318996, 0.0001405838702339679, 0.00021808932069689035, 0.00013152802421245724, 9.5602939836680889e-05, 0.0001780549791874364, 0.00033196623553521931, 0.00020023783145006746, 0.00023301011242438108, 0.00070081750163808465, 0.00018718517094384879, 0.00026220935978926718, 0.00015443156007677317, 0.0002373362221987918, 7.9660203482490033e-05, 0.0003504421329125762, 0.00023424530809279531, 0.00014864972035866231, 0.00023001228692010045, 0.00029972405172884464, 0.00040599721251055598, 0.00018388856551609933, 0.00032800971530377865, 0.00032475247280672193, 0.00012779662210959941, 0.00019498515757732093, 0.00022069520491641015, 0.00022413150873035192, 0.00014227436622604728, 0.00013275087985675782, 6.338748789858073e-05, 0.00022909694234840572, 0.00012563458585646003, 0.0001810199610190466, 8.8728105765767395e-05, 0.00012161633640062064, 0.00012330328172538429, 0.00027079766732640564, 0.00017095863586291671, 0.00020425676484592259, 0.00016881532792467624, 0.00019496501772664487, 0.00021165872749406844, 0.00018116194405592978, 0.00012081579188816249, 0.00015260859800036997, 0.00015438346599694341, 0.00013951939763501287, 0.00011448901204857975, 0.00019238278036937118, 0.00020995340310037136, 0.00026915624039247632, 0.0002372142334934324, 0.0002247965894639492, 0.00016680802218616009, 0.00026663445169106126, 0.00018070240912493318, 0.00013460182526614517, 0.00021389198082033545, 0.00034406295162625611, 0.00010633575584506616, 0.00017702630429994315, 0.00019619113299995661, 0.00014067513984628022, 0.00024889825726859272, 0.00022539056953974068, 0.00010541426308918744, 0.0002291834243806079, 0.00017114558431785554, 9.2571928689721972e-05, 0.00015008931222837418, 0.00015272937889676541, 0.00022693713253829628, 0.00023941205290611833, 0.0001929044519783929, 9.4215611170511693e-05, 0.00035297838621772826, 0.00021165861107874662, 0.00025608806754462421, 0.00014004787954036146, 0.00027697172481566668, } };
const TfArray<96, int> quant35_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const ALIGN(16) int8_t tensor_data36[16*1*1*96] = { 
  /* [0][0][][] */ -108,47,52,-5,-81,-7,-66,1,-54,20,0,-14,50,47,35,-44,31,-8,102,17,4,-66,122,70,60,18,14,23,-66,-127,-86,0,-38,-42,24,13,8,35,2,28,-6,-5,-74,18,-88,-21,-14,91,-14,20,-60,-23,2,-1,23,-50,-96,2,-20,75,65,36,-1,-3,-24,-50,-51,26,-50,-65,5,-18,7,1,-71,-35,-57,7,-41,8,-58,64,75,-79,15,36,5,54,34,14,0,-18,-34,-34,-65,17, 
  /* [1][0][][] */ 37,5,36,-64,-56,-32,-7,6,-24,10,40,-67,-11,-17,-59,-30,-24,-3,-72,21,-9,-69,4,34,-29,-75,-9,-45,66,-106,115,-75,44,20,-21,49,35,60,-12,-56,36,22,-9,-24,23,64,-127,-54,-54,-60,-8,-24,40,-43,-39,40,-4,3,-25,28,9,43,-8,-107,-25,-29,-57,-12,-5,-27,-78,-11,-38,-30,13,-83,19,9,41,-84,-26,-32,-99,-26,40,-45,-25,13,-86,-36,-63,35,16,56,-52,43, 
  /* [2][0][][] */ 88,-14,8,37,13,-69,61,5,-7,11,3,11,-60,-19,3,-45,-76,-59,-36,47,2,-68,-49,45,19,-72,19,-34,-32,46,-57,127,-42,127,-27,24,-9,-4,-11,-8,-108,82,79,34,-84,11,-29,-15,36,11,-46,-59,65,-24,-26,64,60,3,37,-17,24,55,-33,7,81,29,-10,-7,37,58,-56,11,44,52,72,50,18,-64,59,69,97,-17,-39,21,-65,34,19,67,22,48,-19,50,-54,61,-26,45, 
  /* [3][0][][] */ 5,1,-31,20,5,-7,10,-56,-18,75,54,76,44,-8,-63,41,15,-36,28,17,10,127,40,-39,24,25,-10,1,69,-40,65,-24,-11,42,-31,-22,28,64,38,8,-76,-31,-36,40,-50,35,18,1,-18,-44,-15,-29,56,-95,-34,-47,24,87,-41,-7,3,-3,-50,9,34,61,-48,4,-23,8,3,-70,-35,-45,45,-4,3,1,-46,-22,-24,-7,-51,6,-15,-38,37,-21,8,48,34,-11,50,35,-48,74, 
  /* [4][0][][] */ 27,26,-43,30,29,26,-47,12,-33,90,97,-9,-5,6,10,-62,23,-10,-33,46,23,-53,50,88,-62,-10,-127,19,-40,-65,13,20,-60,-41,22,51,15,47,19,32,-30,-44,51,-22,-17,-1,-37,60,-32,51,4,23,55,-10,-70,20,58,-17,8,-10,47,-5,20,14,-41,27,-29,11,-38,39,-43,58,38,-66,-38,-50,25,-58,-11,15,-39,88,-76,2,-36,20,19,-48,46,27,24,8,-55,-25,27,28, 
  /* [5][0][][] */ -86,51,40,8,48,-18,55,-27,-16,52,4,-19,54,-16,-27,-57,9,-26,50,23,-122,-33,-78,59,-30,-5,49,8,54,-88,-13,51,66,126,-5,38,-10,35,47,-10,-26,93,81,-26,-18,66,37,-3,-4,20,-36,27,24,-46,34,-88,60,-63,-71,-76,70,108,-54,-14,91,-38,-77,-65,-44,-13,-57,-4,-23,17,-25,-40,10,-36,-47,-2,127,-19,31,-92,-93,45,22,-12,-46,67,29,1,-15,34,-3,97, 
  /* [6][0][][] */ 50,1,-97,50,-41,-112,102,98,-59,80,-4,84,-104,-73,53,54,17,-63,0,4,-12,-31,-69,-50,-46,38,83,20,35,17,92,-61,35,14,22,-78,13,12,36,79,-4,16,-60,-15,-15,-58,-88,27,37,-119,-35,69,43,3,-23,-61,81,58,6,-12,-97,61,-91,-6,37,15,-8,60,48,34,-9,-44,-39,26,100,42,55,-13,35,-65,2,-66,-68,63,4,-67,51,18,-35,88,43,52,-24,19,-43,127, 
  /* [7][0][][] */ 33,103,-52,-43,-25,-7,27,12,-56,62,-40,-41,-24,26,5,-23,-31,-42,-42,63,-3,121,10,52,16,8,30,27,58,54,88,-24,87,39,-21,12,5,9,9,54,-69,-3,19,-46,-3,-50,70,-29,42,-72,-100,-30,-40,6,3,-9,52,11,-121,0,8,127,24,-10,-15,11,-44,21,-31,-6,-116,38,7,73,-33,58,-74,62,-3,-65,-15,-45,68,-83,35,-18,-9,3,3,111,-85,61,54,-28,-54,29, 
  /* [8][0][][] */ -10,88,-39,48,-29,-28,-72,34,-96,-27,4,11,-34,35,36,83,7,-44,12,9,37,-1,-3,-10,-27,65,-5,27,-13,-17,-38,-24,-22,-46,-20,-75,-46,28,44,6,0,-39,32,11,-34,-40,8,-5,-25,-21,45,71,4,-16,-64,96,-33,30,2,-38,-40,4,13,54,-30,-53,-32,-5,-27,12,7,11,-24,-49,-113,-21,-44,26,-62,-36,-29,7,-40,-24,-9,-6,14,29,5,63,-60,-9,-82,-127,12,-49, 
  /* [9][0][][] */ -21,24,-71,54,-29,-30,67,56,-17,45,-28,97,-31,-20,29,127,14,18,78,11,25,17,30,-99,-39,-8,21,-4,18,-15,47,56,-35,6,5,-123,23,-26,-28,-18,-10,23,46,-30,-8,-2,20,20,43,82,30,-5,-44,-73,6,0,-2,-10,71,-15,-71,51,-67,-23,85,-8,-19,0,-65,25,42,42,-20,79,-27,-30,-24,21,-41,-14,55,-30,61,2,23,-21,-20,-33,-61,25,-5,-5,74,30,-39,-5, 
  /* [10][0][][] */ 68,-17,-35,-18,-27,-32,76,-1,7,-40,-31,-21,-113,-26,10,7,-91,-28,17,12,46,47,22,-10,-62,77,36,-1,-53,-61,-29,-6,68,-35,48,12,72,-101,79,113,21,-56,8,-7,-6,-95,-2,64,33,82,-59,-39,-28,33,19,47,4,-60,86,64,-23,39,-66,-15,-17,-63,24,53,17,-36,-5,44,127,33,23,-94,40,-46,65,-24,-47,38,30,28,-41,-12,3,38,-49,-35,25,46,46,60,-30,-2, 
  /* [11][0][][] */ -54,-60,62,-82,22,-24,-19,-54,44,-60,-10,-23,-23,-7,17,19,-84,-8,60,9,-53,40,-69,-105,-1,14,-53,50,29,-55,27,-24,11,-10,11,-24,-73,-2,-127,8,-69,71,-41,37,37,10,5,-37,21,-44,-49,-52,8,33,80,-64,-38,-67,35,-46,-44,-69,-23,-123,-1,-71,61,69,108,12,88,-31,-27,-15,71,-47,115,37,43,37,29,0,-29,87,87,14,0,-22,-85,-99,-14,14,59,33,56,61, 
  /* [12][0][][] */ 39,-10,-12,-20,27,112,-7,40,49,72,10,70,37,56,8,-9,-49,40,14,56,121,-11,67,-56,49,27,-65,-74,-20,67,1,6,39,-10,9,-34,42,8,-28,-29,14,-25,45,62,-36,40,-3,-5,-66,30,-7,17,-22,-32,7,26,-22,60,5,38,37,-83,16,-102,2,101,-20,-32,6,-30,57,15,-8,20,-8,54,-21,54,-84,2,-16,26,127,13,-5,76,-25,-62,78,31,-74,63,69,14,-34,-85, 
  /* [13][0][][] */ -8,56,-30,-33,-45,-9,3,-32,8,-21,-29,-67,82,-109,-49,-81,1,-42,-74,-15,-103,-41,6,123,-19,-3,119,4,25,-51,62,42,22,-1,-110,118,-39,-60,39,-55,114,14,-8,40,-22,-104,61,-24,83,-18,-53,23,43,-9,-6,86,82,-55,-51,-16,69,57,-3,-99,8,39,-48,35,-59,-36,-91,14,-84,21,-46,-89,-127,32,37,98,-7,48,39,-93,53,36,28,-10,-19,17,-11,35,-59,29,-23,3, 
  /* [14][0][][] */ -7,36,-81,-11,73,85,-79,-3,33,-29,86,8,31,-17,-40,-71,-50,14,32,127,4,-31,-3,16,22,31,-23,60,13,-8,-14,3,68,-4,-37,3,-19,67,70,21,53,0,29,11,-24,-41,47,-34,19,-5,-21,-27,48,8,-38,34,25,52,-91,-19,-7,-57,-38,-98,17,-34,-50,-2,-63,56,-22,33,-8,-25,-19,-28,22,-11,-57,-15,28,7,3,-15,-17,41,-11,-13,-27,91,66,27,-1,-32,-46,-56, 
  /* [15][0][][] */ -68,-59,53,-84,30,-35,-43,-96,-7,0,-12,56,-22,-32,33,102,-127,-19,18,-75,27,-20,-6,-100,35,6,47,-52,-65,-97,-69,41,-59,57,79,-84,-7,-52,16,-29,-22,4,25,-24,22,1,68,105,-41,-11,33,-45,-56,63,13,-67,-118,-14,110,36,-42,3,-94,24,-75,-17,9,23,41,-85,96,-39,61,-49,-41,-56,35,17,63,-10,-19,74,54,30,5,-21,-113,-2,-18,-91,-87,21,43,-37,-14,53, 
};
const TfArray<4, int> tensor_dimension36 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant36_scale = { 16, { 0.002599847037345171, 0.0024554736446589231, 0.0026318994350731373, 0.0028647480066865683, 0.0031719354446977377, 0.003064009128138423, 0.0023309597745537758, 0.0021093378309160471, 0.0038753869011998177, 0.0028136931359767914, 0.0027656727470457554, 0.0027506663464009762, 0.003109735669568181, 0.0024848030880093575, 0.0043541472405195236, 0.0029323848430067301, } };
const TfArray<16, int> quant36_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int32_t tensor_data37[16] = { 8438, 19701, -8368, -1035, -3049, 2859, -2648, -2137, 13629, -4382, -4989, 12587, -18379, 9511, 339, 14626, };
const TfArray<1, int> tensor_dimension37 = { 1, { 16 } };
const TfArray<16, float> quant37_scale = { 16, { 6.1172875575721264e-05, 5.7775851018959656e-05, 6.1927043134346604e-05, 6.7405839217826724e-05, 7.4633775511756539e-05, 7.2094335337169468e-05, 5.4846113926032558e-05, 4.9631478759692982e-05, 9.1185575001873076e-05, 6.620454223593697e-05, 6.5074651502072811e-05, 6.4721563830971718e-05, 7.3170253017451614e-05, 5.8465957408770919e-05, 0.00010245052544632927, 6.8997294874861836e-05, } };
const TfArray<16, int> quant37_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int8_t tensor_data38[96*1*1*16] = { 
  /* [0][0][][] */ -8,96,-68,43,58,-17,100,66,-49,17,20,-85,81,127,-45,8, 
  /* [1][0][][] */ -27,-4,-60,-28,-14,33,13,-127,20,-42,-15,-42,-14,-48,-63,13, 
  /* [2][0][][] */ -24,-32,34,77,19,41,-111,127,-24,-7,72,-64,-23,-73,-43,72, 
  /* [3][0][][] */ 87,-102,74,-14,-9,-40,-38,127,-38,57,76,61,-5,53,8,15, 
  /* [4][0][][] */ -45,-22,-16,39,-90,8,-31,-127,-17,-16,37,-4,28,40,99,115, 
  /* [5][0][][] */ 127,31,-26,-37,-90,17,30,67,11,-12,77,105,123,24,-103,14, 
  /* [6][0][][] */ 21,-26,-50,-53,-63,12,7,-46,-41,-41,-32,20,91,58,127,-14, 
  /* [7][0][][] */ -60,28,-36,-74,-5,-60,-73,8,-93,46,-62,-54,-127,-41,7,93, 
  /* [8][0][][] */ 53,39,63,11,53,29,70,20,64,-35,38,-3,-127,-21,-69,10, 
  /* [9][0][][] */ -42,57,30,-56,-33,-18,40,-7,-26,63,-48,20,53,127,31,28, 
  /* [10][0][][] */ 89,62,-41,66,-25,-9,59,-54,-72,-31,-71,-121,-127,-71,19,94, 
  /* [11][0][][] */ 50,5,62,19,-17,-31,-3,103,-100,17,-30,5,-22,-8,63,127, 
  /* [12][0][][] */ -53,-21,5,1,17,-10,116,36,-76,19,10,-10,-19,84,-58,127, 
  /* [13][0][][] */ -4,30,-13,27,106,37,108,127,-20,62,-54,-36,10,70,-95,-14, 
  /* [14][0][][] */ -126,121,-3,-22,-13,-3,58,-10,-53,22,127,3,-111,11,-63,63, 
  /* [15][0][][] */ -8,-27,-127,-45,87,-44,-95,-30,-18,-23,-22,-76,-3,-83,-54,44, 
  /* [16][0][][] */ 122,-14,15,-4,36,-27,45,-19,-34,19,127,47,54,9,-33,15, 
  /* [17][0][][] */ 2,19,-31,-100,-13,-65,107,-127,-3,-23,-36,41,29,67,-6,58, 
  /* [18][0][][] */ 27,127,-15,-43,48,-75,-32,-56,-46,113,-20,-2,-36,53,-20,-21, 
  /* [19][0][][] */ -73,-119,114,-97,37,-127,27,-51,38,34,92,111,20,-24,63,-24, 
  /* [20][0][][] */ -20,85,49,0,4,-3,12,-34,51,-11,96,-18,-127,-30,-77,-2, 
  /* [21][0][][] */ -74,30,18,19,58,33,73,68,-127,43,-37,18,-27,17,-62,-23, 
  /* [22][0][][] */ 29,-85,56,23,31,-123,127,9,25,-52,-55,-91,49,-83,-43,-69, 
  /* [23][0][][] */ -50,-102,47,76,34,-15,24,-34,26,-35,81,-4,15,81,92,127, 
  /* [24][0][][] */ 6,-1,19,76,48,17,-47,-127,61,16,-40,16,3,1,-18,-27, 
  /* [25][0][][] */ -12,36,25,-75,-26,-3,29,-47,-26,60,-56,-9,64,127,38,2, 
  /* [26][0][][] */ -65,76,4,25,28,-83,-5,-26,13,19,14,70,5,5,-82,127, 
  /* [27][0][][] */ -13,-127,-48,10,-59,99,3,-52,22,-37,57,-38,33,-39,-102,-25, 
  /* [28][0][][] */ -38,0,34,75,22,7,-37,-127,-119,43,103,-8,66,5,-46,-21, 
  /* [29][0][][] */ -127,107,-27,-24,-35,18,-125,-78,-52,-35,1,5,7,-67,-105,71, 
  /* [30][0][][] */ 54,77,-59,79,-122,-106,-83,-25,-46,-9,9,-112,127,28,-13,104, 
  /* [31][0][][] */ 127,30,-59,-28,-65,24,100,45,-52,-12,58,41,47,25,-19,3, 
  /* [32][0][][] */ -34,-15,127,-8,-11,77,78,10,-20,-16,-8,26,9,67,64,38, 
  /* [33][0][][] */ 10,28,-58,-49,-15,39,125,36,9,-13,19,-86,105,127,-38,41, 
  /* [34][0][][] */ -94,-18,108,22,36,-50,112,-1,-127,45,32,-55,56,71,-45,-44, 
  /* [35][0][][] */ -3,22,-39,16,-59,121,-30,-15,-6,127,-9,85,-59,67,23,20, 
  /* [36][0][][] */ -9,-74,127,-48,-49,17,-42,-9,18,26,-50,75,3,-84,-35,42, 
  /* [37][0][][] */ 73,-10,70,-31,112,-65,-37,27,-45,127,-64,-2,-74,-37,103,-25, 
  /* [38][0][][] */ 60,55,28,-102,-2,-51,-127,73,-95,66,-115,-71,-81,-119,-106,59, 
  /* [39][0][][] */ -70,24,-58,-27,-85,-73,77,19,-127,-32,14,73,41,4,6,46, 
  /* [40][0][][] */ 127,40,8,-108,-65,26,25,-51,-34,-23,-50,-78,35,39,51,26, 
  /* [41][0][][] */ 90,-87,-66,-49,-10,-8,-62,-25,60,-27,4,-49,127,-84,51,-27, 
  /* [42][0][][] */ -10,-81,-38,127,10,-88,-106,14,4,12,3,47,-78,72,-51,-3, 
  /* [43][0][][] */ -92,-52,-41,-125,-55,-2,2,78,43,-127,-41,33,-13,-55,-28,94, 
  /* [44][0][][] */ -52,38,37,-54,-35,-34,29,111,113,-87,87,127,122,41,-39,14, 
  /* [45][0][][] */ 25,88,-91,94,127,-105,-46,-90,105,-76,82,-58,-42,-1,-93,80, 
  /* [46][0][][] */ -22,-39,-4,-9,84,-17,33,21,6,127,-21,-97,27,53,-33,65, 
  /* [47][0][][] */ 82,-45,-35,-8,77,-21,-54,-65,-10,127,-27,39,-13,-115,-86,18, 
  /* [48][0][][] */ 2,27,-19,-127,-6,-55,113,-119,6,-2,-25,55,37,59,-6,45, 
  /* [49][0][][] */ -29,127,-75,33,37,-73,64,54,-29,-1,42,-106,-40,59,120,-98, 
  /* [50][0][][] */ 14,42,-20,1,-127,1,-67,-63,58,74,29,29,-30,-42,5,33, 
  /* [51][0][][] */ 127,-36,-45,-13,-38,87,-84,-41,51,-14,-42,59,-24,-62,6,33, 
  /* [52][0][][] */ -9,-53,50,70,-34,-96,-127,-1,-34,-52,-41,-78,25,-54,20,66, 
  /* [53][0][][] */ 36,109,60,-127,14,117,95,-11,-12,-26,-15,-54,85,-103,17,48, 
  /* [54][0][][] */ 25,120,1,-23,-10,-93,-103,36,-5,-26,-33,127,68,77,11,68, 
  /* [55][0][][] */ -37,-13,59,32,60,-32,99,111,-79,-1,14,7,127,57,-2,-7, 
  /* [56][0][][] */ 127,29,14,25,-52,104,-62,-75,-31,33,-82,6,-67,99,-10,41, 
  /* [57][0][][] */ -50,-31,-37,-32,-69,-98,58,-35,-127,-28,58,68,13,31,-15,60, 
  /* [58][0][][] */ 51,-47,61,29,10,-54,-16,5,27,-10,-127,-32,24,-29,-26,37, 
  /* [59][0][][] */ 73,18,-121,92,14,33,77,-45,-94,-44,31,-95,-127,-66,32,113, 
  /* [60][0][][] */ -7,33,-12,16,-19,-27,-19,-7,-39,-58,60,127,-37,-110,-36,3, 
  /* [61][0][][] */ -38,11,64,-90,-58,43,-8,100,-21,-95,64,71,75,-10,6,127, 
  /* [62][0][][] */ 74,43,-12,-127,-16,0,2,-48,-8,27,-33,48,19,-28,-84,-70, 
  /* [63][0][][] */ 1,-24,3,-7,-62,-69,-52,4,-67,-11,-36,-18,127,2,58,-15, 
  /* [64][0][][] */ 21,13,-21,55,-116,-50,-28,-101,51,125,43,10,33,-66,-52,127, 
  /* [65][0][][] */ -24,16,-18,-10,-84,96,35,-16,65,-127,105,-84,89,85,-126,61, 
  /* [66][0][][] */ -110,108,-86,-80,36,-29,-127,-87,-106,123,84,-7,-119,-50,50,52, 
  /* [67][0][][] */ -3,-34,-127,-111,60,69,9,-34,-35,-9,52,-12,24,32,11,53, 
  /* [68][0][][] */ 47,18,-18,-49,-71,32,10,27,-71,62,127,-6,-17,-51,-121,6, 
  /* [69][0][][] */ 79,-97,54,-53,14,-122,-38,127,-9,62,91,90,-31,72,-32,3, 
  /* [70][0][][] */ 48,7,109,26,100,-9,127,10,44,6,-66,36,-56,47,-56,26, 
  /* [71][0][][] */ 4,27,87,-68,-127,-80,5,3,-34,-14,25,-91,-79,-3,5,38, 
  /* [72][0][][] */ -56,-88,27,-111,78,-4,14,54,-63,21,-127,-24,61,125,-48,110, 
  /* [73][0][][] */ 30,15,49,7,119,-87,-59,14,-39,86,-88,33,-88,-45,127,-16, 
  /* [74][0][][] */ -105,0,-127,-52,57,-51,-54,12,-93,0,-117,-26,-43,-66,-42,93, 
  /* [75][0][][] */ 98,-24,54,-29,21,15,-127,-19,-7,-99,57,-9,2,-8,3,-19, 
  /* [76][0][][] */ 0,-59,-28,120,45,98,126,-80,92,-127,60,119,59,-102,-81,43, 
  /* [77][0][][] */ -29,-34,127,-26,41,-32,-45,-116,12,22,37,87,32,51,27,-2, 
  /* [78][0][][] */ -45,4,19,-37,1,-51,33,-9,25,-18,13,-90,-103,-77,-127,-57, 
  /* [79][0][][] */ -116,-87,-28,16,127,24,-21,-1,14,22,-10,67,-43,-91,-85,-8, 
  /* [80][0][][] */ 12,-121,54,127,-25,-15,-103,95,6,26,59,-17,-63,3,0,53, 
  /* [81][0][][] */ 126,78,-17,92,-9,36,22,127,18,11,118,60,120,29,70,-24, 
  /* [82][0][][] */ -57,5,11,-35,27,-127,-111,-88,0,77,-38,-25,-28,94,-74,-20, 
  /* [83][0][][] */ 104,-17,78,-20,-40,-14,-127,-8,17,-107,13,-44,-29,-6,12,-17, 
  /* [84][0][][] */ 10,-78,-107,23,127,36,43,27,-122,16,-108,-18,46,-44,-78,19, 
  /* [85][0][][] */ 26,96,47,-35,96,5,31,-90,127,-28,30,-28,83,-65,23,-12, 
  /* [86][0][][] */ 118,-33,127,42,7,-53,85,38,-60,-55,-99,-47,41,17,-62,6, 
  /* [87][0][][] */ -11,6,13,-76,63,-30,-42,8,27,-38,71,-28,-80,-127,-10,26, 
  /* [88][0][][] */ -54,-26,40,-10,28,34,-53,-43,3,13,-72,-127,-39,-35,-9,-23, 
  /* [89][0][][] */ -80,7,16,-69,19,1,-127,15,80,21,-67,-2,-13,-92,-50,-14, 
  /* [90][0][][] */ -6,-12,-28,-65,127,40,-47,54,49,62,22,-22,34,31,-53,-29, 
  /* [91][0][][] */ -43,-62,19,55,-37,-1,10,92,-34,-52,27,-55,3,74,27,127, 
  /* [92][0][][] */ -23,70,3,-9,-17,63,-86,51,-28,-9,59,-5,-23,127,51,20, 
  /* [93][0][][] */ -9,83,-48,-68,55,72,-75,-1,50,59,70,65,-127,17,-43,81, 
  /* [94][0][][] */ 20,60,88,13,-127,-36,5,-11,11,-15,26,-10,-53,-21,11,-17, 
  /* [95][0][][] */ -6,32,33,-14,127,-44,-109,71,15,0,-65,113,-19,-5,107,-27, 
};
const TfArray<4, int> tensor_dimension38 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant38_scale = { 96, { 0.0015382784185931087, 0.0030129649676382542, 0.0019733179360628128, 0.0015508336946368217, 0.0017972278874367476, 0.0022831130772829056, 0.0018534937407821417, 0.0026896877679973841, 0.002253892133012414, 0.0024752316530793905, 0.0017259464366361499, 0.0026586691383272409, 0.001562130288220942, 0.001473203650675714, 0.0013239366235211492, 0.0020543120335787535, 0.003308155108243227, 0.0025402384344488382, 0.0018860875861719251, 0.0014342020731419325, 0.0020941877737641335, 0.0019835161510854959, 0.0014054868370294571, 0.0022041762713342905, 0.0026330312248319387, 0.0021419122349470854, 0.0020454439800232649, 0.0022089653648436069, 0.001947703305631876, 0.0024864815641194582, 0.0013748756609857082, 0.0022504667285829782, 0.0024412313941866159, 0.0013698643306270242, 0.0014493382768705487, 0.001666337950155139, 0.0020460819359868765, 0.0017253998667001724, 0.0016083812806755304, 0.0015969458036124706, 0.0022990303114056587, 0.0015844512963667512, 0.0021147909574210644, 0.0016603014664724469, 0.0020621821749955416, 0.0017242080066353083, 0.0029614819213747978, 0.0018030810169875622, 0.0011804691748693585, 0.0016462379135191441, 0.0022159430664032698, 0.0016904819058254361, 0.0011675474233925343, 0.0018793882336467505, 0.0022390736266970634, 0.0021182240452617407, 0.0020959342364221811, 0.0020005842670798302, 0.0019871678669005632, 0.0018980660242959857, 0.0028777872212231159, 0.0019498091423884034, 0.0026602002326399088, 0.0018015119712799788, 0.0012948110233992338, 0.0013638599775731564, 0.0013082935474812984, 0.0017498654779046774, 0.0019990270957350731, 0.0018153443234041333, 0.002152829896658659, 0.0019102240912616253, 0.001961578382179141, 0.0017873967299237847, 0.0018233711598441005, 0.0014383905800059438, 0.0014456870267167687, 0.0019752017688006163, 0.0019616095814853907, 0.0017808937700465322, 0.00094527227338403463, 0.0017053235787898302, 0.0019585827831178904, 0.0017504771240055561, 0.0019843175541609526, 0.0023632238153368235, 0.0019664836581796408, 0.0020054115448147058, 0.002195629058405757, 0.002099077682942152, 0.0025823831092566252, 0.0019083807710558176, 0.0016193565679714084, 0.0014310970436781645, 0.0034381335135549307, 0.0022039974573999643, } };
const TfArray<96, int> quant38_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int32_t tensor_data39[96] = { 1369, -2, 3658, 6048, 4282, -2127, 3858, -1035, -2114, -522, 4430, -2010, 4299, 5007, 2764, 2365, -625, -396, -1894, 5369, 2513, -483, 3015, -629, -962, 3683, 1579, 1900, 4548, 2068, 4684, 1302, 1465, 5593, 5358, 3425, -570, 3247, 2913, -4106, -306, 1835, -195, 1836, -1309, 578, -948, 985, -7150, 2039, 1237, -3648, 7579, -1039, 1904, 1407, 1009, 2371, -1060, -1925, 252, 1710, 461, 4420, 6420, 4073, 3464, 5037, 4074, -984, 2789, 4460, 2862, -1699, 4778, 6577, 495, -3632, 720, 1395, 10960, 2090, -493, -2933, 1364, 659, 1848, -2345, 3497, -466, 2870, 1401, -181, -3647, -181, 1665, };
const TfArray<1, int> tensor_dimension39 = { 1, { 96 } };
const TfArray<96, float> quant39_scale = { 96, { 0.00012590344704221934, 0.00024660208146087825, 0.0001615101209608838, 0.00012693105963990092, 0.00014709768583998084, 0.00018686591647565365, 0.00015170287224464118, 0.00022014282876625657, 0.00018447426555212587, 0.00020259023585822433, 0.00014126350288279355, 0.00021760404342785478, 0.00012785564467776567, 0.00012057727144565433, 0.00010836021829163656, 0.00016813924594316632, 0.00027076250989921391, 0.0002079108526231721, 0.00015437057300005108, 0.00011738511238945648, 0.00017140294949058443, 0.00016234480426646769, 0.00011503485438879579, 0.00018040517170447856, 0.00021550565725192428, 0.00017530904733575881, 0.00016741341096349061, 0.00018079714209306985, 0.00015941364108584821, 0.00020351100829429924, 0.00011252942204009742, 0.00018419390835333616, 0.00019980742945335805, 0.00011211926175747067, 0.00011862396058859304, 0.00013638472591992468, 0.00016746563778724521, 0.00014121877029538155, 0.00013164115080144256, 0.00013070520071778446, 0.00018816869123838842, 0.00012968255032319576, 0.00017308925453107804, 0.00013589065929409117, 0.00016878338647074997, 0.0001411212288076058, 0.00024238835612777621, 0.00014757673488929868, 9.6617841336410493e-05, 0.00013473960279952735, 0.00018136824655812234, 0.00013836084690410644, 9.5560229965485632e-05, 0.00015382225683424622, 0.00018326142162550241, 0.0001733702520141378, 0.00017154589295387268, 0.00016374178812839091, 0.00016264368605334312, 0.00015535097918473184, 0.00023553820210509002, 0.00015958599396981299, 0.00021772936452180147, 0.00014744831423740834, 0.0001059763744706288, 0.00011162782175233588, 0.00010707987530622631, 0.00014322121569421142, 0.00016361434245482087, 0.00014858045324217528, 0.00017620263679418713, 0.00015634608280379325, 0.00016054927255026996, 0.00014629302313551307, 0.00014923742855899036, 0.00011772792640840635, 0.00011832512245746329, 0.00016166429850272834, 0.00016055181913543493, 0.00014576078683603555, 7.7367680205497891e-05, 0.00013957558257970959, 0.00016030408733058721, 0.00014327127428259701, 0.00016241040430031717, 0.00019342273299116641, 0.0001609507598914206, 0.0001641368871787563, 0.00017970561748370528, 0.00017180317081511021, 0.00021136026771273464, 0.00015619520854670554, 0.00013253945508040488, 0.00011713097774190828, 0.00028140086214989424, 0.00018039054702967405, } };
const TfArray<96, int> quant39_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int8_t tensor_data40[32*1*1*96] = { 
  /* [0][0][][] */ 7,44,14,-90,-85,-2,-16,56,-27,-44,-119,-92,-110,93,-64,45,23,73,7,-13,-49,-106,-50,8,74,-110,-13,86,38,-90,53,-12,-84,71,13,-73,-41,-4,-99,-30,-105,-57,84,-78,51,-31,-89,82,-106,77,-98,6,-38,66,-12,38,-79,-94,-16,20,-27,71,20,-127,52,-121,-109,36,35,-92,-23,97,-66,17,-56,89,-59,-69,-42,-29,-118,35,47,14,-55,-78,-63,-59,11,22,14,42,-100,-97,-58,32, 
  /* [1][0][][] */ 62,11,77,39,32,-70,-2,126,20,46,-69,72,-107,-127,32,-68,-48,-27,14,-26,102,77,-85,-67,31,-18,-23,-61,92,54,-20,-61,-96,-90,-91,-73,44,-75,-38,26,-6,97,-4,38,42,6,-69,43,17,-116,6,-40,-5,-119,-48,-108,47,53,96,16,73,-74,-39,-34,125,-12,7,92,80,89,29,116,-4,16,59,37,75,-92,121,-10,-76,94,-69,77,29,6,-125,39,-64,-61,49,-24,-35,23,45,-10, 
  /* [2][0][][] */ 18,-60,-77,-99,-31,10,70,2,39,-11,-54,-45,50,107,-56,-103,-83,39,-6,33,-68,-3,25,22,-30,90,-38,-45,-9,-31,-69,33,56,-51,53,19,-73,37,-69,58,80,-25,97,64,-56,-10,73,30,1,-25,5,79,-77,-48,15,-61,-26,22,70,101,84,72,-26,92,98,81,-59,-60,3,15,89,-18,33,25,-13,-58,81,127,-93,-58,-75,123,89,34,-58,70,44,26,80,82,108,98,-33,-1,75,100, 
  /* [3][0][][] */ -47,66,43,-50,71,75,56,49,94,22,30,-35,73,42,73,75,-80,54,-36,73,-41,58,-49,4,127,59,-68,14,38,24,-25,78,-62,25,21,-58,-64,-17,-52,-38,-47,-20,-40,17,-43,-62,-2,-15,-33,76,-19,-62,8,48,70,-40,-48,-67,46,-60,-57,23,-44,-17,11,63,-37,-20,-21,-21,73,8,62,71,-33,-47,-79,-26,61,-35,41,80,-50,-51,56,-55,76,-51,-17,-67,73,66,-57,-31,34,-6, 
  /* [4][0][][] */ -103,34,78,-15,64,10,-29,-56,16,53,-107,-70,-71,93,26,-101,78,45,-53,-71,-91,72,-105,-26,-16,-127,95,49,10,-108,113,26,-100,45,-56,-55,106,-23,-121,-98,95,97,-108,-100,-11,87,-52,-40,114,-39,116,110,88,-106,-13,35,-117,-24,109,-64,86,-27,-25,78,-48,32,-120,-81,25,88,36,-10,-63,-12,21,-73,-19,88,-35,45,31,-118,42,-8,53,127,14,-71,-24,-7,90,58,86,-22,-108,-109, 
  /* [5][0][][] */ -103,120,-41,-56,33,-26,-49,74,-30,-102,62,46,-78,12,116,115,-108,127,105,-5,115,1,-51,113,-126,40,-26,-55,-23,47,69,1,-80,66,68,60,117,-70,-54,-30,70,-11,-10,-49,108,121,-17,-3,26,101,107,55,-80,-57,52,-44,109,-37,-67,78,69,75,-9,67,81,-55,56,53,105,-64,22,10,-105,73,27,-86,-48,43,37,3,82,96,-94,-49,49,-43,-108,-6,74,112,-47,119,-18,108,5,78, 
  /* [6][0][][] */ 108,-21,4,-104,-115,-38,62,-103,4,74,33,116,52,-77,-29,124,-80,95,26,93,-124,113,100,31,-66,38,-115,-107,-51,-98,0,49,-101,13,74,77,-111,-51,9,63,-100,48,79,3,-115,80,-114,-30,48,102,-9,-19,-79,-109,-70,-90,-83,-8,1,87,58,-51,84,14,127,89,-24,51,-5,-99,-57,-25,68,-55,101,112,-41,31,-56,-80,27,-32,-51,-109,89,-6,-7,123,-8,-110,-106,-36,-87,-6,97,-101, 
  /* [7][0][][] */ 79,37,-59,-115,98,-27,-11,-60,22,-76,-13,-17,-57,122,93,57,68,-6,-42,49,69,-97,-13,-63,103,-70,49,99,-101,-37,-16,8,-127,-49,63,-43,110,10,-3,-99,-101,39,-64,73,3,-68,-31,-60,62,44,-41,105,-49,35,58,32,58,-125,-4,-109,13,-85,-51,-50,-13,-65,-114,-103,39,-108,-127,6,-110,90,-37,64,-80,-52,-78,-9,-113,36,4,78,-58,-87,41,-81,51,113,109,-91,38,-90,87,-74, 
  /* [8][0][][] */ -75,-58,-109,-6,57,-11,-27,-91,76,-127,125,-90,-31,-117,-120,-4,18,75,85,-78,95,46,87,-64,-67,-108,16,-104,-79,-81,-102,-6,-51,-15,-104,120,-113,-99,-44,-66,-22,10,50,-22,-19,-63,-43,92,59,80,-32,-19,116,4,-8,-107,10,-2,-16,22,-94,-17,-108,91,-19,-47,12,-74,-79,33,-113,55,39,87,120,88,89,-21,-21,-29,40,87,-6,65,71,-61,-36,68,57,52,-73,74,-100,112,119,-55, 
  /* [9][0][][] */ -31,-41,22,80,28,62,84,30,28,53,65,59,108,70,-34,-30,-11,-65,-66,-82,-90,90,18,-26,-20,-59,-50,50,66,-123,-34,51,-91,-65,115,-27,-34,1,-76,-72,111,92,1,1,39,56,50,-19,-24,-41,-103,-66,-114,31,23,77,-1,-80,9,3,-7,-71,40,79,-127,76,68,65,101,-62,-95,14,51,28,64,-113,107,-41,12,-45,-117,-30,92,-84,60,-70,-87,14,-71,114,46,7,-86,30,28,75, 
  /* [10][0][][] */ -97,37,-88,-102,-53,88,-127,-115,96,-106,82,65,-16,42,65,-15,106,6,-93,30,-15,-64,-49,79,41,110,-44,-37,-120,-91,-19,-116,65,35,105,-124,106,-80,36,106,95,30,25,50,-23,24,3,-14,-87,124,85,107,95,-95,90,57,18,-23,76,-18,65,57,99,54,-50,103,-12,51,-1,-19,82,23,-107,-88,17,54,64,101,75,-5,-9,48,1,31,9,82,-81,22,-10,27,-56,84,46,65,20,0, 
  /* [11][0][][] */ 81,75,-62,-86,99,-9,-49,-74,-94,35,53,0,31,-95,64,-70,-104,86,-9,-45,-36,-45,69,-75,-100,90,86,95,15,61,4,45,46,81,-118,-72,27,115,-45,-61,42,-124,118,-100,93,37,-127,-10,59,82,-56,100,70,-92,-38,-103,-20,94,-104,87,-22,12,124,-61,74,-27,109,2,103,105,-59,28,-91,-54,31,-97,-2,70,-72,1,-89,-35,-114,95,0,-85,-65,-16,-94,53,-43,-52,88,42,124,-13, 
  /* [12][0][][] */ -39,-11,-23,127,34,-11,1,-63,12,28,-10,50,-37,-18,-27,76,42,-31,27,127,-56,21,108,68,34,108,-55,43,108,-65,83,83,75,12,40,-35,37,-33,75,51,99,121,59,-44,40,2,-2,102,-62,100,-27,76,-12,6,84,87,8,-58,-23,-75,51,5,110,30,-38,25,15,-16,-71,-55,82,3,-44,-21,12,25,-50,34,86,-2,55,98,88,20,110,22,42,-39,-8,-37,52,31,-69,-62,-71,114, 
  /* [13][0][][] */ 33,39,67,-56,91,16,19,-24,22,-102,38,43,-3,40,46,67,92,60,27,75,102,-24,-22,-57,48,-78,18,-70,41,-65,-42,-7,-36,-99,16,3,63,-101,73,48,-28,-73,59,74,40,2,25,69,-50,52,-31,-5,-28,-96,13,54,29,-33,56,-38,-72,-5,68,-55,-64,24,-11,-87,-66,-44,-101,80,-44,-34,92,-23,-28,66,-11,-44,63,14,2,78,65,-49,-123,79,-70,-52,10,-33,52,127,-17,-105, 
  /* [14][0][][] */ -46,-64,88,54,51,-96,11,-7,-15,62,-25,-62,-3,106,-28,37,-102,-37,-22,-107,-8,33,-52,-45,-38,-27,64,22,71,-79,75,-50,-44,89,112,25,24,73,-85,-92,96,106,115,23,73,-74,-14,-55,-122,10,-30,-65,-12,-127,84,-109,34,-90,-38,-93,-90,-100,11,11,-11,58,8,-17,-107,-16,26,-60,-106,-72,51,-14,-88,-34,67,-1,118,-41,109,41,-77,-70,-67,70,58,-12,-76,-29,-15,-104,-69,-57, 
  /* [15][0][][] */ 13,36,-13,-75,-108,81,-4,49,-120,-55,88,-48,-26,-67,-55,-50,-41,78,-108,5,-37,-92,-71,-38,-17,-21,88,95,-25,-87,-127,13,44,88,-53,-34,-39,88,-44,-100,-74,99,97,-72,69,43,-84,-100,18,-45,-44,-102,-90,-19,21,2,37,-25,78,-61,-115,-105,-111,-72,-57,17,-22,-89,-28,-79,-96,1,53,35,-13,68,-44,91,-114,-32,-37,-77,-51,-65,-63,-51,87,-41,44,-108,-94,85,-15,-48,97,-88, 
  /* [16][0][][] */ -13,20,-109,112,83,-69,99,95,-52,48,75,-79,-58,84,-127,-36,27,79,-65,-30,-127,-28,-106,10,101,-64,-85,18,-57,89,106,29,-83,-49,14,6,-19,84,-125,57,51,35,67,-62,-102,-21,-97,-61,-18,38,89,61,-47,-113,51,3,33,87,-47,-73,30,-30,4,63,-16,26,61,-49,-6,-62,75,11,73,-14,41,-88,74,-32,-103,-56,-37,31,-17,-118,90,-56,1,-120,101,-98,93,-113,38,15,62,-94, 
  /* [17][0][][] */ -25,97,-113,-36,-28,39,-53,117,22,-45,102,-25,-33,84,42,-58,36,86,-16,74,24,-18,-66,-14,-116,-5,-24,-78,-33,56,65,-102,49,-47,-35,51,49,-75,-20,52,-64,106,-25,-78,113,27,-105,-87,32,-122,-3,-110,-74,-8,51,16,-73,92,-61,-63,114,104,71,76,-49,35,-85,75,-64,-65,5,-22,-42,-61,0,47,-110,-66,113,-94,-59,-19,100,-62,74,28,-72,107,-11,127,-42,63,-99,-45,74,-54, 
  /* [18][0][][] */ 68,-112,-117,-25,50,7,-121,-92,-55,34,-85,-81,-10,81,22,27,15,83,-97,-43,-82,39,19,34,3,-30,37,-108,-27,-119,22,-117,-34,76,103,-67,12,-53,-65,-76,-115,8,102,-60,-25,36,81,-74,85,2,-58,-109,-53,-17,-43,26,56,23,-127,58,-93,-28,48,94,-20,19,-94,-111,92,-39,-79,83,-105,90,-6,99,23,70,-11,-36,-65,-59,-106,73,-8,-75,84,15,58,10,-54,109,-99,-11,-4,-124, 
  /* [19][0][][] */ 59,67,-92,75,107,72,-60,19,77,-48,11,-34,69,54,116,-35,40,-84,-29,111,-81,-84,28,117,56,-20,39,-20,80,49,108,-105,59,-25,-85,81,-91,-32,-55,29,53,31,52,53,-31,49,-124,103,115,21,89,-20,67,-90,84,95,56,19,-91,-36,-25,66,101,-41,99,-7,-61,87,111,-7,-108,12,15,67,23,92,14,62,-72,116,-96,-64,100,-92,39,2,68,-69,-80,-5,-30,18,-21,-35,83,-127, 
  /* [20][0][][] */ -6,-92,-26,64,99,25,96,36,-56,-58,18,-9,-32,-74,-5,-95,-19,-57,106,50,57,-117,110,-29,-103,125,-94,18,5,-84,-49,9,51,110,87,-62,100,25,-115,14,116,-86,-100,-29,44,17,-25,-41,84,-5,115,-83,2,117,26,-90,-63,-126,78,9,-41,92,84,90,33,103,28,-73,33,81,-67,24,-97,-89,-40,121,-11,-73,43,-68,13,118,86,-53,69,32,-66,-107,127,16,-101,-90,63,-70,24,92, 
  /* [21][0][][] */ 66,92,92,-90,-44,-57,-94,-51,-38,93,11,-95,-58,-80,-100,-106,-35,-28,-78,-109,-47,50,95,-58,80,21,69,-27,-67,-110,85,-5,-98,18,89,92,-114,-91,-118,18,-9,34,-51,5,-82,78,-125,58,59,-127,-22,-83,47,-56,-117,-60,-47,-70,72,75,4,-48,-16,49,-55,35,-74,-11,-14,-61,-19,-4,-40,-106,-62,-8,-95,100,97,78,-54,85,-12,-37,-122,-77,9,19,-57,34,-76,73,-43,-86,86,-37, 
  /* [22][0][][] */ 16,-11,67,2,-37,-46,114,26,48,20,12,12,-19,72,-8,-45,-70,-2,-51,66,46,108,41,70,-22,64,-48,77,-12,-49,-25,-24,-19,116,55,49,30,-35,-37,-55,27,52,-42,20,57,-18,113,-34,-53,23,-58,83,-27,127,-8,73,86,64,-27,69,-49,-4,15,60,64,-33,-59,12,55,69,-16,-13,42,76,-30,22,-35,-28,59,3,91,-16,-54,-4,84,112,29,77,69,87,111,42,-49,60,68,90, 
  /* [23][0][][] */ -37,3,12,-33,-76,2,41,24,11,-95,54,-79,-93,53,61,-31,32,34,47,13,47,75,30,-16,21,-55,-50,-58,-80,75,-4,95,50,-62,80,-17,-10,82,69,-55,87,13,84,-77,-89,5,-98,86,2,74,-33,-8,-72,70,59,-4,31,6,28,-5,-27,47,63,-104,89,-85,19,-10,83,89,-82,93,71,22,24,-37,-99,-24,-76,-14,-90,-1,-82,-65,-58,-127,75,-85,-44,-73,-38,-64,8,-33,-57,76, 
  /* [24][0][][] */ -9,98,118,102,71,-19,-105,120,-12,-107,-73,98,28,-20,2,-51,-13,50,-53,90,123,-29,-20,40,-40,54,-54,-49,95,127,103,-21,107,-48,-11,-20,28,-52,-72,-73,-4,104,-72,55,-40,81,27,-56,-87,-60,40,-14,-48,67,121,-47,66,-33,-12,-16,121,49,53,-18,-105,-2,-51,115,76,-79,-31,38,-2,-116,-4,-32,34,-72,-23,77,73,-60,59,-47,-80,-78,-29,-51,-90,84,-63,-19,-64,-60,79,84, 
  /* [25][0][][] */ 9,20,4,58,2,16,-20,8,11,62,42,14,-48,108,46,-38,-52,-17,-52,19,44,88,26,52,67,-14,-46,-3,36,32,-55,45,-25,-12,67,70,-34,65,-44,55,-22,127,43,20,14,-46,-15,-28,-47,47,-55,-12,6,73,-71,-24,22,-24,108,-1,-46,61,-12,46,-46,-34,-62,66,10,3,71,39,26,60,-2,26,35,50,40,-19,-33,42,-35,40,113,97,40,29,-12,103,35,-4,-7,32,58,90, 
  /* [26][0][][] */ 72,-81,-9,-8,72,-94,93,-47,44,-20,-87,-6,-40,-46,28,-28,89,5,-74,-75,37,-40,57,78,-8,-25,34,36,17,-14,-49,-38,-20,46,39,104,-10,85,-116,89,92,7,-34,-98,-11,44,127,7,18,53,75,-24,83,98,53,31,75,-4,-61,-20,7,100,-77,-106,42,-31,-105,-29,-6,-51,35,31,-103,-58,-84,-74,-24,23,-28,50,92,26,-52,-23,-10,-39,-7,-89,18,7,94,93,-47,49,34,-17, 
  /* [27][0][][] */ 60,37,-119,111,-36,-22,3,-18,-61,97,-43,-32,-109,84,78,-53,52,-107,-7,-93,-23,63,82,-92,-127,73,-40,48,87,-65,51,-112,110,-82,38,102,105,48,-85,-44,26,56,-43,51,64,-95,125,-46,2,-61,55,79,95,82,-121,-84,76,-33,-32,-4,31,-81,-81,-97,30,105,21,-91,41,-4,48,-113,21,-90,-2,-92,-85,30,74,33,-67,-68,81,-23,-102,-38,54,-26,99,29,64,95,83,39,46,-103, 
  /* [28][0][][] */ -116,121,-40,76,19,93,-104,9,46,-75,-88,86,67,-96,30,-89,-57,82,46,95,102,66,10,-77,51,-73,88,116,-43,32,-15,42,-33,14,-34,-51,47,85,-28,127,-98,-32,0,71,107,112,-39,12,116,-5,-99,11,65,-54,31,55,97,54,46,91,56,-19,3,-112,-66,-2,99,-41,-75,61,47,114,-107,39,123,33,67,-59,-5,81,-63,49,60,-27,50,1,-89,-51,-101,19,68,-78,50,67,-8,71, 
  /* [29][0][][] */ 12,-11,39,20,-22,5,16,-86,-57,-46,-42,-79,70,-39,-64,-13,97,98,-44,104,37,-63,-77,-77,62,-76,-77,-40,-30,98,-58,25,-114,102,104,1,-9,-86,35,-17,85,-51,-14,40,-75,66,-127,21,-29,52,35,44,-69,-23,89,75,25,-8,-49,13,123,102,-60,35,85,-80,-94,39,75,-4,-41,-41,-28,-120,-13,-86,-48,34,9,70,0,-57,38,-36,22,-113,-85,96,-32,41,-72,-54,-101,6,-61,-87, 
  /* [30][0][][] */ -83,-91,-91,-60,66,92,47,16,-88,25,34,68,95,37,-102,-113,100,118,83,4,-10,-86,110,-79,10,47,-20,11,84,-37,8,45,-11,-39,19,29,-86,-47,86,-12,-22,-114,-75,-84,80,119,-65,-35,-68,103,-91,-40,-113,-39,97,-113,103,61,-10,2,-41,-105,45,73,119,95,35,64,95,75,97,-80,21,-127,-86,21,61,-51,-9,-46,49,36,99,37,71,-71,44,40,96,27,39,-118,12,85,-70,-96, 
  /* [31][0][][] */ 35,110,63,-39,-67,-11,94,-88,-63,-45,54,-66,-82,-68,83,15,-15,44,-28,26,-24,-37,90,0,84,91,-47,-62,-21,71,50,60,75,31,53,99,40,121,-20,-88,6,104,-94,27,20,92,63,-8,-99,-21,-57,61,19,-70,-18,-7,13,25,28,102,-10,-127,121,-102,18,-92,68,-66,-111,27,123,-34,68,-45,-42,53,-11,97,50,-80,-8,-8,-106,-72,-29,92,124,-104,-56,86,44,-30,-53,-41,-107,100, 
};
const TfArray<4, int> tensor_dimension40 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant40_scale = { 32, { 0.0019570821896195412, 0.0018682022346183658, 0.0020525997970253229, 0.0027473545633256435, 0.0017972863279283047, 0.0018285262631252408, 0.0017337730387225747, 0.0017912432085722685, 0.0018081651069223881, 0.0017429745057597756, 0.0017313953721895814, 0.0017400204669684172, 0.0024128863587975502, 0.0022810541559010744, 0.0018332512117922306, 0.0018871336942538619, 0.0018106265924870968, 0.0017732687992975116, 0.00187043531332165, 0.0018506812630221248, 0.0017802971415221691, 0.0018768416484817863, 0.0030339902732521296, 0.0021953789982944727, 0.001849668100476265, 0.0032640786375850439, 0.0019965574610978365, 0.001866572187282145, 0.0018972674151882529, 0.0019315158715471625, 0.0017819972708821297, 0.001849925727583468, } };
const TfArray<32, int> quant40_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int32_t tensor_data41[32] = { -666, 150, 261, 101, 176, 125, 282, -355, -91, -95, -291, 143, 1976, -89, -12, -631, -302, 127, -342, 126, 134, -696, 1699, -85, 108, 1264, -185, -45, 104, 136, -38, -171, };
const TfArray<1, int> tensor_dimension41 = { 1, { 32 } };
const TfArray<32, float> quant41_scale = { 32, { 4.6048993681324646e-05, 4.3957701564067975e-05, 4.8296467866748571e-05, 6.4643638324923813e-05, 4.2289091652492061e-05, 4.3024148908443749e-05, 4.0794660890242085e-05, 4.2146901250816882e-05, 4.2545063479337841e-05, 4.1011164285009727e-05, 4.0738716052146628e-05, 4.0941657061921433e-05, 5.6773798860376701e-05, 5.367186531657353e-05, 4.3135321902809665e-05, 4.4403146603144705e-05, 4.2602980101946741e-05, 4.1723971662577242e-05, 4.40102448919788e-05, 4.3545442167669535e-05, 4.1889346903190017e-05, 4.4160980905871838e-05, 7.1388007199857384e-05, 5.1655977586051449e-05, 4.3521602492546663e-05, 7.6801850809715688e-05, 4.6977824240457267e-05, 4.3919346353504807e-05, 4.464158701011911e-05, 4.5447432057699189e-05, 4.1929350118152797e-05, 4.3527663365239277e-05, } };
const TfArray<32, int> quant41_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const ALIGN(16) int8_t tensor_data42[2*1*1*32] = { 
  /* [0][0][][] */ -35,-36,-12,-19,95,-8,112,8,51,-63,-65,-61,113,-47,108,-13,-59,-5,81,5,89,-26,127,-55,-44,125,19,-69,-72,-89,20,32, 
  /* [1][0][][] */ 84,127,-93,-80,14,103,11,-51,69,-101,-86,60,-103,3,27,77,-86,97,96,76,-74,1,-55,49,107,-30,-79,-91,65,94,110,-111, 
};
const TfArray<4, int> tensor_dimension42 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant42_scale = { 2, { 0.0044165309518575668, 0.0034218668006360531, } };
const TfArray<2, int> quant42_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(8) int32_t tensor_data43[2] = { 27664, -34880, };
const TfArray<1, int> tensor_dimension43 = { 1, { 2 } };
const TfArray<2, float> quant43_scale = { 2, { 0.00018320041999686509, 0.0001419411419192329, } };
const TfArray<2, int> quant43_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.11113188415765762, } };
const TfArray<1, int> quant46_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.073150902986526489, } };
const TfArray<1, int> quant50_zero = { 1, { -15 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.069555647671222687, } };
const TfArray<1, int> quant53_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.091189242899417877, } };
const TfArray<1, int> quant54_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.050741642713546753, } };
const TfArray<1, int> quant58_zero = { 1, { -2 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.022359443828463554, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.049069453030824661, } };
const TfArray<1, int> quant61_zero = { 1, { -22 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.071973882615566254, } };
const TfArray<1, int> quant62_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023019686341285706, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.053020752966403961, } };
const TfArray<1, int> quant65_zero = { 1, { 21 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.08184698224067688, } };
const TfArray<1, int> quant66_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.041480615735054016, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant69_scale = { 1, { 0.10984339565038681, } };
const TfArray<1, int> quant69_zero = { 1, { -17 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,2,3 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,4,5 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,6,7 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,8,9 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,10,11 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,12,13 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,14,15 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,16,17 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,18,19 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,20,21 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,22,23 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,24,25 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,26,27 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,28,29 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,30,31 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,32,33 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,34,35 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,36,37 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,38,39 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,40,41 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,42,43 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 55296, (TfLiteIntArray*)&tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36912, (TfLiteIntArray*)&tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16128, (TfLiteIntArray*)&tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 288, (TfLiteIntArray*)&tensor_dimension69, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_ADD, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_ADD, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_ADD, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 27; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 27; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  70, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
