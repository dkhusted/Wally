/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 03.01.2023 08:58:04

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 73152;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[71];
TfLiteEvalTensor tflEvalTensors[71];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[27];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,48,48,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int8_t tensor_data2[16*3*3*1] = { 
  /* [0][0][][] */ -86, -110, -30, 
  /* [0][1][][] */ 66, -37, 16, 
  /* [0][2][][] */ 31, 127, 19, 
  /* [1][0][][] */ 105, -95, -11, 
  /* [1][1][][] */ -127, 104, 23, 
  /* [1][2][][] */ 14, -1, -13, 
  /* [2][0][][] */ -24, -2, -48, 
  /* [2][1][][] */ 36, 95, 127, 
  /* [2][2][][] */ -12, -94, -79, 
  /* [3][0][][] */ 120, 126, 58, 
  /* [3][1][][] */ 2, -21, -14, 
  /* [3][2][][] */ -101, -127, -43, 
  /* [4][0][][] */ 25, -59, -2, 
  /* [4][1][][] */ 20, -127, -1, 
  /* [4][2][][] */ 12, -86, -17, 
  /* [5][0][][] */ -64, 24, -7, 
  /* [5][1][][] */ -127, 28, -2, 
  /* [5][2][][] */ -87, 21, -5, 
  /* [6][0][][] */ -17, 79, 127, 
  /* [6][1][][] */ -51, 56, -16, 
  /* [6][2][][] */ -36, -52, -89, 
  /* [7][0][][] */ 44, 33, -10, 
  /* [7][1][][] */ 127, 75, -3, 
  /* [7][2][][] */ 29, 3, -25, 
  /* [8][0][][] */ -21, -31, 52, 
  /* [8][1][][] */ -54, -87, 127, 
  /* [8][2][][] */ -26, -61, 96, 
  /* [9][0][][] */ -21, 51, -10, 
  /* [9][1][][] */ -15, 127, -12, 
  /* [9][2][][] */ -6, 85, -7, 
  /* [10][0][][] */ 24, 87, 12, 
  /* [10][1][][] */ -37, -127, -29, 
  /* [10][2][][] */ 12, 40, 18, 
  /* [11][0][][] */ 7, -19, 10, 
  /* [11][1][][] */ 65, -93, 35, 
  /* [11][2][][] */ -84, 127, -46, 
  /* [12][0][][] */ -41, 49, -9, 
  /* [12][1][][] */ -127, 114, 6, 
  /* [12][2][][] */ -78, 79, 5, 
  /* [13][0][][] */ 79, 24, -9, 
  /* [13][1][][] */ 127, 107, -2, 
  /* [13][2][][] */ 62, 93, 36, 
  /* [14][0][][] */ -30, -28, 47, 
  /* [14][1][][] */ 44, 98, -127, 
  /* [14][2][][] */ -16, -70, 81, 
  /* [15][0][][] */ -86, -28, 21, 
  /* [15][1][][] */ -127, -119, 17, 
  /* [15][2][][] */ -14, -63, -4, 
};
const TfArray<4, int> tensor_dimension2 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant2_scale = { 16, { 0.038780558854341507, 0.2050478458404541, 0.045088324695825577, 0.02872297540307045, 0.0051201963797211647, 0.0066935243085026741, 0.024462230503559113, 0.0058132153935730457, 0.031607117503881454, 0.0086881322786211967, 0.094859883189201355, 0.17161113023757935, 0.060635786503553391, 0.0040717995725572109, 0.16119466722011566, 0.0093572959303855896, } };
const TfArray<16, int> quant2_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[16] = { 2057, 330, -42, 1021, 65582, 52973, 7083, 21039, 7120, 13558, 1684, -181, 7003, 16797, 96, 22005, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<16, float> quant3_scale = { 16, { 0.00015208062541205436, 0.00080410926602780819, 0.00017681697499938309, 0.00011263912892900407, 2.0079201931366697e-05, 2.6249115762766451e-05, 9.5930321549531072e-05, 2.2796924895374104e-05, 0.00012394948862493038, 3.4071108530042693e-05, 0.00037199957296252251, 0.00067298486828804016, 0.00023778741888236254, 1.5967842045938596e-05, 0.00063213601242750883, 3.6695280869025737e-05, } };
const TfArray<16, int> quant3_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[1*3*3*16] = { 
  /* [0][0][][] */ 4,-3,4,4,-16,11,10,16,-4,-10,2,-8,0,-8,2,0, 7,-6,2,3,15,-1,11,-27,-8,10,-2,84,-5,20,3,0, 2,-5,-5,3,1,-13,-2,11,1,3,-1,-8,4,-5,-1,0, 
  /* [0][1][][] */ 12,-12,3,1,127,-23,-127,-21,127,127,-1,-4,109,-26,-1,-18, -127,127,127,-3,-83,-90,-16,-102,18,-105,127,127,127,127,127,127, 20,-4,-6,-3,-11,127,3,-10,-3,-12,-4,-4,13,-4,-12,-8, 
  /* [0][2][][] */ 0,1,0,-13,-15,16,57,7,-10,-8,-1,0,-7,-1,-3,-11, 21,-14,-5,-127,9,-16,-8,127,-5,1,2,-12,-7,-59,-9,-37, 1,-1,-3,-4,2,-5,2,-2,-2,2,-2,3,4,-6,-6,-12, 
};
const TfArray<4, int> tensor_dimension4 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant4_scale = { 16, { 0.0044655511155724525, 0.0082248011603951454, 0.0065363375470042229, 0.0069470149464905262, 0.033227678388357162, 0.027833044528961182, 0.0066858190111815929, 0.02260577492415905, 0.010789192281663418, 0.036254271864891052, 0.01082063652575016, 0.0079175299033522606, 0.004205627366900444, 0.0092717884108424187, 0.0084777912124991417, 0.029425704851746559, } };
const TfArray<16, int> quant4_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 3 };
const ALIGN(16) int32_t tensor_data5[16] = { 22009, -615, 52, 3229, -1452, 405, 10201, 2290, 237, 269, -2642, 2963, 447, -333, -390, -960, };
const TfArray<1, int> tensor_dimension5 = { 1, { 16 } };
const TfArray<16, float> quant5_scale = { 16, { 0.00010507179104024544, 0.00019352474191691726, 0.00015379617980215698, 0.0001634591753827408, 0.00078182772267609835, 0.00065489514963701367, 0.00015731339226476848, 0.00053190061589702964, 0.00025386334164068103, 0.00085304171079769731, 0.00025460321921855211, 0.00018629482656251639, 9.895594121189788e-05, 0.00021815973741468042, 0.00019947745022363961, 0.00069236953277140856, } };
const TfArray<16, int> quant5_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[8*1*1*16] = { 
  /* [0][0][][] */ -12,-13,-15,-63,-23,-36,15,-20,38,6,-30,-5,112,127,-18,-101, 
  /* [1][0][][] */ 127,-60,-39,17,-45,70,-71,-44,-39,82,-34,-52,-8,5,-65,-18, 
  /* [2][0][][] */ -34,-96,40,43,47,-57,-78,-21,29,-86,26,-127,44,-23,-74,26, 
  /* [3][0][][] */ 37,15,15,16,-10,70,-51,-22,127,46,9,23,3,-13,13,21, 
  /* [4][0][][] */ -91,-40,-26,-127,-12,40,52,-119,30,-18,-48,-41,-124,32,-43,-25, 
  /* [5][0][][] */ 86,47,71,-23,43,-49,-127,-121,-19,-77,64,46,-60,48,63,-43, 
  /* [6][0][][] */ 104,40,-127,-72,28,-76,2,-90,-37,18,-121,92,93,-85,6,71, 
  /* [7][0][][] */ -127,0,100,-30,-62,5,-3,-61,-49,61,85,-28,62,-26,32,30, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant6_scale = { 8, { 0.0073642558418214321, 0.0096104489639401436, 0.0073636225424706936, 0.0099857347086071968, 0.0089736739173531532, 0.0067460024729371071, 0.0076115033589303493, 0.011439083144068718, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { -7203, -3099, 12199, -9969, 23308, 8524, -8763, 10882, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 0.00017327661043964326, 0.00022612822067458183, 0.00017326170927844942, 0.00023495846835430712, 0.00021114527771715075, 0.00015872946823947132, 0.00017909420421347022, 0.00026915490161627531, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[48*1*1*8] = { 
  /* [0][0][][] */ -41,30,4,-14,-83,-42,-127,30, 
  /* [1][0][][] */ 83,-72,-53,-51,127,-81,93,24, 
  /* [2][0][][] */ -106,122,-46,-127,52,-24,-26,38, 
  /* [3][0][][] */ 46,27,102,2,105,120,127,-15, 
  /* [4][0][][] */ -77,-127,68,4,-56,-117,-4,-31, 
  /* [5][0][][] */ 127,-23,75,62,-74,-7,0,-18, 
  /* [6][0][][] */ 24,36,127,-26,42,-35,-41,27, 
  /* [7][0][][] */ 31,7,-127,-36,-40,96,98,-78, 
  /* [8][0][][] */ -2,127,-29,22,53,102,42,61, 
  /* [9][0][][] */ -10,127,-79,94,17,-110,43,126, 
  /* [10][0][][] */ 3,-127,-2,-29,-77,-122,-56,-84, 
  /* [11][0][][] */ -127,-79,106,49,-7,-64,104,59, 
  /* [12][0][][] */ -27,47,-127,82,37,-52,-78,105, 
  /* [13][0][][] */ 89,-127,91,75,7,30,37,-59, 
  /* [14][0][][] */ -21,99,-32,-127,-31,-113,-30,-70, 
  /* [15][0][][] */ 39,112,32,-14,32,-67,102,-127, 
  /* [16][0][][] */ -120,-127,-62,89,-57,17,-21,72, 
  /* [17][0][][] */ -30,-114,-127,87,-66,74,-50,72, 
  /* [18][0][][] */ -93,-79,-51,86,-4,70,-6,127, 
  /* [19][0][][] */ 59,-127,96,-126,11,-61,32,-30, 
  /* [20][0][][] */ -5,77,30,13,45,127,78,-12, 
  /* [21][0][][] */ 28,111,45,-33,37,-68,92,-127, 
  /* [22][0][][] */ 20,12,110,18,-10,127,37,-40, 
  /* [23][0][][] */ -110,-66,34,-80,92,100,-62,-127, 
  /* [24][0][][] */ -91,-88,37,-86,108,99,-48,-127, 
  /* [25][0][][] */ 127,7,-58,-14,13,33,-63,-8, 
  /* [26][0][][] */ -124,-35,-127,-22,-52,-31,21,-3, 
  /* [27][0][][] */ 77,31,-6,-55,-127,-22,84,94, 
  /* [28][0][][] */ -127,-94,2,55,-73,-118,13,-2, 
  /* [29][0][][] */ 111,105,43,-127,26,15,-68,-87, 
  /* [30][0][][] */ -95,-69,43,-70,76,95,-54,-127, 
  /* [31][0][][] */ 47,40,-6,127,3,-71,9,9, 
  /* [32][0][][] */ -30,127,-6,29,26,64,-18,45, 
  /* [33][0][][] */ -34,127,-75,29,25,-36,-28,-2, 
  /* [34][0][][] */ -127,-102,-53,102,-5,11,18,108, 
  /* [35][0][][] */ -53,127,-29,-10,73,109,52,69, 
  /* [36][0][][] */ 72,21,6,-41,-127,-29,97,98, 
  /* [37][0][][] */ -69,114,27,21,-127,106,-22,-103, 
  /* [38][0][][] */ 32,41,31,28,127,79,103,61, 
  /* [39][0][][] */ -23,-69,34,-16,9,36,-96,127, 
  /* [40][0][][] */ -77,-70,-78,127,-34,-5,8,71, 
  /* [41][0][][] */ 127,14,55,103,-48,-10,-6,-15, 
  /* [42][0][][] */ -44,11,-75,-127,56,-112,7,87, 
  /* [43][0][][] */ 29,-5,93,-2,36,127,93,6, 
  /* [44][0][][] */ -30,-28,-74,127,50,11,-42,-38, 
  /* [45][0][][] */ 66,127,115,-115,46,-61,17,-116, 
  /* [46][0][][] */ -33,-127,-43,35,-12,37,-62,113, 
  /* [47][0][][] */ 38,44,123,-2,88,117,127,-28, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant8_scale = { 48, { 0.0046238424256443977, 0.0045914202928543091, 0.0027799333911389112, 0.0031947072129696608, 0.00067219993798062205, 0.0030194607097655535, 0.005175052210688591, 0.0021645992528647184, 0.0031543069053441286, 0.0053808721713721752, 0.0031795143149793148, 0.0032436177134513855, 0.0022364659234881401, 0.0037097299937158823, 0.0030727493576705456, 0.0032327189110219479, 0.0023918857332319021, 0.00084728840738534927, 0.0024347361177206039, 0.0034859513398259878, 0.00407743314281106, 0.00201216503046453, 0.004625353030860424, 0.0032062230166047812, 0.0049880282022058964, 0.0076693338342010975, 0.0031453343108296394, 0.0088820010423660278, 0.0025504734367132187, 0.00068026036024093628, 0.0032537260558456182, 0.0080539993941783905, 0.0039384877309203148, 0.0038742581382393837, 0.0031719889957457781, 0.0033810969907790422, 0.0042100413702428341, 0.0067340834066271782, 0.0040389858186244965, 0.0052834511734545231, 0.0031799052376300097, 0.0032410756684839725, 0.0033343890681862831, 0.0047894036397337914, 0.0044699236750602722, 0.0022845205385237932, 0.002830207347869873, 0.003427186980843544, } };
const TfArray<48, int> quant8_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[48] = { 1270, -470, -500, 1483, 17330, 2485, -538, 4774, 1560, 1436, 256, 3250, 1201, 636, -946, 547, 3647, 12762, 3725, -941, 1244, -1388, -91, 2759, -311, -861, 2013, -67, 3555, 16637, 2693, -55, 576, -145, 2623, 77, 636, -237, 1225, 1261, 2036, 2262, 212, -268, 725, 2572, 1454, -161, };
const TfArray<1, int> tensor_dimension9 = { 1, { 48 } };
const TfArray<48, float> quant9_scale = { 48, { 0.000400490069296211, 0.00039768184069544077, 0.00024078148999251425, 0.00027670676354318857, 5.8222009101882577e-05, 0.00026152795180678368, 0.00044823260395787656, 0.000187484867637977, 0.00027320752269588411, 0.0004660595441237092, 0.00027539086295291781, 0.00028094311710447073, 0.0001937095366884023, 0.00032131501939147711, 0.00026614349917508662, 0.00027999910525977612, 0.00020717109146062285, 7.3387142037972808e-05, 0.00021088254288770258, 0.00030193262500688434, 0.00035316331195645034, 0.00017428191495127976, 0.00040062089101411402, 0.00027770421002060175, 0.00043203370296396315, 0.00066427263664081693, 0.00027243036311119795, 0.00076930673094466329, 0.00022090702259447426, 5.8920155424857512e-05, 0.00028181864763610065, 0.00069759011967107654, 0.00034112867433577776, 0.00033556547714397311, 0.00027473905356600881, 0.00029285074560903013, 0.00036464905133470893, 0.00058326672296971083, 0.00034983322257176042, 0.00045762149966321886, 0.000275424710707739, 0.00028072291752323508, 0.00028880519676022232, 0.00041482999222353101, 0.00038715853588655591, 0.00019787174824159592, 0.00024513591779395938, 0.00029684280161745846, } };
const TfArray<48, int> quant9_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[1*3*3*48] = { 
  /* [0][0][][] */ -43,-104,-17,-21,127,-61,71,-65,-81,-82,-24,-55,117,30,62,-127,61,-21,4,-43,-63,104,-11,14,-34,75,58,-39,80,-67,15,-40,-96,-82,46,75,21,74,109,-65,-127,-20,29,71,48,-127,86,75, -61,-127,-78,47,-84,114,53,-61,-67,45,72,-115,127,88,105,-83,-86,-76,32,-51,-73,97,-70,120,-88,102,88,-125,95,-47,9,-127,-64,-91,76,122,113,110,127,-71,-126,-56,59,92,88,116,88,66, 0,-61,-74,94,-40,-23,39,-5,91,25,54,-76,23,54,-39,-15,-88,-15,28,-31,-35,31,-73,-6,-76,45,22,-92,34,57,127,-70,8,11,-9,46,82,58,49,-3,-20,97,55,32,39,35,14,-119, 
  /* [0][1][][] */ -126,-103,-20,-85,-81,-82,106,-121,-127,-127,76,-83,91,48,-125,-70,127,-127,-61,-83,-102,121,-45,9,-29,91,99,-42,-106,-78,1,-51,-83,-127,-127,76,35,87,5,-87,62,-20,70,119,87,114,123,-127, -127,-124,-127,-113,-24,127,127,-127,103,61,127,-127,103,127,67,-106,51,-95,-127,-127,-127,127,-127,127,-127,127,127,-127,-127,127,-10,-118,-127,-112,44,127,127,127,-16,-127,106,-91,127,127,127,-6,127,95, -51,-58,-126,127,82,-40,51,-28,79,29,21,-59,17,66,81,-49,-27,4,-20,-68,-67,15,-67,-18,-126,53,31,-85,-58,35,125,-85,-54,4,58,76,83,68,-29,-29,45,127,73,19,57,-47,16,12, 
  /* [0][2][][] */ -116,-35,20,24,-37,-30,25,-52,33,-47,16,-51,0,26,-45,-15,-87,-19,87,-37,-18,44,-63,-14,-19,48,78,-8,35,56,-7,-6,6,-82,-41,37,11,6,-56,-38,14,-7,40,45,26,57,13,-67, -97,-44,-27,-66,100,35,52,-67,105,17,-32,-71,0,51,-127,-71,33,11,42,-70,-31,43,-55,51,-61,55,78,-27,35,3,-24,-32,-61,-29,-65,48,26,11,-97,-66,19,-36,86,75,46,-111,23,9, -43,-35,-48,-9,-17,-15,19,-30,-69,14,-11,-26,-1,19,38,-26,26,39,-6,-58,-32,-6,-7,-30,-64,3,25,-24,4,-64,49,-29,-82,13,21,41,18,13,-54,-31,-2,44,28,18,19,-2,4,30, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.0033988023642450571, 0.0035057661589235067, 0.0072206929326057434, 0.0068149897269904613, 0.031118493527173996, 0.0064979600720107555, 0.007716981228441, 0.0042074378579854965, 0.0046411575749516487, 0.0031050359830260277, 0.0030716960318386555, 0.0023123398423194885, 0.0035053114406764507, 0.0027272338047623634, 0.0096443509683012962, 0.0079829655587673187, 0.0050088544376194477, 0.01491161435842514, 0.0053162728436291218, 0.0060797925107181072, 0.0048568327911198139, 0.017947884276509285, 0.0061546852812170982, 0.0099152261391282082, 0.006506278645247221, 0.0036115546245127916, 0.0025875205174088478, 0.0034625248517841101, 0.0072204470634460449, 0.030793661251664162, 0.0092746224254369736, 0.0034016713034361601, 0.0046529201790690422, 0.006007293239235878, 0.0063933045603334904, 0.0026385914534330368, 0.0035480535589158535, 0.0026327443774789572, 0.0052884370088577271, 0.0031975624151527882, 0.0061709112487733364, 0.0063003543764352798, 0.0029481076635420322, 0.0033909841440618038, 0.0033594910055398941, 0.012484930455684662, 0.0031360320281237364, 0.0090118395164608955, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 3 };
const ALIGN(16) int32_t tensor_data11[48] = { 13518, 6231, 4725, 414, -843, -1129, -946, 33038, -1810, 1950, 6965, 59587, 2121, 3276, 33, 11288, -200, 12468, 1864, 7550, 11776, -129, 4036, -8996, 10241, 1491, 543, 14418, 93, -1050, -9503, 10834, 5120, 1748, -201, 4470, -9258, 5961, -883, 17024, -1164, -1076, 5812, 1682, 518, -1354, 1151, 75, };
const TfArray<1, int> tensor_dimension11 = { 1, { 48 } };
const TfArray<48, float> quant11_scale = { 48, { 7.9971825471147895e-05, 8.2488615589682013e-05, 0.00016989865980576724, 0.00016035270527936518, 0.00073219987098127604, 0.00015289317525457591, 0.00018157603335566819, 9.8998541943728924e-05, 0.00010920371278189123, 7.3059673013631254e-05, 7.227520109154284e-05, 5.440799577627331e-05, 8.2477919931989163e-05, 6.4170206314884126e-05, 0.00022692591301165521, 0.00018783449195325375, 0.00011785540118580684, 0.00035086151910945773, 0.00012508877262007445, 0.00014305394142866135, 0.00011427842400735244, 0.00042230315739288926, 0.00014481612015515566, 0.0002332994481548667, 0.00015308891306631267, 8.4977757069282234e-05, 6.0882837715325877e-05, 8.1471174780745059e-05, 0.00016989286814350635, 0.00072455673944205046, 0.0002182264142902568, 8.0039324529934675e-05, 0.00010948047565761954, 0.00014134807861410081, 0.00015043070015963167, 6.2084509409032762e-05, 8.3483617345336825e-05, 6.1946928326506168e-05, 0.00012443382001947612, 7.5236763223074377e-05, 0.00014519791875500232, 0.0001482436346122995, 6.9367240939754993e-05, 7.9787860158830881e-05, 7.9046847531571984e-05, 0.00029376306338235736, 7.3788993177004158e-05, 0.00021204329095780849, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int8_t tensor_data12[8*1*1*48] = { 
  /* [0][0][][] */ -41,-4,31,13,-31,-15,7,6,-39,-6,-63,-57,-25,-63,-11,-32,45,-41,38,41,-15,30,-39,14,0,-40,55,-14,-5,-18,19,8,81,35,36,-127,18,-2,-18,-32,1,-17,43,45,36,3,25,1, 
  /* [1][0][][] */ 2,38,64,-25,-13,44,-48,-29,0,23,-14,-90,9,88,-17,61,-13,18,-25,-55,8,-78,-26,21,-67,-13,-2,-112,-26,-16,29,-49,46,76,-43,4,127,-27,5,44,-28,40,-79,-27,110,-20,-29,-25, 
  /* [2][0][][] */ -2,-21,-65,15,-5,45,28,6,-9,46,-2,28,65,-94,19,-62,37,-89,20,32,-25,53,-4,25,-15,62,-25,-70,14,2,19,-73,-47,-86,33,-28,106,23,-9,-58,0,27,83,28,127,17,19,22, 
  /* [3][0][][] */ -7,25,-70,42,16,-39,-70,-104,15,-20,-35,2,3,25,35,80,-10,13,-35,22,4,-104,27,-58,-79,-8,127,-13,-42,2,-64,17,-1,-79,10,-12,-23,-42,-25,103,-47,-38,1,18,40,4,-42,40, 
  /* [4][0][][] */ -27,-47,-7,10,32,-24,-11,-9,26,-28,58,-79,6,31,8,10,-15,-25,11,-17,-5,-52,3,-19,16,-12,41,46,33,20,-14,25,-12,-1,1,0,-67,86,37,-25,28,-20,-19,-22,-75,12,127,11, 
  /* [5][0][][] */ 41,-21,-1,17,26,-40,31,-127,25,-25,-8,115,-79,67,25,-67,1,-90,14,-1,-33,61,-38,-47,-63,78,-24,0,-22,49,-38,-35,26,53,31,-7,-39,-10,-46,-38,18,-37,-44,-7,-33,54,87,20, 
  /* [6][0][][] */ 55,-22,22,-11,-35,-20,-36,20,-41,3,-39,127,-41,-35,-2,57,13,44,17,35,36,-82,-20,19,22,39,-62,5,11,-41,13,36,3,13,-14,-1,14,3,-2,-7,-7,-13,43,58,-2,-37,75,-14, 
  /* [7][0][][] */ -27,8,-6,68,33,32,6,34,22,4,74,-6,122,110,60,48,44,45,-14,0,24,-23,-89,-24,14,-1,-31,65,33,-26,-33,-18,38,11,38,-96,-76,37,42,56,-33,37,84,127,-62,-29,-111,60, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant12_scale = { 8, { 0.010015097446739674, 0.0051942993886768818, 0.0062294616363942623, 0.0060951481573283672, 0.0079167243093252182, 0.0066590094938874245, 0.0086123868823051453, 0.0065437685698270798, } };
const TfArray<8, int> quant12_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int32_t tensor_data13[8] = { 7914, 14409, -5277, 8045, -751, 4362, -12399, -18381, };
const TfArray<1, int> tensor_dimension13 = { 1, { 8 } };
const TfArray<8, float> quant13_scale = { 8, { 0.00023564934963360429, 0.00012221881479490548, 0.00014657557767350227, 0.00014341525093186647, 0.00018627586541697383, 0.00015668258129153401, 0.00020264439808670431, 0.00015397102106362581, } };
const TfArray<8, int> quant13_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int8_t tensor_data14[48*1*1*8] = { 
  /* [0][0][][] */ 54,127,-66,-74,7,81,10,70, 
  /* [1][0][][] */ 59,-74,42,-127,-63,70,-96,-44, 
  /* [2][0][][] */ -37,127,124,44,106,4,57,12, 
  /* [3][0][][] */ 104,42,-95,61,-7,-99,-127,-33, 
  /* [4][0][][] */ -36,30,9,-70,-34,99,127,54, 
  /* [5][0][][] */ 20,83,-127,-72,54,96,36,-27, 
  /* [6][0][][] */ -10,127,75,67,81,2,15,-89, 
  /* [7][0][][] */ 127,-14,-42,24,24,12,103,11, 
  /* [8][0][][] */ 62,127,56,87,123,80,102,-87, 
  /* [9][0][][] */ 59,113,-127,-92,20,89,5,68, 
  /* [10][0][][] */ -62,-47,21,-52,-3,-30,-46,127, 
  /* [11][0][][] */ 16,-107,-127,-19,22,-14,40,-9, 
  /* [12][0][][] */ -25,-120,-112,-28,-127,28,-55,31, 
  /* [13][0][][] */ -6,9,-108,106,-127,-23,5,-20, 
  /* [14][0][][] */ -59,-45,-127,-7,35,-1,-15,-63, 
  /* [15][0][][] */ 15,-106,-127,13,-112,-24,-31,-5, 
  /* [16][0][][] */ 127,-62,-14,72,-86,24,29,106, 
  /* [17][0][][] */ -25,123,127,-24,-55,-12,-30,-22, 
  /* [18][0][][] */ 8,-127,45,70,-3,-59,60,-84, 
  /* [19][0][][] */ 127,-50,-65,36,-99,10,47,103, 
  /* [20][0][][] */ -31,-127,85,78,-13,-86,1,-77, 
  /* [21][0][][] */ -9,-49,-7,-30,127,-5,47,22, 
  /* [22][0][][] */ -127,30,-82,48,44,51,-93,-106, 
  /* [23][0][][] */ -91,-39,72,9,-106,127,118,-51, 
  /* [24][0][][] */ -23,67,-9,-42,-43,127,118,7, 
  /* [25][0][][] */ -42,-104,-127,-59,-42,-19,-27,-41, 
  /* [26][0][][] */ -19,66,-5,127,-79,36,-41,4, 
  /* [27][0][][] */ 12,-127,37,79,20,-56,8,-122, 
  /* [28][0][][] */ 18,127,59,44,105,-25,16,-61, 
  /* [29][0][][] */ 102,17,-52,-17,79,-127,-94,25, 
  /* [30][0][][] */ 27,-6,32,-127,20,-22,18,-18, 
  /* [31][0][][] */ 46,-30,0,61,-11,25,7,127, 
  /* [32][0][][] */ -91,-61,17,-55,-69,127,60,98, 
  /* [33][0][][] */ -28,44,41,-47,35,127,-116,67, 
  /* [34][0][][] */ 35,127,-76,-51,23,48,-65,65, 
  /* [35][0][][] */ 10,-127,41,66,-22,-70,36,-78, 
  /* [36][0][][] */ -18,-25,-71,-5,-127,-55,-19,13, 
  /* [37][0][][] */ -53,-127,67,76,-41,-88,-4,-47, 
  /* [38][0][][] */ -76,25,64,-74,-127,-88,-59,88, 
  /* [39][0][][] */ 65,-127,101,67,-22,-87,-30,-98, 
  /* [40][0][][] */ 1,58,14,38,-127,-13,-59,17, 
  /* [41][0][][] */ 100,127,-77,-113,61,25,-4,21, 
  /* [42][0][][] */ -14,-34,-12,15,127,14,45,24, 
  /* [43][0][][] */ 127,31,91,25,-73,-19,67,121, 
  /* [44][0][][] */ 62,51,-26,15,84,-113,-127,28, 
  /* [45][0][][] */ 50,18,23,22,86,-127,1,-53, 
  /* [46][0][][] */ 56,-36,-8,127,34,55,19,70, 
  /* [47][0][][] */ -77,-96,40,62,-58,9,127,-79, 
};
const TfArray<4, int> tensor_dimension14 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant14_scale = { 48, { 0.0030133307445794344, 0.0022312176879495382, 0.00092336087254807353, 0.0023965160362422466, 0.0031664792913943529, 0.0034546633251011372, 0.00188591075129807, 0.0011431684251874685, 0.0020953260827809572, 0.0029452876187860966, 0.0035659894347190857, 0.0034145805984735489, 0.0007824174826964736, 0.0035915204789489508, 0.0036125748883932829, 0.00077446032082661986, 0.0041688117198646069, 0.0032319917809218168, 0.0036806175485253334, 0.0027150225359946489, 0.0024960162118077278, 0.0031603502575308084, 0.0050759380683302879, 0.00051074201473966241, 0.0021145374048501253, 0.0022579978685826063, 0.0010384572669863701, 0.0033496841788291931, 0.0019182390533387661, 0.0019576509948819876, 0.0070272218436002731, 0.0056336112320423126, 0.003122835885733366, 0.0035350145772099495, 0.0034786115866154432, 0.0036416174843907356, 0.003030944149941206, 0.0036297962069511414, 0.0037644554395228624, 0.0026488315779715776, 0.0026286346837878227, 0.0029687839560210705, 0.0032012099400162697, 0.0024558284785598516, 0.0021194014698266983, 0.0031200551893562078, 0.0051527861505746841, 0.0018228332046419382, } };
const TfArray<48, int> quant14_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int32_t tensor_data15[48] = { 2984, 5751, 16164, 1963, 2390, -1796, 6560, 12961, 3947, -1080, 3585, -2130, 18838, -1889, 2071, 20997, -441, 2110, 91, 3684, 4344, 3699, 607, 33823, 5937, 4042, 15658, 1764, 6283, 6072, 637, 1216, 1102, 1671, -239, 341, -2843, -680, 2352, 3172, 4857, 2561, 3770, 4957, 5289, 3421, 2032, 6750, };
const TfArray<1, int> tensor_dimension15 = { 1, { 48 } };
const TfArray<48, float> quant15_scale = { 48, { 0.00019481121853459626, 0.00014424776600208133, 5.9695092204492539e-05, 0.00015493427054025233, 0.00020471223979257047, 0.00022334328969009221, 0.00012192374560981989, 7.3905604949686676e-05, 0.00013546241098083556, 0.00019041224732063711, 0.00023054049233905971, 0.00022075194283388555, 5.0583133997861296e-05, 0.00023219107242766768, 0.00023355222947429866, 5.0068701966665685e-05, 0.00026951284962706268, 0.00020894761837553233, 0.00023795118613634259, 0.00017552565259393305, 0.00016136694466695189, 0.00020431600569281727, 0.00032815837766975164, 3.3019368856912479e-05, 0.00013670441694557667, 0.00014597910922020674, 6.7136053985450417e-05, 0.00021655640739481896, 0.00012401376443449408, 0.0001265617465833202, 0.00045430846512317657, 0.00036421182448975742, 0.00020189071074128151, 0.00022853797418065369, 0.0002248915407108143, 0.00023542983399238437, 0.0001959499204531312, 0.000234665596508421, 0.00024337127979379147, 0.00017124642909038812, 0.00016994070028886199, 0.00019193127809558064, 0.00020695757120847702, 0.00015876881661824882, 0.00013701888383366168, 0.00020171093638055027, 0.00033312657615169883, 0.00011784579692175612, } };
const TfArray<48, int> quant15_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int8_t tensor_data16[1*3*3*48] = { 
  /* [0][0][][] */ 6,-51,7,4,-19,-90,-35,61,-34,-5,-8,10,48,1,-14,3,92,14,31,6,-3,-21,-75,21,-3,-15,-5,-27,-61,72,-12,-121,55,2,-50,-60,-6,-28,7,-17,-13,47,15,5,-15,66,127,-18, -127,-101,-26,127,-62,80,-88,127,30,17,10,-3,54,23,-2,-45,-38,54,31,3,10,127,6,127,127,-35,-50,40,71,-118,-4,-69,74,4,-30,-127,28,15,-62,-61,-123,-6,-86,-122,34,54,50,115, -19,-10,9,8,-22,27,38,47,12,-33,2,5,-19,1,2,4,-62,29,-65,-31,-3,-23,127,21,-54,-2,6,12,22,42,12,20,0,-9,-31,72,9,7,17,65,28,-30,33,-32,-5,36,-32,-14, 
  /* [0][1][][] */ -12,-22,-29,-3,32,-106,127,-66,-14,5,30,38,127,18,2,-32,-23,-24,36,49,63,-57,46,13,-66,127,-77,-15,127,-100,38,-127,-38,5,-83,10,11,-61,-41,8,116,127,16,-127,-68,-56,-3,85, 98,-127,127,0,127,86,-63,-54,34,127,127,-127,-97,127,127,127,127,127,127,127,127,119,4,4,113,-105,-127,120,42,127,127,-6,-127,127,127,114,-127,127,-127,-126,33,46,-127,-32,127,-127,-11,75, 16,25,-42,-7,-48,127,-112,83,115,-73,15,63,-38,10,14,-65,21,2,-127,20,24,-104,-38,-4,67,-14,-28,127,-70,-38,24,-35,-27,17,91,-28,41,0,-4,-83,107,-2,37,54,-59,103,106,-88, 
  /* [0][2][][] */ -2,24,5,-34,-1,-61,-9,1,2,2,4,6,-12,-6,0,0,-51,22,14,-40,1,-15,93,-8,-101,0,48,-16,8,0,4,29,-13,-15,-72,26,0,-13,21,49,-35,-14,6,4,-18,23,-11,15, 44,-26,-36,-36,26,48,113,-90,127,-29,-10,8,-73,-20,-25,-70,-14,109,12,23,13,35,-21,-33,-66,58,82,0,-98,17,-29,-11,-27,-9,-43,-4,56,-26,1,127,-127,-1,-16,62,31,61,13,-127, -8,25,3,-23,-20,-3,-9,-38,-21,-23,-13,4,18,-11,-16,13,54,40,-23,-15,-1,-13,-49,-16,27,-21,21,-10,-16,3,-8,13,24,-22,-29,-58,-5,9,28,17,-17,-15,2,22,-20,15,71,-43, 
};
const TfArray<4, int> tensor_dimension16 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.010743663646280766, 0.0067517571151256561, 0.02875734306871891, 0.010105252265930176, 0.0093079740181565285, 0.010498465970158577, 0.0096005052328109741, 0.010443900711834431, 0.0041249589994549751, 0.013000459410250187, 0.0099497381597757339, 0.04846419021487236, 0.014637229032814503, 0.026008609682321548, 0.016339667141437531, 0.02185683511197567, 0.0073777749203145504, 0.0030515778344124556, 0.00842265784740448, 0.012377913109958172, 0.010929059237241745, 0.009982183575630188, 0.003700275206938386, 0.015648113563656807, 0.0063871028833091259, 0.01331213116645813, 0.018428603187203407, 0.0078314635902643204, 0.0085348617285490036, 0.017133409157395363, 0.0062297945842146873, 0.0051271342672407627, 0.0053984210826456547, 0.0087957670912146568, 0.0062143513932824135, 0.011160018853843212, 0.070325650274753571, 0.01539306528866291, 0.0066289547830820084, 0.0076494808308780193, 0.0065298550762236118, 0.0059319250285625458, 0.012444273568689823, 0.0081493351608514786, 0.014557233080267906, 0.0032250338699668646, 0.0027069165371358395, 0.0063549308106303215, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 3 };
const ALIGN(16) int32_t tensor_data17[48] = { 26, 11533, -23, -305, 263, -1569, 1075, -2949, -4508, -67, -6246, -115, -260, -989, -2365, 4434, 6782, 1199, -499, -4165, -7042, -1446, 17465, -4253, -2425, -251, 5587, -7358, -1108, -8, -8114, 9228, 5403, -235, 3870, 470, -14, -697, 9800, 927, 7849, -2634, 2401, 4390, -707, 10747, -114, 327, };
const TfArray<1, int> tensor_dimension17 = { 1, { 48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.00025279208784922957, 0.00015886487381067127, 0.00067664339439943433, 0.00023777064052410424, 0.00021901115542277694, 0.00024702271912246943, 0.00022589424042962492, 0.00024573883274570107, 9.705786214908585e-05, 0.00030589316156692803, 0.00023411148868035525, 0.0011403339449316263, 0.00034440538729541004, 0.00061196729075163603, 0.00038446276448667049, 0.00051427847938612103, 0.00017359470075462013, 7.180183456512168e-05, 0.00019818019063677639, 0.00029124502907507122, 0.00025715434458106756, 0.00023487491125706583, 8.70653020683676e-05, 0.00036819090018980205, 0.00015028477355372161, 0.00031322662835009396, 0.00043361421558074653, 0.00018426973838359118, 0.00020082028640899807, 0.00040313904173672199, 0.00014658340660389513, 0.000120638454973232, 0.00012702167441602796, 0.00020695923012681305, 0.00014622003072872758, 0.00026258867001160979, 0.0016547212144359946, 0.00036218977766111493, 0.00015597541641909629, 0.00017998779367189854, 0.00015364364662673324, 0.00013957470946479589, 0.00029280644957907498, 0.00019174907356500626, 0.00034252312616445124, 7.5883152021560818e-05, 6.3692154071759433e-05, 0.00014952778292354196, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const ALIGN(16) int8_t tensor_data18[8*1*1*48] = { 
  /* [0][0][][] */ -50,-46,-16,-67,1,-8,94,85,-103,-88,-38,15,-62,-5,-64,33,-91,13,16,127,64,-34,18,95,70,75,22,6,-88,-65,-84,-60,-55,102,28,-46,35,-27,92,-5,28,9,3,-112,35,-33,-36,-90, 
  /* [1][0][][] */ -11,52,-19,-23,-68,60,-21,-43,-28,68,-18,15,59,43,-48,4,-17,-117,80,-48,127,14,-67,24,59,-3,-79,62,36,-12,71,30,-29,-18,3,-15,-2,106,-12,-28,62,36,-9,7,105,17,-28,61, 
  /* [2][0][][] */ -27,-38,120,8,90,-45,-14,25,-36,-2,-11,47,10,-41,-47,-127,-52,-104,-24,20,-100,23,-43,-33,-48,15,-2,-53,-40,8,-30,-13,-1,-7,23,-8,28,-32,-52,8,33,-34,32,-50,-46,-49,-68,-49, 
  /* [3][0][][] */ 52,19,61,10,19,-39,38,71,-53,-25,41,-30,-72,56,-18,48,71,39,-39,30,-108,-62,127,-7,5,1,-55,-34,-54,61,107,-67,6,-112,-27,41,-9,-76,-12,74,-78,-56,62,-7,-98,-65,61,-11, 
  /* [4][0][][] */ 19,-19,68,-28,5,-13,-4,-7,-62,-4,-21,3,41,-72,37,-97,43,48,-13,-35,7,34,18,6,-2,3,54,-19,22,21,-127,-13,-23,-18,1,11,47,-6,30,1,-38,-12,-64,27,-16,-95,0,17, 
  /* [5][0][][] */ 27,-48,55,29,31,14,27,0,-72,-6,-48,23,32,6,10,-45,92,73,-9,-17,80,-55,127,-85,-17,39,8,42,8,13,-35,-45,-14,-44,-39,5,42,26,68,3,-74,25,28,29,46,-17,74,-6, 
  /* [6][0][][] */ -50,51,-122,80,50,29,44,23,-18,-9,66,-80,-95,-20,-26,35,-114,31,-3,95,27,47,-91,-84,-1,-27,30,82,-25,-38,-40,6,35,76,-40,-21,-12,-6,80,10,76,64,-127,-57,-38,108,-53,-31, 
  /* [7][0][][] */ 33,74,-80,18,16,58,119,66,41,80,-87,3,-46,0,-70,-47,32,40,108,98,80,11,127,24,100,92,-47,92,-66,40,-3,-72,22,-60,-25,19,1,92,-59,85,-61,52,-4,-76,82,-24,50,-38, 
};
const TfArray<4, int> tensor_dimension18 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant18_scale = { 8, { 0.0041187475435435772, 0.0043856692500412464, 0.0059537412598729134, 0.0043242238461971283, 0.0054452540352940559, 0.0058572492562234402, 0.003421231172978878, 0.0036257959436625242, } };
const TfArray<8, int> quant18_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int32_t tensor_data19[8] = { 3631, -1013, 24315, -4816, 5307, -14884, 2275, -15374, };
const TfArray<1, int> tensor_dimension19 = { 1, { 8 } };
const TfArray<8, float> quant19_scale = { 8, { 9.6911709988489747e-05, 0.0001031922220136039, 0.00014008802827447653, 0.00010174644557991996, 0.00012812363274861127, 0.00013781763846054673, 8.0499557952862233e-05, 8.5312844021245837e-05, } };
const TfArray<8, int> quant19_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int8_t tensor_data20[48*1*1*8] = { 
  /* [0][0][][] */ 59,24,127,-33,62,105,-66,-47, 
  /* [1][0][][] */ 12,-84,-127,0,47,20,24,-4, 
  /* [2][0][][] */ -127,-11,-44,-20,51,26,-75,-43, 
  /* [3][0][][] */ 40,68,127,-81,-14,-112,-9,-19, 
  /* [4][0][][] */ -127,18,-48,-29,42,9,-45,-62, 
  /* [5][0][][] */ -100,27,-56,-8,13,35,-84,-127, 
  /* [6][0][][] */ -42,-127,-116,46,99,10,1,50, 
  /* [7][0][][] */ -67,-127,-93,-80,-74,-64,22,92, 
  /* [8][0][][] */ 90,32,-6,-7,97,-82,-127,13, 
  /* [9][0][][] */ -35,53,-55,85,-56,-41,127,-26, 
  /* [10][0][][] */ -24,122,38,63,127,-21,-5,55, 
  /* [11][0][][] */ -79,-31,-20,-8,-77,102,127,-3, 
  /* [12][0][][] */ 70,37,-127,42,-12,-34,-71,-14, 
  /* [13][0][][] */ 61,-33,-69,5,9,-127,-31,-22, 
  /* [14][0][][] */ 3,-83,78,14,127,-114,-60,25, 
  /* [15][0][][] */ -45,-50,-2,127,60,83,-80,29, 
  /* [16][0][][] */ 115,31,-33,18,77,-102,-127,-24, 
  /* [17][0][][] */ 57,127,58,75,47,69,28,-84, 
  /* [18][0][][] */ 28,-8,7,5,127,8,26,-7, 
  /* [19][0][][] */ 13,127,28,10,-118,15,23,-30, 
  /* [20][0][][] */ -42,16,63,-127,17,37,-20,107, 
  /* [21][0][][] */ -37,65,37,-127,35,46,-7,106, 
  /* [22][0][][] */ -67,-74,-97,21,-127,126,120,-29, 
  /* [23][0][][] */ 96,37,-127,19,9,-44,-78,-18, 
  /* [24][0][][] */ -56,48,1,5,-21,67,-127,96, 
  /* [25][0][][] */ -109,-56,-127,15,-54,-66,73,103, 
  /* [26][0][][] */ 53,-9,-42,-38,110,-19,127,-45, 
  /* [27][0][][] */ 127,-67,27,92,1,30,-21,101, 
  /* [28][0][][] */ 37,63,51,-17,127,-63,49,-33, 
  /* [29][0][][] */ -12,-7,-31,-42,-63,9,127,-32, 
  /* [30][0][][] */ 46,-127,-59,-74,-115,-1,10,-59, 
  /* [31][0][][] */ 5,25,-9,-15,-127,7,-24,-14, 
  /* [32][0][][] */ 48,-60,-61,78,-11,-84,109,-127, 
  /* [33][0][][] */ 58,127,49,33,63,-23,-24,-22, 
  /* [34][0][][] */ -124,-38,127,-8,-24,108,100,15, 
  /* [35][0][][] */ -32,77,127,-15,-66,-74,-40,29, 
  /* [36][0][][] */ -98,1,98,-24,-16,127,80,22, 
  /* [37][0][][] */ -22,-80,-2,-127,-39,-82,76,46, 
  /* [38][0][][] */ 46,-11,91,-54,56,62,-127,11, 
  /* [39][0][][] */ -19,98,-127,-38,-19,5,4,90, 
  /* [40][0][][] */ 60,-49,21,33,10,3,8,127, 
  /* [41][0][][] */ -34,101,127,-5,16,86,-82,28, 
  /* [42][0][][] */ 57,-127,-106,-26,-114,13,20,-87, 
  /* [43][0][][] */ -15,-84,26,-74,127,-48,13,38, 
  /* [44][0][][] */ 0,127,111,29,-1,54,-78,12, 
  /* [45][0][][] */ -37,45,18,89,-115,65,-127,21, 
  /* [46][0][][] */ -42,-39,57,42,-127,-119,-27,-3, 
  /* [47][0][][] */ -15,62,39,-107,-127,30,-21,58, 
};
const TfArray<4, int> tensor_dimension20 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant20_scale = { 48, { 0.0026245566550642252, 0.0040822834707796574, 0.0032493865583091974, 0.0029189230408519506, 0.0023531331680715084, 0.0024230747949331999, 0.0024816950317472219, 0.0016939816996455193, 0.0029043806716799736, 0.0037841214798390865, 0.0020491881296038628, 0.0021516580600291491, 0.0032267267815768719, 0.0031506172381341457, 0.0029298579320311546, 0.0018965061753988266, 0.0025878960732370615, 0.0024057142436504364, 0.0018008395563811064, 0.0037315825466066599, 0.0034949516411870718, 0.0026736275758594275, 0.0023531801998615265, 0.0018475709948688745, 0.0025666514411568642, 0.0026763747446238995, 0.0032062607351690531, 0.0032158340327441692, 0.0013378165895119309, 0.0036021939013153315, 0.0018603606149554253, 0.0019540258217602968, 0.0023957346566021442, 0.0021996384020894766, 0.0023163142614066601, 0.0035505353007465601, 0.002378435805439949, 0.0029915161430835724, 0.002663369057700038, 0.0020395878236740828, 0.0033150648232549429, 0.0012082413304597139, 0.0015356657095253468, 0.0032664586324244738, 0.0015795909566804767, 0.0028916099108755589, 0.0025891654659062624, 0.0029214620590209961, } };
const TfArray<48, int> quant20_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int32_t tensor_data21[48] = { 2293, -1044, 1012, -2015, 4313, -726, 3972, -4588, 1409, 598, 2874, 4734, 632, -449, 921, 5609, -2261, 4329, 6647, 887, -930, 2712, -1001, 5821, 2404, 1971, 1422, -841, 8880, -359, 3284, -2282, -781, 4895, -1387, 1936, 2591, 972, 520, 5200, 2082, 9705, -4688, 1668, 6997, 222, 2752, 2636, };
const TfArray<1, int> tensor_dimension21 = { 1, { 48 } };
const TfArray<48, float> quant21_scale = { 48, { 0.00019725361198652536, 0.00030681188218295574, 0.00024421390844509006, 0.00021937728160992265, 0.00017685425700619817, 0.00018211085989605635, 0.00018651656864676625, 0.0001273144589504227, 0.0002182843309128657, 0.00028440295136533678, 0.00015401068958453834, 0.00016171201423276216, 0.00024251086870208383, 0.00023679071455262601, 0.00022019911557435989, 0.00014253557310439646, 0.00019449832325335592, 0.0001808060915209353, 0.000135345573653467, 0.00028045428916811943, 0.00026266981149092317, 0.00020094163483008742, 0.00017685779312159866, 0.00013885776570532471, 0.0001929016289068386, 0.00020114809740334749, 0.00024097270215861499, 0.00024169220705516636, 0.00010054618178401142, 0.000270729826297611, 0.00013981899246573448, 0.00014685858332086354, 0.00018005605670623481, 0.00016531806613784283, 0.00017408706480637193, 0.00026684731710702181, 0.0001787559303920716, 0.00022483315842691809, 0.00020017063070554286, 0.000153289147419855, 0.00024915009271353483, 9.0807705419138074e-05, 0.00011541591811692342, 0.00024549697991460562, 0.0001187172019854188, 0.00021732451568823308, 0.00019459372560959309, 0.00021956811542622745, } };
const TfArray<48, int> quant21_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int8_t tensor_data22[1*3*3*48] = { 
  /* [0][0][][] */ -89,62,-127,101,-83,58,-49,69,-61,-71,62,-51,68,-92,-50,-43,66,78,82,-105,99,-127,85,-93,-77,-45,58,127,-98,-58,-96,59,79,-96,69,-117,-89,-113,91,-37,-24,-87,108,-81,97,50,-63,-51, -119,82,-76,119,-68,113,-47,87,-125,-97,94,-80,101,-116,-75,-66,99,111,127,-127,118,-114,92,-119,-86,-75,76,122,32,-75,-113,104,101,-127,100,-115,-105,-127,114,-71,-100,96,127,-100,-30,88,-84,-85, -64,44,4,37,-9,55,-26,53,-53,-28,46,-28,32,-38,-24,-8,31,55,60,-28,31,-48,34,-42,-58,-24,21,26,95,-32,-72,14,38,-82,43,-32,-21,-45,38,-35,-117,-36,43,-37,-68,44,-19,-43, 
  /* [0][1][][] */ -124,88,-64,117,-66,101,-112,84,-101,-107,78,-86,84,-105,-91,-101,100,92,-47,-112,112,-121,109,-83,-96,-84,92,115,-127,-93,-105,107,104,27,92,-117,-110,-121,100,-78,-117,-102,89,-127,127,70,-100,-97, -127,127,-94,127,-127,127,-127,127,-127,-127,127,-127,127,-127,-127,-127,127,127,-49,-120,127,-125,127,-127,-116,-127,127,122,10,-127,-127,127,127,36,127,-127,-127,-120,127,-127,-127,127,107,-125,-48,127,-127,-127, -81,55,-70,40,-58,33,-58,51,-53,-34,52,-62,50,-59,-53,-21,70,60,-37,-28,27,-53,46,-47,-127,-54,46,50,97,-72,-75,17,54,7,48,-45,-31,-31,50,-56,-44,-62,26,-67,-85,70,-16,-58, 
  /* [0][2][][] */ -50,30,-4,44,-28,55,-47,10,-50,-43,23,-48,26,-51,-26,-60,61,36,-77,-24,21,-45,35,-31,-35,-46,34,10,-74,-41,-34,64,43,46,46,-44,-66,-54,31,-48,-100,-54,39,-91,67,34,-55,-17, -78,43,-74,59,-64,41,-52,41,-52,-50,50,-66,49,-72,-58,-61,81,55,-94,-22,24,-32,52,-46,-56,-55,42,41,-2,-89,-71,74,52,57,58,-47,-68,-50,36,-66,-46,63,46,-86,-34,63,-59,-49, -26,15,-58,8,-41,0,-34,25,-21,-19,29,-37,24,-26,-22,-2,49,22,-64,7,15,-9,16,-9,-50,-21,19,23,56,-33,-10,17,12,37,22,-8,-12,-11,17,-27,15,-14,3,-42,-47,39,-5,-31, 
};
const TfArray<4, int> tensor_dimension22 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.0042381263338029385, 0.0045045255683362484, 0.0033462324645370245, 0.0066532106138765812, 0.0048233587294816971, 0.0038061307277530432, 0.0023375584278255701, 0.013491117395460606, 0.0053378823213279247, 0.0026260637678205967, 0.0030756818596273661, 0.0044906181283295155, 0.0037660452071577311, 0.0042152358219027519, 0.0024588129017502069, 0.0039871060289442539, 0.005589987151324749, 0.003287632018327713, 0.0062955375760793686, 0.0024181429762393236, 0.0034105805680155754, 0.0027056124527007341, 0.0038445494137704372, 0.0045440206304192543, 0.0033728438429534435, 0.0033102286979556084, 0.0033050582278519869, 0.0017837220802903175, 0.0089170793071389198, 0.0043649147264659405, 0.0029905901756137609, 0.013570824638009071, 0.0055226092226803303, 0.0071613178588449955, 0.0037919424939900637, 0.004027914721518755, 0.0037270116154104471, 0.002681901678442955, 0.0048275799490511417, 0.0044919704087078571, 0.0023906957358121872, 0.0076781925745308399, 0.010047441348433495, 0.0035096511710435152, 0.0067445524036884308, 0.0033483603037893772, 0.0024667021352797747, 0.0035619968548417091, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 3 };
const ALIGN(16) int32_t tensor_data23[48] = { 16065, -1054, 16798, -850, 13633, -2047, 32798, 414, 11404, 34239, 600, 22632, -617, 13161, 30920, 22720, -735, -3552, 2914, 40992, -909, 19323, 1764, 15684, 15747, 30291, -1709, -1805, -1039, 13891, 21560, -430, -1081, 1373, 945, 15829, 10593, 29098, -195, 16310, 26135, 855, 501, 15883, -490, -277, 33845, 19501, };
const TfArray<1, int> tensor_dimension23 = { 1, { 48 } };
const TfArray<48, float> quant23_scale = { 48, { 9.9720622529275715e-05, 0.00010598883818602189, 7.8734883572906256e-05, 0.00015654612798243761, 0.00011349079431965947, 8.9556022430770099e-05, 5.5001375585561618e-05, 0.00031743806903250515, 0.00012559723109006882, 6.1789738538209349e-05, 7.2368988185189664e-05, 0.00010566160199232399, 8.8612832769285887e-05, 9.9182019766885787e-05, 5.7854424085235223e-05, 9.3814262072555721e-05, 0.00013152911560609937, 7.7356045949272811e-05, 0.00014813030429650098, 5.6897482863860205e-05, 8.0248959420714527e-05, 6.3661471358500421e-05, 9.0459987404756248e-05, 0.00010691813804442063, 7.9361030657310039e-05, 7.7887736551929265e-05, 7.7766075264662504e-05, 4.1969931771745905e-05, 0.0002098136319546029, 0.00010270387429045513, 7.036682654870674e-05, 0.00031931351986713707, 0.00012994374264962971, 0.00016850160318426788, 8.9222179667558521e-05, 9.4774462922941893e-05, 8.7694395915605128e-05, 6.3103572756517678e-05, 0.00011359011841705069, 0.00010569342703092843, 5.6251665228046477e-05, 0.00018066335178446025, 0.00023641038569621742, 8.2580030721146613e-05, 0.00015869535855017602, 7.8784949437249452e-05, 5.8040051953867078e-05, 8.3811690274160355e-05, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const ALIGN(16) int8_t tensor_data24[16*1*1*48] = { 
  /* [0][0][][] */ 28,33,25,-34,66,69,-33,56,-13,117,2,54,-32,36,-10,49,38,87,44,-70,-77,80,-11,49,57,49,33,51,-55,-49,-8,88,-32,10,-79,50,56,-127,-38,17,15,-40,58,-1,-5,-55,-67,-19, 
  /* [1][0][][] */ -53,-1,-82,-41,7,88,-54,16,-16,-32,-41,33,58,-15,-28,-29,-31,-30,-7,16,-64,42,-109,-45,-55,-36,45,69,-24,-24,44,-42,9,-58,-32,48,10,-55,127,-39,-26,29,-48,-15,31,56,25,16, 
  /* [2][0][][] */ 6,-2,63,-31,-18,-78,25,29,104,79,-70,19,115,-52,127,91,-64,-25,-30,30,80,-78,-28,-102,14,-35,34,-73,39,44,-48,17,33,-22,55,46,-61,11,0,-25,35,26,69,-14,28,-91,94,-56, 
  /* [3][0][][] */ 42,8,-25,-26,37,113,15,-14,39,-50,24,-20,-44,0,8,45,-37,-69,39,-117,-10,-1,-28,-20,-41,84,127,68,-14,-44,25,40,59,-28,89,36,-39,-61,2,38,30,18,-17,-1,24,15,-7,-22, 
  /* [4][0][][] */ 113,-12,7,-50,98,94,52,15,67,-22,-111,31,52,-25,21,-12,-97,-127,-33,-109,-17,21,-37,-42,-94,127,-113,124,-57,-62,27,90,45,-58,14,-34,-4,18,-27,23,-52,-11,-5,61,-45,110,-31,-59, 
  /* [5][0][][] */ -1,0,-59,7,-13,54,14,-28,61,55,40,89,51,-22,30,-8,-39,127,-18,36,12,-2,-67,-13,33,1,-63,-31,-10,35,20,-15,-38,1,44,13,-48,8,-83,2,87,-15,28,45,-19,9,-42,33, 
  /* [6][0][][] */ 65,11,22,70,6,-27,109,-58,5,69,125,109,44,46,-49,65,46,-45,-81,94,46,-60,-36,58,-83,95,85,-9,119,50,-36,-2,104,-62,-127,-3,107,37,-1,6,18,60,61,-29,74,121,34,-1, 
  /* [7][0][][] */ -98,-5,-25,26,-61,-55,24,46,77,109,-52,-77,-101,14,-17,-16,-77,100,0,116,-45,38,27,39,-22,-92,-33,-78,33,36,-3,9,-19,8,19,-20,1,-54,127,10,8,45,22,-15,57,70,-27,-1, 
  /* [8][0][][] */ -10,-84,50,-56,65,-55,69,-34,-26,-115,31,11,-33,5,27,28,1,10,-36,99,10,32,-19,30,62,-13,-55,-29,-127,-25,-51,-112,7,-63,2,87,-9,28,113,17,11,2,66,113,-7,-69,-37,78, 
  /* [9][0][][] */ 20,-37,23,-63,42,87,-40,50,14,-40,-34,-22,18,-47,117,-21,6,-114,37,45,-69,42,63,-42,-29,-81,-26,83,59,74,-43,-31,-50,39,-4,127,-31,-42,-55,-32,-32,1,36,110,65,88,-69,14, 
  /* [10][0][][] */ -15,20,-24,-9,20,27,-67,-43,51,41,63,-10,-37,-7,49,-55,-67,127,-4,48,1,-11,17,30,-46,45,5,92,35,9,-34,-10,71,9,-5,25,-12,-47,-41,19,-84,-3,26,-15,15,47,28,31, 
  /* [11][0][][] */ -32,46,-18,37,30,55,1,5,15,22,-127,-67,73,18,-10,-48,2,27,-47,-44,-12,-7,102,3,44,14,-22,36,-6,31,-8,48,25,-6,-48,-2,41,83,103,17,31,-29,63,0,-55,-17,82,4, 
  /* [12][0][][] */ -61,-5,35,20,-58,-51,8,6,-32,-32,-127,17,72,-97,24,37,54,100,85,-117,-33,44,-37,-82,1,-20,31,-32,8,12,-21,75,66,78,34,-29,-51,-31,31,6,-30,17,63,0,43,-16,-39,-37, 
  /* [13][0][][] */ -57,-110,-48,-99,8,26,55,7,-127,19,123,-68,49,46,123,1,110,32,-11,-97,76,-79,119,-3,-75,8,-18,14,-39,-104,-107,13,51,-20,-72,60,27,-50,81,-75,-6,59,64,39,57,-28,111,-59, 
  /* [14][0][][] */ 69,19,-52,3,-41,17,-85,-24,-28,61,52,52,-7,-68,17,-42,63,-118,25,12,85,-57,28,-7,-7,127,-92,2,-62,-28,-97,5,127,52,84,-16,-76,12,-24,64,-10,-50,111,-23,-53,-46,-60,55, 
  /* [15][0][][] */ -63,16,40,14,91,5,-1,33,25,72,-16,47,49,-10,-32,-22,6,36,0,-38,28,-41,-45,-48,50,-64,-36,57,-33,5,17,7,-58,2,127,-3,-90,16,54,-13,-46,-18,16,-3,-31,-26,-8,8, 
};
const TfArray<4, int> tensor_dimension24 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant24_scale = { 16, { 0.0054741469211876392, 0.0055700340308248997, 0.0065592364408075809, 0.0066015957854688168, 0.0035529006272554398, 0.0072667435742914677, 0.0050007798708975315, 0.0055470000952482224, 0.0050755091942846775, 0.0040803202427923679, 0.0075434702448546886, 0.0058602029457688332, 0.0056113353930413723, 0.0036556392442435026, 0.004387302789837122, 0.0063097388483583927, } };
const TfArray<16, int> quant24_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int32_t tensor_data25[16] = { -5080, 11166, -20475, 1313, 13448, -14924, -43414, -8746, -5314, 6633, -15225, -12916, 5277, -11470, -3779, -2033, };
const TfArray<1, int> tensor_dimension25 = { 1, { 16 } };
const TfArray<16, float> quant25_scale = { 16, { 0.00012880345457233489, 0.00013105962716508657, 0.0001543349790154025, 0.0001553316687932238, 8.3597660704981536e-05, 0.00017098220996558666, 0.00011766541138058528, 0.00013051765563432127, 0.00011942374840145931, 9.6007534011732787e-05, 0.00017749342077877373, 0.00013788712385576218, 0.00013203141861595213, 8.6015039414633065e-05, 0.00010323065362172201, 0.00014846444537397474, } };
const TfArray<16, int> quant25_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int8_t tensor_data26[96*1*1*16] = { 
  /* [0][0][][] */ 46,11,7,60,-127,-21,88,41,61,81,-17,37,18,0,34,77, 
  /* [1][0][][] */ -26,36,-101,0,127,113,4,9,-32,16,-53,41,-57,105,-56,-36, 
  /* [2][0][][] */ -49,64,76,-7,73,96,10,43,31,-6,38,-27,48,-127,-15,17, 
  /* [3][0][][] */ 127,-38,24,12,34,32,-22,16,46,28,-59,-29,-46,52,-38,56, 
  /* [4][0][][] */ -76,-15,9,42,-103,-8,-93,-30,-13,43,-1,-49,-13,36,-37,127, 
  /* [5][0][][] */ -79,12,38,9,127,22,15,-1,-41,41,-29,18,-54,61,-89,-44, 
  /* [6][0][][] */ -127,32,-36,32,-12,-73,71,12,4,-27,-42,37,9,7,-43,17, 
  /* [7][0][][] */ 7,112,67,-114,76,52,127,11,54,16,-4,60,101,21,-27,-10, 
  /* [8][0][][] */ -48,-33,-79,71,-68,89,-64,-70,21,-53,107,36,127,41,-113,17, 
  /* [9][0][][] */ -30,-127,-26,88,-50,-77,-12,61,39,43,14,63,-86,13,-3,-31, 
  /* [10][0][][] */ -34,-56,-102,68,-127,108,36,-75,11,-76,74,-40,25,98,-77,77, 
  /* [11][0][][] */ -48,-99,-45,39,-10,83,27,5,8,0,45,-99,2,98,-103,127, 
  /* [12][0][][] */ -24,-87,-78,100,-102,-127,5,52,88,69,-29,88,-10,-67,-26,-13, 
  /* [13][0][][] */ -73,-27,-41,-3,-20,6,27,22,-21,127,-3,-26,33,32,12,-9, 
  /* [14][0][][] */ -104,-28,-40,-59,-25,87,-28,-99,127,-67,68,2,99,-63,-92,-96, 
  /* [15][0][][] */ -8,-127,85,-48,-59,-41,3,59,14,-59,-91,-46,74,-39,-36,-44, 
  /* [16][0][][] */ -18,-27,20,-33,21,22,-12,-20,56,-127,37,-16,-12,3,-69,-84, 
  /* [17][0][][] */ -5,0,45,-55,19,-7,-44,6,97,-51,25,70,100,-67,-10,-127, 
  /* [18][0][][] */ 69,-5,-43,-127,11,-18,115,-41,33,60,-7,63,0,65,-13,-119, 
  /* [19][0][][] */ -23,-41,-23,-65,-126,37,-17,-8,41,-50,23,-127,-12,-28,-14,-13, 
  /* [20][0][][] */ 11,69,64,-89,67,2,-54,87,-110,-127,38,-91,-37,97,-19,-17, 
  /* [21][0][][] */ -2,-96,-127,2,104,45,90,98,-88,-86,-11,19,96,-86,-38,35, 
  /* [22][0][][] */ 62,-15,88,-9,-3,9,73,26,31,117,35,24,3,1,127,0, 
  /* [23][0][][] */ -124,-59,2,67,63,31,18,12,-25,15,-7,-93,4,72,66,127, 
  /* [24][0][][] */ 17,-6,46,24,17,-87,25,-73,20,125,-127,74,-14,-57,73,-75, 
  /* [25][0][][] */ 122,-54,99,127,39,25,-17,44,-123,77,67,-48,-18,22,75,-11, 
  /* [26][0][][] */ -25,21,11,44,-57,118,-19,38,-58,-39,-80,28,0,16,44,-127, 
  /* [27][0][][] */ 29,-1,-12,-48,-50,4,-84,15,-111,-29,-65,-48,-79,36,-21,127, 
  /* [28][0][][] */ -75,22,20,2,23,-12,-127,2,-9,-33,5,-16,5,-46,-75,-26, 
  /* [29][0][][] */ -31,-111,-28,95,-27,6,127,13,73,57,-111,69,33,-25,-58,80, 
  /* [30][0][][] */ 32,-52,-74,17,-127,35,52,-30,-4,10,14,-36,-28,63,-21,82, 
  /* [31][0][][] */ -127,-14,11,95,-28,7,-59,-5,-26,-45,9,-30,-30,-57,-17,94, 
  /* [32][0][][] */ -126,-88,-93,8,-102,-69,-11,-14,127,65,-58,-74,33,52,32,-21, 
  /* [33][0][][] */ -18,4,-98,47,-127,-89,38,0,-114,10,-46,-68,-33,89,64,75, 
  /* [34][0][][] */ 45,58,10,31,-73,-38,43,1,32,-127,-26,38,-19,-8,47,82, 
  /* [35][0][][] */ 34,1,-72,-18,-127,18,88,-28,18,42,-15,-19,10,65,29,67, 
  /* [36][0][][] */ -13,-2,-53,66,127,-29,36,70,-93,15,-85,-90,22,-12,2,34, 
  /* [37][0][][] */ -127,57,-2,-78,41,-82,-34,-43,-12,-26,-32,41,59,-81,8,-115, 
  /* [38][0][][] */ 51,121,44,-90,-126,-52,-127,-48,-53,-92,45,65,-72,-124,99,8, 
  /* [39][0][][] */ -10,-35,-6,78,0,69,62,-39,-33,34,31,-27,-23,127,38,117, 
  /* [40][0][][] */ 99,42,86,121,-55,-69,-14,37,-98,72,-22,-32,-62,-18,127,-3, 
  /* [41][0][][] */ -23,-13,14,62,-94,118,3,47,-50,25,-114,12,20,42,49,-127, 
  /* [42][0][][] */ 18,-96,33,-26,127,35,72,9,-25,-93,-98,-23,-10,-15,-3,33, 
  /* [43][0][][] */ -59,-114,-47,1,116,26,-22,116,-85,-91,-127,-93,114,-18,-76,72, 
  /* [44][0][][] */ -35,-60,-82,-101,37,70,81,15,-42,-127,-66,88,-47,74,27,117, 
  /* [45][0][][] */ -4,-62,-67,4,-127,60,-29,-54,60,-56,35,-53,-2,11,-35,55, 
  /* [46][0][][] */ 23,-92,-10,11,86,-87,-18,96,-13,-32,38,57,-56,-57,58,-127, 
  /* [47][0][][] */ -79,-23,-15,79,-10,6,47,28,-9,127,82,97,-33,75,-2,99, 
  /* [48][0][][] */ 40,-9,-85,-93,33,-61,8,51,46,-82,0,21,-62,0,-47,-127, 
  /* [49][0][][] */ 49,26,3,31,-11,-30,48,56,-36,127,-35,36,-35,-22,71,81, 
  /* [50][0][][] */ 7,5,10,10,-127,-15,-11,-46,52,14,25,53,-14,-55,13,1, 
  /* [51][0][][] */ 9,-8,-17,-127,-21,117,53,-52,4,1,49,-56,72,90,-36,20, 
  /* [52][0][][] */ 31,-26,5,-93,89,-112,-4,-36,38,6,127,-50,45,8,-27,93, 
  /* [53][0][][] */ -53,-66,53,-28,-39,-127,21,-104,-7,96,-99,75,-42,-13,26,-80, 
  /* [54][0][][] */ 66,74,44,-5,-127,-41,-91,-99,-15,7,43,59,-72,-62,54,11, 
  /* [55][0][][] */ 17,19,-33,75,-39,26,34,-26,6,127,23,52,-4,-5,0,46, 
  /* [56][0][][] */ 37,-103,-79,94,-83,56,-15,55,127,6,66,41,-31,-39,36,87, 
  /* [57][0][][] */ 40,33,111,-118,108,2,-4,-19,99,-39,-6,127,68,-69,120,-70, 
  /* [58][0][][] */ 84,-71,17,-67,37,23,-14,127,62,89,-5,62,48,12,88,-8, 
  /* [59][0][][] */ -54,39,23,-44,-5,-91,-3,10,-4,11,-110,-112,-127,-49,65,-13, 
  /* [60][0][][] */ 52,-32,33,25,3,-24,7,-53,34,127,-13,66,-11,-35,-13,-40, 
  /* [61][0][][] */ 68,57,10,-31,-85,-127,-17,-45,-60,-19,-26,26,-65,-49,89,85, 
  /* [62][0][][] */ -18,92,-35,33,-61,127,-43,22,-55,11,-47,38,-26,35,70,-97, 
  /* [63][0][][] */ 27,-14,-65,-127,-11,-47,74,-8,-6,-89,-29,33,-41,62,34,-32, 
  /* [64][0][][] */ -53,13,13,-16,60,-74,18,103,-127,-21,-86,-49,-40,100,58,64, 
  /* [65][0][][] */ -71,-22,-32,-11,66,39,-51,-75,-126,-61,7,-41,-127,108,-52,42, 
  /* [66][0][][] */ -16,61,-12,29,-42,127,-17,21,-61,16,-24,44,-25,44,45,-80, 
  /* [67][0][][] */ 22,-34,-39,-30,17,-87,59,-91,1,27,-2,111,-66,-31,-21,-127, 
  /* [68][0][][] */ 20,-127,-18,86,-19,-3,15,77,51,30,50,12,-62,25,-6,-12, 
  /* [69][0][][] */ 2,80,100,-118,68,18,-32,91,51,106,55,80,106,-108,32,-127, 
  /* [70][0][][] */ 43,18,47,-35,92,0,-101,-44,-127,-86,-1,48,-31,64,-98,-7, 
  /* [71][0][][] */ -26,-82,41,-36,79,-20,32,34,-100,94,-127,-50,21,104,-17,57, 
  /* [72][0][][] */ 15,12,76,8,-57,-24,-109,-73,-3,70,-34,62,32,106,-127,-15, 
  /* [73][0][][] */ 4,-29,-18,-36,44,-113,40,-55,78,90,105,-16,31,-17,-75,127, 
  /* [74][0][][] */ -2,9,-38,88,-90,4,94,30,76,60,36,114,127,30,-68,13, 
  /* [75][0][][] */ -26,48,-23,32,-47,127,-11,16,-38,30,-40,41,-13,54,25,-62, 
  /* [76][0][][] */ -78,108,-65,60,-124,-13,0,30,40,46,-37,-44,60,-42,-127,53, 
  /* [77][0][][] */ 127,112,-111,126,80,76,85,45,50,14,95,-30,96,39,68,15, 
  /* [78][0][][] */ 20,-44,6,-59,74,-127,29,-61,57,51,126,-23,11,-11,-46,116, 
  /* [79][0][][] */ -37,59,-2,26,-6,-58,-35,-1,-127,-8,53,10,102,45,-77,-42, 
  /* [80][0][][] */ -82,23,81,-3,61,44,-12,-127,-75,64,-63,-49,-12,-97,26,55, 
  /* [81][0][][] */ 82,81,-33,-4,31,-19,78,127,-112,126,-63,-42,-54,29,108,123, 
  /* [82][0][][] */ 52,111,-33,-90,-12,-49,119,-104,34,20,-85,67,127,-21,68,-53, 
  /* [83][0][][] */ 6,-26,21,36,-3,23,-37,-110,69,-38,103,8,33,-79,-60,-127, 
  /* [84][0][][] */ -127,-93,-42,-9,-10,94,92,0,97,79,112,120,58,106,-83,1, 
  /* [85][0][][] */ 125,6,104,-76,64,-23,-31,87,25,119,-57,13,-48,61,127,11, 
  /* [86][0][][] */ -82,67,-37,4,26,82,19,21,82,34,127,-28,-26,56,-5,-17, 
  /* [87][0][][] */ 12,-56,29,-44,41,-127,26,-35,48,-10,63,-38,36,-42,-41,69, 
  /* [88][0][][] */ -89,76,37,-4,103,-31,34,8,-58,-79,104,-78,69,127,100,-123, 
  /* [89][0][][] */ -29,34,-17,27,-31,127,-14,37,-49,7,-36,18,-6,59,25,-79, 
  /* [90][0][][] */ 49,-69,24,10,127,0,59,23,-6,-87,-118,-18,-5,-8,-56,20, 
  /* [91][0][][] */ -16,69,-22,-20,-8,-64,-95,32,-80,10,-88,-127,-108,-82,-15,11, 
  /* [92][0][][] */ 75,48,68,34,-127,-95,10,10,-18,43,-24,-33,-29,-86,28,-14, 
  /* [93][0][][] */ -18,-112,-127,74,-45,-45,-3,110,85,56,22,58,-74,76,-29,-16, 
  /* [94][0][][] */ 91,-5,116,-19,23,-39,12,50,18,84,4,61,13,14,127,-8, 
  /* [95][0][][] */ -55,-49,-19,-22,127,-4,45,71,-29,-20,-115,-56,21,15,-69,31, 
};
const TfArray<4, int> tensor_dimension26 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant26_scale = { 96, { 0.0047168182209134102, 0.0019840409513562918, 0.0048548071645200253, 0.0047376295551657677, 0.0019339839927852154, 0.0011527396272867918, 0.0042288880795240402, 0.001924138399772346, 0.0011489768512547016, 0.0028810414951294661, 0.00093329098308458924, 0.0018751752795651555, 0.0029996843077242374, 0.0062885168008506298, 0.0024012080393731594, 0.0026338768657296896, 0.0039375368505716324, 0.0024760204833000898, 0.0025216047652065754, 0.0012747879372909665, 0.0039051100611686707, 0.001929735648445785, 0.0023953758645802736, 0.0029372514691203833, 0.0012437127297744155, 0.0025870718527585268, 0.0031859232112765312, 0.0030011401977390051, 0.0022583792451769114, 0.0042045647278428078, 0.0026046184357255697, 0.002116100862622261, 0.0039427503943443298, 0.0014027885627001524, 0.002991087269037962, 0.0031192307360470295, 0.0028068819083273411, 0.0039717466570436954, 0.0022451775148510933, 0.0033984293695539236, 0.00094439729582518339, 0.0030659653712064028, 0.0027243781369179487, 0.0022306786850094795, 0.002235933905467391, 0.0013862019404768944, 0.0020278457086533308, 0.0015696034533903003, 0.0049509829841554165, 0.00400174455717206, 0.0045187659561634064, 0.0023119447287172079, 0.0031373098026961088, 0.0022975513711571693, 0.0021827789023518562, 0.0058020022697746754, 0.0024302280507981777, 0.0007781303720548749, 0.0024749170988798141, 0.0033650738187134266, 0.0027423764113336802, 0.0016979249194264412, 0.0028249109163880348, 0.0045026605948805809, 0.0011636961717158556, 0.0010961683001369238, 0.0039332467131316662, 0.0028232126496732235, 0.0020042888354510069, 0.0016798210563138127, 0.0045588412322103977, 0.0025528948754072189, 0.003587937681004405, 0.0024803427513688803, 0.0036856955848634243, 0.0034419319126754999, 0.0026908915024250746, 0.0019531042780727148, 0.002775595523416996, 0.0025511528365314007, 0.0024201087653636932, 0.0028473674319684505, 0.001360528520308435, 0.0012842920841649175, 0.0023031828459352255, 0.0013725190656259656, 0.0020038860384374857, 0.0040134959854185581, 0.0043014874681830406, 0.0037829256616532803, 0.0028523211367428303, 0.0014869857113808393, 0.0026580241974443197, 0.0019649830646812916, 0.0018444709712639451, 0.0025033610872924328, } };
const TfArray<96, int> quant26_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int32_t tensor_data27[96] = { 1432, 7919, 349, 1661, 7594, 18323, 144, 3600, 16510, -1210, 20407, 5657, 2283, 686, 5140, 620, 3249, 5564, -164, 15804, 1283, 8966, -2590, 2109, -13003, 1711, 3555, 2765, 8295, 1426, 5185, 5806, 2146, 13038, 3764, 4412, 4833, 2256, 4692, 2576, 22387, 1983, 3072, 2206, 3907, 13562, 7402, 10552, 1333, -1141, 1993, 6400, 3561, -3842, 7173, 162, 3133, 25090, 1506, 1712, 3331, 11204, 5118, -280, 17493, 17294, 2280, 4589, 8706, 6423, 2343, 1991, -3403, 5872, 2228, 4102, 552, 8856, 4487, 6968, 4245, 1091, 8530, 15800, -229, 11742, 7415, 2244, -717, 3272, 1813, 12898, 4435, 5057, 6315, 5586, };
const TfArray<1, int> tensor_dimension27 = { 1, { 96 } };
const TfArray<96, float> quant27_scale = { 96, { 0.00021523147006519139, 9.0533074398990721e-05, 0.00022152799647301435, 0.00021618111350107938, 8.8248947577085346e-05, 5.2600258641177788e-05, 0.00019296690879855305, 8.7799686298239976e-05, 5.2428560593398288e-05, 0.00013146379205863923, 4.2586674680933356e-05, 8.5565465269610286e-05, 0.00013687754108104855, 0.00028694909997284412, 0.00010956868209177628, 0.00012018551205983385, 0.00017967236635740846, 0.00011298242316115648, 0.000115062459371984, 5.8169400290353224e-05, 0.00017819269851315767, 8.8055086962413043e-05, 0.00010930255666607991, 0.00013402868353296071, 5.6751418014755473e-05, 0.00011804976384155452, 0.00014537574315909296, 0.00013694397057406604, 0.00010305130854249001, 0.00019185701967217028, 0.00011885043204529211, 9.6559051598887891e-05, 0.00017991026106756181, 6.4010149799287319e-05, 0.00013648525055032223, 0.00014233251567929983, 0.00012807984603568912, 0.00018123337940778583, 0.0001024489029077813, 0.00015507254283875227, 4.309345968067646e-05, 0.00013990198203828186, 0.00012431513459887356, 0.00010178731463383883, 0.00010202711564488709, 6.3253297412302345e-05, 9.2531918198801577e-05, 7.1622023824602365e-05, 0.00022591656306758523, 0.00018260220531374216, 0.00020619422139134258, 0.00010549553553573787, 0.00014315747830551118, 0.00010483875666977838, 9.9601616966538131e-05, 0.00026474913465790451, 0.00011089288454968482, 3.5506593121681362e-05, 0.00011293207353446633, 0.00015355049981735647, 0.00012513641559053212, 7.7477416198235005e-05, 0.00012890252401120961, 0.0002054593205684796, 5.3100211516721174e-05, 5.0018868932966143e-05, 0.00017947659944184124, 0.00012882502051070333, 9.1456997324712574e-05, 7.6651325798593462e-05, 0.0002080228878185153, 0.00011649024963844568, 0.0001637199311517179, 0.00011317964526824653, 0.00016818067524582148, 0.00015705758414696902, 0.00012278712529223412, 8.9121414930559695e-05, 0.00012665223039221019, 0.00011641075980151072, 0.0001104311304516159, 0.00012992722622584552, 6.2081795476842672e-05, 5.860308010596782e-05, 0.00010509572894079611, 6.2628932937514037e-05, 9.1438618255779147e-05, 0.00018313842883799225, 0.00019627966685220599, 0.00017261735047213733, 0.00013015326112508774, 6.7852124630007893e-05, 0.00012128736852901056, 8.9663451944943517e-05, 8.4164406871423125e-05, 0.00011422998795751482, } };
const TfArray<96, int> quant27_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int8_t tensor_data28[1*3*3*96] = { 
  /* [0][0][][] */ -53,-6,-7,-18,95,-12,34,-17,-12,8,-8,-43,-24,8,-2,-26,-21,12,8,-20,-1,26,36,53,5,-33,-24,-10,23,-5,31,8,-26,0,0,-44,0,-53,-36,-8,4,7,37,-32,-33,42,-46,-18,-13,12,-13,48,-74,2,45,-14,-9,-5,1,-22,-14,-18,-18,-54,-17,-25,-45,-39,-18,19,6,-3,25,9,5,10,-22,7,127,-21,-117,11,-104,-15,-18,-21,28,18,-32,-20,19,-39,-2,23,-44,4, -29,26,39,-84,-38,-10,127,-53,-6,-7,-39,-4,-71,-11,-89,56,-12,78,99,-29,-11,127,119,127,38,-11,47,53,127,39,127,-24,-127,-19,-97,-51,-31,-101,127,-61,-24,-127,-15,-44,67,-39,-38,-8,46,8,19,127,-101,32,-81,-14,-90,-6,-8,24,-15,-127,-123,-77,-51,-7,-6,-96,-9,10,-52,117,-127,-5,17,-21,-127,-67,-3,-79,-127,5,34,-50,106,79,-49,32,-127,-7,29,-24,13,120,-80,-81, -57,-1,-5,-19,57,-9,46,-22,-23,21,-13,-14,3,0,-2,-35,-14,3,-3,-21,-3,7,29,39,1,-19,-1,-24,7,6,24,13,-7,-2,-10,59,-4,-57,-35,1,-2,0,18,-25,-21,-26,-51,-22,-6,3,-6,30,-8,-7,15,-18,48,-16,4,-18,-15,-8,-52,-26,-16,-36,127,-29,-13,13,9,7,21,9,6,23,-15,20,-41,-15,-97,3,-118,-15,2,-32,20,-25,-33,-38,14,37,9,18,-44,9, 
  /* [0][1][][] */ -86,-1,33,-66,45,100,-31,-12,-2,-17,-30,-36,-127,31,16,67,-18,45,111,17,33,-19,116,-13,38,32,65,17,-9,-1,-5,-12,-99,-14,75,-29,-6,-127,-55,-127,-19,-12,92,-46,-88,127,-100,-69,58,60,12,-45,-127,62,70,-25,18,-34,37,-12,6,-11,75,-100,-33,17,-30,-60,-20,-11,-127,15,66,127,18,-70,-116,-56,-66,-47,-72,-5,-28,-59,30,27,-99,60,-44,127,85,-74,127,-4,-46,-5, 65,127,127,127,-127,-127,90,-54,127,127,-84,-62,-89,127,-31,127,127,-127,127,127,127,-77,95,-95,-127,-127,127,127,-105,127,-16,127,-49,127,127,-120,127,112,15,-18,127,-16,-127,-127,127,-31,127,127,127,-127,127,-100,111,127,-127,127,-127,127,-127,127,-104,111,87,-127,127,127,-17,127,-114,-127,-12,-127,9,124,127,73,1,-127,88,-127,95,127,127,127,127,74,-127,127,-85,45,-13,-31,-94,-19,-127,-22, -127,-26,30,-90,1,57,-49,2,-35,-15,-8,127,-122,22,21,51,-25,57,94,9,14,-27,83,-11,42,23,41,0,-12,-2,21,-9,-73,-30,80,127,-7,-107,-66,-94,-30,-28,25,-53,-80,-68,-96,-92,43,66,-6,-23,120,7,89,-44,93,-31,51,-36,0,-31,-127,-45,-57,-6,-57,-65,-28,-3,-109,-1,41,-98,11,127,-91,-38,-59,0,-106,-13,-68,-82,-2,31,-78,35,-25,-76,127,127,-36,-33,-66,-9, 
  /* [0][2][][] */ -19,-30,-15,-15,37,2,-7,19,-9,5,28,-31,52,7,-6,-27,-4,-1,-44,-29,-4,-13,23,-19,4,-14,-8,9,1,-12,-26,4,0,1,4,-27,-3,-43,-15,-13,-26,8,26,1,12,9,-54,8,-27,8,-23,-23,-16,-34,38,-10,7,-21,3,-14,-10,24,-4,-1,-39,-16,105,25,25,18,-9,-3,-8,-11,-1,-35,-19,32,-31,-25,-22,7,-94,-16,-12,-7,32,-20,11,9,0,-18,-9,-21,-37,-4, -39,-58,42,-122,-41,3,42,127,-52,67,127,-27,-73,31,127,68,-7,-34,101,-56,-16,-45,127,10,18,0,40,21,-9,6,-90,-42,-51,-26,-97,-7,-94,-116,41,-68,-20,-122,-38,125,17,-29,-49,5,25,-11,-11,-14,58,36,-43,-37,-52,-57,46,-48,127,39,86,8,-82,-41,-26,-44,127,24,-43,13,16,-34,23,-33,-25,-28,-4,39,-66,-21,-79,-68,34,-127,-15,6,-30,6,52,-12,11,-127,-67,127, -13,16,-16,-15,21,-7,0,13,-20,-2,11,53,57,5,-6,-31,-5,12,0,-34,-11,-12,18,-6,-5,5,-13,-3,-6,-1,-27,2,16,5,-6,6,-9,-57,-18,-21,-34,15,1,0,10,-10,-54,14,-22,2,-14,-19,-5,-38,26,-9,51,-15,10,-16,-5,16,-14,13,-17,-19,-27,28,25,5,-16,-2,-42,-43,-4,-16,-24,27,81,-8,-3,-1,-73,-4,-9,3,38,-7,6,3,-10,13,0,-25,-26,-7, 
};
const TfArray<4, int> tensor_dimension28 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant28_scale = { 96, { 0.0054031549952924252, 0.011755876243114471, 0.0089287515729665756, 0.0067204772494733334, 0.010594563558697701, 0.016101012006402016, 0.0053615039214491844, 0.010162062011659145, 0.014360513538122177, 0.011305347084999084, 0.0096547510474920273, 0.0082812607288360596, 0.0046804072335362434, 0.0065152510069310665, 0.0080170594155788422, 0.0088579757139086723, 0.010916204191744328, 0.011342603713274002, 0.0049952925182878971, 0.014051870442926884, 0.0099143702536821365, 0.010916863568127155, 0.0058694900944828987, 0.010153314098715782, 0.080226927995681763, 0.0073192757554352283, 0.011389573104679585, 0.0077179805375635624, 0.015882093459367752, 0.0086726676672697067, 0.0075329653918743134, 0.012112544849514961, 0.0037487100344151258, 0.018776511773467064, 0.0071848779916763306, 0.0074694547802209854, 0.011654325760900974, 0.004442600067704916, 0.010275588370859623, 0.0045431135222315788, 0.020487656816840172, 0.0089208390563726425, 0.0091460850089788437, 0.005198079627007246, 0.0057181473821401596, 0.010225068777799606, 0.0070475460961461067, 0.013940009288489819, 0.0081427525728940964, 0.016708442941308022, 0.012293620035052299, 0.0086747482419013977, 0.0058721746318042278, 0.014243911020457745, 0.012456433847546577, 0.010473663918673992, 0.0069994209334254265, 0.015227053314447403, 0.013685428537428379, 0.011137749068439007, 0.013421708717942238, 0.0098048318177461624, 0.0067364289425313473, 0.0063405572436749935, 0.013421295210719109, 0.019968915730714798, 0.0053637446835637093, 0.0062166950665414333, 0.0086176367476582527, 0.012785074301064014, 0.0077035403810441494, 0.010850757360458374, 0.019582657143473625, 0.006965728010982275, 0.0066089113242924213, 0.0093454038724303246, 0.0037333003710955381, 0.0085531575605273247, 0.0060146208852529526, 0.0073162801563739777, 0.0048195673152804375, 0.014177924953401089, 0.0049109123647212982, 0.012733468785881996, 0.005053891334682703, 0.014427373185753822, 0.0064414031803607941, 0.011273046024143696, 0.0066162627190351486, 0.0098607782274484634, 0.0070355534553527832, 0.0087380232289433479, 0.012379622086882591, 0.0069668199867010117, 0.0043983780778944492, 0.011358398944139481, } };
const TfArray<96, int> quant28_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 3 };
const ALIGN(16) int32_t tensor_data29[96] = { 9162, -1080, -4686, 6494, 886, 1415, -14, -633, 1921, -3800, 733, -773, 9351, -3025, -2315, -5439, 346, -540, -11824, -293, -2671, 1159, -6150, -495, 57, 6880, -9125, -4378, 136, -2995, -355, -1197, 13222, -103, -2291, 1440, 83, 10459, 1830, 10636, -1222, 4861, 1138, 6674, 1929, 564, 5952, 112, -5778, -31, -3046, 231, 318, -2949, -768, 1987, 1093, 2007, 1134, 997, 1172, 470, 766, 8303, 6014, -1152, 13668, 8642, 562, 1250, 7458, -671, 70, 1082, -4107, 556, 16277, 7646, 10166, 9617, 9738, -1449, 6543, 6522, -1002, -2219, 8775, -5602, 8202, -384, -5907, -222, -331, 2388, 17641, -1848, };
const TfArray<1, int> tensor_dimension29 = { 1, { 96 } };
const TfArray<96, float> quant29_scale = { 96, { 0.00012713305477518588, 0.00027660885825753212, 0.00021008827025070786, 0.00015812888159416616, 0.00024928385391831398, 0.00037884735502302647, 0.00012615304149221629, 0.00023910735035315156, 0.00033789445296861231, 0.00026600816636346281, 0.00022717061801813543, 0.0001948532008100301, 0.00011012722825398669, 0.00015330003225244582, 0.00018863669538404793, 0.00020842296362388879, 0.00025685186847113073, 0.00026688480284065008, 0.0001175362995127216, 0.00033063226146623492, 0.00023327930830419064, 0.00025686738081276417, 0.00013810564996674657, 0.00023890151351224631, 0.0018876924877986312, 0.00017221824964508414, 0.00026798996259458363, 0.00018159954925067723, 0.00037369632627815008, 0.00020406277326401323, 0.00017724624194670469, 0.00028500106418505311, 8.8204942585434765e-05, 0.00044180027907714248, 0.00016905595839489251, 0.00017575187666807324, 0.00027421943377703428, 0.00010453176946612075, 0.00024177855812013149, 0.00010689679038478062, 0.00048206251813098788, 0.00020990209304727614, 0.00021520200243685395, 0.00012230775610078126, 0.00013454465079121292, 0.00024058985582087189, 0.00016582461830694228, 0.00032800022745504975, 0.00019159418297931552, 0.00039313983870670199, 0.00028926166123710573, 0.00020411172590684146, 0.00013816881983075291, 0.00033515086397528648, 0.00029309256933629513, 0.00024643915821798146, 0.00016469226102344692, 0.00035828360705636442, 0.00032201007707044482, 0.00026206468464806676, 0.00031580490758642554, 0.00023070193128660321, 0.00015850421914365143, 0.00014918958186171949, 0.00031579518690705299, 0.00046985683729872108, 0.00012620576308108866, 0.00014627518248744309, 0.00020276792929507792, 0.00030082528246566653, 0.00018125977658201009, 0.00025531195569783449, 0.0004607684095390141, 0.00016389948723372072, 0.00015550380339846015, 0.00021989186643622816, 8.7842359789647162e-05, 0.00020125077571719885, 0.0001415204897057265, 0.00017214777471963316, 0.00011340158380335197, 0.00033359823282808065, 0.00011555087985470891, 0.00029961104155518115, 0.00011891509348060936, 0.00033946760231629014, 0.00015156243171077222, 0.00026524814893491566, 0.00015567676746286452, 0.00023201831209007651, 0.00016554244211874902, 0.0002056005469057709, 0.00029128522146493196, 0.00016392518591601402, 0.00010349124931963161, 0.00026725645875558257, } };
const TfArray<96, int> quant29_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const ALIGN(16) int8_t tensor_data30[16*1*1*96] = { 
  /* [0][0][][] */ 23,37,13,20,-6,-75,-10,-7,-19,-79,7,-10,65,-66,51,37,-79,-38,36,10,74,17,-69,22,-9,74,127,65,20,78,66,-47,8,-2,5,-23,36,27,-11,-4,114,15,26,-26,-14,-7,11,-48,33,-43,93,-3,-74,-1,45,34,-1,-37,4,24,-3,41,-67,-6,22,-1,62,36,14,-31,24,23,15,41,14,36,55,-27,41,22,-22,50,36,39,-54,9,-5,68,19,3,-85,-21,26,10,115,60, 
  /* [1][0][][] */ 17,33,-50,-22,-8,-45,102,-80,-72,-48,-67,-53,4,-37,-12,-61,-42,-19,-39,-24,-9,-99,113,-42,0,21,4,70,-61,3,-46,23,-40,27,7,2,-28,51,-55,82,25,11,0,-42,63,-62,-14,41,-97,4,48,-118,-37,38,65,56,29,19,-64,10,-55,-8,-11,-24,28,20,114,2,-55,-127,2,4,26,70,-26,29,-62,-39,116,-39,38,-23,51,-70,-24,-74,-26,20,-28,-41,36,-6,64,-65,-33,65, 
  /* [2][0][][] */ 11,-11,10,-6,70,41,-45,23,-53,51,13,-26,29,-7,21,33,31,-32,-127,-3,-20,-36,-17,32,-3,-13,-46,17,-32,-16,-9,64,-18,-31,-1,12,-40,28,-27,-17,72,11,3,34,12,57,7,-3,-76,1,-21,22,-27,48,19,-53,40,24,41,37,-16,-1,-23,61,45,6,-40,1,9,-11,-11,-34,25,55,33,76,-57,-4,-28,-34,34,42,54,-14,-2,-35,-9,-51,-15,-36,-8,71,8,-5,87,-50, 
  /* [3][0][][] */ 32,-31,-31,-112,0,-34,115,-29,25,124,-72,-18,-2,-25,-14,67,57,35,-19,22,-54,27,24,16,-45,80,50,-4,-34,-13,-59,55,-1,-11,36,-27,7,-49,-33,61,3,13,-21,15,57,-51,-6,36,49,-33,28,-34,100,46,35,3,7,-20,-12,-41,-27,50,68,-2,-23,-20,123,-28,-26,-23,-42,30,19,-67,10,-71,13,-41,127,-2,-7,-43,-32,-48,-27,-33,84,84,-41,43,-57,3,16,-75,-20,22, 
  /* [4][0][][] */ -31,75,29,17,-15,16,-35,-17,18,-40,0,-7,26,47,-20,17,-3,-41,-25,-76,37,-31,-75,20,-35,-31,-21,26,-43,127,-56,-14,-1,-38,-3,-32,79,43,-28,-6,11,6,23,-47,-56,-4,62,-22,19,-16,-70,-7,-66,23,43,19,7,53,-20,25,-34,-82,-27,3,57,30,-70,-13,-2,5,1,-75,-11,66,65,73,-44,19,-71,35,14,65,22,-76,56,-78,-39,-73,-52,-46,-57,-19,-1,9,43,-34, 
  /* [5][0][][] */ 3,-13,39,-19,-13,-20,-21,1,34,4,-14,-4,-20,-28,22,-18,-18,2,-48,-34,-25,8,-20,9,21,-48,64,-22,3,40,7,71,-7,-84,23,12,-39,-25,-32,6,-45,-3,-26,18,0,23,-66,24,-22,12,51,-15,21,-71,-1,20,-25,-49,4,-33,37,25,19,44,-39,5,110,-20,-8,-27,11,20,-5,28,30,10,1,-14,127,42,-20,-12,-23,34,35,64,6,92,6,-39,-12,14,5,-9,-31,24, 
  /* [6][0][][] */ 26,-54,78,14,-38,108,-56,-105,-21,-70,-88,61,9,15,-34,97,10,35,27,-42,-92,-27,-75,-62,11,-59,-5,65,-127,55,-28,-35,50,85,-20,-4,-3,-46,12,-10,-58,36,34,-30,19,50,-100,0,59,4,-79,-123,77,15,-35,-13,26,-24,21,-26,-14,-38,41,2,61,-66,-69,-62,-106,11,-4,-85,-35,-106,22,-111,98,14,-81,55,-41,87,21,-94,61,-39,-9,-4,-63,74,-80,92,55,-55,61,-103, 
  /* [7][0][][] */ -3,-8,-64,64,-29,-10,34,-11,-99,6,86,61,-5,-66,-5,-31,-8,-9,7,4,-56,-21,-34,-40,78,44,-8,71,-4,35,24,29,-56,-127,38,113,2,14,-49,15,0,-15,3,-76,25,67,78,94,-17,42,-43,15,30,-41,37,-51,-13,42,-87,-15,59,12,6,-39,84,-40,111,-16,-58,-30,76,3,-19,-27,-86,-30,33,-34,99,-29,-8,-7,-74,-28,40,23,-75,50,-3,14,1,37,74,-5,88,-16, 
  /* [8][0][][] */ -10,-61,10,3,-14,0,22,-1,-10,-8,43,43,12,26,-39,-10,72,2,9,2,-8,-67,-37,-20,-24,-29,66,8,-20,42,7,-26,-18,2,-2,-5,-45,-19,21,-31,-9,41,31,-42,15,-20,20,-17,34,3,44,4,0,6,-44,-4,-18,100,-54,-7,-14,-64,-55,-9,-88,-34,-18,14,-7,15,32,-18,-26,-127,44,-102,6,8,-57,13,-27,-13,-3,52,68,-65,-44,47,-43,90,12,-25,-54,-1,2,-58, 
  /* [9][0][][] */ -27,-32,-26,16,-2,21,1,41,-46,4,66,51,-29,52,27,-46,-17,37,-18,-45,3,33,4,2,-17,23,8,16,28,-9,10,-5,-15,-21,0,51,-24,-11,25,0,-14,-27,17,6,14,42,-2,42,-39,10,-17,26,127,20,-16,-3,11,-20,36,15,-35,-1,80,5,8,18,67,1,23,-2,-16,17,3,-123,-41,-120,-25,-11,39,3,-4,28,-2,-45,36,14,-51,0,4,104,38,27,50,33,-18,31, 
  /* [10][0][][] */ 19,37,16,-8,-22,17,-42,-19,60,6,-32,17,18,10,-3,-57,-33,5,17,-7,27,-18,-19,-36,18,-18,-91,43,-25,49,-8,14,17,21,-23,3,8,-1,7,-3,35,-11,57,-36,-27,-5,13,27,16,8,6,-27,-19,-16,-5,30,-16,4,-8,-11,-17,-42,-3,5,-8,-21,-84,-33,-60,-12,41,-18,-24,27,27,15,53,-22,-83,10,-12,26,-4,-9,5,4,-73,-127,-22,28,11,19,42,-32,15,37, 
  /* [11][0][][] */ 24,-49,9,1,-67,37,12,1,72,-22,-18,-50,25,15,11,-14,-39,58,24,-66,10,26,18,-34,47,17,62,2,23,-64,-36,22,19,103,-110,4,9,-19,62,14,-55,47,-17,22,-42,2,-18,0,49,-13,-31,-20,-18,15,-83,91,-38,-1,1,-36,16,-2,-5,-74,-12,-50,-127,-88,-7,-31,-97,33,50,18,-16,-6,47,56,-113,-34,-14,-11,-18,-6,-23,-5,56,74,30,-47,11,5,-44,27,79,38, 
  /* [12][0][][] */ 24,34,-38,-21,21,-28,11,36,56,-36,16,-4,3,-10,-7,17,8,-48,-23,16,6,61,8,58,-40,-39,-127,-15,82,-21,36,-7,-13,-74,75,-6,37,-10,-9,23,3,-58,14,28,45,2,30,-10,-63,-6,-50,95,72,-19,40,-69,14,27,-42,-30,21,60,78,10,-8,-9,29,30,121,21,30,30,3,-16,-5,-4,-34,-53,41,-64,22,-39,35,-34,9,15,12,-108,-6,35,-39,22,23,68,9,35, 
  /* [13][0][][] */ -12,26,-74,25,28,13,-7,14,30,69,-31,44,-52,-20,65,-48,19,46,56,12,-31,-43,-7,16,46,49,-12,23,13,35,49,-22,-11,68,-5,44,20,-39,-52,-44,5,-17,20,13,47,50,-27,53,-38,32,3,-3,-15,-43,64,44,16,-45,-12,-13,27,22,5,-25,19,95,127,35,19,-3,-44,-19,36,50,-69,51,19,-65,120,-41,-13,-27,19,2,31,59,-30,-18,-12,-21,9,49,49,15,59,47, 
  /* [14][0][][] */ -6,58,13,29,-51,-47,24,39,-74,-20,69,12,-80,-5,68,-23,-48,31,-61,27,-32,26,-99,20,-55,4,-50,-114,21,-3,36,71,-58,28,19,-13,-24,-66,-15,-39,33,-31,51,-30,-13,47,-69,26,-6,-50,89,31,-17,28,-25,37,-50,35,-3,44,48,70,-12,51,20,-40,-2,-62,52,54,77,35,-47,38,17,18,21,-8,37,18,-72,127,4,-125,87,6,3,14,-108,-17,-21,-2,-19,13,45,24, 
  /* [15][0][][] */ 66,-44,33,27,28,12,-11,-6,18,26,-60,-21,70,70,-4,-23,-14,17,-81,46,11,-31,13,23,68,-38,90,33,36,-30,-47,76,61,51,-7,-77,59,71,75,48,87,43,-18,11,-41,-127,33,-44,-40,-14,-19,-5,-10,-55,-34,45,-19,2,-8,17,-7,-64,-37,26,32,38,-71,33,-22,-24,-10,-6,-1,-122,-60,-107,-21,15,-122,31,82,-48,45,25,-58,-14,-14,-19,36,92,14,-69,-43,-30,37,-27, 
};
const TfArray<4, int> tensor_dimension30 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant30_scale = { 16, { 0.0037393269594758749, 0.0021046835463494062, 0.0023377942852675915, 0.0025648451410233974, 0.0031781811267137527, 0.0057822107337415218, 0.0022897352464497089, 0.00285520707257092, 0.005000079981982708, 0.0043512722477316856, 0.0043145227245986462, 0.0028476754669100046, 0.0035347167868167162, 0.004131742287427187, 0.003127256641164422, 0.0031263369601219893, } };
const TfArray<16, int> quant30_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int32_t tensor_data31[16] = { -28546, -1409, -415, -17226, 16467, -14232, 22910, -12553, 15077, -8651, 14823, 14131, -8606, -32598, -2578, 8872, };
const TfArray<1, int> tensor_dimension31 = { 1, { 16 } };
const TfArray<16, float> quant31_scale = { 16, { 8.7984168203547597e-05, 4.9521968321641907e-05, 5.500692714122124e-05, 6.0349299019435421e-05, 7.4780735303647816e-05, 0.00013605202548205853, 5.3876123274676502e-05, 6.7181346821598709e-05, 0.00011764894588850439, 0.0001023828808683902, 0.0001015181842376478, 6.7004126321990043e-05, 8.3169805293437093e-05, 9.7217467555310577e-05, 7.3582508775871247e-05, 7.3560870077926666e-05, } };
const TfArray<16, int> quant31_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int8_t tensor_data32[96*1*1*16] = { 
  /* [0][0][][] */ -43,51,-5,-37,-25,-62,-55,-38,64,-49,35,-47,94,-116,14,-127, 
  /* [1][0][][] */ -95,53,-90,-95,-82,15,-7,50,-35,11,96,-46,38,127,16,54, 
  /* [2][0][][] */ -53,-8,-86,14,-5,-38,36,-28,-83,127,66,9,40,65,-43,111, 
  /* [3][0][][] */ -60,-74,2,-41,-91,13,-58,-127,-7,17,48,-74,-78,-38,-119,-47, 
  /* [4][0][][] */ 82,-9,-3,34,-59,-17,-127,30,22,54,0,38,17,-6,-41,-85, 
  /* [5][0][][] */ -106,48,-92,-24,66,-50,-21,-73,89,-38,26,-35,15,-110,-127,-100, 
  /* [6][0][][] */ -10,-29,-42,11,-93,69,50,-43,-31,-48,127,-28,-6,-3,-122,12, 
  /* [7][0][][] */ -19,94,127,-71,59,71,-6,-50,43,61,-88,-26,64,-4,24,60, 
  /* [8][0][][] */ -56,14,21,0,54,17,96,127,-72,-17,-49,-76,31,97,-67,-50, 
  /* [9][0][][] */ 39,41,107,14,-113,-34,-101,-125,76,11,127,34,-42,-124,49,-28, 
  /* [10][0][][] */ -18,-125,8,-78,-116,66,33,27,-28,-58,-7,35,-28,45,-127,23, 
  /* [11][0][][] */ 125,-64,-3,87,-102,-37,56,-7,127,99,-63,35,29,-94,-11,98, 
  /* [12][0][][] */ -57,-68,127,-19,53,-22,15,51,53,-35,85,61,-13,9,-75,14, 
  /* [13][0][][] */ 1,-36,27,21,21,4,127,36,-114,4,9,13,-32,127,92,-76, 
  /* [14][0][][] */ 123,-84,127,2,78,65,113,69,79,83,76,44,81,-34,42,-49, 
  /* [15][0][][] */ -15,125,1,-34,25,127,-69,64,-36,-13,-37,-4,-58,109,-18,-39, 
  /* [16][0][][] */ -46,63,104,-45,25,83,2,-9,-6,9,-10,39,81,8,80,127, 
  /* [17][0][][] */ 6,114,74,-127,32,-44,12,-76,-64,79,-20,55,-69,-20,111,-50, 
  /* [18][0][][] */ -94,-6,-72,-102,127,91,-45,-77,51,83,122,75,-6,111,-52,-17, 
  /* [19][0][][] */ 35,127,74,60,47,-32,-3,-15,-23,110,46,99,49,68,-59,43, 
  /* [20][0][][] */ 106,2,-2,80,-74,-8,-39,53,-36,-59,-127,-44,88,-48,31,-8, 
  /* [21][0][][] */ -100,-73,-34,118,-37,15,-127,61,1,-16,41,25,-48,41,-73,16, 
  /* [22][0][][] */ -1,1,-55,-42,127,-14,-48,59,55,85,40,71,-32,20,-7,38, 
  /* [23][0][][] */ -63,30,-24,25,11,56,87,75,-12,127,-10,-23,-1,37,-49,-22, 
  /* [24][0][][] */ 28,-78,41,-6,127,32,68,-35,50,24,43,29,-63,32,-6,-21, 
  /* [25][0][][] */ 127,-69,88,29,9,-6,-45,101,121,-30,-43,4,115,-54,89,54, 
  /* [26][0][][] */ 49,27,99,77,79,-16,-62,-12,5,61,14,127,21,-68,20,-59, 
  /* [27][0][][] */ -45,42,-64,10,-21,115,7,-102,22,-97,125,8,62,-30,127,102, 
  /* [28][0][][] */ -45,24,-76,-127,26,-87,-5,-54,-85,74,-49,22,-25,19,-30,71, 
  /* [29][0][][] */ 93,96,-64,36,42,77,-51,-27,40,38,11,58,-127,21,-27,78, 
  /* [30][0][][] */ -31,75,-127,-67,77,-43,28,15,-46,50,-69,-3,8,62,-15,123, 
  /* [31][0][][] */ 28,-120,98,33,67,-89,-86,23,-26,-11,19,-33,-69,52,25,127, 
  /* [32][0][][] */ -50,74,5,44,-118,56,13,66,23,-127,20,-81,33,40,62,45, 
  /* [33][0][][] */ -69,-12,72,88,3,18,-61,21,-49,-57,8,-16,-15,2,12,127, 
  /* [34][0][][] */ -21,10,-87,-82,47,-5,-1,52,23,-11,8,-25,-55,-36,-31,127, 
  /* [35][0][][] */ 67,-3,19,-10,2,24,-78,-17,-22,-127,-44,8,-3,-20,42,-18, 
  /* [36][0][][] */ 9,31,-120,-12,36,127,-13,43,-29,22,48,32,12,21,-68,48, 
  /* [37][0][][] */ 41,32,54,-46,46,-127,25,-23,-94,63,-64,-22,-14,19,79,40, 
  /* [38][0][][] */ -47,127,26,-53,29,15,73,-107,13,-8,-98,42,-54,-81,-89,19, 
  /* [39][0][][] */ 100,41,-117,-124,-8,-37,18,-55,4,-12,-2,-40,77,2,-127,-79, 
  /* [40][0][][] */ -41,27,-72,-83,-43,-16,19,-127,-6,-3,11,-36,36,81,35,71, 
  /* [41][0][][] */ -36,-97,-14,127,-2,-25,-67,-13,-5,-52,67,-64,-64,-11,0,31, 
  /* [42][0][][] */ -21,75,-23,-127,26,20,17,-30,54,11,-44,17,74,-19,-19,14, 
  /* [43][0][][] */ 5,54,3,22,127,31,11,23,4,39,12,-81,-114,-34,0,-5, 
  /* [44][0][][] */ 85,-13,26,37,-23,-15,-1,29,30,-46,28,3,127,5,-56,-27, 
  /* [45][0][][] */ 19,-94,-60,36,-40,-95,0,38,34,-28,19,30,-87,127,31,-34, 
  /* [46][0][][] */ -27,-72,31,73,5,5,-87,56,21,-47,58,-11,20,81,63,127, 
  /* [47][0][][] */ -28,-47,24,69,4,-10,49,10,5,-65,-127,-39,53,-31,-65,13, 
  /* [48][0][][] */ -72,88,-18,-26,6,52,-4,-121,27,-29,39,-56,51,-127,-48,10, 
  /* [49][0][][] */ -54,5,50,-38,8,5,127,124,-32,-39,-13,26,-46,31,-59,27, 
  /* [50][0][][] */ 69,16,-63,31,38,-127,-47,-10,-82,35,-50,-12,28,-79,-117,-48, 
  /* [51][0][][] */ -46,75,-32,113,-41,42,-52,-88,-52,-92,8,-45,6,45,-16,127, 
  /* [52][0][][] */ -120,-5,29,-3,27,37,51,6,12,-94,-40,-52,-100,-54,-127,-7, 
  /* [53][0][][] */ -51,-67,-60,-127,-34,-3,10,79,46,-61,-45,28,-33,30,58,105, 
  /* [54][0][][] */ 2,-51,1,-2,-52,56,50,-20,-13,-74,59,28,-15,-18,-127,41, 
  /* [55][0][][] */ -12,-28,-33,24,65,-24,63,77,-50,-70,-127,-37,61,-30,-30,34, 
  /* [56][0][][] */ 74,-22,-57,-17,-127,21,-109,-10,-13,-10,-39,24,105,-24,56,19, 
  /* [57][0][][] */ -49,6,28,-39,127,29,42,37,-36,42,1,0,-64,77,-106,-30, 
  /* [58][0][][] */ 20,6,0,-17,37,-9,-46,-58,40,-127,-53,-8,-67,-39,-34,59, 
  /* [59][0][][] */ -76,-36,-5,7,12,57,-103,-40,82,127,-81,15,-25,5,-22,2, 
  /* [60][0][][] */ 11,-51,-5,7,-127,-38,24,10,-6,43,-9,55,-12,-40,34,35, 
  /* [61][0][][] */ 24,25,-69,0,-39,-37,-127,-68,-17,7,37,85,70,-44,97,64, 
  /* [62][0][][] */ 42,-28,58,-36,-15,39,38,124,-61,127,34,100,14,36,62,101, 
  /* [63][0][][] */ 14,-127,-19,-10,-77,17,44,-20,-7,-18,1,-14,-40,120,109,38, 
  /* [64][0][][] */ -10,-7,-127,-32,22,49,26,-21,-7,-106,53,0,66,-37,-69,113, 
  /* [65][0][][] */ -23,-8,60,77,88,-13,94,96,-46,-13,-127,-94,22,124,-95,-8, 
  /* [66][0][][] */ -61,-127,-29,-112,-81,-115,66,-24,-14,-53,39,108,-82,-42,-71,98, 
  /* [67][0][][] */ -44,-90,-95,-18,-83,127,-15,-125,-102,-27,-34,-116,12,-17,-72,58, 
  /* [68][0][][] */ 127,48,27,-13,-71,16,-48,-56,-71,-96,-35,-13,49,-40,65,-66, 
  /* [69][0][][] */ 29,9,34,-21,2,-46,-37,26,-16,127,-21,9,-9,37,58,-20, 
  /* [70][0][][] */ 52,-12,-16,66,-120,25,-20,-98,98,127,20,71,57,-62,4,13, 
  /* [71][0][][] */ 127,-74,71,102,-87,-51,54,-23,127,15,-65,52,82,-65,30,15, 
  /* [72][0][][] */ 1,-34,46,95,54,-7,-127,78,78,-9,38,3,-30,-64,-64,82, 
  /* [73][0][][] */ 75,22,82,-127,73,-72,-75,48,-11,115,-41,16,26,-89,24,-55, 
  /* [74][0][][] */ 87,13,26,39,-127,-25,44,-2,-79,-52,11,-34,25,-66,5,18, 
  /* [75][0][][] */ 73,127,-114,24,60,72,-10,-24,-22,-16,56,78,-123,51,50,84, 
  /* [76][0][][] */ -79,-38,-5,-38,-47,3,82,8,-72,30,99,41,-58,-127,-21,82, 
  /* [77][0][][] */ -68,127,-19,26,-60,-82,52,88,54,-70,-2,73,-15,45,-16,97, 
  /* [78][0][][] */ 115,52,-56,32,-65,30,-127,-24,-16,-16,-64,0,44,-91,19,70, 
  /* [79][0][][] */ -79,-30,125,64,-18,-104,-51,-49,-25,37,17,16,-82,127,-54,83, 
  /* [80][0][][] */ 61,94,28,-127,-21,24,84,-27,8,12,-44,15,79,-52,7,7, 
  /* [81][0][][] */ 41,-70,19,-121,102,37,-7,127,113,30,-32,-53,-23,8,-93,-68, 
  /* [82][0][][] */ 68,46,64,6,127,-106,33,42,1,104,-25,19,-21,-33,28,-88, 
  /* [83][0][][] */ -59,74,8,30,77,67,127,116,3,53,-10,-65,-103,110,-57,-80, 
  /* [84][0][][] */ 11,-109,-2,107,2,-108,-100,31,-95,57,-62,-19,-127,81,-18,-49, 
  /* [85][0][][] */ -116,49,-29,-7,-29,-55,-52,-41,-30,40,15,-81,-127,-95,-72,53, 
  /* [86][0][][] */ -26,78,77,116,20,-33,50,17,-3,14,-30,-79,17,87,-127,-56, 
  /* [87][0][][] */ -26,50,127,-22,-113,-26,23,22,33,-28,21,46,-64,24,-7,-1, 
  /* [88][0][][] */ -22,-87,-119,21,41,18,-17,15,-15,-113,-124,-116,127,-19,1,41, 
  /* [89][0][][] */ 26,21,4,-120,8,-70,-51,48,127,-26,39,-98,3,-27,43,-66, 
  /* [90][0][][] */ -5,63,20,16,-42,41,40,120,2,-52,-11,127,44,6,-35,77, 
  /* [91][0][][] */ -40,5,-11,49,74,46,-26,-117,-26,27,-18,19,-93,-127,-48,-26, 
  /* [92][0][][] */ -19,57,10,-29,-127,-4,-90,48,-38,47,80,76,-7,-27,66,-2, 
  /* [93][0][][] */ 111,42,111,35,-127,-91,20,15,-12,-81,-26,-78,14,-71,-19,-11, 
  /* [94][0][][] */ -36,-127,19,-99,10,38,-19,11,77,-20,4,59,10,57,-41,41, 
  /* [95][0][][] */ -43,-74,-12,-69,127,112,-20,45,91,58,-95,45,-20,113,-93,31, 
};
const TfArray<4, int> tensor_dimension32 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant32_scale = { 96, { 0.0015333747724071145, 0.0014289927203208208, 0.0019294581143185496, 0.0022204744163900614, 0.002274657366797328, 0.0013090828433632851, 0.0012541551841422915, 0.0020283651538193226, 0.0023362278006970882, 0.0011539899278432131, 0.0027208423707634211, 0.001410646247677505, 0.0022136182524263859, 0.0020113929640501738, 0.0016174972988665104, 0.0019444761564955115, 0.0024779241066426039, 0.0011088036699220538, 0.0014179418794810772, 0.0026519983075559139, 0.0014467379078269005, 0.00074361381120979786, 0.0011631987290456891, 0.0023106359876692295, 0.0024564510677009821, 0.0014805442187935114, 0.0011326667154207826, 0.0019083966035395861, 0.0022629729937762022, 0.0023026617709547281, 0.0012651088181883097, 0.001701951608993113, 0.0012901853770017624, 0.0021751152817159891, 0.0022145872935652733, 0.0019287103787064552, 0.0022212304174900055, 0.0016173484036698937, 0.0021064979955554008, 0.0023485710844397545, 0.0023320855107158422, 0.0019764236640185118, 0.0026495493948459625, 0.0032123816199600697, 0.0029027280397713184, 0.0021423690486699343, 0.0014292940031737089, 0.0018924177857115865, 0.0019536998588591814, 0.0024991468526422977, 0.0016910583944991231, 0.0017979296389967203, 0.0021116586867719889, 0.0029635503888130188, 0.0028125261887907982, 0.002203312236815691, 0.0022579873912036419, 0.0018596305744722486, 0.0015211869031190872, 0.0030499661806970835, 0.0030479338020086288, 0.0021257505286484957, 0.0017692778492346406, 0.0025151001755148172, 0.0020181578584015369, 0.0013098230119794607, 0.0015097864670678973, 0.0021540620364248753, 0.0014155601384118199, 0.0029480836819857359, 0.0014117894461378455, 0.0014192070811986923, 0.0017946953885257244, 0.0014677399303764105, 0.0021460510324686766, 0.0015225802781060338, 0.0022963760420680046, 0.00180941226426512, 0.0020958518143743277, 0.0017122706631198525, 0.001763666863553226, 0.0017522730631753802, 0.0012368694879114628, 0.0017724705394357443, 0.0017470290185883641, 0.0015863032313063741, 0.0032782475464046001, 0.0034384604077786207, 0.00065915228333324194, 0.0032042076345533133, 0.0032164726871997118, 0.0027629469987004995, 0.0011807333212345839, 0.0015087776118889451, 0.0030073276720941067, 0.0020178426057100296, } };
const TfArray<96, int> quant32_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int32_t tensor_data33[96] = { 7797, 3666, 1219, -1396, 4676, 9186, 10414, 2139, -105, 10477, 1101, -5166, 3429, 3429, 833, -515, 3672, 10491, -407, 111, 6252, 18218, 11666, -1711, -3541, -1489, 12404, -183, 1726, 1119, 10000, -2691, 9400, 3461, 4701, -4917, 855, -5974, 69, 2120, 3135, 1927, 2165, -452, 1308, 2783, 6586, 4925, 4772, 3261, 6352, 3659, -2927, 1909, 1344, 2806, 2519, 3495, 8291, 1091, -913, 5202, 5131, 3881, 4429, 8800, -5713, 3110, 7159, -672, 7529, 2361, 3635, 4468, 4004, 3071, -753, 3017, 2812, 4461, 3720, 3853, 9482, 1106, 2988, 6609, 653, -922, 22605, -311, 875, -1304, 11096, 4614, 74, -892, };
const TfArray<1, int> tensor_dimension33 = { 1, { 96 } };
const TfArray<96, float> quant33_scale = { 96, { 9.8720403912011534e-05, 9.200016938848421e-05, 0.00012422069266904145, 0.00014295664732344449, 0.00014644501789007336, 8.4280232840683311e-05, 8.0743928265292197e-05, 0.00013058843614999205, 0.00015040898870211095, 7.4295174272265285e-05, 0.00017517090600449592, 9.0818997705355287e-05, 0.00014251524407882243, 0.00012949574738740921, 0.00010413630661787465, 0.00012518756557255983, 0.00015953155525494367, 7.138603541534394e-05, 9.1288697149138898e-05, 0.00017073865456040949, 9.3142618425190449e-05, 4.7874698793748394e-05, 7.4888048402499408e-05, 0.00014876136265229434, 0.00015814909420441836, 9.5319112006109208e-05, 7.2922361141536385e-05, 0.000122864730656147, 0.00014569275663234293, 0.00014824797108303756, 8.1449135905131698e-05, 0.0001095735642593354, 8.3063590864185244e-05, 0.00014003638352733105, 0.00014257762813940644, 0.00012417255493346602, 0.00014300532347988337, 0.00010412671690573916, 0.00013561872765421867, 0.00015120365424081683, 0.00015014229575172067, 0.00012724439147859812, 0.00017058098455891013, 0.00020681675232481211, 0.00018688090494833887, 0.00013792814570479095, 9.2019559815526009e-05, 0.00012183599756099284, 0.00012578140012919903, 0.00016089789278339595, 0.00010887224925681949, 0.00011575274402275681, 0.00013595097698271275, 0.00019079672347288579, 0.00018107361393049359, 0.00014185173495206982, 0.00014537178503815085, 0.00011972511856583878, 9.7935728263109922e-05, 0.00019636026991065592, 0.00019622941908892244, 0.00013685821613762528, 0.00011390810686862096, 0.00016192499606404454, 0.00012993128621019423, 8.4327883087098598e-05, 9.7201758762821555e-05, 0.00013868094538338482, 9.1135363618377596e-05, 0.0001898009650176391, 9.0892601292580366e-05, 9.1370158770587295e-05, 0.00011554452066775411, 9.449475328437984e-05, 0.00013816519640386105, 9.8025440820492804e-05, 0.00014784328232053667, 0.00011649200314423069, 0.00013493330334313214, 0.00011023791739717126, 0.00011354686284903437, 0.00011281332263024524, 7.9631055996287614e-05, 0.00011411365267122164, 0.0001124757036450319, 0.00010212799679720774, 0.00021105728228576481, 0.00022137197083793581, 4.2436968215042725e-05, 0.00020629051141440868, 0.00020708014199044555, 0.00017788165132515132, 7.6016942330170423e-05, 9.713680628919974e-05, 0.00019361515296623111, 0.00012991098628845066, } };
const TfArray<96, int> quant33_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int8_t tensor_data34[1*3*3*96] = { 
  /* [0][0][][] */ 27,127,-14,3,-35,5,37,45,60,-72,-75,38,-10,-8,34,-66,-102,12,16,23,46,62,70,80,13,-15,-41,11,-10,25,13,-14,-46,13,-39,77,-16,50,-6,-2,30,-35,-6,39,-94,-61,8,-36,-27,-85,-8,5,31,55,-15,-7,-72,-81,-56,-127,-127,-2,-101,11,-19,42,37,-25,-14,35,35,0,-60,2,36,12,-2,-49,-64,28,-6,-101,43,-29,-84,-48,-6,16,-110,7,-60,44,75,-3,74,-5, -33,-21,-8,85,-12,84,-28,4,66,28,-127,66,-28,-69,-85,127,-123,71,40,85,127,18,90,127,31,9,20,58,14,127,-18,-127,78,90,-2,29,64,116,-40,-122,127,-6,83,127,-49,-96,127,-71,-20,-127,-81,-20,29,127,-28,-127,-3,34,-118,-77,-57,-126,-54,103,-30,94,123,-21,16,127,127,4,-97,33,-39,-85,20,-60,-6,127,-14,-99,127,-73,-127,-50,75,68,86,89,-68,11,127,-24,127,25, 22,-94,-10,7,-23,-12,-18,52,32,71,-84,19,-15,41,19,-94,-36,12,6,26,41,44,43,85,13,-37,25,58,14,29,-22,-42,-46,-73,-39,50,-8,3,8,27,-1,37,-16,56,-45,-32,-5,1,29,-72,33,19,-11,-10,11,3,48,-94,-10,-81,-69,12,-71,-1,44,14,-77,-16,-17,-14,-1,12,-19,-45,-13,18,8,-30,-61,-4,-1,-112,23,-16,-20,-46,-1,-21,-85,-8,-12,43,17,42,24,-7, 
  /* [0][1][][] */ 81,-7,75,108,3,-54,127,46,-33,-127,-127,127,-1,-126,-46,38,-75,-59,70,20,-92,-4,-122,-65,-22,66,-127,127,-78,78,127,102,30,69,19,127,-124,77,-28,-68,59,-127,24,67,-127,-82,6,-127,-125,-99,-127,14,127,-70,91,-23,-127,-11,-80,0,-42,-85,-37,62,-101,-27,102,-89,-48,39,-35,-127,-127,63,127,-66,88,75,-98,-40,127,-102,-33,112,-46,-23,21,85,-6,21,-64,34,1,-97,90,-18, -127,19,-55,127,-73,-127,-126,-127,62,10,-55,38,-64,-127,-52,105,-127,-127,127,127,37,-127,-127,74,-127,127,15,67,-70,-28,-98,92,-127,79,127,-28,36,127,127,-113,-43,24,19,42,-51,-127,-65,-102,-12,-120,-106,127,31,73,45,-90,26,25,78,-14,-10,-47,-127,127,-10,-127,127,127,29,80,-89,-79,-9,63,-105,-127,127,127,69,-38,-71,0,-83,60,-103,-115,127,127,127,127,-127,-127,-80,-68,82,127, 53,-2,87,76,1,-25,3,39,-46,113,-103,62,7,-6,-127,88,21,-45,18,-1,-95,2,-79,-48,-12,39,110,-4,127,99,11,-114,-31,-127,-16,113,-127,13,-38,-43,-8,115,19,101,-29,-19,-8,-90,127,-89,-93,-9,45,-94,-127,19,104,-9,-127,57,-8,-65,14,70,127,-48,-44,-12,-51,-6,-34,-48,-126,-127,-3,-47,0,-37,-127,-42,-70,-127,-23,127,-112,13,14,-13,-28,-10,3,51,-13,127,27,-18, 
  /* [0][2][][] */ 30,-111,45,-21,14,18,34,53,-41,-43,17,-34,10,4,14,45,-2,20,-3,27,-10,41,14,-26,12,53,-9,-7,-29,9,9,37,-25,-13,-17,0,55,23,-6,-25,0,18,-15,-45,-24,-43,-19,-9,-17,40,-35,31,-10,-11,-22,-18,4,-12,-15,31,-22,1,31,1,-29,40,-90,-27,19,0,13,71,-30,12,21,-3,-38,-29,-30,2,6,-14,-22,-27,-63,28,-22,-24,-87,35,-7,27,-7,-10,6,-19, -46,14,127,-9,127,67,-25,14,-127,18,-74,-33,127,-33,-70,38,32,62,-3,-46,8,17,48,-26,70,-69,-6,30,-11,91,-7,41,-85,22,21,-13,87,51,17,-127,-21,-8,-127,-10,-32,-9,-41,-54,-12,-47,-32,83,110,-76,-32,-73,-2,127,-49,15,79,-127,65,75,-31,16,-92,16,127,-5,9,85,-93,26,-22,-59,-3,-73,-47,-20,-4,-89,-24,-55,-66,127,25,-3,74,56,29,32,-22,-25,-5,3, 14,94,27,-30,4,-6,-20,48,11,76,15,5,8,9,7,56,-23,3,-7,22,-17,33,9,-25,4,58,12,23,7,14,-19,-87,-49,-26,-11,-21,38,-23,-9,-3,-7,-9,-3,-2,-40,-19,-19,2,13,33,-18,2,-27,-13,-4,7,13,7,0,62,-38,31,30,-5,33,8,-105,20,21,-2,16,67,-6,-19,-6,-3,-10,-14,3,7,-8,-47,-19,-5,-58,29,1,-37,-89,33,4,21,-12,12,-16,-22, 
};
const TfArray<4, int> tensor_dimension34 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant34_scale = { 96, { 0.011709267273545265, 0.0084626041352748871, 0.0063544311560690403, 0.0067176725715398788, 0.011491203680634499, 0.01274432335048914, 0.011512288823723793, 0.0079665593802928925, 0.009257875382900238, 0.0059498827904462814, 0.0051157721318304539, 0.016874620690941811, 0.010968558490276337, 0.0062781050801277161, 0.0076649729162454605, 0.0061041833832859993, 0.0055013480596244335, 0.0097486013546586037, 0.0075822584331035614, 0.0061103645712137222, 0.0075637255795300007, 0.013847257941961288, 0.0098612383008003235, 0.010315273888409138, 0.024399556219577789, 0.0080282129347324371, 0.01205152366310358, 0.0061806598678231239, 0.0090692294761538506, 0.0043628956191241741, 0.012167437002062798, 0.011332230642437935, 0.007680065929889679, 0.0087181571871042252, 0.011772509664297104, 0.019362764433026314, 0.0075519676320254803, 0.018834745511412621, 0.01550874300301075, 0.0058963410556316376, 0.0084130680188536644, 0.0087954048067331314, 0.010546142235398293, 0.0057934303767979145, 0.0062309936620295048, 0.0046259267255663872, 0.012838210910558701, 0.0058158878237009048, 0.0076237982138991356, 0.0049686557613313198, 0.0069709946401417255, 0.0059657986275851727, 0.0088780475780367851, 0.0070325015112757683, 0.0086981533095240593, 0.0086740152910351753, 0.0085401972755789757, 0.0077510345727205276, 0.0060808379203081131, 0.0059750895015895367, 0.0083330664783716202, 0.0077495379373431206, 0.0075428076088428497, 0.0051168208010494709, 0.0073971017263829708, 0.0089435949921607971, 0.007322914432734251, 0.0093331914395093918, 0.010474965907633305, 0.0097939502447843552, 0.0094125168398022652, 0.0065659750252962112, 0.0049301586113870144, 0.0090929782018065453, 0.012680516578257084, 0.0062101297080516815, 0.0079833716154098511, 0.0094765052199363708, 0.0089980587363243103, 0.010978825390338898, 0.011636517010629177, 0.0051450459286570549, 0.010160774923861027, 0.0077686058357357979, 0.0039845886640250683, 0.0070344982668757439, 0.0073577482253313065, 0.0097819110378623009, 0.008731599897146225, 0.0096986545249819756, 0.0058747204020619392, 0.013483928516507149, 0.0087023722007870674, 0.010496639646589756, 0.005320684053003788, 0.013094355352222919, } };
const TfArray<96, int> quant34_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 3 };
const ALIGN(16) int32_t tensor_data35[96] = { 474, -2012, -2936, -5480, 229, 3655, 408, 82, -393, -3541, 11559, -2513, -1063, 11584, 7991, -5565, 15698, 2770, -5832, -384, -1104, 322, 2174, -2077, 819, -4853, -714, -5650, -246, -9393, -123, -1472, 12448, -633, -1950, -74, -577, -1552, -81, 9725, -611, -746, 1664, -5763, 12881, 16719, 1232, 14929, 357, 14107, 13060, -4788, -1076, 1192, -174, 11203, -1900, 458, 18126, 6885, 8232, 15337, 9461, -11371, 551, 3438, -3578, 1999, -4008, -2709, 1572, 3813, 14767, -312, -289, 11775, -982, 684, 9014, -821, 198, 17158, -791, 2097, 17995, 2984, -5058, -3773, -638, -6100, 12114, 162, -2343, 423, -4934, -4010, };
const TfArray<1, int> tensor_dimension35 = { 1, { 96 } };
const TfArray<96, float> quant35_scale = { 96, { 0.00022157630883157253, 0.00016013919957913458, 0.00012024590250803158, 0.00012711957970168442, 0.00021744986588601023, 0.00024116283748298883, 0.00021784886484965682, 0.00015075245755724609, 0.0001751882373355329, 0.00011259056918788701, 9.6806565125007182e-05, 0.00031932111596688628, 0.0002075597585644573, 0.00011880157398991287, 0.00014504548744298518, 0.00011551042553037405, 0.00010410288086859509, 0.00018447432375978678, 0.00014348026888910681, 0.00011562739382497966, 0.00014312956773210317, 0.00026203383458778262, 0.00018660577188711613, 0.00019519755733199418, 0.00046171664143912494, 0.00015191914280876517, 0.00022805288608651608, 0.00011695759894791991, 0.00017161846335511655, 8.2559759903233498e-05, 0.00023024632537271827, 0.00021444159210659564, 0.00014533109788317233, 0.000164975062943995, 0.00022277305833995342, 0.00036640465259552002, 0.00014290706894826144, 0.00035641287104226649, 0.00029347438248805702, 0.00011157739209011197, 0.00015920180885586888, 0.00016643683193251491, 0.00019956631876993924, 0.00010962999658659101, 0.00011791008000727743, 8.7537140643689781e-05, 0.00024293949536513537, 0.00011005496344296262, 0.00014426633424591273, 9.4022660050541162e-05, 0.00013191322796046734, 0.00011289175017736852, 0.00016800069715827703, 0.0001330771337961778, 0.00016459652397315949, 0.00016413975390605628, 0.00016160750237759203, 0.00014667405048385262, 0.00011506865848787129, 0.00011306755914120004, 0.00015768792945891619, 0.00014664573245681822, 0.00014273374108597636, 9.6826406661421061e-05, 0.00013997651694808155, 0.00016924105875659734, 0.00013857266458217055, 0.00017661345191299915, 0.00019821943715214729, 0.00018533246475271881, 0.00017811454017646611, 0.0001242489815922454, 9.3294169346336275e-05, 0.00017206785560119897, 0.00023995542142074555, 0.00011751526471925899, 0.00015107060607988387, 0.00017932540504261851, 0.00017027168360073119, 0.00020775404118467122, 0.00022019965399522334, 9.7360512882005423e-05, 0.00019227394659537822, 0.00014700654719490558, 7.5401003414299339e-05, 0.00013311492512002587, 0.00013923183723818511, 0.00018510463996790349, 0.00016522944497410208, 0.00018352917686570436, 0.00011116825771750882, 0.00025515852030366659, 0.00016467635578010231, 0.00019862956833094358, 0.00010068414121633396, 0.0002477865491528064, } };
const TfArray<96, int> quant35_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const ALIGN(16) int8_t tensor_data36[16*1*1*96] = { 
  /* [0][0][][] */ -105,41,49,-21,-56,-11,-64,-5,-48,7,-4,-32,44,42,33,-43,14,-5,92,12,2,-44,127,76,51,30,8,28,-68,-124,-87,11,-40,-49,20,19,2,30,4,20,-9,-2,-69,13,-77,-20,-5,77,-27,20,-49,-21,-14,1,23,-55,-96,4,-16,76,59,27,-2,0,-32,-56,-39,22,-44,-64,4,-24,1,1,-68,-35,-52,6,-39,21,-51,62,80,-76,13,51,15,48,33,-9,-2,-22,-35,-33,-49,17, 
  /* [1][0][][] */ 37,13,34,-53,-71,-25,-12,14,-25,27,44,-56,-5,-14,-69,-38,-10,6,-64,16,-6,-81,2,36,-4,-71,-4,-43,68,-98,108,-84,47,26,-12,43,40,60,-19,-38,29,12,-12,-14,17,55,-127,-46,-47,-58,-14,-20,45,-50,-31,41,1,4,-30,16,18,52,-8,-93,-18,-11,-65,-1,-5,-11,-73,-3,-35,-27,8,-78,15,24,35,-79,-29,-30,-80,-24,30,-43,-28,10,-77,-18,-56,45,23,50,-58,45, 
  /* [2][0][][] */ 78,-28,10,19,28,-66,57,-1,-1,-11,-2,-9,-59,-26,14,-24,-85,-54,-30,50,-2,-41,-33,37,-3,-58,8,-27,-37,37,-54,127,-45,111,-31,30,-13,-6,-7,-17,-90,79,79,23,-68,8,-13,-12,29,14,-32,-53,39,-10,-25,58,47,-1,38,-2,16,38,-30,10,69,11,3,-8,36,44,-51,-10,34,48,70,42,21,-70,57,61,87,-14,-46,19,-55,35,25,66,18,17,-19,26,-46,55,-5,39, 
  /* [3][0][][] */ -2,-3,-23,6,19,-4,10,-61,-16,53,38,55,36,-12,-48,40,0,-40,24,17,8,127,36,-38,9,20,-15,4,61,-36,62,-10,-17,32,-31,-22,23,52,36,6,-66,-27,-31,22,-32,28,27,1,-21,-44,-7,-24,39,-79,-37,-43,15,81,-28,-2,-8,-12,-46,6,27,39,-34,-3,-16,-1,7,-70,-34,-40,37,-8,6,-9,-34,-21,-21,0,-53,6,-15,-30,33,-19,4,19,25,-18,44,29,-32,59, 
  /* [4][0][][] */ 36,12,-34,12,27,25,-49,10,-29,79,89,-12,-5,-3,9,-48,8,-12,-32,49,22,-44,51,80,-66,-9,-127,17,-41,-57,12,13,-65,-43,13,56,18,38,17,25,-37,-44,46,-28,-8,3,-35,51,-37,52,11,21,39,-13,-79,22,48,-23,9,-5,40,-13,21,13,-49,16,-37,11,-50,32,-38,53,35,-66,-40,-51,29,-52,-15,6,-38,85,-71,5,-35,28,25,-53,45,0,27,11,-61,-28,31,26, 
  /* [5][0][][] */ -85,39,35,-6,47,-23,66,-49,-19,29,-12,-33,34,-17,-19,-40,-7,-37,53,27,-127,-20,-74,47,-44,-4,43,6,49,-84,-16,46,61,111,-17,34,-10,13,45,-22,-26,97,67,-31,-1,71,49,-2,-1,15,-21,24,20,-44,28,-95,36,-53,-61,-70,66,108,-44,-17,82,-39,-67,-62,-52,-24,-63,-7,-21,16,-25,-41,18,-47,-20,-13,121,-24,22,-87,-76,22,35,-7,-44,39,25,-9,-14,30,13,93, 
  /* [6][0][][] */ 46,-12,-94,34,-33,-117,106,91,-56,76,-9,77,-122,-78,50,57,2,-62,4,10,-12,-24,-65,-54,-60,50,86,24,30,28,96,-48,31,13,15,-72,17,10,38,70,5,20,-53,-15,-5,-55,-88,15,39,-119,-27,70,34,7,-24,-76,80,52,6,-2,-103,61,-87,-3,32,3,5,52,48,19,-9,-53,-30,28,104,41,60,-22,47,-75,-3,-54,-82,61,17,-66,56,21,-34,65,39,41,-33,20,-31,127, 
  /* [7][0][][] */ 29,85,-57,-55,-15,-5,41,6,-51,28,-44,-52,-32,21,18,-11,-50,-53,-40,73,-14,127,19,45,-7,12,20,25,55,45,81,-15,77,34,-28,15,-2,1,7,28,-56,2,20,-53,12,-46,73,-30,36,-70,-93,-32,-54,9,-4,-8,33,10,-110,4,-3,110,18,-24,-20,-6,-36,11,-31,-17,-111,29,13,73,-28,54,-64,52,5,-65,-21,-44,60,-86,40,-21,4,14,-4,78,-84,47,50,-26,-41,17, 
  /* [8][0][][] */ -1,79,-36,40,-38,-24,-88,30,-98,-29,2,2,-43,30,36,91,-2,-42,11,9,36,0,0,-16,-34,67,-6,30,-16,-13,-40,-37,-26,-47,-22,-66,-37,20,43,6,-3,-36,28,5,-34,-40,7,-6,-22,-20,50,72,1,-14,-66,99,-36,24,-2,-34,-42,-1,10,56,-40,-57,-40,-6,-46,12,8,7,-24,-53,-118,-23,-40,29,-67,-45,-27,-2,-38,-26,-8,1,14,26,3,55,-61,-7,-80,-127,22,-54, 
  /* [9][0][][] */ -14,20,-69,47,-39,-37,72,59,-16,52,-32,94,-32,-24,21,127,12,17,73,10,25,16,28,-101,-30,-9,25,-7,17,-12,45,45,-34,2,2,-126,30,-23,-31,-19,-17,19,36,-27,-2,1,16,15,39,81,27,-5,-49,-84,1,-4,-8,-5,64,-24,-72,57,-61,-24,84,-9,-27,11,-76,32,44,44,-9,86,-30,-30,-25,22,-38,-16,52,-37,71,2,26,-20,-18,-43,-60,17,2,4,69,28,-49,-5, 
  /* [10][0][][] */ 71,-1,-35,-8,-43,-34,69,5,2,-18,-28,-9,-99,-21,2,-8,-71,-24,22,14,44,27,14,-4,-35,74,40,-3,-45,-65,-25,-22,69,-30,52,8,82,-91,73,127,16,-62,-3,3,-10,-91,-10,62,40,76,-66,-37,-12,23,18,52,10,-58,75,45,-16,46,-65,-15,-9,-56,12,60,9,-19,-4,49,123,32,16,-89,36,-42,60,-22,-49,27,40,28,-39,-17,1,31,-44,-20,26,57,53,58,-39,3, 
  /* [11][0][][] */ -51,-39,52,-74,3,-18,-31,-41,35,-40,-7,-9,-25,-6,6,10,-70,4,61,4,-49,18,-82,-92,21,9,-46,41,37,-52,35,-41,17,0,24,-29,-70,6,-127,21,-75,64,-53,60,29,11,-8,-34,30,-48,-66,-53,28,25,85,-64,-33,-67,7,-59,-30,-52,-28,-120,6,-61,55,76,111,27,84,-14,-31,-18,58,-44,106,45,33,37,22,-15,-17,94,80,-2,-16,-30,-88,-76,-15,32,57,38,50,68, 
  /* [12][0][][] */ 44,-24,-13,-45,49,123,-8,33,59,63,10,68,31,53,8,4,-66,45,18,65,127,-2,79,-60,36,32,-70,-76,-29,78,1,22,40,-11,3,-29,48,8,-26,-42,20,-24,57,70,-35,46,-1,-10,-73,35,-3,17,-34,-28,10,19,-31,66,6,62,37,-96,15,-109,-7,96,-9,-43,6,-46,59,5,-9,21,-1,58,-19,54,-90,-3,-18,34,120,10,-4,91,-24,-65,84,17,-84,63,66,17,-22,-91, 
  /* [13][0][][] */ -7,36,-27,-37,-21,-10,8,-34,23,-36,-25,-66,71,-104,-42,-64,-13,-41,-71,-5,-101,-28,19,114,-34,4,111,7,17,-44,53,58,16,-1,-122,127,-29,-46,37,-63,113,12,1,32,-19,-88,57,-28,71,-5,-44,20,19,-3,-5,75,70,-52,-43,-4,54,39,-2,-91,-2,27,-28,29,-57,-40,-85,-4,-68,24,-34,-79,-113,20,27,94,-5,59,29,-95,58,47,37,-3,-16,-10,-11,21,-59,26,-15,3, 
  /* [14][0][][] */ -6,25,-79,-16,86,84,-81,-9,35,-47,78,-6,22,-21,-30,-55,-64,11,33,127,2,-16,4,13,-6,38,-28,62,4,-11,-28,15,60,-6,-42,7,-25,55,74,8,57,5,35,5,-13,-40,56,-35,14,-4,-11,-27,33,18,-37,29,19,49,-86,-11,-12,-65,-39,-97,8,-42,-40,-9,-60,45,-22,22,-10,-27,-16,-29,27,-17,-52,-16,31,5,-7,-18,-12,47,-11,-8,-32,69,61,14,2,-29,-34,-58, 
  /* [15][0][][] */ -74,-51,51,-56,3,-30,-31,-85,-13,16,-13,67,-16,-19,30,77,-102,-12,8,-81,39,-34,-19,-97,49,-8,46,-55,-57,-95,-61,23,-39,61,92,-96,-8,-46,11,-16,-22,-10,20,-27,9,-2,65,101,-39,-15,18,-35,-36,50,19,-52,-100,-11,106,12,-38,24,-85,29,-64,-7,2,27,38,-69,95,-17,64,-35,-44,-53,26,28,55,-8,-23,75,65,37,2,-27,-127,1,-9,-56,-83,27,48,-40,-25,53, 
};
const TfArray<4, int> tensor_dimension36 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant36_scale = { 16, { 0.0023887716233730316, 0.0031499783508479595, 0.002922616433352232, 0.0029483186081051826, 0.0029206881299614906, 0.0027043106965720654, 0.0021607091184705496, 0.002206217497587204, 0.0038505382835865021, 0.0031524419318884611, 0.0024610755499452353, 0.0023600899148732424, 0.0028408123180270195, 0.0024255933240056038, 0.0042963707819581032, 0.0030331911984831095, } };
const TfArray<16, int> quant36_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int32_t tensor_data37[16] = { 10549, 16125, -6440, 2194, 111, 6689, -1249, 2491, 17416, -3899, -8634, 11196, -18435, 9391, 3035, 10311, };
const TfArray<1, int> tensor_dimension37 = { 1, { 16 } };
const TfArray<16, float> quant37_scale = { 16, { 5.620639058179222e-05, 7.4117138865403831e-05, 6.8767447373829782e-05, 6.9372203142847866e-05, 6.8722074502147734e-05, 6.3630839576944709e-05, 5.0840215408243239e-05, 5.1910999900428578e-05, 9.0600900875870138e-05, 7.417510641971603e-05, 5.7907662267098203e-05, 5.5531527323182672e-05, 6.6842643718700856e-05, 5.7072786148637533e-05, 0.00010109107824973762, 7.1369206125382334e-05, } };
const TfArray<16, int> quant37_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int8_t tensor_data38[96*1*1*16] = { 
  /* [0][0][][] */ -8,107,-79,36,58,-29,101,74,-66,12,35,-90,78,127,-65,18, 
  /* [1][0][][] */ -29,-1,-70,-21,-16,44,30,-127,29,-43,-17,-50,-17,-55,-65,13, 
  /* [2][0][][] */ -31,-33,32,82,20,40,-113,127,-19,9,75,-57,-22,-76,-48,74, 
  /* [3][0][][] */ 78,-91,66,0,-9,-35,-26,127,-29,60,70,53,-8,48,6,14, 
  /* [4][0][][] */ -50,-26,-22,59,-101,7,-26,-119,8,1,43,-8,28,40,107,127, 
  /* [5][0][][] */ 127,34,-24,-25,-82,24,38,79,7,-6,67,104,122,22,-99,4, 
  /* [6][0][][] */ 23,-27,-50,-57,-63,4,-6,-51,-45,-48,-33,21,85,62,127,-14, 
  /* [7][0][][] */ -59,26,-35,-68,-3,-51,-69,14,-86,47,-61,-57,-127,-43,7,88, 
  /* [8][0][][] */ 52,36,71,10,51,17,65,5,69,-29,36,-1,-127,-29,-75,11, 
  /* [9][0][][] */ -35,59,27,-43,-27,-23,25,-20,-23,54,-40,9,38,127,30,28, 
  /* [10][0][][] */ 89,61,-40,50,-24,-24,47,-58,-77,-41,-70,-121,-127,-69,20,93, 
  /* [11][0][][] */ 45,0,58,13,-16,-34,13,109,-87,18,-27,2,-10,-10,60,127, 
  /* [12][0][][] */ -59,-29,-1,7,17,-2,127,41,-56,32,11,-8,-15,71,-61,116, 
  /* [13][0][][] */ 18,45,30,50,110,49,115,121,-52,96,-88,-67,40,71,-127,-27, 
  /* [14][0][][] */ -116,123,10,-15,-4,1,59,-1,-43,33,127,-3,-105,19,-52,55, 
  /* [15][0][][] */ -8,-26,-127,-53,88,-53,-96,-41,-22,-29,-23,-74,0,-80,-52,45, 
  /* [16][0][][] */ 122,-13,15,-17,36,-26,37,-22,-42,9,127,48,50,11,-34,14, 
  /* [17][0][][] */ 6,23,-32,-96,-15,-56,127,-124,-3,-24,-42,38,40,64,0,57, 
  /* [18][0][][] */ 22,120,-15,-48,51,-77,-19,-54,-43,127,-23,-9,-32,54,-17,-27, 
  /* [19][0][][] */ -78,-127,115,-86,38,-119,38,-31,46,47,97,113,22,-25,64,-25, 
  /* [20][0][][] */ -22,87,50,9,6,8,25,-19,54,-5,98,-21,-127,-33,-81,-3, 
  /* [21][0][][] */ -63,29,28,16,70,28,64,47,-127,55,-47,13,-25,16,-59,-27, 
  /* [22][0][][] */ 26,-89,56,7,29,-127,115,8,15,-66,-53,-88,51,-82,-51,-66, 
  /* [23][0][][] */ -54,-106,52,61,35,-16,19,-43,14,-44,79,-2,10,83,88,127, 
  /* [24][0][][] */ 0,-2,27,74,49,15,-49,-127,66,20,-47,17,4,-4,-23,-30, 
  /* [25][0][][] */ -8,24,24,-57,-24,-14,8,-41,-23,52,-47,-10,41,127,24,4, 
  /* [26][0][][] */ -68,75,2,22,28,-83,1,-30,13,21,16,70,11,-2,-78,127, 
  /* [27][0][][] */ -13,-127,-41,3,-57,92,-3,-64,21,-43,50,-36,34,-39,-101,-23, 
  /* [28][0][][] */ -41,1,36,91,25,10,-36,-127,-125,55,113,-9,73,5,-51,-23, 
  /* [29][0][][] */ -127,104,-27,-25,-28,24,-116,-65,-43,-27,1,2,6,-67,-112,63, 
  /* [30][0][][] */ 51,74,-59,86,-114,-92,-70,-11,-41,-3,9,-111,127,23,-11,97, 
  /* [31][0][][] */ 127,31,-58,-35,-62,17,92,30,-57,-14,58,44,41,27,-18,4, 
  /* [32][0][][] */ -36,-31,127,2,-26,77,78,21,-22,-22,-3,24,7,67,58,46, 
  /* [33][0][][] */ 3,43,-57,-52,-13,41,127,41,-14,-3,24,-64,104,127,-48,45, 
  /* [34][0][][] */ -85,-18,101,12,33,-56,95,-13,-127,40,29,-49,50,65,-46,-39, 
  /* [35][0][][] */ 2,25,-43,10,-65,127,-29,-6,-25,114,-2,85,-62,73,25,26, 
  /* [36][0][][] */ -6,-72,127,-52,-48,13,-44,-11,15,18,-49,75,2,-78,-36,42, 
  /* [37][0][][] */ 91,3,79,-35,118,-72,-45,25,-56,127,-69,-1,-81,-37,119,-24, 
  /* [38][0][][] */ 61,50,25,-115,-9,-62,-122,66,-101,54,-127,-74,-68,-126,-108,66, 
  /* [39][0][][] */ -70,23,-52,-37,-76,-82,66,11,-127,-40,14,78,34,4,2,46, 
  /* [40][0][][] */ 127,30,10,-98,-72,25,12,-43,-36,-25,-28,-87,16,62,33,33, 
  /* [41][0][][] */ 89,-84,-62,-49,-5,-6,-59,-22,63,-17,3,-50,127,-81,58,-33, 
  /* [42][0][][] */ -17,-87,-45,127,0,-97,-101,13,11,15,7,47,-75,63,-49,0, 
  /* [43][0][][] */ -91,-55,-44,-127,-56,-7,-5,71,47,-126,-39,40,-22,-59,-37,101, 
  /* [44][0][][] */ -51,50,32,-39,-33,-25,45,127,109,-71,90,121,124,37,-32,13, 
  /* [45][0][][] */ 23,82,-93,109,127,-98,-34,-64,112,-66,81,-63,-36,-5,-90,77, 
  /* [46][0][][] */ -18,-31,14,-14,106,-27,36,17,-8,127,-32,-119,28,76,-40,70, 
  /* [47][0][][] */ 69,-45,-35,-7,70,-13,-39,-52,-2,127,-23,37,-11,-104,-82,17, 
  /* [48][0][][] */ 7,27,-17,-127,-5,-44,119,-113,4,0,-33,50,54,58,0,37, 
  /* [49][0][][] */ -28,127,-66,38,42,-42,72,67,-40,18,38,-81,-21,63,102,-96, 
  /* [50][0][][] */ 16,44,-18,-1,-127,0,-72,-62,58,68,28,28,-39,-36,4,33, 
  /* [51][0][][] */ 127,-41,-41,-17,-40,86,-92,-45,49,-24,-39,60,-22,-64,5,34, 
  /* [52][0][][] */ -10,-45,51,55,-35,-103,-127,-16,-43,-62,-41,-74,19,-49,19,67, 
  /* [53][0][][] */ 33,101,62,-127,9,103,84,-27,-3,-24,-13,-49,85,-109,10,52, 
  /* [54][0][][] */ 26,121,2,-19,-9,-82,-100,59,-4,-25,-35,127,79,81,10,64, 
  /* [55][0][][] */ -34,-16,60,28,60,-33,99,97,-78,-7,12,6,127,59,4,-8, 
  /* [56][0][][] */ 127,21,11,24,-53,122,-53,-71,-31,52,-85,9,-68,101,-20,40, 
  /* [57][0][][] */ -57,-28,-58,-31,-75,-91,74,-12,-127,-24,67,62,16,26,-16,56, 
  /* [58][0][][] */ 50,-50,63,19,8,-63,-17,3,28,-19,-127,-27,22,-31,-38,43, 
  /* [59][0][][] */ 63,10,-127,89,5,32,84,-29,-62,-38,35,-89,-111,-70,16,109, 
  /* [60][0][][] */ -7,33,-15,21,-17,-18,-17,10,-37,-66,63,112,-46,-127,-41,0, 
  /* [61][0][][] */ -37,27,75,-91,-66,63,5,127,-25,-94,53,65,74,-8,3,108, 
  /* [62][0][][] */ 74,50,-11,-127,-13,11,8,-32,-15,36,-33,48,22,-23,-91,-80, 
  /* [63][0][][] */ 0,-31,1,-1,-65,-71,-62,10,-69,-8,-39,-25,127,-1,54,-17, 
  /* [64][0][][] */ 19,6,-24,61,-109,-32,-15,-71,50,127,43,5,31,-68,-52,116, 
  /* [65][0][][] */ -22,10,-14,-20,-76,82,20,-32,59,-127,92,-76,79,75,-125,55, 
  /* [66][0][][] */ -122,104,-93,-94,45,-47,-124,-84,-103,122,97,5,-127,-54,50,63, 
  /* [67][0][][] */ -3,-34,-127,-103,60,72,13,-21,-27,-4,51,-14,22,31,11,51, 
  /* [68][0][][] */ 49,20,-19,-40,-71,35,22,41,-61,70,127,-12,-13,-53,-118,2, 
  /* [69][0][][] */ 68,-103,50,-42,17,-100,-32,127,-8,62,81,79,-22,63,-38,-1, 
  /* [70][0][][] */ 58,15,127,33,108,-22,120,8,31,20,-76,30,-61,70,-66,28, 
  /* [71][0][][] */ 2,27,86,-67,-127,-73,17,11,-21,-4,25,-94,-80,-5,3,35, 
  /* [72][0][][] */ -56,-95,27,-123,78,-23,6,37,-59,16,-127,-22,59,123,-53,114, 
  /* [73][0][][] */ 15,18,45,-1,126,-99,-50,14,-38,108,-87,37,-97,-63,127,-16, 
  /* [74][0][][] */ -109,-3,-127,-58,54,-36,-34,22,-74,12,-109,-29,-41,-68,-49,85, 
  /* [75][0][][] */ 96,-24,51,-46,23,12,-127,-19,-11,-100,66,0,9,-12,-1,-15, 
  /* [76][0][][] */ 2,-60,-37,122,46,81,103,-71,93,-119,72,127,34,-111,-83,44, 
  /* [77][0][][] */ -41,-39,127,-31,30,-33,-32,-125,28,20,41,94,38,44,11,-3, 
  /* [78][0][][] */ -45,-1,20,-44,4,-63,29,-16,29,-18,12,-100,-102,-73,-127,-58, 
  /* [79][0][][] */ -117,-73,-32,34,127,46,-12,27,17,35,-9,63,-54,-91,-81,-8, 
  /* [80][0][][] */ 8,-127,55,123,-31,-24,-115,89,-14,15,69,-4,-81,5,-10,68, 
  /* [81][0][][] */ 119,72,-14,82,0,42,20,127,21,17,108,55,113,30,60,-28, 
  /* [82][0][][] */ -59,-1,11,-25,28,-125,-127,-78,-2,88,-45,-36,-34,106,-74,-21, 
  /* [83][0][][] */ 104,-23,77,-29,-40,-13,-127,-3,21,-114,8,-49,-23,-10,13,-21, 
  /* [84][0][][] */ 9,-64,-104,25,127,50,49,39,-119,23,-107,-19,43,-48,-84,18, 
  /* [85][0][][] */ 21,88,48,-57,104,0,34,-124,127,-31,32,-19,94,-71,19,-8, 
  /* [86][0][][] */ 121,-47,127,51,1,-64,72,34,-56,-58,-96,-48,40,20,-62,12, 
  /* [87][0][][] */ -10,6,12,-68,63,-26,-37,18,28,-32,72,-29,-82,-127,-6,26, 
  /* [88][0][][] */ -52,-26,44,-8,26,31,-64,-45,-8,7,-74,-127,-41,-33,-14,-21, 
  /* [89][0][][] */ -83,19,14,-61,22,9,-127,32,79,34,-66,-9,-21,-91,-48,-15, 
  /* [90][0][][] */ -5,-9,-24,-77,127,15,-58,35,41,51,21,-16,32,26,-55,-24, 
  /* [91][0][][] */ -37,-65,33,45,-37,-16,-16,86,-54,-69,22,-57,-5,78,33,127, 
  /* [92][0][][] */ -17,72,4,-13,-18,61,-89,40,-30,-16,59,-2,-30,127,51,21, 
  /* [93][0][][] */ -13,71,-57,-62,59,81,-75,5,60,59,71,53,-127,14,-54,82, 
  /* [94][0][][] */ 22,62,91,17,-127,-38,13,-9,25,-15,32,-15,-62,-29,11,-20, 
  /* [95][0][][] */ -15,22,45,-1,127,-17,-101,85,20,23,-95,102,-10,0,99,-50, 
};
const TfArray<4, int> tensor_dimension38 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant38_scale = { 96, { 0.001783857005648315, 0.0024539397563785315, 0.0018141823820769787, 0.0016000375617295504, 0.0015417264075949788, 0.0023925621062517166, 0.0018461055587977171, 0.0023294510319828987, 0.0022678764071315527, 0.0027055214159190655, 0.0015231055440381169, 0.0023410054855048656, 0.0016288803890347481, 0.0011306543601676822, 0.0012177471071481705, 0.0020419536158442497, 0.0034431808162480593, 0.0022865284699946642, 0.0019318145932629704, 0.0014413960743695498, 0.0019469581311568618, 0.001809969893656671, 0.0013161774259060621, 0.0019484315998852253, 0.0030341262463480234, 0.0025391597300767899, 0.001826954772695899, 0.0018543442711234093, 0.0019202290568500757, 0.0020608715713024139, 0.001656801556237042, 0.0029315915890038013, 0.0025876008439809084, 0.0017127685714513063, 0.0015230458229780197, 0.0015953119145706296, 0.0024526587221771479, 0.0013985929545015097, 0.001447353046387434, 0.0015796322841197252, 0.0022973078303039074, 0.0016709900228306651, 0.0018679939676076174, 0.0015173592837527394, 0.001867951825261116, 0.0017945434665307403, 0.0022914716973900795, 0.0020084036514163017, 0.0010888549732044339, 0.0016424264758825302, 0.0020018836949020624, 0.0016842526383697987, 0.0010947370901703835, 0.0016438256716355681, 0.0022667800076305866, 0.0018755510682240129, 0.0019550365395843983, 0.0017780886264517903, 0.0018782851984724402, 0.002176293870434165, 0.0025534073356539011, 0.0021320907399058342, 0.0025208841543644667, 0.0016466865781694651, 0.001248907414264977, 0.0014425114495679736, 0.0010504912352189422, 0.0019199649104848504, 0.0017990368651226163, 0.0021285528782755136, 0.0019550125580281019, 0.0019288946641609073, 0.001629634527489543, 0.0016729671042412519, 0.0016343327006325126, 0.0012169707333669066, 0.0015475712716579437, 0.002442322438582778, 0.0019180026138201356, 0.0019701037090271711, 0.00080313539365306497, 0.0017608477501198649, 0.0023500423412770033, 0.0014730010880157351, 0.0018519704462960362, 0.0019652929622679949, 0.0014680527383461595, 0.0022489719558507204, 0.0020586890168488026, 0.0028632683679461479, 0.0023480555973947048, 0.0017751669511198997, 0.0017458137590438128, 0.0012629310367628932, 0.0030933967791497707, 0.0019550248980522156, } };
const TfArray<96, int> quant38_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int32_t tensor_data39[96] = { 1313, 23, 4283, 6486, 5488, -2296, 4137, -1270, -2578, -658, 5418, -2472, 4567, 6796, 2941, 2526, -650, -515, -1882, 5860, 3033, -1042, 3378, -831, -1063, 3175, 2105, 2314, 5045, 2824, 4268, 1036, 1578, 4623, 5430, 3902, -543, 4297, 3587, -4509, -308, 1770, 38, 2241, -1540, 629, -1501, 1053, -8847, 2093, 1530, -3858, 8768, -1666, 2030, 1542, 1284, 3049, -1069, -1772, 389, 1668, 515, 5321, 7329, 4105, 4945, 5089, 5011, -882, 3124, 4879, 3707, -1742, 5937, 8660, 791, -3148, 595, 1492, 14101, 2039, -450, -3795, 1555, 731, 2573, -2235, 3939, -341, 3265, 1535, -60, -4348, -180, 1863, };
const TfArray<1, int> tensor_dimension39 = { 1, { 96 } };
const TfArray<96, float> quant39_scale = { 96, { 0.0001341868337476626, 0.00018459238344803452, 0.00013646799197886139, 0.00012035940744681284, 0.00011597307457122952, 0.00017997538088820875, 0.00013886934902984649, 0.00017522797861602157, 0.00017059616220649332, 0.00020351707644294947, 0.00011457236541900784, 0.00017609713540878147, 0.00012252904707565904, 8.5051062342245132e-05, 9.1602429165504873e-05, 0.00015360160614363849, 0.00025900593027472496, 0.00017199922876898199, 0.00014531663327943534, 0.00010842594201676548, 0.00014645577175542712, 0.0001361511240247637, 9.900664008455351e-05, 0.00014656661369372159, 0.0002282356726936996, 0.00019100286590401083, 0.00013742876762989908, 0.00013948908599559218, 0.00014444513362832367, 0.00015502466703765094, 0.00012462935410439968, 0.00022052272106520832, 0.00019464675278868526, 0.00012883935414720327, 0.00011456786887720227, 0.00012000393326161429, 0.00018449602066539228, 0.0001052061707014218, 0.00010887403914239258, 0.00011882446415256709, 0.00017281007603742182, 0.00012569664977490902, 0.00014051585458219051, 0.00011414011532906443, 0.00014051268226467073, 0.00013499069609679282, 0.00017237105930689722, 0.00015107788203749806, 8.1906793639063835e-05, 0.0001235480303876102, 0.00015058742428664118, 0.00012669431453105062, 8.2349259173497558e-05, 0.00012365326983854175, 0.00017051368195097893, 0.00014108432515058666, 0.00014706344518344849, 0.00013375292473938316, 0.00014128998736850917, 0.0001637070527067408, 0.00019207461446058005, 0.00016038196918088943, 0.00018962813192047179, 0.00012386847811285406, 9.3946393462829292e-05, 0.00010850984108401462, 7.902095967438072e-05, 0.00014442525571212173, 0.00013532870798371732, 0.00016011584375519305, 0.00014706164074596018, 0.00014509698667097837, 0.00012258577044121921, 0.00012584538490045816, 0.00012293919280637056, 9.1544025053735822e-05, 0.00011641274613793939, 0.00018371849728282541, 0.0001442776556359604, 0.0001481968502048403, 6.041414599167183e-05, 0.00013245601439848542, 0.0001767769135767594, 0.00011080336116719991, 0.00013931051944382489, 0.00014783497317694128, 0.0001104311304516159, 0.00016917411994654685, 0.00015486049233004451, 0.00021538324654102325, 0.00017662746540736407, 0.00013353314716368914, 0.00013132511230651289, 9.5001290901564062e-05, 0.00023269416124094278, 0.00014706257206853479, } };
const TfArray<96, int> quant39_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int8_t tensor_data40[32*1*1*96] = { 
  /* [0][0][][] */ 28,58,35,-84,-76,15,-5,69,-28,-35,-119,-100,-101,122,-49,64,39,86,-1,0,-39,-87,-46,28,73,-106,5,110,61,-80,72,7,-72,95,35,-55,-26,2,-92,-13,-119,-57,103,-70,72,-28,-101,103,-127,101,-86,1,-28,94,-6,64,-82,-86,-30,37,-14,94,38,-123,76,-118,-97,54,58,-110,-17,115,-64,13,-42,100,-48,-82,-32,-12,-111,58,56,-5,-41,-77,-67,-58,30,46,29,60,-99,-102,-65,45, 
  /* [1][0][][] */ 71,12,80,41,31,-68,-2,122,39,39,-66,57,-101,-96,34,-64,-51,-38,-18,-24,105,91,-80,-64,30,-12,-23,-57,91,53,-19,-57,-85,-78,-81,-67,42,-73,-34,23,-13,95,0,39,41,9,-43,45,-5,-107,6,-42,-4,-97,-58,-91,40,50,80,19,72,-73,-31,-30,124,-8,8,94,81,84,47,115,0,5,62,33,74,-92,125,-3,-71,100,-65,54,40,15,-127,43,-47,-51,64,-23,-39,24,43,1, 
  /* [2][0][][] */ -4,-71,-89,-116,-46,5,66,-2,19,-47,-68,-52,44,74,-76,-114,-98,30,-1,28,-96,-54,26,19,-51,68,-49,-53,-28,-40,-85,24,44,-72,45,-3,-81,45,-70,59,62,-32,107,68,-68,-21,58,35,-10,-62,-3,99,-89,-80,2,-80,-33,18,81,102,88,74,-59,94,101,82,-79,-83,-5,24,65,-26,31,47,-22,-66,85,127,-103,-79,-89,104,125,48,-73,34,47,29,74,85,86,104,-55,-37,75,98, 
  /* [3][0][][] */ -85,89,54,-89,98,99,73,67,97,24,35,-62,97,37,100,105,-127,72,-35,98,-79,69,-83,-2,111,75,-109,12,48,29,-48,103,-108,23,21,-100,-98,-38,-88,-64,-81,-44,-70,16,-79,-108,-27,-37,-41,101,-39,-94,5,42,102,-73,-87,-109,68,-101,-92,26,-99,-35,5,83,-63,-43,-44,-43,82,-1,82,105,-60,-79,-127,-49,74,-69,51,99,-79,-84,70,-116,100,-98,-40,-116,88,91,-93,-56,31,-33, 
  /* [4][0][][] */ -100,28,89,-10,68,3,-25,-57,18,68,-107,-62,-76,104,30,-105,80,34,-60,-78,-100,76,-115,-31,-31,-124,98,47,14,-117,126,31,-119,49,-53,-53,107,-23,-121,-104,103,104,-108,-110,-21,86,-47,-44,117,-29,123,120,96,-119,-11,47,-114,-24,112,-66,92,-32,-21,91,-52,32,-119,-84,29,95,33,-8,-68,-8,25,-78,-28,87,-42,46,36,-116,40,-7,55,127,14,-75,-27,-10,99,67,101,-27,-112,-123, 
  /* [5][0][][] */ -92,121,-36,-51,35,-21,-45,73,-7,-99,65,39,-73,38,120,118,-110,120,72,-3,122,18,-48,116,-127,48,-26,-53,-20,47,71,6,-67,77,76,68,116,-70,-52,-32,67,-10,-6,-48,111,125,3,0,6,110,108,52,-79,-36,43,-31,106,-37,-78,82,70,76,1,71,83,-51,58,59,110,-68,42,12,-100,64,30,-88,-47,42,43,10,86,112,-93,-67,59,-33,-101,-2,90,120,-30,121,-18,111,4,89, 
  /* [6][0][][] */ 118,-25,4,-102,-121,-37,60,-110,21,75,34,120,55,-68,-26,123,-84,94,19,92,-121,126,101,30,-83,42,-122,-111,-52,-101,-2,56,-96,19,80,83,-123,-54,13,62,-104,43,75,2,-120,76,-115,-42,48,111,-13,-25,-84,-102,-79,-87,-85,-10,-7,87,58,-49,109,12,127,94,-26,54,-1,-104,-47,-23,69,-59,101,117,-46,32,-54,-85,27,-23,-58,-107,91,-2,-7,122,-8,-113,-100,-37,-89,-9,101,-111, 
  /* [7][0][][] */ 74,39,-61,-121,98,-13,-33,-62,40,-78,-12,-19,-56,107,93,52,79,-6,-14,50,71,-99,-16,-60,110,-65,52,100,-96,-37,-11,13,-127,-47,61,-44,107,3,-6,-89,-95,34,-68,72,10,-55,-88,-60,76,-49,-41,119,-53,37,90,30,68,-120,3,-107,16,-81,-42,-62,-13,-60,-117,-104,40,-101,-112,3,-114,78,-42,66,-73,-42,-80,-14,-113,46,3,114,-67,-78,27,-83,41,108,106,-88,34,-81,93,-109, 
  /* [8][0][][] */ -60,-46,-92,-7,53,-18,-29,-81,84,-127,114,-97,-24,-97,-101,2,3,56,52,-61,97,52,89,-53,-67,-110,17,-86,-72,-71,-97,-16,-47,-10,-84,110,-100,-91,-40,-75,-32,15,47,-16,-18,-49,-47,90,31,77,-24,-23,106,14,-22,-89,-6,-4,-23,25,-81,-24,-108,81,-11,-38,16,-64,-66,20,-100,51,30,75,115,74,88,-42,-5,-12,40,83,-4,44,65,-55,-31,73,62,62,-54,65,-103,109,105,-46, 
  /* [9][0][][] */ -41,-43,14,65,22,51,76,25,2,39,58,53,93,43,-39,-31,-15,-66,-66,-84,-98,69,15,-29,-75,-68,-52,42,54,-121,-35,41,-98,-71,100,-37,-35,-6,-77,-70,101,85,-5,-2,31,49,24,-25,-28,-50,-104,-55,-110,18,18,64,-12,-81,9,-2,-10,-73,22,72,-127,66,60,54,87,-65,-114,8,40,34,56,-111,98,-66,4,-56,-118,-46,80,-80,48,-75,-91,9,-77,80,24,3,-89,14,23,52, 
  /* [10][0][][] */ -104,35,-91,-104,-54,83,-127,-113,69,-107,75,61,-19,22,60,-16,103,9,-67,28,-21,-73,-50,75,37,101,-43,-37,-119,-89,-21,-117,54,26,98,-126,106,-88,33,104,90,29,21,48,-23,20,-12,-15,-73,108,82,107,92,-110,92,48,17,-23,82,-23,62,55,92,50,-51,97,-14,45,-5,-19,65,19,-107,-109,14,53,61,106,68,-9,-12,32,3,43,5,70,-84,17,-21,25,-65,80,44,60,15,-22, 
  /* [11][0][][] */ 93,75,-55,-82,101,-3,-44,-80,-76,37,55,-9,35,-68,67,-69,-110,73,-50,-47,-32,-30,73,-72,-112,96,84,99,14,59,7,50,61,93,-110,-65,22,108,-42,-63,35,-124,122,-98,96,40,-109,-10,30,92,-56,97,71,-66,-53,-88,-24,93,-123,90,-23,13,127,-54,76,-21,108,6,107,94,-49,30,-88,-69,33,-102,0,38,-67,5,-85,-18,-121,83,15,-80,-64,-13,-75,60,-28,-48,87,42,124,-19, 
  /* [12][0][][] */ -32,2,-41,124,42,-13,-5,-46,2,42,-11,67,-32,-49,-17,78,52,2,55,127,-55,-13,91,73,30,111,-45,39,110,-50,97,86,57,5,27,-34,40,-36,76,79,101,111,64,-34,55,12,-21,92,-42,116,-15,75,-15,-62,104,63,26,-38,-30,-60,58,5,108,23,-33,32,26,-18,-72,-52,58,14,-58,-19,11,19,-56,23,94,-23,51,97,101,25,73,-18,19,-38,-28,-43,30,39,-50,-56,-57,107, 
  /* [13][0][][] */ 47,46,84,-63,93,18,17,-38,23,-114,38,15,-2,71,46,75,65,31,-29,73,108,-9,-24,-64,49,-83,14,-63,32,-73,-44,-9,-21,-95,24,5,57,-115,73,46,-36,-83,70,85,49,-1,41,68,-104,63,-33,-11,-29,-82,-12,77,18,-43,37,-42,-81,-9,57,-58,-67,32,-19,-95,-69,-69,-103,81,-46,-47,102,-39,-23,43,-6,-36,73,26,-11,69,87,-58,-127,78,-46,-44,20,-33,47,117,-31,-100, 
  /* [14][0][][] */ -45,-61,97,61,59,-94,17,-5,-2,57,-26,-74,3,115,-21,46,-97,-44,-39,-95,-2,44,-49,-37,-42,-26,74,31,79,-75,80,-44,-43,98,123,31,35,73,-81,-88,96,117,122,30,77,-72,-8,-43,-127,9,-23,-66,-8,-117,79,-102,28,-87,-48,-93,-85,-98,26,18,-1,65,14,-9,-100,-15,33,-58,-102,-82,61,-14,-87,-31,77,15,127,-34,115,27,-68,-73,-70,82,64,1,-66,-26,-19,-103,-77,-61, 
  /* [15][0][][] */ 12,34,-16,-78,-108,79,-5,48,-125,-54,85,-48,-26,-67,-54,-52,-44,75,-107,3,-39,-92,-71,-40,-19,-22,86,90,-29,-88,-127,11,43,86,-55,-34,-42,86,-43,-99,-75,97,91,-71,69,38,-84,-102,15,-43,-46,-102,-93,-19,20,1,34,-26,74,-61,-116,-103,-111,-74,-59,15,-22,-89,-29,-79,-96,-2,51,34,-12,64,-46,88,-117,-38,-40,-77,-57,-69,-63,-51,84,-44,42,-109,-93,81,-15,-51,93,-87, 
  /* [16][0][][] */ -12,17,-109,113,80,-69,97,99,-46,48,78,-72,-59,84,-127,-39,31,80,-29,-35,-125,-26,-108,7,105,-67,-86,15,-58,90,105,32,-86,-52,12,5,-22,94,-123,56,56,33,69,-64,-102,-22,-103,-66,-14,42,87,62,-48,-120,58,1,41,86,-43,-72,30,-30,7,60,-19,25,62,-51,-6,-60,76,11,72,4,40,-85,73,-49,-104,-60,-37,26,-15,-107,89,-59,2,-119,102,-103,91,-114,43,17,69,-90, 
  /* [17][0][][] */ -17,81,-98,-42,-32,32,-46,91,27,-39,89,-22,-31,90,34,-59,19,65,-59,53,19,-10,-58,-16,-118,-4,-31,-72,-41,42,49,-88,59,-35,-28,39,24,-64,-22,42,-53,87,-44,-71,97,10,-107,-97,11,-99,-15,-127,-73,17,31,27,-83,73,-79,-53,95,90,62,64,-53,31,-81,65,-59,-88,7,-22,-39,-51,-4,33,-100,-83,99,-88,-57,-7,58,-74,69,32,-52,87,8,99,-35,55,-93,-58,58,-45, 
  /* [18][0][][] */ 80,-127,-110,-17,60,18,-115,-99,-59,37,-83,-82,-3,98,30,33,22,73,-101,-44,-84,59,20,41,-3,-24,42,-105,-16,-117,34,-110,-27,87,114,-52,17,-48,-60,-75,-117,19,110,-62,-22,35,89,-72,63,12,-46,-107,-47,-4,-45,39,66,29,-124,66,-101,-23,72,109,-11,25,-90,-104,106,-47,-76,85,-105,92,0,102,29,72,-22,-18,-58,-40,-114,79,11,-77,91,4,65,10,-45,118,-94,-6,-8,-123, 
  /* [19][0][][] */ 72,70,-89,82,111,79,-57,18,102,-46,14,-41,76,82,123,-34,39,-94,-62,117,-76,-69,32,123,57,-12,40,-18,85,51,113,-103,74,-15,-79,91,-95,-32,-54,28,52,32,57,56,-29,54,-108,108,100,30,92,-24,70,-71,77,110,54,20,-105,-33,-25,69,114,-38,104,-2,-61,94,118,-11,-91,15,20,59,26,93,16,63,-68,127,-94,-50,104,-113,50,12,76,-66,-67,4,-14,21,-22,-34,85,-121, 
  /* [20][0][][] */ -10,-84,-24,53,79,19,71,35,-49,-55,13,-2,-29,-75,-5,-87,-18,-48,127,31,47,-104,80,-27,-84,99,-78,9,1,-71,-46,3,35,85,68,-57,85,20,-96,12,100,-93,-84,-27,36,13,-35,-42,82,-8,95,-67,-2,78,28,-83,-46,-109,69,7,-36,77,68,66,23,83,22,-71,26,73,-58,18,-86,-77,-39,103,-13,-51,32,-72,8,88,77,-29,45,20,-59,-102,97,7,-99,-77,57,-53,24,68, 
  /* [21][0][][] */ 63,90,94,-89,-35,-58,-89,-36,-35,90,14,-87,-50,-80,-84,-100,-35,-34,-78,-104,-40,47,87,-53,68,25,74,-24,-60,-98,85,-7,-95,18,86,99,-113,-88,-112,20,-13,28,-45,6,-78,76,-127,53,52,-118,-10,-88,47,-62,-111,-57,-38,-63,60,78,10,-47,-23,47,-45,34,-57,-8,-9,-63,-27,-2,-42,-101,-51,-14,-91,89,94,79,-47,85,-15,-41,-123,-80,0,23,-51,32,-77,72,-34,-70,84,-37, 
  /* [22][0][][] */ -5,-36,62,3,-49,-94,123,55,52,27,-8,61,-33,50,-22,-81,-74,15,-38,94,45,104,23,104,-38,70,-54,72,-22,-76,-31,-70,-53,114,51,53,52,-50,-58,-43,2,29,-54,14,66,-36,127,-55,-44,14,-83,88,-43,100,26,61,110,109,-42,83,-62,-12,-1,55,82,-76,-74,-8,51,115,-52,-13,37,117,-58,14,-75,-40,61,-25,112,-46,-71,-3,56,99,7,92,51,93,116,60,-60,75,104,103, 
  /* [23][0][][] */ -41,7,15,-46,-101,13,46,14,20,-121,58,-119,-110,85,69,-41,21,26,17,8,55,105,48,-25,22,-65,-73,-54,-99,83,-16,115,76,-63,103,-21,-14,88,78,-80,96,21,93,-91,-101,-11,-127,90,-6,84,-51,-17,-92,117,49,8,27,-3,19,-18,-39,59,88,-126,99,-90,13,-12,100,83,-84,105,91,9,25,-49,-106,-22,-86,-8,-110,0,-114,-91,-48,-127,97,-110,-38,-75,-36,-82,-1,-58,-86,89, 
  /* [24][0][][] */ 3,97,122,105,71,-13,-99,116,10,-100,-69,89,32,8,6,-48,-15,41,-84,90,127,-12,-16,42,-36,62,-53,-45,96,125,103,-16,119,-36,-2,-12,27,-49,-69,-73,-6,102,-66,56,-36,84,47,-52,-106,-49,40,-18,-46,87,109,-33,62,-32,-24,-13,119,49,60,-14,-101,3,-49,118,79,-82,-11,40,3,-122,-1,-34,36,-72,-17,83,75,-44,59,-65,-67,-66,-24,-46,-72,90,-45,-16,-63,-57,76,93, 
  /* [25][0][][] */ -17,8,-6,77,8,6,-47,40,3,69,52,57,-71,65,62,-55,-32,6,-34,47,53,75,21,71,74,-37,-47,-39,60,50,-63,45,-66,-53,73,87,-33,85,-49,80,-29,127,62,3,-5,-51,-40,-40,-20,28,-54,-7,15,5,-48,-69,51,-26,124,9,-55,75,-54,56,-53,-67,-64,70,8,41,44,55,17,87,-16,29,15,39,33,-64,-55,6,-15,72,76,56,19,57,-51,120,-21,-10,-7,67,103,81, 
  /* [26][0][][] */ 68,-88,-13,-11,75,-106,96,-48,39,-28,-96,-1,-48,-71,27,-33,95,4,-47,-84,37,-58,60,82,-5,-34,35,37,14,-16,-56,-46,-31,41,35,106,-11,94,-127,95,104,6,-38,-107,-15,42,113,2,25,51,79,-25,89,91,63,24,87,-6,-64,-25,5,107,-88,-119,42,-37,-116,-38,-10,-52,28,33,-116,-57,-94,-77,-28,27,-33,47,96,14,-55,-8,-20,-45,-9,-99,17,6,85,99,-48,52,38,-28, 
  /* [27][0][][] */ 53,32,-124,110,-42,-37,-4,-14,-93,91,-40,-14,-124,68,72,-62,40,-120,2,-122,-35,49,77,-98,-126,67,-52,42,83,-73,54,-127,104,-96,28,96,98,52,-88,-52,33,45,-38,51,58,-101,109,-84,-13,-70,51,86,102,54,-124,-98,87,-41,-36,1,26,-87,-120,-106,20,103,15,-106,30,-12,31,-117,16,-81,-9,-92,-95,12,62,7,-72,-88,81,6,-116,-99,56,-44,101,5,41,101,85,25,57,-109, 
  /* [28][0][][] */ -105,124,-34,80,20,99,-103,6,67,-74,-87,74,73,-68,33,-87,-62,73,5,97,108,83,13,-76,54,-69,88,120,-43,32,-15,47,-18,25,-26,-45,46,82,-26,126,-114,-38,4,74,112,116,-22,15,92,3,-100,7,66,-32,18,69,90,53,25,95,56,-19,10,-112,-65,3,101,-37,-72,54,67,116,-104,25,127,29,70,-63,1,90,-60,65,59,-57,62,11,-96,-48,-85,29,85,-77,48,68,-11,81, 
  /* [29][0][][] */ 27,-10,48,26,-21,13,18,-87,-38,-37,-37,-80,73,-8,-60,-11,90,83,-88,97,39,-46,-74,-73,65,-63,-77,-34,-32,93,-53,33,-87,113,109,8,-15,-86,38,-17,80,-56,-7,43,-69,66,-113,16,-46,66,31,40,-66,-1,76,93,33,-8,-67,19,119,102,-57,37,81,-69,-92,43,77,-10,-24,-38,-21,-127,-10,-86,-44,-2,13,72,6,-37,32,-56,34,-106,-71,95,-2,45,-56,-47,-93,5,-61,-64, 
  /* [30][0][][] */ -64,-78,-72,-50,58,86,45,9,-65,23,30,48,88,54,-86,-95,86,96,45,2,-5,-61,103,-65,-4,47,-19,16,76,-32,9,45,3,-24,26,30,-82,-47,79,-13,-23,-95,-62,-71,75,105,-47,-31,-75,95,-81,-42,-100,-11,76,-86,86,52,-22,3,-37,-89,48,70,106,90,31,63,88,58,97,-71,27,-127,-72,16,56,-48,-2,-29,46,45,82,18,78,-57,48,36,98,35,49,-101,9,76,-72,-78, 
  /* [31][0][][] */ 33,107,61,-42,-70,-11,92,-88,-81,-47,51,-63,-84,-84,81,13,-9,45,1,25,-30,-45,88,-1,76,85,-47,-65,-24,70,49,59,67,27,49,92,39,115,-21,-87,6,105,-98,26,21,91,49,-10,-83,-26,-61,56,18,-87,-13,-10,6,25,36,101,-11,-127,111,-104,15,-94,66,-69,-114,32,108,-37,67,-45,-44,53,-13,94,46,-85,-11,-15,-109,-68,-32,81,119,-105,-71,80,36,-30,-54,-44,-112,80, 
};
const TfArray<4, int> tensor_dimension40 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant40_scale = { 32, { 0.0017975884256884456, 0.0019099878845736384, 0.0018532731337472796, 0.0018264976097270846, 0.001691166078671813, 0.0018228082917630672, 0.0016957053449004889, 0.0018062174785882235, 0.0019845797214657068, 0.0018290003063157201, 0.0017738727619871497, 0.0017418569186702371, 0.0023476877249777317, 0.0021392961498349905, 0.0017887227004393935, 0.0019154546316713095, 0.0018020498100668192, 0.002028709976002574, 0.0018187531968578696, 0.0017998471157625318, 0.0020879078656435013, 0.0019647823646664619, 0.002250215969979763, 0.0018403426511213183, 0.0018858687253668904, 0.0024777133949100971, 0.0018494701944291592, 0.0017971101915463805, 0.001880077994428575, 0.0019884507637470961, 0.0020315244328230619, 0.0018415908562019467, } };
const TfArray<32, int> quant40_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int32_t tensor_data41[32] = { -22, 441, -315, -503, 266, 457, 401, -468, 171, -512, -569, 458, 1696, 140, 350, -801, -413, 68, 32, 462, -268, -682, 1435, 1, 438, 580, -470, -521, 430, 447, 253, -449, };
const TfArray<1, int> tensor_dimension41 = { 1, { 32 } };
const TfArray<32, float> quant41_scale = { 32, { 3.681921589304693e-05, 3.9121445297496393e-05, 3.7959784094709903e-05, 3.7411351513583213e-05, 3.4639415389392525e-05, 3.7335783417802304e-05, 3.4732391213765368e-05, 3.6995963455410674e-05, 4.0649276343174279e-05, 3.7462614272953942e-05, 3.6333458410808817e-05, 3.56776945409365e-05, 4.8086661990964785e-05, 4.3818268750328571e-05, 3.6637626180890948e-05, 3.9233418647199869e-05, 3.6910598282702267e-05, 4.1553179471520707e-05, 3.7252724723657593e-05, 3.6865480069536716e-05, 4.2765703256009147e-05, 4.0243776311399415e-05, 4.6090190153336152e-05, 3.7694931961596012e-05, 3.8627422327408567e-05, 5.0749920774251223e-05, 3.7881887692492455e-05, 3.680942245409824e-05, 3.8508813304360956e-05, 4.0728566091274843e-05, 4.1610826883697882e-05, 3.7720499676652253e-05, } };
const TfArray<32, int> quant41_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const ALIGN(16) int8_t tensor_data42[2*1*1*32] = { 
  /* [0][0][][] */ -30,-29,-40,-44,113,-7,121,13,52,-82,-81,-74,102,-36,127,-15,-83,28,100,9,92,-28,123,-38,-47,110,13,-98,-79,-102,40,25, 
  /* [1][0][][] */ 89,127,-86,-72,10,105,13,-52,72,-96,-86,60,-90,5,30,76,-86,94,100,78,-68,3,-32,50,108,-7,-77,-86,66,94,110,-109, 
};
const TfArray<4, int> tensor_dimension42 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant42_scale = { 2, { 0.0036952188238501549, 0.0034271960612386465, } };
const TfArray<2, int> quant42_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(8) int32_t tensor_data43[2] = { 33046, -34876, };
const TfArray<1, int> tensor_dimension43 = { 1, { 2 } };
const TfArray<2, float> quant43_scale = { 2, { 0.00010919678607024252, 0.00010127649147761986, } };
const TfArray<2, int> quant43_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,24,24,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,24,24,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.086614124476909637, } };
const TfArray<1, int> quant46_zero = { 1, { 16 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.064649797976016998, } };
const TfArray<1, int> quant50_zero = { 1, { -20 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.058197811245918274, } };
const TfArray<1, int> quant53_zero = { 1, { -12 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.075156927108764648, } };
const TfArray<1, int> quant54_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,13,13,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,6,6,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.045630648732185364, } };
const TfArray<1, int> quant58_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,6,6,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,6,6,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,6,6,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.049724146723747253, } };
const TfArray<1, int> quant61_zero = { 1, { -36 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,6,6,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.064381130039691925, } };
const TfArray<1, int> quant62_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,6,6,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.018923157826066017, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,6,6,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,6,6,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.032139826565980911, } };
const TfArray<1, int> quant65_zero = { 1, { 12 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,6,6,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.075222864747047424, } };
const TfArray<1, int> quant66_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,6,6,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.020482562482357025, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,6,6,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.029550829902291298, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,6,6,2 } };
const TfArray<1, float> quant69_scale = { 1, { 0.06560438871383667, } };
const TfArray<1, int> quant69_zero = { 1, { -23 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,6,6,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,2,3 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,4,5 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,6,7 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,8,9 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,10,11 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,12,13 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,14,15 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,16,17 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,18,19 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,20,21 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,22,23 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,24,25 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,26,27 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,28,29 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,30,31 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,32,33 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,34,35 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,36,37 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,38,39 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,40,41 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,42,43 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 9216, (TfLiteIntArray*)&tensor_dimension44, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 9216, (TfLiteIntArray*)&tensor_dimension46, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension47, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension48, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension49, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension50, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension51, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension52, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension53, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension54, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 8112, (TfLiteIntArray*)&tensor_dimension55, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension56, 8112, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 8112, (TfLiteIntArray*)&tensor_dimension57, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 9840, (TfLiteIntArray*)&tensor_dimension58, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3456, (TfLiteIntArray*)&tensor_dimension59, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension60, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3456, (TfLiteIntArray*)&tensor_dimension61, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 8640, (TfLiteIntArray*)&tensor_dimension62, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3456, (TfLiteIntArray*)&tensor_dimension63, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension64, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 4032, (TfLiteIntArray*)&tensor_dimension65, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3456, (TfLiteIntArray*)&tensor_dimension66, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension67, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3456, (TfLiteIntArray*)&tensor_dimension68, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 80, (TfLiteIntArray*)&tensor_dimension69, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension70, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_ADD, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_ADD, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_ADD, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 27; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 27; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  70, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
