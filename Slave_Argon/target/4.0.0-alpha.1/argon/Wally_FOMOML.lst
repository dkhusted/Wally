
/home/kultul/Code_workspace/Particle_Io/Wally_FOMOML/target/4.0.0-alpha.1/argon/Wally_FOMOML.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00018130  000b4020  000b4020  00004020  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000cc150  000cc150  0001c150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.exidx    00000008  000cc174  000cc174  0001c174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .backup       00000004  2003f400  000cc17c  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000008b0  20039b70  000cc180  00029b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000043d0  2003a420  2003a420  0003a420  2**2
                  ALLOC
  8 .module_info_suffix 00000028  000cca30  000cca30  0002ca30  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000cca58  000cca58  0002ca58  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   001ac9d6  00000000  00000000  0002ca5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0001d751  00000000  00000000  001d9432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000032e8  00000000  00000000  001f6b83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000423f2  00000000  00000000  001f9e6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0006c15c  00000000  00000000  0023c25d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00167c31  00000000  00000000  002a83b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    000748fb  00000000  00000000  0040ffea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00011e38  00000000  00000000  004848e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000a814  00000000  00000000  00496720  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f00a fbb2 	bl	be79a <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f00a fbd4 	bl	be7ea <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	20039b70 	.word	0x20039b70
   b404c:	000cc180 	.word	0x000cc180
   b4050:	2003a420 	.word	0x2003a420
   b4054:	2003a420 	.word	0x2003a420
   b4058:	2003e7f0 	.word	0x2003e7f0

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f009 f88d 	bl	bd180 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000cc11c 	.word	0x000cc11c
   b4080:	000cc144 	.word	0x000cc144

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f003 b98a 	b.w	b739c <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f003 ff19 	bl	b7ec0 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f009 b82d 	b.w	bd0f0 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f008 ba61 	b.w	bc55c <malloc>

000b409a <_Znaj>:
   b409a:	f008 ba5f 	b.w	bc55c <malloc>

000b409e <_ZdaPv>:
   b409e:	f008 ba65 	b.w	bc56c <free>

000b40a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a2:	f008 ba63 	b.w	bc56c <free>

000b40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a6:	7800      	ldrb	r0, [r0, #0]
   b40a8:	fab0 f080 	clz	r0, r0
   b40ac:	0940      	lsrs	r0, r0, #5
   b40ae:	4770      	bx	lr

000b40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40b0:	2301      	movs	r3, #1
   b40b2:	7003      	strb	r3, [r0, #0]
   b40b4:	4770      	bx	lr

000b40b6 <TfLiteIntArrayEqualsArray>:
  if (a == NULL || b == NULL) return 0;
  return TfLiteIntArrayEqualsArray(a, b->size, b->data);
}

int TfLiteIntArrayEqualsArray(const TfLiteIntArray* a, int b_size,
                              const int b_data[]) {
   b40b6:	b530      	push	{r4, r5, lr}
  if (a == NULL) return (b_size == 0);
   b40b8:	b918      	cbnz	r0, b40c2 <TfLiteIntArrayEqualsArray+0xc>
   b40ba:	fab1 f081 	clz	r0, r1
   b40be:	0940      	lsrs	r0, r0, #5
  if (a->size != b_size) return 0;
  int i = 0;
  for (; i < a->size; i++)
    if (a->data[i] != b_data[i]) return 0;
  return 1;
}
   b40c0:	bd30      	pop	{r4, r5, pc}
  if (a->size != b_size) return 0;
   b40c2:	6803      	ldr	r3, [r0, #0]
   b40c4:	428b      	cmp	r3, r1
   b40c6:	d10d      	bne.n	b40e4 <TfLiteIntArrayEqualsArray+0x2e>
   b40c8:	3004      	adds	r0, #4
  int i = 0;
   b40ca:	2300      	movs	r3, #0
  for (; i < a->size; i++)
   b40cc:	428b      	cmp	r3, r1
   b40ce:	db01      	blt.n	b40d4 <TfLiteIntArrayEqualsArray+0x1e>
  return 1;
   b40d0:	2001      	movs	r0, #1
   b40d2:	e7f5      	b.n	b40c0 <TfLiteIntArrayEqualsArray+0xa>
    if (a->data[i] != b_data[i]) return 0;
   b40d4:	f850 5b04 	ldr.w	r5, [r0], #4
   b40d8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   b40dc:	42a5      	cmp	r5, r4
   b40de:	d101      	bne.n	b40e4 <TfLiteIntArrayEqualsArray+0x2e>
  for (; i < a->size; i++)
   b40e0:	3301      	adds	r3, #1
   b40e2:	e7f3      	b.n	b40cc <TfLiteIntArrayEqualsArray+0x16>
  if (a->size != b_size) return 0;
   b40e4:	2000      	movs	r0, #0
   b40e6:	e7eb      	b.n	b40c0 <TfLiteIntArrayEqualsArray+0xa>

000b40e8 <TfLiteIntArrayEqual>:
  if (a == b) return 1;
   b40e8:	4288      	cmp	r0, r1
   b40ea:	d005      	beq.n	b40f8 <TfLiteIntArrayEqual+0x10>
  if (a == NULL || b == NULL) return 0;
   b40ec:	b130      	cbz	r0, b40fc <TfLiteIntArrayEqual+0x14>
   b40ee:	b131      	cbz	r1, b40fe <TfLiteIntArrayEqual+0x16>
  return TfLiteIntArrayEqualsArray(a, b->size, b->data);
   b40f0:	1d0a      	adds	r2, r1, #4
   b40f2:	6809      	ldr	r1, [r1, #0]
   b40f4:	f7ff bfdf 	b.w	b40b6 <TfLiteIntArrayEqualsArray>
  if (a == b) return 1;
   b40f8:	2001      	movs	r0, #1
   b40fa:	4770      	bx	lr
   b40fc:	4770      	bx	lr
  if (a == NULL || b == NULL) return 0;
   b40fe:	4608      	mov	r0, r1
}
   b4100:	4770      	bx	lr
	...

000b4104 <TfLiteTypeGetName>:
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
  switch (type) {
   b4104:	2810      	cmp	r0, #16
   b4106:	bf9a      	itte	ls
   b4108:	4b02      	ldrls	r3, [pc, #8]	; (b4114 <TfLiteTypeGetName+0x10>)
   b410a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
const char* TfLiteTypeGetName(TfLiteType type) {
   b410e:	4802      	ldrhi	r0, [pc, #8]	; (b4118 <TfLiteTypeGetName+0x14>)
      return "RESOURCE";
    case kTfLiteVariant:
      return "VARIANT";
  }
  return "Unknown type";
}
   b4110:	4770      	bx	lr
   b4112:	bf00      	nop
   b4114:	000c074c 	.word	0x000c074c
   b4118:	000c06d4 	.word	0x000c06d4

000b411c <arm_nn_mat_mult_nt_t_s8>:
                                   const int32_t rhs_cols,
                                   const int32_t lhs_offset,
                                   const int32_t dst_offset,
                                   const int32_t activation_min,
                                   const int32_t activation_max)
{
   b411c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4120:	b09b      	sub	sp, #108	; 0x6c
   b4122:	930e      	str	r3, [sp, #56]	; 0x38
        {
            lhs_offset_contribution0 += bias[rhs_rows_idx];
            lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
        }

        int32_t lhs_rows_idx = lhs_rows >> 1;
   b4124:	9b26      	ldr	r3, [sp, #152]	; 0x98
{
   b4126:	9209      	str	r2, [sp, #36]	; 0x24
        int32_t lhs_rows_idx = lhs_rows >> 1;
   b4128:	105b      	asrs	r3, r3, #1
   b412a:	9311      	str	r3, [sp, #68]	; 0x44

            dst_ptr[0] = (q7_t)res00;
            dst_ptr[1] = (q7_t)res01;
        }

        rhs += 2 * rhs_cols;
   b412c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   b412e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
{
   b4130:	9112      	str	r1, [sp, #72]	; 0x48
        rhs += 2 * rhs_cols;
   b4132:	005b      	lsls	r3, r3, #1
   b4134:	9310      	str	r3, [sp, #64]	; 0x40
   b4136:	9b11      	ldr	r3, [sp, #68]	; 0x44
{
   b4138:	900c      	str	r0, [sp, #48]	; 0x30
   b413a:	4353      	muls	r3, r2
   b413c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b413e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   b4142:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   b4144:	930a      	str	r3, [sp, #40]	; 0x28
   b4146:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   b4148:	2a00      	cmp	r2, #0
   b414a:	f023 030f 	bic.w	r3, r3, #15
   b414e:	bfb8      	it	lt
   b4150:	2300      	movlt	r3, #0
   b4152:	9308      	str	r3, [sp, #32]
   b4154:	4613      	mov	r3, r2
   b4156:	9a08      	ldr	r2, [sp, #32]
   b4158:	9908      	ldr	r1, [sp, #32]
   b415a:	1a9b      	subs	r3, r3, r2
   b415c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   b415e:	428a      	cmp	r2, r1
   b4160:	bfb8      	it	lt
   b4162:	2300      	movlt	r3, #0
   b4164:	4413      	add	r3, r2
   b4166:	9316      	str	r3, [sp, #88]	; 0x58
   b4168:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   b416a:	005b      	lsls	r3, r3, #1
   b416c:	9314      	str	r3, [sp, #80]	; 0x50
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   b416e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b4170:	9300      	str	r3, [sp, #0]
   b4172:	2304      	movs	r3, #4
   b4174:	9305      	str	r3, [sp, #20]
   b4176:	2300      	movs	r3, #0
   b4178:	9301      	str	r3, [sp, #4]
   b417a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   b417c:	3b01      	subs	r3, #1
   b417e:	9318      	str	r3, [sp, #96]	; 0x60
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   b4180:	f1a2 030f 	sub.w	r3, r2, #15
   b4184:	9313      	str	r3, [sp, #76]	; 0x4c
   b4186:	9a01      	ldr	r2, [sp, #4]
   b4188:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b418a:	4413      	add	r3, r2
   b418c:	9307      	str	r3, [sp, #28]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   b418e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b4190:	4293      	cmp	r3, r2
   b4192:	f340 82cd 	ble.w	b4730 <arm_nn_mat_mult_nt_t_s8+0x614>
   b4196:	9b00      	ldr	r3, [sp, #0]
        for (int32_t x = 0; x < rhs_cols; ++x)
   b4198:	9800      	ldr	r0, [sp, #0]
   b419a:	1e5a      	subs	r2, r3, #1
        q31_t lhs_offset_contribution1 = 0;
   b419c:	2300      	movs	r3, #0
        q31_t lhs_offset_contribution0 = 0;
   b419e:	4619      	mov	r1, r3
        for (int32_t x = 0; x < rhs_cols; ++x)
   b41a0:	f1c0 0001 	rsb	r0, r0, #1
   b41a4:	e005      	b.n	b41b2 <arm_nn_mat_mult_nt_t_s8+0x96>
            lhs_offset_contribution0 += rhs[x];
   b41a6:	f912 4f01 	ldrsb.w	r4, [r2, #1]!
   b41aa:	4421      	add	r1, r4
            lhs_offset_contribution1 += rhs[x + rhs_cols];
   b41ac:	9c28      	ldr	r4, [sp, #160]	; 0xa0
   b41ae:	5714      	ldrsb	r4, [r2, r4]
   b41b0:	4423      	add	r3, r4
        for (int32_t x = 0; x < rhs_cols; ++x)
   b41b2:	9d28      	ldr	r5, [sp, #160]	; 0xa0
   b41b4:	1884      	adds	r4, r0, r2
   b41b6:	42ac      	cmp	r4, r5
   b41b8:	dbf5      	blt.n	b41a6 <arm_nn_mat_mult_nt_t_s8+0x8a>
        lhs_offset_contribution0 *= lhs_offset;
   b41ba:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   b41bc:	434a      	muls	r2, r1
   b41be:	9202      	str	r2, [sp, #8]
        lhs_offset_contribution1 *= lhs_offset;
   b41c0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   b41c2:	4353      	muls	r3, r2
   b41c4:	9303      	str	r3, [sp, #12]
        if (bias)
   b41c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b41c8:	b15b      	cbz	r3, b41e2 <arm_nn_mat_mult_nt_t_s8+0xc6>
            lhs_offset_contribution0 += bias[rhs_rows_idx];
   b41ca:	9a01      	ldr	r2, [sp, #4]
   b41cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   b41d0:	9a02      	ldr	r2, [sp, #8]
   b41d2:	441a      	add	r2, r3
   b41d4:	9202      	str	r2, [sp, #8]
            lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
   b41d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b41d8:	9a05      	ldr	r2, [sp, #20]
   b41da:	589b      	ldr	r3, [r3, r2]
   b41dc:	9a03      	ldr	r2, [sp, #12]
   b41de:	441a      	add	r2, r3
   b41e0:	9203      	str	r2, [sp, #12]
        while (lhs_rows_idx)
   b41e2:	9b08      	ldr	r3, [sp, #32]
   b41e4:	9a00      	ldr	r2, [sp, #0]
   b41e6:	3b01      	subs	r3, #1
   b41e8:	18d3      	adds	r3, r2, r3
   b41ea:	930b      	str	r3, [sp, #44]	; 0x2c
        const q7_t *lhs_ptr = &lhs[0];
   b41ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b41ee:	9304      	str	r3, [sp, #16]
        int32_t lhs_rows_idx = lhs_rows >> 1;
   b41f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   b41f2:	9306      	str	r3, [sp, #24]
            dst_ptr[1] = (q7_t)res11;
   b41f4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   b41f6:	3301      	adds	r3, #1
   b41f8:	9319      	str	r3, [sp, #100]	; 0x64
        while (lhs_rows_idx)
   b41fa:	9b06      	ldr	r3, [sp, #24]
   b41fc:	2b00      	cmp	r3, #0
   b41fe:	f000 8190 	beq.w	b4522 <arm_nn_mat_mult_nt_t_s8+0x406>
   b4202:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   b4204:	9b00      	ldr	r3, [sp, #0]
            q31_t res10 = lhs_offset_contribution0;
   b4206:	e9dd b902 	ldrd	fp, r9, [sp, #8]
   b420a:	189e      	adds	r6, r3, r2
   b420c:	9b04      	ldr	r3, [sp, #16]
            q31_t res01 = lhs_offset_contribution1;
   b420e:	464f      	mov	r7, r9
   b4210:	189d      	adds	r5, r3, r2
            q31_t res00 = lhs_offset_contribution0;
   b4212:	465b      	mov	r3, fp
            int32_t rhs_cols_idx = 0;
   b4214:	2200      	movs	r2, #0
   b4216:	e0a3      	b.n	b4360 <arm_nn_mat_mult_nt_t_s8+0x244>
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
{
    q31_t val;
    memcpy(&val, *in_q7, 4);
   b4218:	9900      	ldr	r1, [sp, #0]
   b421a:	5888      	ldr	r0, [r1, r2]

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   b421c:	9904      	ldr	r1, [sp, #16]
   b421e:	fa2f fe80 	sxtb16	lr, r0
   b4222:	588c      	ldr	r4, [r1, r2]
   b4224:	6831      	ldr	r1, [r6, #0]
   b4226:	fa2f f884 	sxtb16	r8, r4

__STATIC_FORCEINLINE uint32_t __SXTB16_RORn(uint32_t op1, uint32_t rotate)
{
  uint32_t result;
  if (__builtin_constant_p(rotate) && ((rotate == 8U) || (rotate == 16U) || (rotate == 24U))) {
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   b422a:	fa2f f090 	sxtb16	r0, r0, ror #8
   b422e:	fa2f f494 	sxtb16	r4, r4, ror #8

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   b4232:	fb28 3c0e 	smlad	ip, r8, lr, r3
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   b4236:	fa2f f381 	sxtb16	r3, r1
   b423a:	930f      	str	r3, [sp, #60]	; 0x3c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   b423c:	fb24 c300 	smlad	r3, r4, r0, ip
   b4240:	9317      	str	r3, [sp, #92]	; 0x5c
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   b4242:	fa2f fc91 	sxtb16	ip, r1, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   b4246:	990f      	ldr	r1, [sp, #60]	; 0x3c
   b4248:	fb28 7701 	smlad	r7, r8, r1, r7
   b424c:	fb24 740c 	smlad	r4, r4, ip, r7
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4(const q7_t *in_q7)
{
    q31_t val;
    memcpy(&val, in_q7, 4);
   b4250:	6829      	ldr	r1, [r5, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   b4252:	fa2f f881 	sxtb16	r8, r1
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   b4256:	fa2f f791 	sxtb16	r7, r1, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   b425a:	fb28 be0e 	smlad	lr, r8, lr, fp
   b425e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   b4260:	fb28 9101 	smlad	r1, r8, r1, r9
   b4264:	fb27 e000 	smlad	r0, r7, r0, lr
    memcpy(&val, *in_q7, 4);
   b4268:	f8da 8004 	ldr.w	r8, [sl, #4]
   b426c:	fb27 110c 	smlad	r1, r7, ip, r1
    memcpy(&val, in_q7, 4);
   b4270:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b4272:	f8d6 e004 	ldr.w	lr, [r6, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   b4276:	f8d3 9004 	ldr.w	r9, [r3, #4]
   b427a:	fa2f f788 	sxtb16	r7, r8
   b427e:	fa2f fc89 	sxtb16	ip, r9
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   b4282:	fa2f f898 	sxtb16	r8, r8, ror #8
   b4286:	fa2f f999 	sxtb16	r9, r9, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   b428a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b428c:	fb2c 3307 	smlad	r3, ip, r7, r3
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   b4290:	fa2f fb8e 	sxtb16	fp, lr
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   b4294:	fb29 3308 	smlad	r3, r9, r8, r3
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   b4298:	fa2f fe9e 	sxtb16	lr, lr, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   b429c:	fb2c 440b 	smlad	r4, ip, fp, r4
   b42a0:	fb29 490e 	smlad	r9, r9, lr, r4
   b42a4:	686c      	ldr	r4, [r5, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   b42a6:	fa2f fc84 	sxtb16	ip, r4
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   b42aa:	fa2f f494 	sxtb16	r4, r4, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   b42ae:	fb2c 0007 	smlad	r0, ip, r7, r0
   b42b2:	fb2c 110b 	smlad	r1, ip, fp, r1
   b42b6:	fb24 0808 	smlad	r8, r4, r8, r0
    memcpy(&val, *in_q7, 4);
   b42ba:	f8da b008 	ldr.w	fp, [sl, #8]
   b42be:	fb24 1e0e 	smlad	lr, r4, lr, r1
    memcpy(&val, in_q7, 4);
   b42c2:	980d      	ldr	r0, [sp, #52]	; 0x34
   b42c4:	f8d6 c008 	ldr.w	ip, [r6, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   b42c8:	6880      	ldr	r0, [r0, #8]
   b42ca:	fa2f f18b 	sxtb16	r1, fp
   b42ce:	fa2f f480 	sxtb16	r4, r0
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   b42d2:	fa2f fb9b 	sxtb16	fp, fp, ror #8
   b42d6:	fa2f f090 	sxtb16	r0, r0, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   b42da:	fb24 3301 	smlad	r3, r4, r1, r3
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   b42de:	fa2f f78c 	sxtb16	r7, ip
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   b42e2:	fb20 330b 	smlad	r3, r0, fp, r3
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   b42e6:	fa2f fc9c 	sxtb16	ip, ip, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   b42ea:	fb24 9907 	smlad	r9, r4, r7, r9
   b42ee:	fb20 900c 	smlad	r0, r0, ip, r9
   b42f2:	f8d5 9008 	ldr.w	r9, [r5, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   b42f6:	fa2f f489 	sxtb16	r4, r9
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   b42fa:	fa2f f999 	sxtb16	r9, r9, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   b42fe:	fb24 8801 	smlad	r8, r4, r1, r8
   b4302:	fb24 e407 	smlad	r4, r4, r7, lr
   b4306:	fb29 8b0b 	smlad	fp, r9, fp, r8
    memcpy(&val, *in_q7, 4);
   b430a:	f8da e00c 	ldr.w	lr, [sl, #12]
   b430e:	fb29 4c0c 	smlad	ip, r9, ip, r4
    memcpy(&val, in_q7, 4);
   b4312:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   b4314:	68f1      	ldr	r1, [r6, #12]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   b4316:	68e7      	ldr	r7, [r4, #12]
   b4318:	fa2f f88e 	sxtb16	r8, lr
   b431c:	fa2f fa87 	sxtb16	sl, r7
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   b4320:	fa2f fe9e 	sxtb16	lr, lr, ror #8
   b4324:	fa2f f497 	sxtb16	r4, r7, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   b4328:	fb2a 3308 	smlad	r3, sl, r8, r3
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   b432c:	fa2f f981 	sxtb16	r9, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   b4330:	fb24 330e 	smlad	r3, r4, lr, r3
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   b4334:	fa2f f191 	sxtb16	r1, r1, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   b4338:	fb2a 0009 	smlad	r0, sl, r9, r0
   b433c:	fb24 0701 	smlad	r7, r4, r1, r0
   b4340:	68ed      	ldr	r5, [r5, #12]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   b4342:	fa2f f485 	sxtb16	r4, r5
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   b4346:	fa2f f595 	sxtb16	r5, r5, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   b434a:	fb24 bb08 	smlad	fp, r4, r8, fp
   b434e:	fb24 cc09 	smlad	ip, r4, r9, ip
   b4352:	fb25 bb0e 	smlad	fp, r5, lr, fp
   b4356:	fb25 c901 	smlad	r9, r5, r1, ip
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   b435a:	9d15      	ldr	r5, [sp, #84]	; 0x54
   b435c:	3210      	adds	r2, #16
   b435e:	3610      	adds	r6, #16
   b4360:	9904      	ldr	r1, [sp, #16]
   b4362:	4411      	add	r1, r2
   b4364:	910d      	str	r1, [sp, #52]	; 0x34
   b4366:	9900      	ldr	r1, [sp, #0]
   b4368:	eb01 0a02 	add.w	sl, r1, r2
   b436c:	f105 0110 	add.w	r1, r5, #16
   b4370:	9115      	str	r1, [sp, #84]	; 0x54
   b4372:	9913      	ldr	r1, [sp, #76]	; 0x4c
   b4374:	4291      	cmp	r1, r2
   b4376:	f73f af4f 	bgt.w	b4218 <arm_nn_mat_mult_nt_t_s8+0xfc>
   b437a:	9908      	ldr	r1, [sp, #32]
   b437c:	9a04      	ldr	r2, [sp, #16]
   b437e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   b4380:	440a      	add	r2, r1
   b4382:	4614      	mov	r4, r2
   b4384:	1e51      	subs	r1, r2, #1
   b4386:	9a08      	ldr	r2, [sp, #32]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   b4388:	9d28      	ldr	r5, [sp, #160]	; 0xa0
   b438a:	42aa      	cmp	r2, r5
   b438c:	f2c0 80b7 	blt.w	b44fe <arm_nn_mat_mult_nt_t_s8+0x3e2>
                lhs_value = lhs_ptr[rhs_cols];
   b4390:	9a16      	ldr	r2, [sp, #88]	; 0x58
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
   b4392:	9901      	ldr	r1, [sp, #4]
                lhs_value = lhs_ptr[rhs_cols];
   b4394:	18a2      	adds	r2, r4, r2
   b4396:	9204      	str	r2, [sp, #16]
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
   b4398:	9a24      	ldr	r2, [sp, #144]	; 0x90
   b439a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   b439e:	920d      	str	r2, [sp, #52]	; 0x34
   b43a0:	9a25      	ldr	r2, [sp, #148]	; 0x94
    // Rounding offset to add for a right shift of 31
    mult.word.low = 1 << 30;
    mult.word.high = 0;

    // Gets resolved as a SMLAL instruction
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b43a2:	980d      	ldr	r0, [sp, #52]	; 0x34
   b43a4:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 * @return          Returns (val * multiplier)/(2 ^ shift)
 *
 */
__STATIC_FORCEINLINE q31_t arm_nn_requantize(const q31_t val, const q31_t multiplier, const q31_t shift)
{
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b43a8:	ea25 7ee5 	bic.w	lr, r5, r5, asr #31
   b43ac:	2d00      	cmp	r5, #0
   b43ae:	fa03 f30e 	lsl.w	r3, r3, lr
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b43b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   b43b6:	f04f 0100 	mov.w	r1, #0
   b43ba:	fbc3 2100 	smlal	r2, r1, r3, r0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b43be:	bfd8      	it	le
   b43c0:	426d      	negle	r5, r5
    const q31_t remainder_mask = (1 << exponent) - 1;
   b43c2:	f04f 0301 	mov.w	r3, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b43c6:	bfc8      	it	gt
   b43c8:	2500      	movgt	r5, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   b43ca:	fa03 fa05 	lsl.w	sl, r3, r5
    result = (int32_t)(mult.long_long >> 31);
   b43ce:	0fd2      	lsrs	r2, r2, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   b43d0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    result = (int32_t)(mult.long_long >> 31);
   b43d4:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    q31_t threshold = remainder_mask >> 1;
   b43d8:	fa4a fc03 	asr.w	ip, sl, r3
    int32_t remainder = remainder_mask & dividend;
   b43dc:	ea02 010a 	and.w	r1, r2, sl
    if (result < 0)
   b43e0:	412a      	asrs	r2, r5
        threshold++;
   b43e2:	bf4c      	ite	mi
   b43e4:	4463      	addmi	r3, ip
    q31_t threshold = remainder_mask >> 1;
   b43e6:	4663      	movpl	r3, ip
    if (remainder > threshold)
   b43e8:	4299      	cmp	r1, r3
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
   b43ea:	9905      	ldr	r1, [sp, #20]
   b43ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b43ee:	585b      	ldr	r3, [r3, r1]
   b43f0:	930f      	str	r3, [sp, #60]	; 0x3c
   b43f2:	9b25      	ldr	r3, [sp, #148]	; 0x94
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b43f4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   b43f6:	585c      	ldr	r4, [r3, r1]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b43f8:	ea24 71e4 	bic.w	r1, r4, r4, asr #31
   b43fc:	fa07 f701 	lsl.w	r7, r7, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b4400:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b4404:	f04f 0000 	mov.w	r0, #0
   b4408:	fbc7 3006 	smlal	r3, r0, r7, r6
        result++;
   b440c:	bfc8      	it	gt
   b440e:	3201      	addgt	r2, #1
    result = (int32_t)(mult.long_long >> 31);
   b4410:	0fdb      	lsrs	r3, r3, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b4412:	2c00      	cmp	r4, #0
    result = (int32_t)(mult.long_long >> 31);
   b4414:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b4418:	bfd8      	it	le
   b441a:	4264      	negle	r4, r4
    const q31_t remainder_mask = (1 << exponent) - 1;
   b441c:	f04f 0001 	mov.w	r0, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b4420:	bfc8      	it	gt
   b4422:	2400      	movgt	r4, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   b4424:	fa00 f604 	lsl.w	r6, r0, r4
   b4428:	3e01      	subs	r6, #1
    q31_t threshold = remainder_mask >> 1;
   b442a:	fa46 f700 	asr.w	r7, r6, r0
    int32_t remainder = remainder_mask & dividend;
   b442e:	ea03 0806 	and.w	r8, r3, r6
    if (result < 0)
   b4432:	4123      	asrs	r3, r4
        threshold++;
   b4434:	bf4c      	ite	mi
   b4436:	1838      	addmi	r0, r7, r0
    q31_t threshold = remainder_mask >> 1;
   b4438:	4638      	movpl	r0, r7
    if (remainder > threshold)
   b443a:	4580      	cmp	r8, r0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b443c:	980d      	ldr	r0, [sp, #52]	; 0x34
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b443e:	fa0b fe0e 	lsl.w	lr, fp, lr
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b4442:	f04f 0800 	mov.w	r8, #0
   b4446:	f04f 4b80 	mov.w	fp, #1073741824	; 0x40000000
   b444a:	fbce b800 	smlal	fp, r8, lr, r0
   b444e:	4658      	mov	r0, fp
    result = (int32_t)(mult.long_long >> 31);
   b4450:	ea4f 70d0 	mov.w	r0, r0, lsr #31
   b4454:	ea40 0048 	orr.w	r0, r0, r8, lsl #1
        result++;
   b4458:	bfc8      	it	gt
   b445a:	3301      	addgt	r3, #1
    int32_t remainder = remainder_mask & dividend;
   b445c:	ea00 0a0a 	and.w	sl, r0, sl
    if (result < 0)
   b4460:	4128      	asrs	r0, r5
        threshold++;
   b4462:	bf48      	it	mi
   b4464:	f10c 0c01 	addmi.w	ip, ip, #1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b4468:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    if (remainder > threshold)
   b446a:	45e2      	cmp	sl, ip
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b446c:	fa09 f101 	lsl.w	r1, r9, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b4470:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
   b4474:	f04f 0c00 	mov.w	ip, #0
   b4478:	fbc1 ec05 	smlal	lr, ip, r1, r5
   b447c:	4675      	mov	r5, lr
    result = (int32_t)(mult.long_long >> 31);
   b447e:	ea4f 75d5 	mov.w	r5, r5, lsr #31
   b4482:	ea45 054c 	orr.w	r5, r5, ip, lsl #1
        result++;
   b4486:	bfc8      	it	gt
   b4488:	3001      	addgt	r0, #1
    if (result < 0)
   b448a:	fa55 f404 	asrs.w	r4, r5, r4
    int32_t remainder = remainder_mask & dividend;
   b448e:	ea06 0605 	and.w	r6, r6, r5
        threshold++;
   b4492:	bf48      	it	mi
   b4494:	3701      	addmi	r7, #1
            res00 += dst_offset;
   b4496:	992a      	ldr	r1, [sp, #168]	; 0xa8
    if (remainder > threshold)
   b4498:	42be      	cmp	r6, r7
        result++;
   b449a:	bfc8      	it	gt
   b449c:	3401      	addgt	r4, #1
   b449e:	440a      	add	r2, r1
            res01 += dst_offset;
   b44a0:	440b      	add	r3, r1
            res10 += dst_offset;
   b44a2:	4408      	add	r0, r1
            res11 += dst_offset;
   b44a4:	440c      	add	r4, r1
            res00 = MAX(res00, activation_min);
   b44a6:	992b      	ldr	r1, [sp, #172]	; 0xac
   b44a8:	428a      	cmp	r2, r1
   b44aa:	bfb8      	it	lt
   b44ac:	460a      	movlt	r2, r1
            res01 = MAX(res01, activation_min);
   b44ae:	428b      	cmp	r3, r1
   b44b0:	bfb8      	it	lt
   b44b2:	460b      	movlt	r3, r1
            res10 = MAX(res10, activation_min);
   b44b4:	4288      	cmp	r0, r1
   b44b6:	bfb8      	it	lt
   b44b8:	4608      	movlt	r0, r1
            res11 = MAX(res11, activation_min);
   b44ba:	428c      	cmp	r4, r1
   b44bc:	bfb8      	it	lt
   b44be:	460c      	movlt	r4, r1
            res00 = MIN(res00, activation_max);
   b44c0:	992c      	ldr	r1, [sp, #176]	; 0xb0
   b44c2:	428a      	cmp	r2, r1
   b44c4:	bfa8      	it	ge
   b44c6:	460a      	movge	r2, r1
            dst_ptr[0] = (q7_t)res00;
   b44c8:	9907      	ldr	r1, [sp, #28]
   b44ca:	700a      	strb	r2, [r1, #0]
            res01 = MIN(res01, activation_max);
   b44cc:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   b44ce:	4293      	cmp	r3, r2
   b44d0:	bfa8      	it	ge
   b44d2:	4613      	movge	r3, r2
            dst_ptr[1] = (q7_t)res01;
   b44d4:	704b      	strb	r3, [r1, #1]
            res10 = MIN(res10, activation_max);
   b44d6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
            dst_ptr[0] = (q7_t)res10;
   b44d8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
            res10 = MIN(res10, activation_max);
   b44da:	4298      	cmp	r0, r3
   b44dc:	bfa8      	it	ge
   b44de:	4618      	movge	r0, r3
            res11 = MIN(res11, activation_max);
   b44e0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
            dst_ptr[0] = (q7_t)res10;
   b44e2:	5488      	strb	r0, [r1, r2]
            res11 = MIN(res11, activation_max);
   b44e4:	429c      	cmp	r4, r3
            dst_ptr[1] = (q7_t)res11;
   b44e6:	9a19      	ldr	r2, [sp, #100]	; 0x64
            res11 = MIN(res11, activation_max);
   b44e8:	bfa8      	it	ge
   b44ea:	461c      	movge	r4, r3
            dst_ptr[1] = (q7_t)res11;
   b44ec:	548c      	strb	r4, [r1, r2]
            dst_ptr += rhs_rows;
   b44ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
            dst_ptr[1] = (q7_t)res11;
   b44f0:	460b      	mov	r3, r1
   b44f2:	4413      	add	r3, r2
   b44f4:	9307      	str	r3, [sp, #28]
            lhs_rows_idx--;
   b44f6:	9b06      	ldr	r3, [sp, #24]
   b44f8:	3b01      	subs	r3, #1
   b44fa:	9306      	str	r3, [sp, #24]
   b44fc:	e67d      	b.n	b41fa <arm_nn_mat_mult_nt_t_s8+0xde>
                q7_t rhs_value0 = rhs_ptr[0];
   b44fe:	f910 cf01 	ldrsb.w	ip, [r0, #1]!
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
   b4502:	9d28      	ldr	r5, [sp, #160]	; 0xa0
   b4504:	5746      	ldrsb	r6, [r0, r5]
                q7_t lhs_value = lhs_ptr[0];
   b4506:	f911 5f01 	ldrsb.w	r5, [r1, #1]!
                res00 += lhs_value * rhs_value0;
   b450a:	fb15 330c 	smlabb	r3, r5, ip, r3
                res01 += lhs_value * rhs_value1;
   b450e:	fb15 7706 	smlabb	r7, r5, r6, r7
                lhs_value = lhs_ptr[rhs_cols];
   b4512:	9d28      	ldr	r5, [sp, #160]	; 0xa0
   b4514:	574d      	ldrsb	r5, [r1, r5]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   b4516:	3201      	adds	r2, #1
                res10 += lhs_value * rhs_value0;
   b4518:	fb1c bb05 	smlabb	fp, ip, r5, fp
                res11 += lhs_value * rhs_value1;
   b451c:	fb16 9905 	smlabb	r9, r6, r5, r9
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   b4520:	e732      	b.n	b4388 <arm_nn_mat_mult_nt_t_s8+0x26c>
        if (lhs_rows % 2)
   b4522:	9b26      	ldr	r3, [sp, #152]	; 0x98
   b4524:	07d8      	lsls	r0, r3, #31
   b4526:	d579      	bpl.n	b461c <arm_nn_mat_mult_nt_t_s8+0x500>
   b4528:	9b00      	ldr	r3, [sp, #0]
   b452a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   b452c:	1898      	adds	r0, r3, r2
            int32_t rhs_cols_idx = 0;
   b452e:	9b06      	ldr	r3, [sp, #24]
   b4530:	9a04      	ldr	r2, [sp, #16]
   b4532:	18d6      	adds	r6, r2, r3
   b4534:	9a00      	ldr	r2, [sp, #0]
   b4536:	18d5      	adds	r5, r2, r3
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   b4538:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b453a:	429a      	cmp	r2, r3
   b453c:	dc7c      	bgt.n	b4638 <arm_nn_mat_mult_nt_t_s8+0x51c>
   b453e:	9a08      	ldr	r2, [sp, #32]
   b4540:	9b04      	ldr	r3, [sp, #16]
   b4542:	4413      	add	r3, r2
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   b4544:	9a04      	ldr	r2, [sp, #16]
   b4546:	4251      	negs	r1, r2
   b4548:	9828      	ldr	r0, [sp, #160]	; 0xa0
   b454a:	185a      	adds	r2, r3, r1
   b454c:	4290      	cmp	r0, r2
   b454e:	f300 80dd 	bgt.w	b470c <arm_nn_mat_mult_nt_t_s8+0x5f0>
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
   b4552:	9b25      	ldr	r3, [sp, #148]	; 0x94
   b4554:	9a01      	ldr	r2, [sp, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b4556:	9901      	ldr	r1, [sp, #4]
   b4558:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b455c:	9b02      	ldr	r3, [sp, #8]
   b455e:	ea22 74e2 	bic.w	r4, r2, r2, asr #31
   b4562:	40a3      	lsls	r3, r4
   b4564:	461c      	mov	r4, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b4566:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b4568:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   b456c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   b4570:	2500      	movs	r5, #0
   b4572:	fbc4 0503 	smlal	r0, r5, r4, r3
    result = (int32_t)(mult.long_long >> 31);
   b4576:	0fc1      	lsrs	r1, r0, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b4578:	2a00      	cmp	r2, #0
    result = (int32_t)(mult.long_long >> 31);
   b457a:	ea41 0545 	orr.w	r5, r1, r5, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   b457e:	f04f 0301 	mov.w	r3, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b4582:	bfd4      	ite	le
   b4584:	4251      	negle	r1, r2
   b4586:	2100      	movgt	r1, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   b4588:	408b      	lsls	r3, r1
   b458a:	3b01      	subs	r3, #1
    if (result < 0)
   b458c:	fa55 f101 	asrs.w	r1, r5, r1
    int32_t remainder = remainder_mask & dividend;
   b4590:	ea05 0003 	and.w	r0, r5, r3
    q31_t threshold = remainder_mask >> 1;
   b4594:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
   b4598:	bf48      	it	mi
   b459a:	3301      	addmi	r3, #1
    if (remainder > threshold)
   b459c:	4298      	cmp	r0, r3
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
   b459e:	9a05      	ldr	r2, [sp, #20]
   b45a0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   b45a2:	589c      	ldr	r4, [r3, r2]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b45a4:	9b03      	ldr	r3, [sp, #12]
   b45a6:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   b45aa:	fa03 f300 	lsl.w	r3, r3, r0
   b45ae:	4618      	mov	r0, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b45b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b45b2:	589b      	ldr	r3, [r3, r2]
        result++;
   b45b4:	bfc8      	it	gt
   b45b6:	3101      	addgt	r1, #1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b45b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b45bc:	2c00      	cmp	r4, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b45be:	f04f 0500 	mov.w	r5, #0
   b45c2:	fbc0 2503 	smlal	r2, r5, r0, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b45c6:	bfdc      	itt	le
   b45c8:	4263      	negle	r3, r4
   b45ca:	9306      	strle	r3, [sp, #24]
    result = (int32_t)(mult.long_long >> 31);
   b45cc:	0fd2      	lsrs	r2, r2, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   b45ce:	9b06      	ldr	r3, [sp, #24]
    result = (int32_t)(mult.long_long >> 31);
   b45d0:	ea42 0545 	orr.w	r5, r2, r5, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   b45d4:	2201      	movs	r2, #1
   b45d6:	fa02 f303 	lsl.w	r3, r2, r3
   b45da:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
   b45dc:	ea05 0003 	and.w	r0, r5, r3
    q31_t threshold = remainder_mask >> 1;
   b45e0:	4113      	asrs	r3, r2
    if (result < 0)
   b45e2:	9a06      	ldr	r2, [sp, #24]
   b45e4:	4115      	asrs	r5, r2
        threshold++;
   b45e6:	bf48      	it	mi
   b45e8:	3301      	addmi	r3, #1
    if (remainder > threshold)
   b45ea:	4298      	cmp	r0, r3
            res00 += dst_offset;
   b45ec:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
        result++;
   b45ee:	bfc8      	it	gt
   b45f0:	3501      	addgt	r5, #1
   b45f2:	4419      	add	r1, r3
            res01 += dst_offset;
   b45f4:	441d      	add	r5, r3
            res00 = MAX(res00, activation_min);
   b45f6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   b45f8:	4299      	cmp	r1, r3
   b45fa:	bfb8      	it	lt
   b45fc:	4619      	movlt	r1, r3
            res01 = MAX(res01, activation_min);
   b45fe:	429d      	cmp	r5, r3
   b4600:	bfb8      	it	lt
   b4602:	461d      	movlt	r5, r3
            res00 = MIN(res00, activation_max);
   b4604:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   b4606:	4299      	cmp	r1, r3
   b4608:	bfa8      	it	ge
   b460a:	4619      	movge	r1, r3
            dst_ptr[0] = (q7_t)res00;
   b460c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b460e:	7019      	strb	r1, [r3, #0]
            res01 = MIN(res01, activation_max);
   b4610:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   b4612:	429d      	cmp	r5, r3
   b4614:	bfa8      	it	ge
   b4616:	461d      	movge	r5, r3
            dst_ptr[1] = (q7_t)res01;
   b4618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b461a:	705d      	strb	r5, [r3, #1]
        rhs += 2 * rhs_cols;
   b461c:	9b00      	ldr	r3, [sp, #0]
   b461e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   b4620:	4413      	add	r3, r2
   b4622:	9300      	str	r3, [sp, #0]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   b4624:	9b01      	ldr	r3, [sp, #4]
   b4626:	3302      	adds	r3, #2
   b4628:	9301      	str	r3, [sp, #4]
   b462a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b462c:	3302      	adds	r3, #2
   b462e:	930a      	str	r3, [sp, #40]	; 0x28
   b4630:	9b05      	ldr	r3, [sp, #20]
   b4632:	3308      	adds	r3, #8
   b4634:	9305      	str	r3, [sp, #20]
   b4636:	e5a6      	b.n	b4186 <arm_nn_mat_mult_nt_t_s8+0x6a>
    memcpy(&val, *in_q7, 4);
   b4638:	9a00      	ldr	r2, [sp, #0]
   b463a:	6801      	ldr	r1, [r0, #0]
   b463c:	58d7      	ldr	r7, [r2, r3]
   b463e:	9a04      	ldr	r2, [sp, #16]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   b4640:	fa2f f887 	sxtb16	r8, r7
   b4644:	58d2      	ldr	r2, [r2, r3]
   b4646:	fa2f fe81 	sxtb16	lr, r1
   b464a:	fa2f fc82 	sxtb16	ip, r2
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   b464e:	fa2f f797 	sxtb16	r7, r7, ror #8
   b4652:	fa2f f292 	sxtb16	r2, r2, ror #8
   b4656:	fa2f f191 	sxtb16	r1, r1, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   b465a:	9c02      	ldr	r4, [sp, #8]
   b465c:	fb2c 4808 	smlad	r8, ip, r8, r4
   b4660:	fb22 8707 	smlad	r7, r2, r7, r8
   b4664:	9c03      	ldr	r4, [sp, #12]
   b4666:	fb2c 4c0e 	smlad	ip, ip, lr, r4
   b466a:	fb22 c101 	smlad	r1, r2, r1, ip
   b466e:	686c      	ldr	r4, [r5, #4]
    memcpy(&val, in_q7, 4);
   b4670:	f8d0 c004 	ldr.w	ip, [r0, #4]
    memcpy(&val, *in_q7, 4);
   b4674:	6872      	ldr	r2, [r6, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   b4676:	fa2f f984 	sxtb16	r9, r4
   b467a:	fa2f fe82 	sxtb16	lr, r2
   b467e:	fa2f f88c 	sxtb16	r8, ip
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   b4682:	fa2f f494 	sxtb16	r4, r4, ror #8
   b4686:	fa2f f292 	sxtb16	r2, r2, ror #8
   b468a:	fa2f fc9c 	sxtb16	ip, ip, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   b468e:	fb2e 7709 	smlad	r7, lr, r9, r7
   b4692:	fb22 7404 	smlad	r4, r2, r4, r7
   b4696:	fb2e 1108 	smlad	r1, lr, r8, r1
   b469a:	fb22 120c 	smlad	r2, r2, ip, r1
   b469e:	f8d5 8008 	ldr.w	r8, [r5, #8]
    memcpy(&val, in_q7, 4);
   b46a2:	f8d0 e008 	ldr.w	lr, [r0, #8]
    memcpy(&val, *in_q7, 4);
   b46a6:	f8d6 c008 	ldr.w	ip, [r6, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   b46aa:	fa2f f788 	sxtb16	r7, r8
   b46ae:	fa2f f18c 	sxtb16	r1, ip
   b46b2:	fa2f f98e 	sxtb16	r9, lr
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   b46b6:	fa2f f898 	sxtb16	r8, r8, ror #8
   b46ba:	fa2f fc9c 	sxtb16	ip, ip, ror #8
   b46be:	fa2f fe9e 	sxtb16	lr, lr, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   b46c2:	fb21 4407 	smlad	r4, r1, r7, r4
   b46c6:	fb2c 4808 	smlad	r8, ip, r8, r4
   b46ca:	fb21 2209 	smlad	r2, r1, r9, r2
   b46ce:	fb2c 2e0e 	smlad	lr, ip, lr, r2
   b46d2:	68ea      	ldr	r2, [r5, #12]
    memcpy(&val, in_q7, 4);
   b46d4:	f8d0 a00c 	ldr.w	sl, [r0, #12]
    memcpy(&val, *in_q7, 4);
   b46d8:	68f5      	ldr	r5, [r6, #12]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   b46da:	fa2f f482 	sxtb16	r4, r2
   b46de:	fa2f fc85 	sxtb16	ip, r5
   b46e2:	fa2f f18a 	sxtb16	r1, sl
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   b46e6:	fa2f f292 	sxtb16	r2, r2, ror #8
   b46ea:	fa2f f595 	sxtb16	r5, r5, ror #8
   b46ee:	fa2f fa9a 	sxtb16	sl, sl, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   b46f2:	fb2c 8804 	smlad	r8, ip, r4, r8
   b46f6:	fb25 8202 	smlad	r2, r5, r2, r8
   b46fa:	9202      	str	r2, [sp, #8]
   b46fc:	fb2c ee01 	smlad	lr, ip, r1, lr
   b4700:	fb25 e20a 	smlad	r2, r5, sl, lr
   b4704:	9203      	str	r2, [sp, #12]
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   b4706:	3310      	adds	r3, #16
   b4708:	3010      	adds	r0, #16
   b470a:	e711      	b.n	b4530 <arm_nn_mat_mult_nt_t_s8+0x414>
                res00 += lhs_value * rhs_value0;
   b470c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
                q7_t lhs_value = lhs_ptr[0];
   b470e:	f913 2b01 	ldrsb.w	r2, [r3], #1
                res00 += lhs_value * rhs_value0;
   b4712:	f914 0f01 	ldrsb.w	r0, [r4, #1]!
   b4716:	940b      	str	r4, [sp, #44]	; 0x2c
   b4718:	9c02      	ldr	r4, [sp, #8]
   b471a:	fb12 4000 	smlabb	r0, r2, r0, r4
   b471e:	9002      	str	r0, [sp, #8]
                res01 += lhs_value * rhs_value1;
   b4720:	9c28      	ldr	r4, [sp, #160]	; 0xa0
   b4722:	980b      	ldr	r0, [sp, #44]	; 0x2c
   b4724:	5700      	ldrsb	r0, [r0, r4]
   b4726:	9c03      	ldr	r4, [sp, #12]
   b4728:	fb12 4200 	smlabb	r2, r2, r0, r4
   b472c:	9203      	str	r2, [sp, #12]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   b472e:	e70b      	b.n	b4548 <arm_nn_mat_mult_nt_t_s8+0x42c>
   b4730:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   b4732:	9810      	ldr	r0, [sp, #64]	; 0x40
   b4734:	2b00      	cmp	r3, #0
   b4736:	ea4f 0253 	mov.w	r2, r3, lsr #1
   b473a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b473c:	bfac      	ite	ge
   b473e:	4611      	movge	r1, r2
   b4740:	2100      	movlt	r1, #0
   b4742:	fb00 3301 	mla	r3, r0, r1, r3
   b4746:	9300      	str	r3, [sp, #0]
   b4748:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b474a:	ea4f 0242 	mov.w	r2, r2, lsl #1
   b474e:	bfb8      	it	lt
   b4750:	2200      	movlt	r2, #0
   b4752:	4413      	add	r3, r2
   b4754:	461a      	mov	r2, r3
        dst += 2;
    }

    if (rhs_rows % 2)
   b4756:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   b4758:	07d9      	lsls	r1, r3, #31
   b475a:	d517      	bpl.n	b478c <arm_nn_mat_mult_nt_t_s8+0x670>
        {
            const q7_t *rhs_ptr = &rhs[0];
            q31_t res00 = 0;
            if (bias)
            {
                res00 = bias[rhs_rows - 1];
   b475c:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
   b4760:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b4762:	3c01      	subs	r4, #1
   b4764:	eb03 0b84 	add.w	fp, r3, r4, lsl #2
                ++rhs_ptr;
                ++lhs_ptr;
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
   b4768:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b476a:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   b476e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   b4770:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b4774:	9b28      	ldr	r3, [sp, #160]	; 0xa0
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
   b4776:	2700      	movs	r7, #0
   b4778:	ea23 7ee3 	bic.w	lr, r3, r3, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b477c:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
   b4780:	46b8      	mov	r8, r7
    const q31_t remainder_mask = (1 << exponent) - 1;
   b4782:	f04f 0901 	mov.w	r9, #1
   b4786:	9b26      	ldr	r3, [sp, #152]	; 0x98
   b4788:	429f      	cmp	r7, r3
   b478a:	db03      	blt.n	b4794 <arm_nn_mat_mult_nt_t_s8+0x678>
            dst_ptr += rhs_rows;
        }
    }
#endif
    return ARM_MATH_SUCCESS;
}
   b478c:	2000      	movs	r0, #0
   b478e:	b01b      	add	sp, #108	; 0x6c
   b4790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (bias)
   b4794:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b4796:	2b00      	cmp	r3, #0
   b4798:	d037      	beq.n	b480a <arm_nn_mat_mult_nt_t_s8+0x6ee>
                res00 = bias[rhs_rows - 1];
   b479a:	f8db 5000 	ldr.w	r5, [fp]
            q31_t res00 = 0;
   b479e:	2300      	movs	r3, #0
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   b47a0:	9928      	ldr	r1, [sp, #160]	; 0xa0
   b47a2:	428b      	cmp	r3, r1
   b47a4:	db33      	blt.n	b480e <arm_nn_mat_mult_nt_t_s8+0x6f2>
   b47a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
   b47a8:	6821      	ldr	r1, [r4, #0]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b47aa:	6806      	ldr	r6, [r0, #0]
   b47ac:	4473      	add	r3, lr
   b47ae:	930c      	str	r3, [sp, #48]	; 0x30
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b47b0:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
   b47b4:	409d      	lsls	r5, r3
   b47b6:	2900      	cmp	r1, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b47b8:	4663      	mov	r3, ip
   b47ba:	46c2      	mov	sl, r8
   b47bc:	fbc5 3a06 	smlal	r3, sl, r5, r6
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b47c0:	bfd4      	ite	le
   b47c2:	4249      	negle	r1, r1
   b47c4:	2100      	movgt	r1, #0
    result = (int32_t)(mult.long_long >> 31);
   b47c6:	0fdb      	lsrs	r3, r3, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   b47c8:	fa09 f501 	lsl.w	r5, r9, r1
    result = (int32_t)(mult.long_long >> 31);
   b47cc:	ea43 0a4a 	orr.w	sl, r3, sl, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   b47d0:	3d01      	subs	r5, #1
    int32_t remainder = remainder_mask & dividend;
   b47d2:	ea0a 0605 	and.w	r6, sl, r5
    if (result < 0)
   b47d6:	fa5a fa01 	asrs.w	sl, sl, r1
    q31_t threshold = remainder_mask >> 1;
   b47da:	ea4f 0565 	mov.w	r5, r5, asr #1
        threshold++;
   b47de:	bf48      	it	mi
   b47e0:	3501      	addmi	r5, #1
            res00 += dst_offset;
   b47e2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    if (remainder > threshold)
   b47e4:	42ae      	cmp	r6, r5
        result++;
   b47e6:	bfc8      	it	gt
   b47e8:	f10a 0a01 	addgt.w	sl, sl, #1
   b47ec:	449a      	add	sl, r3
            res00 = MAX(res00, activation_min);
   b47ee:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   b47f0:	459a      	cmp	sl, r3
   b47f2:	bfb8      	it	lt
   b47f4:	469a      	movlt	sl, r3
            res00 = MIN(res00, activation_max);
   b47f6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   b47f8:	459a      	cmp	sl, r3
   b47fa:	bfa8      	it	ge
   b47fc:	469a      	movge	sl, r3
            dst_ptr += rhs_rows;
   b47fe:	9b27      	ldr	r3, [sp, #156]	; 0x9c
            dst_ptr[0] = (q7_t)res00;
   b4800:	f882 a000 	strb.w	sl, [r2]
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
   b4804:	3701      	adds	r7, #1
            dst_ptr += rhs_rows;
   b4806:	441a      	add	r2, r3
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
   b4808:	e7bd      	b.n	b4786 <arm_nn_mat_mult_nt_t_s8+0x66a>
            q31_t res00 = 0;
   b480a:	9d09      	ldr	r5, [sp, #36]	; 0x24
   b480c:	e7c7      	b.n	b479e <arm_nn_mat_mult_nt_t_s8+0x682>
                q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   b480e:	990c      	ldr	r1, [sp, #48]	; 0x30
   b4810:	9e29      	ldr	r6, [sp, #164]	; 0xa4
   b4812:	56c9      	ldrsb	r1, [r1, r3]
   b4814:	4431      	add	r1, r6
                q31_t rhs_value = rhs_ptr[0];
   b4816:	9e00      	ldr	r6, [sp, #0]
   b4818:	56f6      	ldrsb	r6, [r6, r3]
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   b481a:	3301      	adds	r3, #1
                res00 += lhs_value * rhs_value;
   b481c:	fb06 5501 	mla	r5, r6, r1, r5
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   b4820:	e7be      	b.n	b47a0 <arm_nn_mat_mult_nt_t_s8+0x684>

000b4822 <arm_q7_to_q15_with_offset>:
 * @addtogroup nndata_convert
 * @{
 */

void arm_q7_to_q15_with_offset(const q7_t *src, q15_t *dst, uint32_t block_size, q15_t offset)
{
   b4822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    /*loop unrolling */
    block_cnt = block_size >> 2;

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time. */
    const q31_t offset_q15x2 = __PKHBT(offset, offset, 16);
   b4826:	eac3 4c03 	pkhbt	ip, r3, r3, lsl #16
   b482a:	f022 0403 	bic.w	r4, r2, #3
    block_cnt = block_size >> 2;
   b482e:	ea4f 0e92 	mov.w	lr, r2, lsr #2
    while (block_cnt > 0)
   b4832:	4404      	add	r4, r0
   b4834:	460e      	mov	r6, r1
   b4836:	42a0      	cmp	r0, r4
   b4838:	d108      	bne.n	b484c <arm_q7_to_q15_with_offset+0x2a>
        arm_nn_write_q15x2_ia(&dst, out_q15x2_2);

        block_cnt--;
    }
    /* Handle left over samples */
    block_cnt = block_size % 0x4;
   b483a:	f002 0203 	and.w	r2, r2, #3
   b483e:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
    /* Run the below code for Cortex-M0 */
    /* Loop over block_size number of values */
    block_cnt = block_size;
#endif

    while (block_cnt > 0)
   b4842:	4422      	add	r2, r4
   b4844:	4294      	cmp	r4, r2
   b4846:	d113      	bne.n	b4870 <arm_q7_to_q15_with_offset+0x4e>
        *dst++ = (q15_t)*src++ + offset;

        /* Decrement the loop counter */
        block_cnt--;
    }
}
   b4848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    memcpy(&val, *in_q7, 4);
   b484c:	f850 5b04 	ldr.w	r5, [r0], #4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   b4850:	3608      	adds	r6, #8
  return (op1 >> op2) | (op1 << (32U - op2));
   b4852:	ea4f 2735 	mov.w	r7, r5, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   b4856:	fa2c f585 	sxtab16	r5, ip, r5
   b485a:	fa2c f787 	sxtab16	r7, ip, r7
        out_q15x2_2 = __PKHTB(in_q15x2_1, in_q15x2_2, 16);
   b485e:	eac7 4825 	pkhtb	r8, r7, r5, asr #16
        out_q15x2_1 = __PKHBT(in_q15x2_2, in_q15x2_1, 16);
   b4862:	eac5 4507 	pkhbt	r5, r5, r7, lsl #16
 */
__STATIC_FORCEINLINE void arm_nn_write_q15x2_ia(q15_t **dest_q15, q31_t src_q31)
{
    q31_t val = src_q31;

    memcpy(*dest_q15, &val, 4);
   b4866:	f846 8c04 	str.w	r8, [r6, #-4]
   b486a:	f846 5c08 	str.w	r5, [r6, #-8]
        block_cnt--;
   b486e:	e7e2      	b.n	b4836 <arm_q7_to_q15_with_offset+0x14>
        *dst++ = (q15_t)*src++ + offset;
   b4870:	f914 0b01 	ldrsb.w	r0, [r4], #1
   b4874:	4418      	add	r0, r3
   b4876:	f821 0b02 	strh.w	r0, [r1], #2
        block_cnt--;
   b487a:	e7e3      	b.n	b4844 <arm_q7_to_q15_with_offset+0x22>

000b487c <arm_elementwise_add_s8>:
                                  const int32_t out_mult,
                                  const int32_t out_shift,
                                  const int32_t out_activation_min,
                                  const int32_t out_activation_max,
                                  const uint32_t block_size)
{
   b487c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4880:	b097      	sub	sp, #92	; 0x5c
   b4882:	461d      	mov	r5, r3
   b4884:	920c      	str	r2, [sp, #48]	; 0x30

    int32_t offset_1_packed, offset_2_packed;

    int8_t r1, r2, r3, r4;

    offset_1_packed = (input_1_offset << 16U) | (input_1_offset & 0x0FFFFL);
   b4886:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
{
   b488a:	9c24      	ldr	r4, [sp, #144]	; 0x90
    offset_2_packed = (input_2_offset << 16U) | (input_2_offset & 0x0FFFFL);

    loop_count = block_size >> 2;

    while (loop_count > 0U)
   b488c:	910e      	str	r1, [sp, #56]	; 0x38
    offset_1_packed = (input_1_offset << 16U) | (input_1_offset & 0x0FFFFL);
   b488e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   b4892:	930f      	str	r3, [sp, #60]	; 0x3c
    offset_2_packed = (input_2_offset << 16U) | (input_2_offset & 0x0FFFFL);
   b4894:	9b21      	ldr	r3, [sp, #132]	; 0x84
   b4896:	9a21      	ldr	r2, [sp, #132]	; 0x84
   b4898:	b29b      	uxth	r3, r3
   b489a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   b489e:	9310      	str	r3, [sp, #64]	; 0x40
        a_2 = __SADD16(a_2, offset_2_packed);
        b_2 = __SADD16(b_2, offset_2_packed);

        /* Sum 1 */
        input_1 = (int16_t)(b_1 & 0x0FFFFL) << left_shift;
        SAT_INPUT(input_1, input_1_mult, input_1_shift);
   b48a0:	9b20      	ldr	r3, [sp, #128]	; 0x80
{
   b48a2:	e9cd 0113 	strd	r0, r1, [sp, #76]	; 0x4c
        SAT_INPUT(input_1, input_1_mult, input_1_shift);
   b48a6:	f1c3 0a00 	rsb	sl, r3, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   b48aa:	2001      	movs	r0, #1
   b48ac:	fa00 f30a 	lsl.w	r3, r0, sl
   b48b0:	3b01      	subs	r3, #1
   b48b2:	9306      	str	r3, [sp, #24]
    q31_t threshold = remainder_mask >> 1;
   b48b4:	4103      	asrs	r3, r0
   b48b6:	9307      	str	r3, [sp, #28]
        threshold++;
   b48b8:	4403      	add	r3, r0
   b48ba:	930a      	str	r3, [sp, #40]	; 0x28

        input_2 = (int16_t)(b_2 & 0x0FFFFL) << left_shift;
        SAT_INPUT(input_2, input_2_mult, input_2_shift);
   b48bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   b48be:	f1c3 0900 	rsb	r9, r3, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   b48c2:	fa00 f309 	lsl.w	r3, r0, r9
   b48c6:	3b01      	subs	r3, #1
   b48c8:	9304      	str	r3, [sp, #16]
    q31_t threshold = remainder_mask >> 1;
   b48ca:	4103      	asrs	r3, r0
   b48cc:	9305      	str	r3, [sp, #20]
        threshold++;
   b48ce:	4403      	add	r3, r0
   b48d0:	9309      	str	r3, [sp, #36]	; 0x24

        sum = input_1 + input_2;
        SAT_INPUT(sum, out_mult, out_shift);
   b48d2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   b48d4:	425b      	negs	r3, r3
    const q31_t remainder_mask = (1 << exponent) - 1;
   b48d6:	4098      	lsls	r0, r3
   b48d8:	9301      	str	r3, [sp, #4]
   b48da:	1e43      	subs	r3, r0, #1
   b48dc:	9302      	str	r3, [sp, #8]
    q31_t threshold = remainder_mask >> 1;
   b48de:	105b      	asrs	r3, r3, #1
   b48e0:	9303      	str	r3, [sp, #12]
        threshold++;
   b48e2:	3301      	adds	r3, #1
   b48e4:	9308      	str	r3, [sp, #32]
   b48e6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   b48e8:	f023 0b03 	bic.w	fp, r3, #3
   b48ec:	9b25      	ldr	r3, [sp, #148]	; 0x94
   b48ee:	445b      	add	r3, fp
   b48f0:	930b      	str	r3, [sp, #44]	; 0x2c
    while (loop_count > 0U)
   b48f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b48f4:	930d      	str	r3, [sp, #52]	; 0x34
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b48f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   b48fa:	2700      	movs	r7, #0
   b48fc:	9b25      	ldr	r3, [sp, #148]	; 0x94
   b48fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
   b4900:	428b      	cmp	r3, r1
   b4902:	d11e      	bne.n	b4942 <arm_elementwise_add_s8+0xc6>
   b4904:	9b13      	ldr	r3, [sp, #76]	; 0x4c
        mult = 1 - mult;
   b4906:	f8df e43c 	ldr.w	lr, [pc, #1084]	; b4d44 <arm_elementwise_add_s8+0x4c8>
   b490a:	445b      	add	r3, fp
   b490c:	461f      	mov	r7, r3
   b490e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b4910:	445b      	add	r3, fp
   b4912:	469c      	mov	ip, r3
        write_q7x4_ia(&output, __PACKq7(r1, r2, r3, r4));

        loop_count--;
    }

    loop_count = block_size & 0x3;
   b4914:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   b4916:	f003 0303 	and.w	r3, r3, #3
   b491a:	18cb      	adds	r3, r1, r3
   b491c:	930d      	str	r3, [sp, #52]	; 0x34
    if ((m1 < 0) ^ (m2 < 0))
   b491e:	0feb      	lsrs	r3, r5, #31
   b4920:	930e      	str	r3, [sp, #56]	; 0x38
   b4922:	9b22      	ldr	r3, [sp, #136]	; 0x88
   b4924:	0fdb      	lsrs	r3, r3, #31
    result = (int32_t)(mult / (1ll << 31));
   b4926:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    if ((m1 < 0) ^ (m2 < 0))
   b492a:	930f      	str	r3, [sp, #60]	; 0x3c
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b492c:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
#else
    loop_count = block_size;
#endif

    while (loop_count > 0U)
   b4930:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b4932:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b4934:	4293      	cmp	r3, r2
   b4936:	f040 8186 	bne.w	b4c46 <arm_elementwise_add_s8+0x3ca>
    }

#endif /* ARM_MATH_MVEI */

    return (ARM_MATH_SUCCESS);
}
   b493a:	2000      	movs	r0, #0
   b493c:	b017      	add	sp, #92	; 0x5c
   b493e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy(&val, *in_q7, 4);
   b4942:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b4944:	f853 6b04 	ldr.w	r6, [r3], #4
   b4948:	930d      	str	r3, [sp, #52]	; 0x34
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   b494a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b494c:	f853 1b04 	ldr.w	r1, [r3], #4
   b4950:	930e      	str	r3, [sp, #56]	; 0x38
  return (op1 >> op2) | (op1 << (32U - op2));
   b4952:	ea4f 2e36 	mov.w	lr, r6, ror #8
   b4956:	ea4f 2831 	mov.w	r8, r1, ror #8
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   b495a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   b495c:	fa2f fe8e 	sxtb16	lr, lr
   b4960:	fa2f f686 	sxtb16	r6, r6
   b4964:	fa2f f888 	sxtb16	r8, r8
   b4968:	fa2f f181 	sxtb16	r1, r1
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   b496c:	fa9e f303 	sadd16	r3, lr, r3
   b4970:	9312      	str	r3, [sp, #72]	; 0x48
   b4972:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   b4974:	fa96 f603 	sadd16	r6, r6, r3
   b4978:	9b10      	ldr	r3, [sp, #64]	; 0x40
   b497a:	fa98 f303 	sadd16	r3, r8, r3
   b497e:	9311      	str	r3, [sp, #68]	; 0x44
   b4980:	9b10      	ldr	r3, [sp, #64]	; 0x40
   b4982:	fa91 f103 	sadd16	r1, r1, r3
        input_1 = (int16_t)(b_1 & 0x0FFFFL) << left_shift;
   b4986:	fa0f fe86 	sxth.w	lr, r6
   b498a:	fa0e fe04 	lsl.w	lr, lr, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b498e:	4694      	mov	ip, r2
   b4990:	463b      	mov	r3, r7
   b4992:	fbce c305 	smlal	ip, r3, lr, r5
    q31_t threshold = remainder_mask >> 1;
   b4996:	980a      	ldr	r0, [sp, #40]	; 0x28
    result = (int32_t)(mult.long_long >> 31);
   b4998:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
   b499c:	ea4c 0c43 	orr.w	ip, ip, r3, lsl #1
    int32_t remainder = remainder_mask & dividend;
   b49a0:	9b06      	ldr	r3, [sp, #24]
    q31_t threshold = remainder_mask >> 1;
   b49a2:	4686      	mov	lr, r0
   b49a4:	9807      	ldr	r0, [sp, #28]
    int32_t remainder = remainder_mask & dividend;
   b49a6:	ea03 030c 	and.w	r3, r3, ip
    q31_t threshold = remainder_mask >> 1;
   b49aa:	fa5c fc0a 	asrs.w	ip, ip, sl
   b49ae:	bf58      	it	pl
   b49b0:	4686      	movpl	lr, r0
        input_2 = (int16_t)(b_2 & 0x0FFFFL) << left_shift;
   b49b2:	fa0f f881 	sxth.w	r8, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b49b6:	9822      	ldr	r0, [sp, #136]	; 0x88
    if (remainder > threshold)
   b49b8:	4573      	cmp	r3, lr
   b49ba:	fa08 f804 	lsl.w	r8, r8, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b49be:	4613      	mov	r3, r2
   b49c0:	46be      	mov	lr, r7
   b49c2:	fbc8 3e00 	smlal	r3, lr, r8, r0
    result = (int32_t)(mult.long_long >> 31);
   b49c6:	ea4f 73d3 	mov.w	r3, r3, lsr #31
    int32_t remainder = remainder_mask & dividend;
   b49ca:	9804      	ldr	r0, [sp, #16]
    result = (int32_t)(mult.long_long >> 31);
   b49cc:	ea43 034e 	orr.w	r3, r3, lr, lsl #1
    int32_t remainder = remainder_mask & dividend;
   b49d0:	ea00 0e03 	and.w	lr, r0, r3
    q31_t threshold = remainder_mask >> 1;
   b49d4:	9809      	ldr	r0, [sp, #36]	; 0x24
   b49d6:	4680      	mov	r8, r0
   b49d8:	9805      	ldr	r0, [sp, #20]
        result++;
   b49da:	bfc8      	it	gt
   b49dc:	f10c 0c01 	addgt.w	ip, ip, #1
    q31_t threshold = remainder_mask >> 1;
   b49e0:	fa53 f309 	asrs.w	r3, r3, r9
   b49e4:	bf58      	it	pl
   b49e6:	4680      	movpl	r8, r0
    if (remainder > threshold)
   b49e8:	45c6      	cmp	lr, r8
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b49ea:	9827      	ldr	r0, [sp, #156]	; 0x9c
        result++;
   b49ec:	bfc8      	it	gt
   b49ee:	3301      	addgt	r3, #1
        sum = input_1 + input_2;
   b49f0:	4463      	add	r3, ip
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b49f2:	4696      	mov	lr, r2
   b49f4:	46b8      	mov	r8, r7
   b49f6:	fbc3 e800 	smlal	lr, r8, r3, r0
    result = (int32_t)(mult.long_long >> 31);
   b49fa:	ea4f 73de 	mov.w	r3, lr, lsr #31
    int32_t remainder = remainder_mask & dividend;
   b49fe:	9802      	ldr	r0, [sp, #8]
    result = (int32_t)(mult.long_long >> 31);
   b4a00:	ea43 0348 	orr.w	r3, r3, r8, lsl #1
    int32_t remainder = remainder_mask & dividend;
   b4a04:	ea00 0c03 	and.w	ip, r0, r3
    q31_t threshold = remainder_mask >> 1;
   b4a08:	9801      	ldr	r0, [sp, #4]
   b4a0a:	4103      	asrs	r3, r0
   b4a0c:	9808      	ldr	r0, [sp, #32]
   b4a0e:	4686      	mov	lr, r0
   b4a10:	9803      	ldr	r0, [sp, #12]
   b4a12:	bf58      	it	pl
   b4a14:	4686      	movpl	lr, r0
    if (remainder > threshold)
   b4a16:	45f4      	cmp	ip, lr
        sum += out_offset;
   b4a18:	9826      	ldr	r0, [sp, #152]	; 0x98
        result++;
   b4a1a:	bfc8      	it	gt
   b4a1c:	3301      	addgt	r3, #1
   b4a1e:	4403      	add	r3, r0
        sum = MAX(sum, out_activation_min);
   b4a20:	9829      	ldr	r0, [sp, #164]	; 0xa4
   b4a22:	4283      	cmp	r3, r0
   b4a24:	bfb8      	it	lt
   b4a26:	4603      	movlt	r3, r0
        sum = MIN(sum, out_activation_max);
   b4a28:	982a      	ldr	r0, [sp, #168]	; 0xa8
   b4a2a:	4283      	cmp	r3, r0
   b4a2c:	bfa8      	it	ge
   b4a2e:	4603      	movge	r3, r0
        r1 = (q7_t)sum;
   b4a30:	b25b      	sxtb	r3, r3
        input_1 = (int16_t)((b_1 >> 16) & 0x0FFFFL) << left_shift;
   b4a32:	1436      	asrs	r6, r6, #16
   b4a34:	fa06 fc04 	lsl.w	ip, r6, r4
        r1 = (q7_t)sum;
   b4a38:	9315      	str	r3, [sp, #84]	; 0x54
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b4a3a:	4616      	mov	r6, r2
   b4a3c:	463b      	mov	r3, r7
   b4a3e:	fbcc 6305 	smlal	r6, r3, ip, r5
    q31_t threshold = remainder_mask >> 1;
   b4a42:	980a      	ldr	r0, [sp, #40]	; 0x28
    result = (int32_t)(mult.long_long >> 31);
   b4a44:	0ff6      	lsrs	r6, r6, #31
   b4a46:	ea46 0643 	orr.w	r6, r6, r3, lsl #1
    int32_t remainder = remainder_mask & dividend;
   b4a4a:	9b06      	ldr	r3, [sp, #24]
    q31_t threshold = remainder_mask >> 1;
   b4a4c:	4684      	mov	ip, r0
   b4a4e:	9807      	ldr	r0, [sp, #28]
    int32_t remainder = remainder_mask & dividend;
   b4a50:	4033      	ands	r3, r6
    q31_t threshold = remainder_mask >> 1;
   b4a52:	fa56 f60a 	asrs.w	r6, r6, sl
   b4a56:	bf58      	it	pl
   b4a58:	4684      	movpl	ip, r0
        input_2 = (int16_t)((b_2 >> 16) & 0x0FFFFL) << left_shift;
   b4a5a:	1409      	asrs	r1, r1, #16
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b4a5c:	9822      	ldr	r0, [sp, #136]	; 0x88
    if (remainder > threshold)
   b4a5e:	4563      	cmp	r3, ip
   b4a60:	fa01 f104 	lsl.w	r1, r1, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b4a64:	4613      	mov	r3, r2
   b4a66:	46bc      	mov	ip, r7
   b4a68:	fbc1 3c00 	smlal	r3, ip, r1, r0
    q31_t threshold = remainder_mask >> 1;
   b4a6c:	9809      	ldr	r0, [sp, #36]	; 0x24
    int32_t remainder = remainder_mask & dividend;
   b4a6e:	9904      	ldr	r1, [sp, #16]
    result = (int32_t)(mult.long_long >> 31);
   b4a70:	ea4f 73d3 	mov.w	r3, r3, lsr #31
   b4a74:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
    q31_t threshold = remainder_mask >> 1;
   b4a78:	4684      	mov	ip, r0
   b4a7a:	9805      	ldr	r0, [sp, #20]
        result++;
   b4a7c:	bfc8      	it	gt
   b4a7e:	3601      	addgt	r6, #1
    int32_t remainder = remainder_mask & dividend;
   b4a80:	4019      	ands	r1, r3
    q31_t threshold = remainder_mask >> 1;
   b4a82:	fa53 f309 	asrs.w	r3, r3, r9
   b4a86:	bf58      	it	pl
   b4a88:	4684      	movpl	ip, r0
    if (remainder > threshold)
   b4a8a:	4561      	cmp	r1, ip
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b4a8c:	9827      	ldr	r0, [sp, #156]	; 0x9c
        result++;
   b4a8e:	bfc8      	it	gt
   b4a90:	3301      	addgt	r3, #1
        sum = input_1 + input_2;
   b4a92:	4433      	add	r3, r6
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b4a94:	4611      	mov	r1, r2
   b4a96:	46bc      	mov	ip, r7
   b4a98:	fbc3 1c00 	smlal	r1, ip, r3, r0
    result = (int32_t)(mult.long_long >> 31);
   b4a9c:	0fcb      	lsrs	r3, r1, #31
    q31_t threshold = remainder_mask >> 1;
   b4a9e:	9801      	ldr	r0, [sp, #4]
    int32_t remainder = remainder_mask & dividend;
   b4aa0:	9902      	ldr	r1, [sp, #8]
    q31_t threshold = remainder_mask >> 1;
   b4aa2:	9e03      	ldr	r6, [sp, #12]
    result = (int32_t)(mult.long_long >> 31);
   b4aa4:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
    int32_t remainder = remainder_mask & dividend;
   b4aa8:	4019      	ands	r1, r3
    q31_t threshold = remainder_mask >> 1;
   b4aaa:	4103      	asrs	r3, r0
   b4aac:	9808      	ldr	r0, [sp, #32]
        input_1 = (int16_t)(a_1 & 0x0FFFFL) << left_shift;
   b4aae:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
   b4ab2:	bf48      	it	mi
   b4ab4:	4606      	movmi	r6, r0
    if (remainder > threshold)
   b4ab6:	42b1      	cmp	r1, r6
        sum += out_offset;
   b4ab8:	9926      	ldr	r1, [sp, #152]	; 0x98
        result++;
   b4aba:	bfc8      	it	gt
   b4abc:	3301      	addgt	r3, #1
   b4abe:	440b      	add	r3, r1
        sum = MAX(sum, out_activation_min);
   b4ac0:	9929      	ldr	r1, [sp, #164]	; 0xa4
   b4ac2:	428b      	cmp	r3, r1
   b4ac4:	bfb8      	it	lt
   b4ac6:	460b      	movlt	r3, r1
        sum = MIN(sum, out_activation_max);
   b4ac8:	992a      	ldr	r1, [sp, #168]	; 0xa8
   b4aca:	428b      	cmp	r3, r1
   b4acc:	bfa8      	it	ge
   b4ace:	460b      	movge	r3, r1
        r3 = (q7_t)sum;
   b4ad0:	b259      	sxtb	r1, r3
        input_1 = (int16_t)(a_1 & 0x0FFFFL) << left_shift;
   b4ad2:	fa0c fc04 	lsl.w	ip, ip, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b4ad6:	4616      	mov	r6, r2
   b4ad8:	463b      	mov	r3, r7
   b4ada:	fbcc 6305 	smlal	r6, r3, ip, r5
    result = (int32_t)(mult.long_long >> 31);
   b4ade:	0ff6      	lsrs	r6, r6, #31
   b4ae0:	ea46 0643 	orr.w	r6, r6, r3, lsl #1
    int32_t remainder = remainder_mask & dividend;
   b4ae4:	9b06      	ldr	r3, [sp, #24]
    q31_t threshold = remainder_mask >> 1;
   b4ae6:	980a      	ldr	r0, [sp, #40]	; 0x28
        input_2 = (int16_t)(a_2 & 0x0FFFFL) << left_shift;
   b4ae8:	f9bd e044 	ldrsh.w	lr, [sp, #68]	; 0x44
   b4aec:	4684      	mov	ip, r0
   b4aee:	9807      	ldr	r0, [sp, #28]
    int32_t remainder = remainder_mask & dividend;
   b4af0:	4033      	ands	r3, r6
    q31_t threshold = remainder_mask >> 1;
   b4af2:	fa56 f60a 	asrs.w	r6, r6, sl
   b4af6:	bf58      	it	pl
   b4af8:	4684      	movpl	ip, r0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b4afa:	9822      	ldr	r0, [sp, #136]	; 0x88
    if (remainder > threshold)
   b4afc:	4563      	cmp	r3, ip
   b4afe:	fa0e fe04 	lsl.w	lr, lr, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b4b02:	4613      	mov	r3, r2
   b4b04:	46bc      	mov	ip, r7
   b4b06:	fbce 3c00 	smlal	r3, ip, lr, r0
    result = (int32_t)(mult.long_long >> 31);
   b4b0a:	ea4f 73d3 	mov.w	r3, r3, lsr #31
    int32_t remainder = remainder_mask & dividend;
   b4b0e:	9804      	ldr	r0, [sp, #16]
    result = (int32_t)(mult.long_long >> 31);
   b4b10:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
    int32_t remainder = remainder_mask & dividend;
   b4b14:	ea03 0c00 	and.w	ip, r3, r0
    q31_t threshold = remainder_mask >> 1;
   b4b18:	9809      	ldr	r0, [sp, #36]	; 0x24
   b4b1a:	4686      	mov	lr, r0
   b4b1c:	9805      	ldr	r0, [sp, #20]
        result++;
   b4b1e:	bfc8      	it	gt
   b4b20:	3601      	addgt	r6, #1
    q31_t threshold = remainder_mask >> 1;
   b4b22:	fa53 f309 	asrs.w	r3, r3, r9
   b4b26:	bf58      	it	pl
   b4b28:	4686      	movpl	lr, r0
    if (remainder > threshold)
   b4b2a:	45f4      	cmp	ip, lr
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b4b2c:	9827      	ldr	r0, [sp, #156]	; 0x9c
        result++;
   b4b2e:	bfc8      	it	gt
   b4b30:	3301      	addgt	r3, #1
        sum = input_1 + input_2;
   b4b32:	4433      	add	r3, r6
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b4b34:	4694      	mov	ip, r2
   b4b36:	46be      	mov	lr, r7
   b4b38:	fbc3 ce00 	smlal	ip, lr, r3, r0
    result = (int32_t)(mult.long_long >> 31);
   b4b3c:	ea4f 73dc 	mov.w	r3, ip, lsr #31
    int32_t remainder = remainder_mask & dividend;
   b4b40:	9802      	ldr	r0, [sp, #8]
    result = (int32_t)(mult.long_long >> 31);
   b4b42:	ea43 034e 	orr.w	r3, r3, lr, lsl #1
    int32_t remainder = remainder_mask & dividend;
   b4b46:	ea03 0600 	and.w	r6, r3, r0
    q31_t threshold = remainder_mask >> 1;
   b4b4a:	9801      	ldr	r0, [sp, #4]
   b4b4c:	4103      	asrs	r3, r0
   b4b4e:	9808      	ldr	r0, [sp, #32]
   b4b50:	4684      	mov	ip, r0
   b4b52:	9803      	ldr	r0, [sp, #12]
   b4b54:	bf58      	it	pl
   b4b56:	4684      	movpl	ip, r0
    if (remainder > threshold)
   b4b58:	4566      	cmp	r6, ip
        sum += out_offset;
   b4b5a:	9826      	ldr	r0, [sp, #152]	; 0x98
        result++;
   b4b5c:	bfc8      	it	gt
   b4b5e:	3301      	addgt	r3, #1
   b4b60:	4403      	add	r3, r0
        sum = MAX(sum, out_activation_min);
   b4b62:	9829      	ldr	r0, [sp, #164]	; 0xa4
   b4b64:	4283      	cmp	r3, r0
   b4b66:	bfb8      	it	lt
   b4b68:	4603      	movlt	r3, r0
        sum = MIN(sum, out_activation_max);
   b4b6a:	982a      	ldr	r0, [sp, #168]	; 0xa8
   b4b6c:	4283      	cmp	r3, r0
   b4b6e:	bfa8      	it	ge
   b4b70:	4603      	movge	r3, r0
        input_1 = (int16_t)((a_1 >> 16) & 0x0FFFFL) << left_shift;
   b4b72:	9812      	ldr	r0, [sp, #72]	; 0x48
   b4b74:	ea4f 4e20 	mov.w	lr, r0, asr #16
   b4b78:	fa0e fe04 	lsl.w	lr, lr, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b4b7c:	4694      	mov	ip, r2
   b4b7e:	463e      	mov	r6, r7
   b4b80:	fbce c605 	smlal	ip, r6, lr, r5
    int32_t remainder = remainder_mask & dividend;
   b4b84:	9806      	ldr	r0, [sp, #24]
    result = (int32_t)(mult.long_long >> 31);
   b4b86:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
   b4b8a:	ea4c 0c46 	orr.w	ip, ip, r6, lsl #1
    int32_t remainder = remainder_mask & dividend;
   b4b8e:	ea0c 0600 	and.w	r6, ip, r0
    q31_t threshold = remainder_mask >> 1;
   b4b92:	980a      	ldr	r0, [sp, #40]	; 0x28
   b4b94:	4686      	mov	lr, r0
   b4b96:	9807      	ldr	r0, [sp, #28]
   b4b98:	fa5c fc0a 	asrs.w	ip, ip, sl
   b4b9c:	bf58      	it	pl
   b4b9e:	4686      	movpl	lr, r0
        input_2 = (int16_t)((a_2 >> 16) & 0x0FFFFL) << left_shift;
   b4ba0:	9811      	ldr	r0, [sp, #68]	; 0x44
   b4ba2:	ea4f 4820 	mov.w	r8, r0, asr #16
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b4ba6:	9822      	ldr	r0, [sp, #136]	; 0x88
    if (remainder > threshold)
   b4ba8:	4576      	cmp	r6, lr
   b4baa:	fa08 f804 	lsl.w	r8, r8, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b4bae:	4616      	mov	r6, r2
   b4bb0:	46be      	mov	lr, r7
   b4bb2:	fbc8 6e00 	smlal	r6, lr, r8, r0
    result = (int32_t)(mult.long_long >> 31);
   b4bb6:	ea4f 76d6 	mov.w	r6, r6, lsr #31
    int32_t remainder = remainder_mask & dividend;
   b4bba:	9804      	ldr	r0, [sp, #16]
    result = (int32_t)(mult.long_long >> 31);
   b4bbc:	ea46 064e 	orr.w	r6, r6, lr, lsl #1
    int32_t remainder = remainder_mask & dividend;
   b4bc0:	ea06 0e00 	and.w	lr, r6, r0
    q31_t threshold = remainder_mask >> 1;
   b4bc4:	9809      	ldr	r0, [sp, #36]	; 0x24
   b4bc6:	4680      	mov	r8, r0
   b4bc8:	9805      	ldr	r0, [sp, #20]
        result++;
   b4bca:	bfc8      	it	gt
   b4bcc:	f10c 0c01 	addgt.w	ip, ip, #1
    q31_t threshold = remainder_mask >> 1;
   b4bd0:	fa56 f609 	asrs.w	r6, r6, r9
   b4bd4:	bf58      	it	pl
   b4bd6:	4680      	movpl	r8, r0
    if (remainder > threshold)
   b4bd8:	45f0      	cmp	r8, lr
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b4bda:	9827      	ldr	r0, [sp, #156]	; 0x9c
        result++;
   b4bdc:	bfb8      	it	lt
   b4bde:	3601      	addlt	r6, #1
        sum = input_1 + input_2;
   b4be0:	4466      	add	r6, ip
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b4be2:	4696      	mov	lr, r2
   b4be4:	46b8      	mov	r8, r7
   b4be6:	fbc6 e800 	smlal	lr, r8, r6, r0
    result = (int32_t)(mult.long_long >> 31);
   b4bea:	ea4f 76de 	mov.w	r6, lr, lsr #31
    int32_t remainder = remainder_mask & dividend;
   b4bee:	9802      	ldr	r0, [sp, #8]
    result = (int32_t)(mult.long_long >> 31);
   b4bf0:	ea46 0648 	orr.w	r6, r6, r8, lsl #1
    int32_t remainder = remainder_mask & dividend;
   b4bf4:	ea06 0c00 	and.w	ip, r6, r0
    q31_t threshold = remainder_mask >> 1;
   b4bf8:	9801      	ldr	r0, [sp, #4]
   b4bfa:	4106      	asrs	r6, r0
   b4bfc:	9808      	ldr	r0, [sp, #32]
   b4bfe:	4686      	mov	lr, r0
   b4c00:	9803      	ldr	r0, [sp, #12]
   b4c02:	bf58      	it	pl
   b4c04:	4686      	movpl	lr, r0
    if (remainder > threshold)
   b4c06:	45e6      	cmp	lr, ip
        sum += out_offset;
   b4c08:	9826      	ldr	r0, [sp, #152]	; 0x98
        result++;
   b4c0a:	bfb8      	it	lt
   b4c0c:	3601      	addlt	r6, #1
   b4c0e:	4406      	add	r6, r0
        r2 = (q7_t)sum;
   b4c10:	b25b      	sxtb	r3, r3
        sum = MAX(sum, out_activation_min);
   b4c12:	9829      	ldr	r0, [sp, #164]	; 0xa4
        write_q7x4_ia(&output, __PACKq7(r1, r2, r3, r4));
   b4c14:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
   b4c18:	0409      	lsls	r1, r1, #16
   b4c1a:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   b4c1e:	021b      	lsls	r3, r3, #8
   b4c20:	b29b      	uxth	r3, r3
   b4c22:	ea41 010c 	orr.w	r1, r1, ip
        sum = MAX(sum, out_activation_min);
   b4c26:	4286      	cmp	r6, r0
        write_q7x4_ia(&output, __PACKq7(r1, r2, r3, r4));
   b4c28:	ea41 0103 	orr.w	r1, r1, r3
        sum = MIN(sum, out_activation_max);
   b4c2c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
        sum = MAX(sum, out_activation_min);
   b4c2e:	bfb8      	it	lt
   b4c30:	4606      	movlt	r6, r0
        sum = MIN(sum, out_activation_max);
   b4c32:	429e      	cmp	r6, r3
   b4c34:	bfa8      	it	ge
   b4c36:	461e      	movge	r6, r3
  q7_t ** pQ7,
  q31_t   value)
{
  q31_t val = value;
#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (*pQ7, &val, 4);
   b4c38:	9b25      	ldr	r3, [sp, #148]	; 0x94
        write_q7x4_ia(&output, __PACKq7(r1, r2, r3, r4));
   b4c3a:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
   b4c3e:	f843 1b04 	str.w	r1, [r3], #4
   b4c42:	9325      	str	r3, [sp, #148]	; 0x94
        loop_count--;
   b4c44:	e65a      	b.n	b48fc <arm_elementwise_add_s8+0x80>
        input_1 = (*input_1_vect++ + input_1_offset) << left_shift;
   b4c46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4c48:	f917 2b01 	ldrsb.w	r2, [r7], #1
        input_2 = (*input_2_vect++ + input_2_offset) << left_shift;
   b4c4c:	f91c bb01 	ldrsb.w	fp, [ip], #1
        mult = 1 - mult;
   b4c50:	990e      	ldr	r1, [sp, #56]	; 0x38
        input_1 = (*input_1_vect++ + input_1_offset) << left_shift;
   b4c52:	441a      	add	r2, r3
        input_2 = (*input_2_vect++ + input_2_offset) << left_shift;
   b4c54:	9b21      	ldr	r3, [sp, #132]	; 0x84
        input_1 = (*input_1_vect++ + input_1_offset) << left_shift;
   b4c56:	40a2      	lsls	r2, r4
        input_2 = (*input_2_vect++ + input_2_offset) << left_shift;
   b4c58:	449b      	add	fp, r3
    if ((m1 < 0) ^ (m2 < 0))
   b4c5a:	0fd3      	lsrs	r3, r2, #31
        mult = 1 - mult;
   b4c5c:	428b      	cmp	r3, r1
   b4c5e:	bf0b      	itete	eq
   b4c60:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
   b4c64:	4673      	movne	r3, lr
   b4c66:	2100      	moveq	r1, #0
   b4c68:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
   b4c6c:	fbc2 3105 	smlal	r3, r1, r2, r5
   b4c70:	2900      	cmp	r1, #0
   b4c72:	fa0b fb04 	lsl.w	fp, fp, r4
   b4c76:	da02      	bge.n	b4c7e <arm_elementwise_add_s8+0x402>
   b4c78:	199b      	adds	r3, r3, r6
   b4c7a:	f141 0100 	adc.w	r1, r1, #0
   b4c7e:	0fdb      	lsrs	r3, r3, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
   b4c80:	42aa      	cmp	r2, r5
    result = (int32_t)(mult / (1ll << 31));
   b4c82:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
   b4c86:	d104      	bne.n	b4c92 <arm_elementwise_add_s8+0x416>
        result = Q31_MAX;
   b4c88:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
   b4c8c:	bf08      	it	eq
   b4c8e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
    int32_t remainder = remainder_mask & dividend;
   b4c92:	9b06      	ldr	r3, [sp, #24]
    q31_t threshold = remainder_mask >> 1;
   b4c94:	9807      	ldr	r0, [sp, #28]
   b4c96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    int32_t remainder = remainder_mask & dividend;
   b4c98:	400b      	ands	r3, r1
    q31_t threshold = remainder_mask >> 1;
   b4c9a:	fa51 f10a 	asrs.w	r1, r1, sl
   b4c9e:	bf58      	it	pl
   b4ca0:	4602      	movpl	r2, r0
    if (remainder > threshold)
   b4ca2:	4293      	cmp	r3, r2
        mult = 1 - mult;
   b4ca4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    result = (int32_t)(mult / (1ll << 31));
   b4ca6:	9822      	ldr	r0, [sp, #136]	; 0x88
    if ((m1 < 0) ^ (m2 < 0))
   b4ca8:	ea4f 73db 	mov.w	r3, fp, lsr #31
        result++;
   b4cac:	bfc8      	it	gt
   b4cae:	3101      	addgt	r1, #1
        mult = 1 - mult;
   b4cb0:	4293      	cmp	r3, r2
   b4cb2:	bf0b      	itete	eq
   b4cb4:	f04f 4280 	moveq.w	r2, #1073741824	; 0x40000000
   b4cb8:	4672      	movne	r2, lr
   b4cba:	2300      	moveq	r3, #0
   b4cbc:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
   b4cc0:	fbcb 2300 	smlal	r2, r3, fp, r0
   b4cc4:	2b00      	cmp	r3, #0
   b4cc6:	da02      	bge.n	b4cce <arm_elementwise_add_s8+0x452>
   b4cc8:	1992      	adds	r2, r2, r6
   b4cca:	f143 0300 	adc.w	r3, r3, #0
   b4cce:	0fd2      	lsrs	r2, r2, #31
   b4cd0:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
   b4cd4:	9a22      	ldr	r2, [sp, #136]	; 0x88
   b4cd6:	4593      	cmp	fp, r2
   b4cd8:	d104      	bne.n	b4ce4 <arm_elementwise_add_s8+0x468>
        result = Q31_MAX;
   b4cda:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b4cde:	bf08      	it	eq
   b4ce0:	f06f 4300 	mvneq.w	r3, #2147483648	; 0x80000000
    q31_t threshold = remainder_mask >> 1;
   b4ce4:	9809      	ldr	r0, [sp, #36]	; 0x24
    int32_t remainder = remainder_mask & dividend;
   b4ce6:	9a04      	ldr	r2, [sp, #16]
    q31_t threshold = remainder_mask >> 1;
   b4ce8:	4683      	mov	fp, r0
   b4cea:	9805      	ldr	r0, [sp, #20]
    int32_t remainder = remainder_mask & dividend;
   b4cec:	401a      	ands	r2, r3
    q31_t threshold = remainder_mask >> 1;
   b4cee:	fa53 f309 	asrs.w	r3, r3, r9
   b4cf2:	bf58      	it	pl
   b4cf4:	4683      	movpl	fp, r0
    if (remainder > threshold)
   b4cf6:	455a      	cmp	r2, fp
        result++;
   b4cf8:	bfc8      	it	gt
   b4cfa:	3301      	addgt	r3, #1
        sum = input_1 + input_2;
   b4cfc:	440b      	add	r3, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b4cfe:	9927      	ldr	r1, [sp, #156]	; 0x9c
    q31_t threshold = remainder_mask >> 1;
   b4d00:	9803      	ldr	r0, [sp, #12]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b4d02:	4642      	mov	r2, r8
   b4d04:	f04f 0b00 	mov.w	fp, #0
   b4d08:	fbc3 2b01 	smlal	r2, fp, r3, r1
    result = (int32_t)(mult.long_long >> 31);
   b4d0c:	0fd3      	lsrs	r3, r2, #31
    q31_t threshold = remainder_mask >> 1;
   b4d0e:	9901      	ldr	r1, [sp, #4]
    int32_t remainder = remainder_mask & dividend;
   b4d10:	9a02      	ldr	r2, [sp, #8]
    result = (int32_t)(mult.long_long >> 31);
   b4d12:	ea43 034b 	orr.w	r3, r3, fp, lsl #1
    int32_t remainder = remainder_mask & dividend;
   b4d16:	401a      	ands	r2, r3
    q31_t threshold = remainder_mask >> 1;
   b4d18:	410b      	asrs	r3, r1
   b4d1a:	9908      	ldr	r1, [sp, #32]
   b4d1c:	bf58      	it	pl
   b4d1e:	4601      	movpl	r1, r0
    if (remainder > threshold)
   b4d20:	428a      	cmp	r2, r1
        sum += out_offset;
   b4d22:	9a26      	ldr	r2, [sp, #152]	; 0x98
        result++;
   b4d24:	bfc8      	it	gt
   b4d26:	3301      	addgt	r3, #1
   b4d28:	4413      	add	r3, r2
        sum = MAX(sum, out_activation_min);
   b4d2a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   b4d2c:	4293      	cmp	r3, r2
   b4d2e:	bfb8      	it	lt
   b4d30:	4613      	movlt	r3, r2
        sum = MIN(sum, out_activation_max);
   b4d32:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   b4d34:	4293      	cmp	r3, r2
   b4d36:	bfa8      	it	ge
   b4d38:	4613      	movge	r3, r2
        *output++ = (q7_t)sum;
   b4d3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b4d3c:	f802 3b01 	strb.w	r3, [r2], #1
   b4d40:	920b      	str	r2, [sp, #44]	; 0x2c
        loop_count--;
   b4d42:	e5f5      	b.n	b4930 <arm_elementwise_add_s8+0xb4>
   b4d44:	c0000001 	.word	0xc0000001

000b4d48 <arm_softmax_s8>:
                    const int32_t row_size,
                    const int32_t mult,
                    const int32_t shift,
                    const int32_t diff_min,
                    int8_t *output)
{
   b4d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4d4c:	b08f      	sub	sp, #60	; 0x3c
   b4d4e:	469b      	mov	fp, r3
    const int32_t mask = (1 << shift);

    int32_t col = 0;
    int32_t row_idx;

    for (row_idx = 0; row_idx < num_rows; ++row_idx)
   b4d50:	2300      	movs	r3, #0
{
   b4d52:	9008      	str	r0, [sp, #32]
   b4d54:	910b      	str	r1, [sp, #44]	; 0x2c
   b4d56:	9202      	str	r2, [sp, #8]
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
   b4d58:	9300      	str	r3, [sp, #0]
   b4d5a:	9303      	str	r3, [sp, #12]
   b4d5c:	9a00      	ldr	r2, [sp, #0]
   b4d5e:	9b08      	ldr	r3, [sp, #32]
   b4d60:	4413      	add	r3, r2
   b4d62:	9304      	str	r3, [sp, #16]
   b4d64:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   b4d66:	4413      	add	r3, r2
   b4d68:	9307      	str	r3, [sp, #28]
   b4d6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b4d6c:	9b03      	ldr	r3, [sp, #12]
   b4d6e:	4293      	cmp	r3, r2
   b4d70:	db02      	blt.n	b4d78 <arm_softmax_s8+0x30>
        input += row_size;
        output += row_size;
    }

#endif
}
   b4d72:	b00f      	add	sp, #60	; 0x3c
   b4d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        int8_t max = *input;
   b4d78:	9b08      	ldr	r3, [sp, #32]
   b4d7a:	9a00      	ldr	r2, [sp, #0]
   b4d7c:	569b      	ldrsb	r3, [r3, r2]
   b4d7e:	9301      	str	r3, [sp, #4]
        for (col = 1; col < row_size; ++col)
   b4d80:	2301      	movs	r3, #1
   b4d82:	9a02      	ldr	r2, [sp, #8]
   b4d84:	4293      	cmp	r3, r2
   b4d86:	f2c0 8136 	blt.w	b4ff6 <arm_softmax_s8+0x2ae>
        int32_t sum = 0;
   b4d8a:	2300      	movs	r3, #0
        mult = 1 - mult;
   b4d8c:	f8df 827c 	ldr.w	r8, [pc, #636]	; b500c <arm_softmax_s8+0x2c4>
        for (col = 0; col < row_size; ++col)
   b4d90:	469e      	mov	lr, r3
   b4d92:	9a02      	ldr	r2, [sp, #8]
   b4d94:	4596      	cmp	lr, r2
   b4d96:	f2c0 813b 	blt.w	b5010 <arm_softmax_s8+0x2c8>
  return __builtin_clz(value);
   b4d9a:	fab3 f283 	clz	r2, r3
        const int32_t shifted_scale = ONE_OVER1((sum << headroom) - (1 << 31));
   b4d9e:	4093      	lsls	r3, r2
   b4da0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    const int64_t sum = (int64_t)val + (int64_t)Q31_MAX;
   b4da4:	17d9      	asrs	r1, r3, #31
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
   b4da6:	f113 4300 	adds.w	r3, r3, #2147483648	; 0x80000000
   b4daa:	f141 0100 	adc.w	r1, r1, #0
   b4dae:	085b      	lsrs	r3, r3, #1
   b4db0:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
        const int32_t bits_over_unit = ACCUM_BITS - headroom + 23;
   b4db4:	f1c2 0a23 	rsb	sl, r2, #35	; 0x23
    mult = mult + (q63_t)m1 * m2;
   b4db8:	4a93      	ldr	r2, [pc, #588]	; (b5008 <arm_softmax_s8+0x2c0>)
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
   b4dba:	1049      	asrs	r1, r1, #1
    mult = mult + (q63_t)m1 * m2;
   b4dbc:	425c      	negs	r4, r3
   b4dbe:	fb02 4401 	mla	r4, r2, r1, r4
   b4dc2:	fba3 2002 	umull	r2, r0, r3, r2
   b4dc6:	4404      	add	r4, r0
   b4dc8:	4890      	ldr	r0, [pc, #576]	; (b500c <arm_softmax_s8+0x2c4>)
   b4dca:	1812      	adds	r2, r2, r0
    result = (int32_t)(mult / (1ll << 31));
   b4dcc:	f164 0400 	sbc.w	r4, r4, #0
   b4dd0:	2c00      	cmp	r4, #0
   b4dd2:	da04      	bge.n	b4dde <arm_softmax_s8+0x96>
   b4dd4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   b4dd8:	1812      	adds	r2, r2, r0
   b4dda:	f144 0400 	adc.w	r4, r4, #0
   b4dde:	0fd2      	lsrs	r2, r2, #31
   b4de0:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    int32_t x = 1515870810 + MUL_SAT(half_denominator, -1010580540);
   b4de4:	f102 305a 	add.w	r0, r2, #1515870810	; 0x5a5a5a5a
    mult = mult + (q63_t)m1 * m2;
   b4de8:	17c2      	asrs	r2, r0, #31
   b4dea:	fb00 f501 	mul.w	r5, r0, r1
   b4dee:	fb03 5502 	mla	r5, r3, r2, r5
   b4df2:	fba0 4203 	umull	r4, r2, r0, r3
   b4df6:	f114 4480 	adds.w	r4, r4, #1073741824	; 0x40000000
   b4dfa:	eb45 0202 	adc.w	r2, r5, r2
    result = (int32_t)(mult / (1ll << 31));
   b4dfe:	0fe4      	lsrs	r4, r4, #31
   b4e00:	ea44 0442 	orr.w	r4, r4, r2, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   b4e04:	f1c4 5400 	rsb	r4, r4, #536870912	; 0x20000000
        mult = 1 - mult;
   b4e08:	2c00      	cmp	r4, #0
   b4e0a:	4a80      	ldr	r2, [pc, #512]	; (b500c <arm_softmax_s8+0x2c4>)
   b4e0c:	bfa6      	itte	ge
   b4e0e:	2500      	movge	r5, #0
   b4e10:	f04f 4280 	movge.w	r2, #1073741824	; 0x40000000
   b4e14:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
   b4e18:	fbc0 2504 	smlal	r2, r5, r0, r4
   b4e1c:	2d00      	cmp	r5, #0
   b4e1e:	da04      	bge.n	b4e2a <arm_softmax_s8+0xe2>
   b4e20:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   b4e24:	1912      	adds	r2, r2, r4
   b4e26:	f145 0500 	adc.w	r5, r5, #0
   b4e2a:	0fd2      	lsrs	r2, r2, #31
   b4e2c:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   b4e30:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        mult = 1 - mult;
   b4e34:	2a00      	cmp	r2, #0
   b4e36:	4d75      	ldr	r5, [pc, #468]	; (b500c <arm_softmax_s8+0x2c4>)
    mult = mult + (q63_t)m1 * m2;
   b4e38:	ea4f 70e2 	mov.w	r0, r2, asr #31
   b4e3c:	fb02 f401 	mul.w	r4, r2, r1
   b4e40:	fb03 4400 	mla	r4, r3, r0, r4
        mult = 1 - mult;
   b4e44:	bfa8      	it	ge
   b4e46:	f04f 4580 	movge.w	r5, #1073741824	; 0x40000000
    mult = mult + (q63_t)m1 * m2;
   b4e4a:	fba2 0e03 	umull	r0, lr, r2, r3
        mult = 1 - mult;
   b4e4e:	bfac      	ite	ge
   b4e50:	f04f 0c00 	movge.w	ip, #0
   b4e54:	f04f 3cff 	movlt.w	ip, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
   b4e58:	4474      	add	r4, lr
   b4e5a:	1940      	adds	r0, r0, r5
    result = (int32_t)(mult / (1ll << 31));
   b4e5c:	eb44 040c 	adc.w	r4, r4, ip
   b4e60:	2c00      	cmp	r4, #0
    if ((m1 < 0) ^ (m2 < 0))
   b4e62:	ea4f 76d2 	mov.w	r6, r2, lsr #31
    result = (int32_t)(mult / (1ll << 31));
   b4e66:	da04      	bge.n	b4e72 <arm_softmax_s8+0x12a>
   b4e68:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   b4e6c:	1940      	adds	r0, r0, r5
   b4e6e:	f144 0400 	adc.w	r4, r4, #0
   b4e72:	0fc0      	lsrs	r0, r0, #31
   b4e74:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   b4e78:	f1c0 5000 	rsb	r0, r0, #536870912	; 0x20000000
        mult = 1 - mult;
   b4e7c:	ebb6 7fd0 	cmp.w	r6, r0, lsr #31
   b4e80:	4e62      	ldr	r6, [pc, #392]	; (b500c <arm_softmax_s8+0x2c4>)
   b4e82:	bf06      	itte	eq
   b4e84:	2400      	moveq	r4, #0
   b4e86:	f04f 4680 	moveq.w	r6, #1073741824	; 0x40000000
   b4e8a:	f04f 34ff 	movne.w	r4, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
   b4e8e:	fbc2 6400 	smlal	r6, r4, r2, r0
   b4e92:	4625      	mov	r5, r4
   b4e94:	2d00      	cmp	r5, #0
   b4e96:	4634      	mov	r4, r6
   b4e98:	da04      	bge.n	b4ea4 <arm_softmax_s8+0x15c>
   b4e9a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   b4e9e:	1834      	adds	r4, r6, r0
   b4ea0:	f145 0500 	adc.w	r5, r5, #0
   b4ea4:	0fe4      	lsrs	r4, r4, #31
   b4ea6:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
   b4eaa:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
   b4eae:	bfab      	itete	ge
   b4eb0:	2000      	movge	r0, #0
   b4eb2:	f04f 30ff 	movlt.w	r0, #4294967295	; 0xffffffff
   b4eb6:	f06f 4500 	mvnge.w	r5, #2147483648	; 0x80000000
   b4eba:	2500      	movlt	r5, #0
   b4ebc:	ea00 0084 	and.w	r0, r0, r4, lsl #2
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
   b4ec0:	f1b4 4f60 	cmp.w	r4, #3758096384	; 0xe0000000
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
   b4ec4:	ea80 0005 	eor.w	r0, r0, r5
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
   b4ec8:	bfcb      	itete	gt
   b4eca:	f04f 35ff 	movgt.w	r5, #4294967295	; 0xffffffff
   b4ece:	2500      	movle	r5, #0
   b4ed0:	2400      	movgt	r4, #0
   b4ed2:	f04f 4400 	movle.w	r4, #2147483648	; 0x80000000
   b4ed6:	4028      	ands	r0, r5
   b4ed8:	4060      	eors	r0, r4
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   b4eda:	4402      	add	r2, r0
        mult = 1 - mult;
   b4edc:	2a00      	cmp	r2, #0
   b4ede:	484b      	ldr	r0, [pc, #300]	; (b500c <arm_softmax_s8+0x2c4>)
    mult = mult + (q63_t)m1 * m2;
   b4ee0:	ea4f 76e2 	mov.w	r6, r2, asr #31
   b4ee4:	fb02 f101 	mul.w	r1, r2, r1
   b4ee8:	fb03 1106 	mla	r1, r3, r6, r1
        mult = 1 - mult;
   b4eec:	bfa8      	it	ge
   b4eee:	f04f 4080 	movge.w	r0, #1073741824	; 0x40000000
    mult = mult + (q63_t)m1 * m2;
   b4ef2:	fba2 3603 	umull	r3, r6, r2, r3
        mult = 1 - mult;
   b4ef6:	bfac      	ite	ge
   b4ef8:	2500      	movge	r5, #0
   b4efa:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
   b4efe:	4431      	add	r1, r6
   b4f00:	181b      	adds	r3, r3, r0
    result = (int32_t)(mult / (1ll << 31));
   b4f02:	eb41 0105 	adc.w	r1, r1, r5
   b4f06:	2900      	cmp	r1, #0
    if ((m1 < 0) ^ (m2 < 0))
   b4f08:	ea4f 74d2 	mov.w	r4, r2, lsr #31
    result = (int32_t)(mult / (1ll << 31));
   b4f0c:	da04      	bge.n	b4f18 <arm_softmax_s8+0x1d0>
   b4f0e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   b4f12:	181b      	adds	r3, r3, r0
   b4f14:	f141 0100 	adc.w	r1, r1, #0
   b4f18:	0fdb      	lsrs	r3, r3, #31
   b4f1a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   b4f1e:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
        mult = 1 - mult;
   b4f22:	ebb4 7fd3 	cmp.w	r4, r3, lsr #31
   b4f26:	4939      	ldr	r1, [pc, #228]	; (b500c <arm_softmax_s8+0x2c4>)
   b4f28:	bf06      	itte	eq
   b4f2a:	2000      	moveq	r0, #0
   b4f2c:	f04f 4180 	moveq.w	r1, #1073741824	; 0x40000000
   b4f30:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
   b4f34:	fbc2 1003 	smlal	r1, r0, r2, r3
   b4f38:	2800      	cmp	r0, #0
   b4f3a:	da04      	bge.n	b4f46 <arm_softmax_s8+0x1fe>
   b4f3c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b4f40:	18c9      	adds	r1, r1, r3
   b4f42:	f140 0000 	adc.w	r0, r0, #0
   b4f46:	0fc9      	lsrs	r1, r1, #31
   b4f48:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
   b4f4c:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   b4f50:	bfab      	itete	ge
   b4f52:	2300      	movge	r3, #0
   b4f54:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   b4f58:	f06f 4100 	mvnge.w	r1, #2147483648	; 0x80000000
   b4f5c:	2100      	movlt	r1, #0
   b4f5e:	ea03 0380 	and.w	r3, r3, r0, lsl #2
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
   b4f62:	f1b0 4f60 	cmp.w	r0, #3758096384	; 0xe0000000
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
   b4f66:	ea83 0301 	eor.w	r3, r3, r1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
   b4f6a:	bfd5      	itete	le
   b4f6c:	2000      	movle	r0, #0
   b4f6e:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
   b4f72:	f04f 4100 	movle.w	r1, #2147483648	; 0x80000000
   b4f76:	2100      	movgt	r1, #0
   b4f78:	4018      	ands	r0, r3
   b4f7a:	4048      	eors	r0, r1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   b4f7c:	4402      	add	r2, r0
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
   b4f7e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
   b4f82:	bfab      	itete	ge
   b4f84:	2300      	movge	r3, #0
   b4f86:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   b4f8a:	f06f 4100 	mvnge.w	r1, #2147483648	; 0x80000000
   b4f8e:	2100      	movlt	r1, #0
   b4f90:	ea03 0342 	and.w	r3, r3, r2, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
   b4f94:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
   b4f98:	ea83 0301 	eor.w	r3, r3, r1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
   b4f9c:	bfcb      	itete	gt
   b4f9e:	f04f 31ff 	movgt.w	r1, #4294967295	; 0xffffffff
   b4fa2:	2100      	movle	r1, #0
   b4fa4:	2200      	movgt	r2, #0
   b4fa6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
   b4faa:	400b      	ands	r3, r1
        for (col = 0; col < row_size; ++col)
   b4fac:	4053      	eors	r3, r2
   b4fae:	bf48      	it	mi
   b4fb0:	4a16      	ldrmi	r2, [pc, #88]	; (b500c <arm_softmax_s8+0x2c4>)
   b4fb2:	9309      	str	r3, [sp, #36]	; 0x24
   b4fb4:	bf56      	itet	pl
   b4fb6:	f04f 4280 	movpl.w	r2, #1073741824	; 0x40000000
   b4fba:	f04f 33ff 	movmi.w	r3, #4294967295	; 0xffffffff
   b4fbe:	2300      	movpl	r3, #0
   b4fc0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    const q31_t remainder_mask = (1 << exponent) - 1;
   b4fc4:	2301      	movs	r3, #1
   b4fc6:	fa03 f30a 	lsl.w	r3, r3, sl
   b4fca:	3b01      	subs	r3, #1
   b4fcc:	9305      	str	r3, [sp, #20]
    q31_t threshold = remainder_mask >> 1;
   b4fce:	105b      	asrs	r3, r3, #1
   b4fd0:	9306      	str	r3, [sp, #24]
        mult = 1 - mult;
   b4fd2:	f8df e038 	ldr.w	lr, [pc, #56]	; b500c <arm_softmax_s8+0x2c4>
        threshold++;
   b4fd6:	3301      	adds	r3, #1
   b4fd8:	930a      	str	r3, [sp, #40]	; 0x28
   b4fda:	f04f 0c00 	mov.w	ip, #0
   b4fde:	9b02      	ldr	r3, [sp, #8]
   b4fe0:	459c      	cmp	ip, r3
   b4fe2:	f2c0 8183 	blt.w	b52ec <arm_softmax_s8+0x5a4>
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
   b4fe6:	9b03      	ldr	r3, [sp, #12]
   b4fe8:	9a00      	ldr	r2, [sp, #0]
   b4fea:	3301      	adds	r3, #1
   b4fec:	9303      	str	r3, [sp, #12]
   b4fee:	9b02      	ldr	r3, [sp, #8]
   b4ff0:	441a      	add	r2, r3
   b4ff2:	9200      	str	r2, [sp, #0]
   b4ff4:	e6b2      	b.n	b4d5c <arm_softmax_s8+0x14>
            max = MAX(max, input[col]);
   b4ff6:	9a04      	ldr	r2, [sp, #16]
   b4ff8:	9901      	ldr	r1, [sp, #4]
   b4ffa:	56d2      	ldrsb	r2, [r2, r3]
   b4ffc:	4291      	cmp	r1, r2
   b4ffe:	bfb8      	it	lt
   b5000:	4611      	movlt	r1, r2
   b5002:	9101      	str	r1, [sp, #4]
        for (col = 1; col < row_size; ++col)
   b5004:	3301      	adds	r3, #1
   b5006:	e6bc      	b.n	b4d82 <arm_softmax_s8+0x3a>
   b5008:	c3c3c3c4 	.word	0xc3c3c3c4
   b500c:	c0000001 	.word	0xc0000001
            diff = input[col] - max;
   b5010:	9a04      	ldr	r2, [sp, #16]
   b5012:	f912 000e 	ldrsb.w	r0, [r2, lr]
   b5016:	9a01      	ldr	r2, [sp, #4]
   b5018:	1a80      	subs	r0, r0, r2
            if (diff >= diff_min)
   b501a:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b501c:	4282      	cmp	r2, r0
   b501e:	f300 8152 	bgt.w	b52c6 <arm_softmax_s8+0x57e>
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
   b5022:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b5024:	4090      	lsls	r0, r2
    if ((m1 < 0) ^ (m2 < 0))
   b5026:	0fc2      	lsrs	r2, r0, #31
        mult = 1 - mult;
   b5028:	ebb2 7fdb 	cmp.w	r2, fp, lsr #31
   b502c:	bf0b      	itete	eq
   b502e:	f04f 4180 	moveq.w	r1, #1073741824	; 0x40000000
   b5032:	4641      	movne	r1, r8
   b5034:	2200      	moveq	r2, #0
   b5036:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
   b503a:	fbc0 120b 	smlal	r1, r2, r0, fp
   b503e:	2a00      	cmp	r2, #0
   b5040:	4614      	mov	r4, r2
   b5042:	da04      	bge.n	b504e <arm_softmax_s8+0x306>
   b5044:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   b5048:	1889      	adds	r1, r1, r2
   b504a:	f144 0400 	adc.w	r4, r4, #0
   b504e:	0fca      	lsrs	r2, r1, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
   b5050:	4558      	cmp	r0, fp
    result = (int32_t)(mult / (1ll << 31));
   b5052:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
   b5056:	d104      	bne.n	b5062 <arm_softmax_s8+0x31a>
        result = Q31_MAX;
   b5058:	f1bb 4f00 	cmp.w	fp, #2147483648	; 0x80000000
   b505c:	bf08      	it	eq
   b505e:	f06f 4200 	mvneq.w	r2, #2147483648	; 0x80000000
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
   b5062:	f042 4c7f 	orr.w	ip, r2, #4278190080	; 0xff000000
    const int32_t remainder = val_mod_minus_quarter - val;
   b5066:	ebac 0502 	sub.w	r5, ip, r2
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
   b506a:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
   b506e:	f10c 5c80 	add.w	ip, ip, #268435456	; 0x10000000
    mult = mult + (q63_t)m1 * m2;
   b5072:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    result = (int32_t)(mult / (1ll << 31));
   b5076:	2400      	movs	r4, #0
   b5078:	fbcc 140c 	smlal	r1, r4, ip, ip
   b507c:	2c00      	cmp	r4, #0
    mult = mult + (q63_t)m1 * m2;
   b507e:	ea4f 76ec 	mov.w	r6, ip, asr #31
    result = (int32_t)(mult / (1ll << 31));
   b5082:	da04      	bge.n	b508e <arm_softmax_s8+0x346>
   b5084:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   b5088:	1809      	adds	r1, r1, r0
   b508a:	f144 0400 	adc.w	r4, r4, #0
   b508e:	0fc9      	lsrs	r1, r1, #31
   b5090:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
    mult = mult + (q63_t)m1 * m2;
   b5094:	fba1 0901 	umull	r0, r9, r1, r1
    result = (int32_t)(mult / (1ll << 31));
   b5098:	17e4      	asrs	r4, r4, #31
    mult = mult + (q63_t)m1 * m2;
   b509a:	f110 4080 	adds.w	r0, r0, #1073741824	; 0x40000000
   b509e:	fb01 fa04 	mul.w	sl, r1, r4
    result = (int32_t)(mult / (1ll << 31));
   b50a2:	eb49 094a 	adc.w	r9, r9, sl, lsl #1
   b50a6:	f1b9 0f00 	cmp.w	r9, #0
   b50aa:	da05      	bge.n	b50b8 <arm_softmax_s8+0x370>
   b50ac:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
   b50b0:	eb10 000a 	adds.w	r0, r0, sl
   b50b4:	f149 0900 	adc.w	r9, r9, #0
   b50b8:	0fc0      	lsrs	r0, r0, #31
   b50ba:	ea40 0049 	orr.w	r0, r0, r9, lsl #1
    int32_t remainder = remainder_mask & dividend;
   b50be:	f000 0903 	and.w	r9, r0, #3
        threshold++;
   b50c2:	1080      	asrs	r0, r0, #2
   b50c4:	bf54      	ite	pl
   b50c6:	f04f 0a01 	movpl.w	sl, #1
   b50ca:	f04f 0a02 	movmi.w	sl, #2
    if (remainder > threshold)
   b50ce:	45d1      	cmp	r9, sl
    if ((m1 < 0) ^ (m2 < 0))
   b50d0:	ea4f 79d1 	mov.w	r9, r1, lsr #31
        result++;
   b50d4:	bfc8      	it	gt
   b50d6:	3001      	addgt	r0, #1
    mult = mult + (q63_t)m1 * m2;
   b50d8:	fb0c f404 	mul.w	r4, ip, r4
        mult = 1 - mult;
   b50dc:	ebb9 7fdc 	cmp.w	r9, ip, lsr #31
    mult = mult + (q63_t)m1 * m2;
   b50e0:	fb01 4406 	mla	r4, r1, r6, r4
        mult = 1 - mult;
   b50e4:	bf08      	it	eq
   b50e6:	f04f 4980 	moveq.w	r9, #1073741824	; 0x40000000
    mult = mult + (q63_t)m1 * m2;
   b50ea:	fbac 6701 	umull	r6, r7, ip, r1
        mult = 1 - mult;
   b50ee:	bf16      	itet	ne
   b50f0:	46c1      	movne	r9, r8
   b50f2:	f04f 0a00 	moveq.w	sl, #0
   b50f6:	f04f 3aff 	movne.w	sl, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
   b50fa:	443c      	add	r4, r7
   b50fc:	eb16 0609 	adds.w	r6, r6, r9
    result = (int32_t)(mult / (1ll << 31));
   b5100:	eb44 040a 	adc.w	r4, r4, sl
   b5104:	2c00      	cmp	r4, #0
   b5106:	da05      	bge.n	b5114 <arm_softmax_s8+0x3cc>
   b5108:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   b510c:	eb16 0609 	adds.w	r6, r6, r9
   b5110:	f144 0400 	adc.w	r4, r4, #0
   b5114:	0ff6      	lsrs	r6, r6, #31
   b5116:	ea46 0644 	orr.w	r6, r6, r4, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
   b511a:	4430      	add	r0, r6
        mult = 1 - mult;
   b511c:	2800      	cmp	r0, #0
    result = (int32_t)(mult / (1ll << 31));
   b511e:	4f6b      	ldr	r7, [pc, #428]	; (b52cc <arm_softmax_s8+0x584>)
        mult = 1 - mult;
   b5120:	bfab      	itete	ge
   b5122:	f04f 4480 	movge.w	r4, #1073741824	; 0x40000000
   b5126:	4644      	movlt	r4, r8
   b5128:	2600      	movge	r6, #0
   b512a:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
   b512e:	fbc0 4607 	smlal	r4, r6, r0, r7
   b5132:	2e00      	cmp	r6, #0
   b5134:	da04      	bge.n	b5140 <arm_softmax_s8+0x3f8>
   b5136:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   b513a:	1824      	adds	r4, r4, r0
   b513c:	f146 0600 	adc.w	r6, r6, #0
   b5140:	0fe4      	lsrs	r4, r4, #31
   b5142:	ea44 0446 	orr.w	r4, r4, r6, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
   b5146:	440c      	add	r4, r1
    if (result < 0)
   b5148:	1061      	asrs	r1, r4, #1
   b514a:	d402      	bmi.n	b5152 <arm_softmax_s8+0x40a>
    if (remainder > threshold)
   b514c:	07e6      	lsls	r6, r4, #31
        result++;
   b514e:	bf48      	it	mi
   b5150:	3101      	addmi	r1, #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
   b5152:	448c      	add	ip, r1
        mult = 1 - mult;
   b5154:	f1bc 0f00 	cmp.w	ip, #0
    result = (int32_t)(mult / (1ll << 31));
   b5158:	485d      	ldr	r0, [pc, #372]	; (b52d0 <arm_softmax_s8+0x588>)
        mult = 1 - mult;
   b515a:	bfab      	itete	ge
   b515c:	f04f 4480 	movge.w	r4, #1073741824	; 0x40000000
   b5160:	4644      	movlt	r4, r8
   b5162:	2100      	movge	r1, #0
   b5164:	f04f 31ff 	movlt.w	r1, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
   b5168:	fbcc 4100 	smlal	r4, r1, ip, r0
   b516c:	2900      	cmp	r1, #0
   b516e:	da04      	bge.n	b517a <arm_softmax_s8+0x432>
   b5170:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   b5174:	1824      	adds	r4, r4, r0
   b5176:	f141 0100 	adc.w	r1, r1, #0
   b517a:	0fe4      	lsrs	r4, r4, #31
   b517c:	ea44 0441 	orr.w	r4, r4, r1, lsl #1
    int32_t result = 1895147668 +
   b5180:	f104 44e2 	add.w	r4, r4, #1895825408	; 0x71000000
    mult = mult + (q63_t)m1 * m2;
   b5184:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   b5188:	2000      	movs	r0, #0
   b518a:	4f52      	ldr	r7, [pc, #328]	; (b52d4 <arm_softmax_s8+0x58c>)
    int32_t result = 1895147668 +
   b518c:	f5a4 2425 	sub.w	r4, r4, #675840	; 0xa5000
   b5190:	f2a4 746c 	subw	r4, r4, #1900	; 0x76c
    mult = mult + (q63_t)m1 * m2;
   b5194:	468c      	mov	ip, r1
   b5196:	4682      	mov	sl, r0
   b5198:	fbc4 ca07 	smlal	ip, sl, r4, r7
    SELECT_IF_NON_ZERO(1672461947)
   b519c:	f3c5 6600 	ubfx	r6, r5, #24, #1
    result = (int32_t)(mult / (1ll << 31));
   b51a0:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
   b51a4:	ea4c 0c4a 	orr.w	ip, ip, sl, lsl #1
    SELECT_IF_NON_ZERO(1672461947)
   b51a8:	f345 6900 	sbfx	r9, r5, #24, #1
   b51ac:	3e01      	subs	r6, #1
   b51ae:	ea09 090c 	and.w	r9, r9, ip
    mult = mult + (q63_t)m1 * m2;
   b51b2:	4f49      	ldr	r7, [pc, #292]	; (b52d8 <arm_softmax_s8+0x590>)
    SELECT_IF_NON_ZERO(1672461947)
   b51b4:	4034      	ands	r4, r6
   b51b6:	ea89 0404 	eor.w	r4, r9, r4
    mult = mult + (q63_t)m1 * m2;
   b51ba:	468c      	mov	ip, r1
   b51bc:	4606      	mov	r6, r0
   b51be:	fbc4 c607 	smlal	ip, r6, r4, r7
    SELECT_IF_NON_ZERO(1302514674)
   b51c2:	f3c5 6a40 	ubfx	sl, r5, #25, #1
    result = (int32_t)(mult / (1ll << 31));
   b51c6:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
   b51ca:	ea4c 0c46 	orr.w	ip, ip, r6, lsl #1
    SELECT_IF_NON_ZERO(1302514674)
   b51ce:	f345 6940 	sbfx	r9, r5, #25, #1
   b51d2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   b51d6:	ea0a 0a04 	and.w	sl, sl, r4
   b51da:	ea09 090c 	and.w	r9, r9, ip
    mult = mult + (q63_t)m1 * m2;
   b51de:	4f3f      	ldr	r7, [pc, #252]	; (b52dc <arm_softmax_s8+0x594>)
    SELECT_IF_NON_ZERO(1302514674)
   b51e0:	ea89 090a 	eor.w	r9, r9, sl
    mult = mult + (q63_t)m1 * m2;
   b51e4:	460e      	mov	r6, r1
   b51e6:	4604      	mov	r4, r0
   b51e8:	fbc9 6407 	smlal	r6, r4, r9, r7
    SELECT_IF_NON_ZERO(790015084)
   b51ec:	f3c5 6a80 	ubfx	sl, r5, #26, #1
    result = (int32_t)(mult / (1ll << 31));
   b51f0:	0ff6      	lsrs	r6, r6, #31
   b51f2:	ea46 0644 	orr.w	r6, r6, r4, lsl #1
    SELECT_IF_NON_ZERO(790015084)
   b51f6:	f345 6c80 	sbfx	ip, r5, #26, #1
   b51fa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   b51fe:	ea0a 0a09 	and.w	sl, sl, r9
   b5202:	ea0c 0c06 	and.w	ip, ip, r6
    mult = mult + (q63_t)m1 * m2;
   b5206:	4e36      	ldr	r6, [pc, #216]	; (b52e0 <arm_softmax_s8+0x598>)
    SELECT_IF_NON_ZERO(790015084)
   b5208:	ea8c 0c0a 	eor.w	ip, ip, sl
    mult = mult + (q63_t)m1 * m2;
   b520c:	460c      	mov	r4, r1
   b520e:	4682      	mov	sl, r0
   b5210:	fbcc 4a06 	smlal	r4, sl, ip, r6
    SELECT_IF_NON_ZERO(290630308)
   b5214:	f3c5 69c0 	ubfx	r9, r5, #27, #1
    result = (int32_t)(mult / (1ll << 31));
   b5218:	0fe4      	lsrs	r4, r4, #31
   b521a:	ea44 044a 	orr.w	r4, r4, sl, lsl #1
    SELECT_IF_NON_ZERO(290630308)
   b521e:	f345 66c0 	sbfx	r6, r5, #27, #1
   b5222:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   b5226:	ea09 090c 	and.w	r9, r9, ip
   b522a:	4026      	ands	r6, r4
    mult = mult + (q63_t)m1 * m2;
   b522c:	4c2d      	ldr	r4, [pc, #180]	; (b52e4 <arm_softmax_s8+0x59c>)
    SELECT_IF_NON_ZERO(290630308)
   b522e:	ea86 0609 	eor.w	r6, r6, r9
    mult = mult + (q63_t)m1 * m2;
   b5232:	4682      	mov	sl, r0
   b5234:	4689      	mov	r9, r1
   b5236:	fbc6 9a04 	smlal	r9, sl, r6, r4
    SELECT_IF_NON_ZERO(39332535)
   b523a:	f3c5 7c00 	ubfx	ip, r5, #28, #1
    result = (int32_t)(mult / (1ll << 31));
   b523e:	ea4f 79d9 	mov.w	r9, r9, lsr #31
   b5242:	ea49 094a 	orr.w	r9, r9, sl, lsl #1
    SELECT_IF_NON_ZERO(39332535)
   b5246:	f345 7400 	sbfx	r4, r5, #28, #1
   b524a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   b524e:	ea0c 0c06 	and.w	ip, ip, r6
   b5252:	ea04 0409 	and.w	r4, r4, r9
    mult = mult + (q63_t)m1 * m2;
   b5256:	f8df 9090 	ldr.w	r9, [pc, #144]	; b52e8 <arm_softmax_s8+0x5a0>
    SELECT_IF_NON_ZERO(39332535)
   b525a:	ea84 040c 	eor.w	r4, r4, ip
    mult = mult + (q63_t)m1 * m2;
   b525e:	4682      	mov	sl, r0
   b5260:	468c      	mov	ip, r1
   b5262:	fbc4 ca09 	smlal	ip, sl, r4, r9
    SELECT_IF_NON_ZERO(720401)
   b5266:	f3c5 7640 	ubfx	r6, r5, #29, #1
    result = (int32_t)(mult / (1ll << 31));
   b526a:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
   b526e:	ea4c 0c4a 	orr.w	ip, ip, sl, lsl #1
    SELECT_IF_NON_ZERO(720401)
   b5272:	f345 7940 	sbfx	r9, r5, #29, #1
   b5276:	3e01      	subs	r6, #1
   b5278:	4026      	ands	r6, r4
   b527a:	ea09 0c0c 	and.w	ip, r9, ip
   b527e:	ea8c 0c06 	eor.w	ip, ip, r6
    mult = mult + (q63_t)m1 * m2;
   b5282:	24f2      	movs	r4, #242	; 0xf2
   b5284:	fbcc 1004 	smlal	r1, r0, ip, r4
    SELECT_IF_NON_ZERO(242)
   b5288:	f3c5 7a80 	ubfx	sl, r5, #30, #1
    result = (int32_t)(mult / (1ll << 31));
   b528c:	0fc9      	lsrs	r1, r1, #31
   b528e:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
    SELECT_IF_NON_ZERO(242)
   b5292:	f345 7580 	sbfx	r5, r5, #30, #1
   b5296:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    mask = MASK_IF_ZERO(val);
   b529a:	fab2 f282 	clz	r2, r2
    SELECT_IF_NON_ZERO(242)
   b529e:	ea0a 0a0c 	and.w	sl, sl, ip
    mask = MASK_IF_ZERO(val);
   b52a2:	0952      	lsrs	r2, r2, #5
    SELECT_IF_NON_ZERO(242)
   b52a4:	4029      	ands	r1, r5
   b52a6:	ea81 010a 	eor.w	r1, r1, sl
    return SELECT_USING_MASK(mask, Q31_MAX, result);
   b52aa:	1e50      	subs	r0, r2, #1
    mask = MASK_IF_ZERO(val);
   b52ac:	4252      	negs	r2, r2
    return SELECT_USING_MASK(mask, Q31_MAX, result);
   b52ae:	f022 4a00 	bic.w	sl, r2, #2147483648	; 0x80000000
   b52b2:	4001      	ands	r1, r0
   b52b4:	ea81 0a0a 	eor.w	sl, r1, sl
    result = dividend >> exponent;
   b52b8:	ea4f 322a 	mov.w	r2, sl, asr #12
    if (remainder > threshold)
   b52bc:	f41a 6f00 	tst.w	sl, #2048	; 0x800
        result++;
   b52c0:	bf18      	it	ne
   b52c2:	3201      	addne	r2, #1
   b52c4:	4413      	add	r3, r2
        for (col = 0; col < row_size; ++col)
   b52c6:	f10e 0e01 	add.w	lr, lr, #1
   b52ca:	e562      	b.n	b4d92 <arm_softmax_s8+0x4a>
   b52cc:	2aaaaaab 	.word	0x2aaaaaab
   b52d0:	70f5a894 	.word	0x70f5a894
   b52d4:	63afbe7b 	.word	0x63afbe7b
   b52d8:	4da2cbf2 	.word	0x4da2cbf2
   b52dc:	2f16ac6c 	.word	0x2f16ac6c
   b52e0:	1152aaa4 	.word	0x1152aaa4
   b52e4:	02582ab7 	.word	0x02582ab7
   b52e8:	000afe11 	.word	0x000afe11
            diff = input[col] - max;
   b52ec:	9b04      	ldr	r3, [sp, #16]
   b52ee:	f913 100c 	ldrsb.w	r1, [r3, ip]
   b52f2:	9b01      	ldr	r3, [sp, #4]
   b52f4:	1ac9      	subs	r1, r1, r3
            if (diff >= diff_min)
   b52f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b52f8:	4299      	cmp	r1, r3
   b52fa:	f2c0 816b 	blt.w	b55d4 <arm_softmax_s8+0x88c>
                    DIV_POW2(MUL_SAT(shifted_scale, EXP_ON_NEG(MUL_SAT(diff * mask, mult))), bits_over_unit) - 128;
   b52fe:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b5300:	4099      	lsls	r1, r3
    if ((m1 < 0) ^ (m2 < 0))
   b5302:	0fcb      	lsrs	r3, r1, #31
        mult = 1 - mult;
   b5304:	ebb3 7fdb 	cmp.w	r3, fp, lsr #31
   b5308:	bf0b      	itete	eq
   b530a:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
   b530e:	4673      	movne	r3, lr
   b5310:	2200      	moveq	r2, #0
   b5312:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
   b5316:	fbc1 320b 	smlal	r3, r2, r1, fp
   b531a:	2a00      	cmp	r2, #0
   b531c:	4610      	mov	r0, r2
   b531e:	da04      	bge.n	b532a <arm_softmax_s8+0x5e2>
   b5320:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   b5324:	189b      	adds	r3, r3, r2
   b5326:	f140 0000 	adc.w	r0, r0, #0
   b532a:	0fda      	lsrs	r2, r3, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
   b532c:	4559      	cmp	r1, fp
    result = (int32_t)(mult / (1ll << 31));
   b532e:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
   b5332:	d104      	bne.n	b533e <arm_softmax_s8+0x5f6>
        result = Q31_MAX;
   b5334:	f1bb 4f00 	cmp.w	fp, #2147483648	; 0x80000000
   b5338:	bf08      	it	eq
   b533a:	f06f 4200 	mvneq.w	r2, #2147483648	; 0x80000000
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
   b533e:	f042 467f 	orr.w	r6, r2, #4278190080	; 0xff000000
    const int32_t remainder = val_mod_minus_quarter - val;
   b5342:	1ab3      	subs	r3, r6, r2
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
   b5344:	0176      	lsls	r6, r6, #5
   b5346:	f106 5680 	add.w	r6, r6, #268435456	; 0x10000000
    mult = mult + (q63_t)m1 * m2;
   b534a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    result = (int32_t)(mult / (1ll << 31));
   b534e:	2400      	movs	r4, #0
   b5350:	fbc6 1406 	smlal	r1, r4, r6, r6
   b5354:	2c00      	cmp	r4, #0
    mult = mult + (q63_t)m1 * m2;
   b5356:	ea4f 75e6 	mov.w	r5, r6, asr #31
    result = (int32_t)(mult / (1ll << 31));
   b535a:	da04      	bge.n	b5366 <arm_softmax_s8+0x61e>
   b535c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   b5360:	1809      	adds	r1, r1, r0
   b5362:	f144 0400 	adc.w	r4, r4, #0
   b5366:	0fc9      	lsrs	r1, r1, #31
   b5368:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
    mult = mult + (q63_t)m1 * m2;
   b536c:	fba1 0801 	umull	r0, r8, r1, r1
    result = (int32_t)(mult / (1ll << 31));
   b5370:	17e4      	asrs	r4, r4, #31
    mult = mult + (q63_t)m1 * m2;
   b5372:	f110 4080 	adds.w	r0, r0, #1073741824	; 0x40000000
   b5376:	fb01 f904 	mul.w	r9, r1, r4
    result = (int32_t)(mult / (1ll << 31));
   b537a:	eb48 0849 	adc.w	r8, r8, r9, lsl #1
   b537e:	f1b8 0f00 	cmp.w	r8, #0
   b5382:	da05      	bge.n	b5390 <arm_softmax_s8+0x648>
   b5384:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   b5388:	eb10 0009 	adds.w	r0, r0, r9
   b538c:	f148 0800 	adc.w	r8, r8, #0
   b5390:	0fc0      	lsrs	r0, r0, #31
   b5392:	ea40 0048 	orr.w	r0, r0, r8, lsl #1
    int32_t remainder = remainder_mask & dividend;
   b5396:	f000 0803 	and.w	r8, r0, #3
        threshold++;
   b539a:	1080      	asrs	r0, r0, #2
   b539c:	bf54      	ite	pl
   b539e:	f04f 0901 	movpl.w	r9, #1
   b53a2:	f04f 0902 	movmi.w	r9, #2
    if (remainder > threshold)
   b53a6:	45c8      	cmp	r8, r9
    if ((m1 < 0) ^ (m2 < 0))
   b53a8:	ea4f 78d1 	mov.w	r8, r1, lsr #31
        result++;
   b53ac:	bfc8      	it	gt
   b53ae:	3001      	addgt	r0, #1
    mult = mult + (q63_t)m1 * m2;
   b53b0:	4374      	muls	r4, r6
        mult = 1 - mult;
   b53b2:	ebb8 7fd6 	cmp.w	r8, r6, lsr #31
    mult = mult + (q63_t)m1 * m2;
   b53b6:	fb01 4405 	mla	r4, r1, r5, r4
        mult = 1 - mult;
   b53ba:	bf08      	it	eq
   b53bc:	f04f 4880 	moveq.w	r8, #1073741824	; 0x40000000
    mult = mult + (q63_t)m1 * m2;
   b53c0:	fba6 5701 	umull	r5, r7, r6, r1
        mult = 1 - mult;
   b53c4:	bf16      	itet	ne
   b53c6:	46f0      	movne	r8, lr
   b53c8:	f04f 0900 	moveq.w	r9, #0
   b53cc:	f04f 39ff 	movne.w	r9, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
   b53d0:	443c      	add	r4, r7
   b53d2:	eb15 0508 	adds.w	r5, r5, r8
    result = (int32_t)(mult / (1ll << 31));
   b53d6:	eb44 0409 	adc.w	r4, r4, r9
   b53da:	2c00      	cmp	r4, #0
   b53dc:	da05      	bge.n	b53ea <arm_softmax_s8+0x6a2>
   b53de:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
   b53e2:	eb15 0508 	adds.w	r5, r5, r8
   b53e6:	f144 0400 	adc.w	r4, r4, #0
   b53ea:	0fed      	lsrs	r5, r5, #31
   b53ec:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
   b53f0:	4428      	add	r0, r5
        mult = 1 - mult;
   b53f2:	2800      	cmp	r0, #0
    result = (int32_t)(mult / (1ll << 31));
   b53f4:	4f78      	ldr	r7, [pc, #480]	; (b55d8 <arm_softmax_s8+0x890>)
        mult = 1 - mult;
   b53f6:	bfab      	itete	ge
   b53f8:	f04f 4480 	movge.w	r4, #1073741824	; 0x40000000
   b53fc:	4674      	movlt	r4, lr
   b53fe:	2500      	movge	r5, #0
   b5400:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
   b5404:	fbc0 4507 	smlal	r4, r5, r0, r7
   b5408:	2d00      	cmp	r5, #0
   b540a:	da04      	bge.n	b5416 <arm_softmax_s8+0x6ce>
   b540c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   b5410:	1824      	adds	r4, r4, r0
   b5412:	f145 0500 	adc.w	r5, r5, #0
   b5416:	0fe4      	lsrs	r4, r4, #31
   b5418:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
   b541c:	440c      	add	r4, r1
    if (result < 0)
   b541e:	1061      	asrs	r1, r4, #1
   b5420:	d402      	bmi.n	b5428 <arm_softmax_s8+0x6e0>
    if (remainder > threshold)
   b5422:	07e0      	lsls	r0, r4, #31
        result++;
   b5424:	bf48      	it	mi
   b5426:	3101      	addmi	r1, #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
   b5428:	440e      	add	r6, r1
        mult = 1 - mult;
   b542a:	2e00      	cmp	r6, #0
    result = (int32_t)(mult / (1ll << 31));
   b542c:	486b      	ldr	r0, [pc, #428]	; (b55dc <arm_softmax_s8+0x894>)
        mult = 1 - mult;
   b542e:	bfab      	itete	ge
   b5430:	f04f 4480 	movge.w	r4, #1073741824	; 0x40000000
   b5434:	4674      	movlt	r4, lr
   b5436:	2100      	movge	r1, #0
   b5438:	f04f 31ff 	movlt.w	r1, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
   b543c:	fbc6 4100 	smlal	r4, r1, r6, r0
   b5440:	2900      	cmp	r1, #0
   b5442:	da04      	bge.n	b544e <arm_softmax_s8+0x706>
   b5444:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   b5448:	1824      	adds	r4, r4, r0
   b544a:	f141 0100 	adc.w	r1, r1, #0
   b544e:	0fe4      	lsrs	r4, r4, #31
   b5450:	ea44 0441 	orr.w	r4, r4, r1, lsl #1
    int32_t result = 1895147668 +
   b5454:	f104 44e2 	add.w	r4, r4, #1895825408	; 0x71000000
    mult = mult + (q63_t)m1 * m2;
   b5458:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   b545c:	2000      	movs	r0, #0
   b545e:	4f60      	ldr	r7, [pc, #384]	; (b55e0 <arm_softmax_s8+0x898>)
    int32_t result = 1895147668 +
   b5460:	f5a4 2425 	sub.w	r4, r4, #675840	; 0xa5000
   b5464:	f2a4 746c 	subw	r4, r4, #1900	; 0x76c
    mult = mult + (q63_t)m1 * m2;
   b5468:	460e      	mov	r6, r1
   b546a:	4681      	mov	r9, r0
   b546c:	fbc4 6907 	smlal	r6, r9, r4, r7
    SELECT_IF_NON_ZERO(1672461947)
   b5470:	f3c3 6500 	ubfx	r5, r3, #24, #1
    result = (int32_t)(mult / (1ll << 31));
   b5474:	0ff6      	lsrs	r6, r6, #31
   b5476:	ea46 0649 	orr.w	r6, r6, r9, lsl #1
    SELECT_IF_NON_ZERO(1672461947)
   b547a:	f343 6800 	sbfx	r8, r3, #24, #1
   b547e:	3d01      	subs	r5, #1
   b5480:	ea08 0806 	and.w	r8, r8, r6
   b5484:	402c      	ands	r4, r5
    mult = mult + (q63_t)m1 * m2;
   b5486:	4f57      	ldr	r7, [pc, #348]	; (b55e4 <arm_softmax_s8+0x89c>)
    SELECT_IF_NON_ZERO(1672461947)
   b5488:	ea88 0404 	eor.w	r4, r8, r4
    mult = mult + (q63_t)m1 * m2;
   b548c:	460e      	mov	r6, r1
   b548e:	4605      	mov	r5, r0
   b5490:	fbc4 6507 	smlal	r6, r5, r4, r7
    SELECT_IF_NON_ZERO(1302514674)
   b5494:	f3c3 6940 	ubfx	r9, r3, #25, #1
    result = (int32_t)(mult / (1ll << 31));
   b5498:	0ff6      	lsrs	r6, r6, #31
   b549a:	ea46 0645 	orr.w	r6, r6, r5, lsl #1
    SELECT_IF_NON_ZERO(1302514674)
   b549e:	f343 6840 	sbfx	r8, r3, #25, #1
   b54a2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   b54a6:	ea09 0904 	and.w	r9, r9, r4
   b54aa:	ea08 0806 	and.w	r8, r8, r6
    mult = mult + (q63_t)m1 * m2;
   b54ae:	4e4e      	ldr	r6, [pc, #312]	; (b55e8 <arm_softmax_s8+0x8a0>)
    SELECT_IF_NON_ZERO(1302514674)
   b54b0:	ea88 0809 	eor.w	r8, r8, r9
    mult = mult + (q63_t)m1 * m2;
   b54b4:	460d      	mov	r5, r1
   b54b6:	4604      	mov	r4, r0
   b54b8:	fbc8 5406 	smlal	r5, r4, r8, r6
    SELECT_IF_NON_ZERO(790015084)
   b54bc:	f3c3 6980 	ubfx	r9, r3, #26, #1
    result = (int32_t)(mult / (1ll << 31));
   b54c0:	0fed      	lsrs	r5, r5, #31
   b54c2:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
    SELECT_IF_NON_ZERO(790015084)
   b54c6:	f343 6680 	sbfx	r6, r3, #26, #1
   b54ca:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   b54ce:	ea09 0908 	and.w	r9, r9, r8
   b54d2:	402e      	ands	r6, r5
    mult = mult + (q63_t)m1 * m2;
   b54d4:	4d45      	ldr	r5, [pc, #276]	; (b55ec <arm_softmax_s8+0x8a4>)
    SELECT_IF_NON_ZERO(790015084)
   b54d6:	ea86 0609 	eor.w	r6, r6, r9
    mult = mult + (q63_t)m1 * m2;
   b54da:	460c      	mov	r4, r1
   b54dc:	4681      	mov	r9, r0
   b54de:	fbc6 4905 	smlal	r4, r9, r6, r5
    SELECT_IF_NON_ZERO(290630308)
   b54e2:	f3c3 68c0 	ubfx	r8, r3, #27, #1
    result = (int32_t)(mult / (1ll << 31));
   b54e6:	0fe4      	lsrs	r4, r4, #31
   b54e8:	ea44 0449 	orr.w	r4, r4, r9, lsl #1
    SELECT_IF_NON_ZERO(290630308)
   b54ec:	f343 65c0 	sbfx	r5, r3, #27, #1
   b54f0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b54f4:	ea08 0806 	and.w	r8, r8, r6
   b54f8:	4025      	ands	r5, r4
    mult = mult + (q63_t)m1 * m2;
   b54fa:	4c3d      	ldr	r4, [pc, #244]	; (b55f0 <arm_softmax_s8+0x8a8>)
    SELECT_IF_NON_ZERO(290630308)
   b54fc:	ea85 0508 	eor.w	r5, r5, r8
    mult = mult + (q63_t)m1 * m2;
   b5500:	4681      	mov	r9, r0
   b5502:	4688      	mov	r8, r1
   b5504:	fbc5 8904 	smlal	r8, r9, r5, r4
    SELECT_IF_NON_ZERO(39332535)
   b5508:	f3c3 7600 	ubfx	r6, r3, #28, #1
    result = (int32_t)(mult / (1ll << 31));
   b550c:	ea4f 78d8 	mov.w	r8, r8, lsr #31
   b5510:	ea48 0849 	orr.w	r8, r8, r9, lsl #1
    SELECT_IF_NON_ZERO(39332535)
   b5514:	f343 7400 	sbfx	r4, r3, #28, #1
   b5518:	3e01      	subs	r6, #1
   b551a:	402e      	ands	r6, r5
   b551c:	ea04 0408 	and.w	r4, r4, r8
    mult = mult + (q63_t)m1 * m2;
   b5520:	f8df 80d0 	ldr.w	r8, [pc, #208]	; b55f4 <arm_softmax_s8+0x8ac>
    SELECT_IF_NON_ZERO(39332535)
   b5524:	4074      	eors	r4, r6
    mult = mult + (q63_t)m1 * m2;
   b5526:	4681      	mov	r9, r0
   b5528:	460e      	mov	r6, r1
   b552a:	fbc4 6908 	smlal	r6, r9, r4, r8
    SELECT_IF_NON_ZERO(720401)
   b552e:	f3c3 7540 	ubfx	r5, r3, #29, #1
    result = (int32_t)(mult / (1ll << 31));
   b5532:	0ff6      	lsrs	r6, r6, #31
   b5534:	ea46 0649 	orr.w	r6, r6, r9, lsl #1
    SELECT_IF_NON_ZERO(720401)
   b5538:	f343 7840 	sbfx	r8, r3, #29, #1
   b553c:	3d01      	subs	r5, #1
   b553e:	4025      	ands	r5, r4
   b5540:	ea08 0606 	and.w	r6, r8, r6
   b5544:	406e      	eors	r6, r5
    mult = mult + (q63_t)m1 * m2;
   b5546:	24f2      	movs	r4, #242	; 0xf2
   b5548:	fbc6 1004 	smlal	r1, r0, r6, r4
    SELECT_IF_NON_ZERO(242)
   b554c:	f3c3 7980 	ubfx	r9, r3, #30, #1
    result = (int32_t)(mult / (1ll << 31));
   b5550:	0fc9      	lsrs	r1, r1, #31
   b5552:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
    SELECT_IF_NON_ZERO(242)
   b5556:	f343 7380 	sbfx	r3, r3, #30, #1
   b555a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    mask = MASK_IF_ZERO(val);
   b555e:	fab2 f282 	clz	r2, r2
    SELECT_IF_NON_ZERO(242)
   b5562:	4019      	ands	r1, r3
    mask = MASK_IF_ZERO(val);
   b5564:	0952      	lsrs	r2, r2, #5
    SELECT_IF_NON_ZERO(242)
   b5566:	ea09 0906 	and.w	r9, r9, r6
    return SELECT_USING_MASK(mask, Q31_MAX, result);
   b556a:	1e50      	subs	r0, r2, #1
    SELECT_IF_NON_ZERO(242)
   b556c:	ea81 0109 	eor.w	r1, r1, r9
    mask = MASK_IF_ZERO(val);
   b5570:	4252      	negs	r2, r2
    return SELECT_USING_MASK(mask, Q31_MAX, result);
   b5572:	4001      	ands	r1, r0
   b5574:	f022 4000 	bic.w	r0, r2, #2147483648	; 0x80000000
    result = (int32_t)(mult / (1ll << 31));
   b5578:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
    return SELECT_USING_MASK(mask, Q31_MAX, result);
   b557c:	4048      	eors	r0, r1
    result = (int32_t)(mult / (1ll << 31));
   b557e:	9909      	ldr	r1, [sp, #36]	; 0x24
   b5580:	fbc1 3200 	smlal	r3, r2, r1, r0
   b5584:	2a00      	cmp	r2, #0
   b5586:	4614      	mov	r4, r2
   b5588:	da04      	bge.n	b5594 <arm_softmax_s8+0x84c>
   b558a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   b558e:	189b      	adds	r3, r3, r2
   b5590:	f144 0400 	adc.w	r4, r4, #0
    int32_t remainder = remainder_mask & dividend;
   b5594:	9a05      	ldr	r2, [sp, #20]
    q31_t threshold = remainder_mask >> 1;
   b5596:	9806      	ldr	r0, [sp, #24]
   b5598:	990a      	ldr	r1, [sp, #40]	; 0x28
    result = (int32_t)(mult / (1ll << 31));
   b559a:	0fdb      	lsrs	r3, r3, #31
   b559c:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    int32_t remainder = remainder_mask & dividend;
   b55a0:	401a      	ands	r2, r3
    q31_t threshold = remainder_mask >> 1;
   b55a2:	fa53 f30a 	asrs.w	r3, r3, sl
   b55a6:	bf58      	it	pl
   b55a8:	4601      	movpl	r1, r0
    if (remainder > threshold)
   b55aa:	428a      	cmp	r2, r1
        result++;
   b55ac:	bfc8      	it	gt
   b55ae:	3301      	addgt	r3, #1
                const int32_t res =
   b55b0:	3b80      	subs	r3, #128	; 0x80
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
   b55b2:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
   b55b6:	db08      	blt.n	b55ca <arm_softmax_s8+0x882>
   b55b8:	2b7e      	cmp	r3, #126	; 0x7e
   b55ba:	dc09      	bgt.n	b55d0 <arm_softmax_s8+0x888>
   b55bc:	b25b      	sxtb	r3, r3
                output[col] = -128;
   b55be:	9a07      	ldr	r2, [sp, #28]
   b55c0:	f802 300c 	strb.w	r3, [r2, ip]
        for (col = 0; col < row_size; ++col)
   b55c4:	f10c 0c01 	add.w	ip, ip, #1
   b55c8:	e509      	b.n	b4fde <arm_softmax_s8+0x296>
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
   b55ca:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   b55ce:	e7f6      	b.n	b55be <arm_softmax_s8+0x876>
   b55d0:	237f      	movs	r3, #127	; 0x7f
   b55d2:	e7f4      	b.n	b55be <arm_softmax_s8+0x876>
                output[col] = -128;
   b55d4:	2380      	movs	r3, #128	; 0x80
   b55d6:	e7f2      	b.n	b55be <arm_softmax_s8+0x876>
   b55d8:	2aaaaaab 	.word	0x2aaaaaab
   b55dc:	70f5a894 	.word	0x70f5a894
   b55e0:	63afbe7b 	.word	0x63afbe7b
   b55e4:	4da2cbf2 	.word	0x4da2cbf2
   b55e8:	2f16ac6c 	.word	0x2f16ac6c
   b55ec:	1152aaa4 	.word	0x1152aaa4
   b55f0:	02582ab7 	.word	0x02582ab7
   b55f4:	000afe11 	.word	0x000afe11

000b55f8 <arm_depthwise_conv_3x3_s8>:
                                     const q7_t *kernel,
                                     const cmsis_nn_dims *bias_dims,
                                     const int32_t *bias,
                                     const cmsis_nn_dims *output_dims,
                                     q7_t *output)
{
   b55f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b55fc:	b0a9      	sub	sp, #164	; 0xa4
    const int32_t input_y = input_dims->h;
    const int32_t input_ch = input_dims->c;
    const int32_t output_ch = output_dims->c;
    const int32_t pad_x = dw_conv_params->padding.w;
    const int32_t pad_y = dw_conv_params->padding.h;
    const int32_t stride_x = dw_conv_params->stride.w;
   b55fe:	68cf      	ldr	r7, [r1, #12]
{
   b5600:	9e37      	ldr	r6, [sp, #220]	; 0xdc
    const int32_t stride_x = dw_conv_params->stride.w;
   b5602:	970c      	str	r7, [sp, #48]	; 0x30
    const int32_t stride_y = dw_conv_params->stride.h;
   b5604:	690f      	ldr	r7, [r1, #16]
   b5606:	9716      	str	r7, [sp, #88]	; 0x58
    const int32_t *output_shift = quant_params->shift;
   b5608:	6857      	ldr	r7, [r2, #4]
    const int32_t *output_mult = quant_params->multiplier;
   b560a:	6812      	ldr	r2, [r2, #0]
   b560c:	921c      	str	r2, [sp, #112]	; 0x70
    const int32_t output_x = output_dims->w;
   b560e:	68b2      	ldr	r2, [r6, #8]
   b5610:	9221      	str	r2, [sp, #132]	; 0x84
    const int32_t output_y = output_dims->h;
   b5612:	6872      	ldr	r2, [r6, #4]
    const int32_t pad_x = dw_conv_params->padding.w;
   b5614:	694c      	ldr	r4, [r1, #20]
    const int32_t output_y = output_dims->h;
   b5616:	9222      	str	r2, [sp, #136]	; 0x88
    const int32_t output_offset = dw_conv_params->output_offset;
   b5618:	684a      	ldr	r2, [r1, #4]
    const int32_t input_x = input_dims->w;
   b561a:	6898      	ldr	r0, [r3, #8]
    const int32_t pad_x = dw_conv_params->padding.w;
   b561c:	940b      	str	r4, [sp, #44]	; 0x2c
    const int32_t *output_shift = quant_params->shift;
   b561e:	971b      	str	r7, [sp, #108]	; 0x6c
    const int32_t pad_y = dw_conv_params->padding.h;
   b5620:	698c      	ldr	r4, [r1, #24]
    const int32_t input_offset = dw_conv_params->input_offset;
    const int32_t output_activation_min = dw_conv_params->activation.min;
   b5622:	6a4f      	ldr	r7, [r1, #36]	; 0x24
    const int32_t output_offset = dw_conv_params->output_offset;
   b5624:	9205      	str	r2, [sp, #20]
    const int32_t input_offset = dw_conv_params->input_offset;
   b5626:	680a      	ldr	r2, [r1, #0]
    const int32_t output_activation_max = dw_conv_params->activation.max;
   b5628:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const int32_t input_x = input_dims->w;
   b562a:	901a      	str	r0, [sp, #104]	; 0x68
    const int32_t output_activation_max = dw_conv_params->activation.max;
   b562c:	9107      	str	r1, [sp, #28]
    const int32_t input_y = input_dims->h;
   b562e:	6858      	ldr	r0, [r3, #4]

    /* Check input constraints input_ch == output_ch */
    if (input_ch != output_ch)
   b5630:	68f1      	ldr	r1, [r6, #12]
    const int32_t input_ch = input_dims->c;
   b5632:	68db      	ldr	r3, [r3, #12]
{
   b5634:	9d33      	ldr	r5, [sp, #204]	; 0xcc
    const int32_t output_activation_min = dw_conv_params->activation.min;
   b5636:	9706      	str	r7, [sp, #24]
    if (input_ch != output_ch)
   b5638:	428b      	cmp	r3, r1
   b563a:	f040 826e 	bne.w	b5b1a <arm_depthwise_conv_3x3_s8+0x522>
    {
        return ARM_MATH_SIZE_MISMATCH;
    }
    /* Check input constraints pad_x <= 1 */
    if (pad_x > 1 || filter_dims->w != 3 || filter_dims->h != 3)
   b563e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   b5640:	2901      	cmp	r1, #1
   b5642:	f300 826d 	bgt.w	b5b20 <arm_depthwise_conv_3x3_s8+0x528>
   b5646:	68a9      	ldr	r1, [r5, #8]
   b5648:	2903      	cmp	r1, #3
   b564a:	f040 8269 	bne.w	b5b20 <arm_depthwise_conv_3x3_s8+0x528>
   b564e:	6869      	ldr	r1, [r5, #4]
   b5650:	2903      	cmp	r1, #3
   b5652:	f040 8265 	bne.w	b5b20 <arm_depthwise_conv_3x3_s8+0x528>
    {
        return ARM_MATH_ARGUMENT_ERROR;
    }

    for (int32_t in_h = -pad_y, out_h = 0, out_idx = 0; out_h < output_y; in_h += stride_y, ++out_h)
   b5656:	4261      	negs	r1, r4
   b5658:	9109      	str	r1, [sp, #36]	; 0x24
            // Leftover
            for (; in_ch < input_ch; ++in_ch)
            {
                int32_t out_buff = bias[in_ch];

                const int8_t *input_ptr = input + (in_h + ker_h_start) * (input_ch * input_x) + in_w * input_ch + in_ch;
   b565a:	991a      	ldr	r1, [sp, #104]	; 0x68
   b565c:	940e      	str	r4, [sp, #56]	; 0x38
   b565e:	4359      	muls	r1, r3
   b5660:	9112      	str	r1, [sp, #72]	; 0x48

                    out_buff += (*(input_ptr + input_ch) + input_offset) * *(kernel_ptr + input_ch);

                    if ((input_x - in_w) >= 3)
                    {
                        out_buff += (*(input_ptr + (input_ch << 1)) + input_offset) * *(kernel_ptr + (input_ch << 1));
   b5662:	0059      	lsls	r1, r3, #1
   b5664:	9108      	str	r1, [sp, #32]
                    }

                    input_ptr += (input_ch * input_x);
                    kernel_ptr += (input_ch * 3);
   b5666:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   b566a:	9117      	str	r1, [sp, #92]	; 0x5c
   b566c:	1901      	adds	r1, r0, r4
   b566e:	9118      	str	r1, [sp, #96]	; 0x60
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
   b5670:	990b      	ldr	r1, [sp, #44]	; 0x2c
   b5672:	4249      	negs	r1, r1
   b5674:	911d      	str	r1, [sp, #116]	; 0x74
   b5676:	990c      	ldr	r1, [sp, #48]	; 0x30
   b5678:	4359      	muls	r1, r3
   b567a:	9124      	str	r1, [sp, #144]	; 0x90
   b567c:	991d      	ldr	r1, [sp, #116]	; 0x74
   b567e:	2b00      	cmp	r3, #0
   b5680:	fb01 f103 	mul.w	r1, r1, r3
   b5684:	9123      	str	r1, [sp, #140]	; 0x8c
   b5686:	f023 0103 	bic.w	r1, r3, #3
   b568a:	bfb8      	it	lt
   b568c:	2100      	movlt	r1, #0
   b568e:	9111      	str	r1, [sp, #68]	; 0x44
   b5690:	9811      	ldr	r0, [sp, #68]	; 0x44
   b5692:	1a59      	subs	r1, r3, r1
   b5694:	4283      	cmp	r3, r0
   b5696:	bfb8      	it	lt
   b5698:	2100      	movlt	r1, #0
   b569a:	9125      	str	r1, [sp, #148]	; 0x94
    for (int32_t in_h = -pad_y, out_h = 0, out_idx = 0; out_h < output_y; in_h += stride_y, ++out_h)
   b569c:	2100      	movs	r1, #0
   b569e:	910a      	str	r1, [sp, #40]	; 0x28
   b56a0:	9113      	str	r1, [sp, #76]	; 0x4c
            for (; in_ch <= (input_ch - 4); in_ch += 4)
   b56a2:	1ed9      	subs	r1, r3, #3
   b56a4:	9127      	str	r1, [sp, #156]	; 0x9c
    for (int32_t in_h = -pad_y, out_h = 0, out_idx = 0; out_h < output_y; in_h += stride_y, ++out_h)
   b56a6:	9913      	ldr	r1, [sp, #76]	; 0x4c
   b56a8:	9822      	ldr	r0, [sp, #136]	; 0x88
   b56aa:	4281      	cmp	r1, r0
   b56ac:	db03      	blt.n	b56b6 <arm_depthwise_conv_3x3_s8+0xbe>
            }
        }
    }

    /* Return to application */
    return ARM_MATH_SUCCESS;
   b56ae:	2000      	movs	r0, #0
}
   b56b0:	b029      	add	sp, #164	; 0xa4
   b56b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
   b56b6:	9909      	ldr	r1, [sp, #36]	; 0x24
   b56b8:	9c12      	ldr	r4, [sp, #72]	; 0x48
   b56ba:	2900      	cmp	r1, #0
   b56bc:	990e      	ldr	r1, [sp, #56]	; 0x38
   b56be:	bfc8      	it	gt
   b56c0:	2100      	movgt	r1, #0
   b56c2:	910d      	str	r1, [sp, #52]	; 0x34
                const int8_t *input_ptr = input + (in_h + ker_h_start) * (input_ch * input_x) + in_w * input_ch + in_ch;
   b56c4:	980d      	ldr	r0, [sp, #52]	; 0x34
   b56c6:	9909      	ldr	r1, [sp, #36]	; 0x24
   b56c8:	4401      	add	r1, r0
   b56ca:	9823      	ldr	r0, [sp, #140]	; 0x8c
   b56cc:	fb04 0101 	mla	r1, r4, r1, r0
   b56d0:	9110      	str	r1, [sp, #64]	; 0x40
   b56d2:	980b      	ldr	r0, [sp, #44]	; 0x2c
   b56d4:	991a      	ldr	r1, [sp, #104]	; 0x68
   b56d6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
   b56d8:	9019      	str	r0, [sp, #100]	; 0x64
   b56da:	4401      	add	r1, r0
   b56dc:	910f      	str	r1, [sp, #60]	; 0x3c
   b56de:	991d      	ldr	r1, [sp, #116]	; 0x74
   b56e0:	9114      	str	r1, [sp, #80]	; 0x50
   b56e2:	2100      	movs	r1, #0
   b56e4:	980d      	ldr	r0, [sp, #52]	; 0x34
   b56e6:	9115      	str	r1, [sp, #84]	; 0x54
   b56e8:	9934      	ldr	r1, [sp, #208]	; 0xd0
   b56ea:	fb04 1100 	mla	r1, r4, r0, r1
   b56ee:	911f      	str	r1, [sp, #124]	; 0x7c
                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
   b56f0:	9918      	ldr	r1, [sp, #96]	; 0x60
   b56f2:	2903      	cmp	r1, #3
   b56f4:	bfa8      	it	ge
   b56f6:	2103      	movge	r1, #3
   b56f8:	9120      	str	r1, [sp, #128]	; 0x80
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
   b56fa:	9915      	ldr	r1, [sp, #84]	; 0x54
   b56fc:	9821      	ldr	r0, [sp, #132]	; 0x84
   b56fe:	4281      	cmp	r1, r0
   b5700:	db0d      	blt.n	b571e <arm_depthwise_conv_3x3_s8+0x126>
    for (int32_t in_h = -pad_y, out_h = 0, out_idx = 0; out_h < output_y; in_h += stride_y, ++out_h)
   b5702:	9816      	ldr	r0, [sp, #88]	; 0x58
   b5704:	9909      	ldr	r1, [sp, #36]	; 0x24
   b5706:	4401      	add	r1, r0
   b5708:	9109      	str	r1, [sp, #36]	; 0x24
   b570a:	9913      	ldr	r1, [sp, #76]	; 0x4c
   b570c:	3101      	adds	r1, #1
   b570e:	9113      	str	r1, [sp, #76]	; 0x4c
   b5710:	990e      	ldr	r1, [sp, #56]	; 0x38
   b5712:	1a09      	subs	r1, r1, r0
   b5714:	910e      	str	r1, [sp, #56]	; 0x38
   b5716:	9918      	ldr	r1, [sp, #96]	; 0x60
   b5718:	1a09      	subs	r1, r1, r0
   b571a:	9118      	str	r1, [sp, #96]	; 0x60
   b571c:	e7c3      	b.n	b56a6 <arm_depthwise_conv_3x3_s8+0xae>
            int32_t ker_w_start = MAX(0, -in_w);
   b571e:	9914      	ldr	r1, [sp, #80]	; 0x50
   b5720:	980a      	ldr	r0, [sp, #40]	; 0x28
   b5722:	2900      	cmp	r1, #0
   b5724:	9919      	ldr	r1, [sp, #100]	; 0x64
   b5726:	bfc8      	it	gt
   b5728:	2100      	movgt	r1, #0
   b572a:	911e      	str	r1, [sp, #120]	; 0x78
            for (; in_ch <= (input_ch - 4); in_ch += 4)
   b572c:	9938      	ldr	r1, [sp, #224]	; 0xe0
   b572e:	4401      	add	r1, r0
   b5730:	9103      	str	r1, [sp, #12]
   b5732:	e9dd 161b 	ldrd	r1, r6, [sp, #108]	; 0x6c
   b5736:	9102      	str	r1, [sp, #8]
   b5738:	9936      	ldr	r1, [sp, #216]	; 0xd8
   b573a:	9101      	str	r1, [sp, #4]
            int32_t in_ch = 0;
   b573c:	2100      	movs	r1, #0
   b573e:	9810      	ldr	r0, [sp, #64]	; 0x40
   b5740:	9104      	str	r1, [sp, #16]
   b5742:	9932      	ldr	r1, [sp, #200]	; 0xc8
   b5744:	4401      	add	r1, r0
   b5746:	9126      	str	r1, [sp, #152]	; 0x98
            for (; in_ch <= (input_ch - 4); in_ch += 4)
   b5748:	9927      	ldr	r1, [sp, #156]	; 0x9c
   b574a:	9804      	ldr	r0, [sp, #16]
   b574c:	4281      	cmp	r1, r0
   b574e:	dc24      	bgt.n	b579a <arm_depthwise_conv_3x3_s8+0x1a2>
   b5750:	9811      	ldr	r0, [sp, #68]	; 0x44
   b5752:	990a      	ldr	r1, [sp, #40]	; 0x28
   b5754:	9c10      	ldr	r4, [sp, #64]	; 0x40
   b5756:	4401      	add	r1, r0
   b5758:	468c      	mov	ip, r1
   b575a:	9938      	ldr	r1, [sp, #224]	; 0xe0
   b575c:	eb01 0e0c 	add.w	lr, r1, ip
   b5760:	4601      	mov	r1, r0
   b5762:	9832      	ldr	r0, [sp, #200]	; 0xc8
   b5764:	eb00 0804 	add.w	r8, r0, r4
            for (; in_ch < input_ch; ++in_ch)
   b5768:	4299      	cmp	r1, r3
   b576a:	f2c0 8179 	blt.w	b5a60 <arm_depthwise_conv_3x3_s8+0x468>
   b576e:	9925      	ldr	r1, [sp, #148]	; 0x94
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
   b5770:	980c      	ldr	r0, [sp, #48]	; 0x30
   b5772:	4461      	add	r1, ip
   b5774:	910a      	str	r1, [sp, #40]	; 0x28
   b5776:	9914      	ldr	r1, [sp, #80]	; 0x50
   b5778:	4401      	add	r1, r0
   b577a:	9114      	str	r1, [sp, #80]	; 0x50
   b577c:	9915      	ldr	r1, [sp, #84]	; 0x54
   b577e:	3101      	adds	r1, #1
   b5780:	9115      	str	r1, [sp, #84]	; 0x54
   b5782:	9919      	ldr	r1, [sp, #100]	; 0x64
   b5784:	1a09      	subs	r1, r1, r0
   b5786:	9119      	str	r1, [sp, #100]	; 0x64
   b5788:	9824      	ldr	r0, [sp, #144]	; 0x90
   b578a:	9910      	ldr	r1, [sp, #64]	; 0x40
   b578c:	4401      	add	r1, r0
   b578e:	9110      	str	r1, [sp, #64]	; 0x40
   b5790:	980c      	ldr	r0, [sp, #48]	; 0x30
   b5792:	990f      	ldr	r1, [sp, #60]	; 0x3c
   b5794:	1a09      	subs	r1, r1, r0
   b5796:	910f      	str	r1, [sp, #60]	; 0x3c
   b5798:	e7af      	b.n	b56fa <arm_depthwise_conv_3x3_s8+0x102>
                int32_t out_buff0 = bias[in_ch + 0];
   b579a:	9901      	ldr	r1, [sp, #4]
   b579c:	9f26      	ldr	r7, [sp, #152]	; 0x98
                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
   b579e:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
                int32_t out_buff1 = bias[in_ch + 1];
   b57a2:	e9d1 5400 	ldrd	r5, r4, [r1]
                int32_t out_buff3 = bias[in_ch + 3];
   b57a6:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
   b57aa:	9100      	str	r1, [sp, #0]
                const int8_t *input_ptr = input + (in_h + ker_h_start) * (input_ch * input_x) + in_w * input_ch + in_ch;
   b57ac:	4639      	mov	r1, r7
   b57ae:	9f04      	ldr	r7, [sp, #16]
   b57b0:	eb01 0e07 	add.w	lr, r1, r7
                const int8_t *kernel_ptr = kernel + ker_h_start * (input_ch * 3) + in_ch;
   b57b4:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
   b57b6:	4639      	mov	r1, r7
   b57b8:	9f04      	ldr	r7, [sp, #16]
   b57ba:	eb01 0807 	add.w	r8, r1, r7
                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
   b57be:	9920      	ldr	r1, [sp, #128]	; 0x80
   b57c0:	4549      	cmp	r1, r9
   b57c2:	f300 80df 	bgt.w	b5984 <arm_depthwise_conv_3x3_s8+0x38c>
                out_buff0 = arm_nn_requantize(out_buff0, output_mult[in_ch + 0], output_shift[in_ch + 0]);
   b57c6:	9902      	ldr	r1, [sp, #8]
   b57c8:	f8d1 c000 	ldr.w	ip, [r1]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b57cc:	ea2c 77ec 	bic.w	r7, ip, ip, asr #31
   b57d0:	40bd      	lsls	r5, r7
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b57d2:	6837      	ldr	r7, [r6, #0]
   b57d4:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
   b57d8:	f04f 0800 	mov.w	r8, #0
   b57dc:	fbc5 e807 	smlal	lr, r8, r5, r7
    result = (int32_t)(mult.long_long >> 31);
   b57e0:	ea4f 77de 	mov.w	r7, lr, lsr #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b57e4:	f1bc 0f00 	cmp.w	ip, #0
    result = (int32_t)(mult.long_long >> 31);
   b57e8:	ea47 0848 	orr.w	r8, r7, r8, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   b57ec:	f04f 0101 	mov.w	r1, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b57f0:	bfd4      	ite	le
   b57f2:	f1cc 0700 	rsble	r7, ip, #0
   b57f6:	2700      	movgt	r7, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   b57f8:	fa01 f507 	lsl.w	r5, r1, r7
   b57fc:	3d01      	subs	r5, #1
    if (result < 0)
   b57fe:	fa58 f707 	asrs.w	r7, r8, r7
    int32_t remainder = remainder_mask & dividend;
   b5802:	ea08 0e05 	and.w	lr, r8, r5
    q31_t threshold = remainder_mask >> 1;
   b5806:	fa45 f501 	asr.w	r5, r5, r1
        threshold++;
   b580a:	bf48      	it	mi
   b580c:	186d      	addmi	r5, r5, r1
                out_buff1 = arm_nn_requantize(out_buff1, output_mult[in_ch + 1], output_shift[in_ch + 1]);
   b580e:	9902      	ldr	r1, [sp, #8]
    if (remainder > threshold)
   b5810:	45ae      	cmp	lr, r5
   b5812:	f8d1 e004 	ldr.w	lr, [r1, #4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b5816:	ea2e 75ee 	bic.w	r5, lr, lr, asr #31
   b581a:	fa04 f405 	lsl.w	r4, r4, r5
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b581e:	6875      	ldr	r5, [r6, #4]
   b5820:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
   b5824:	f04f 0900 	mov.w	r9, #0
   b5828:	fbc4 8905 	smlal	r8, r9, r4, r5
    result = (int32_t)(mult.long_long >> 31);
   b582c:	ea4f 7cd8 	mov.w	ip, r8, lsr #31
        result++;
   b5830:	bfc8      	it	gt
   b5832:	3701      	addgt	r7, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b5834:	f1be 0f00 	cmp.w	lr, #0
    result = (int32_t)(mult.long_long >> 31);
   b5838:	ea4c 0949 	orr.w	r9, ip, r9, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   b583c:	f04f 0101 	mov.w	r1, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b5840:	bfd4      	ite	le
   b5842:	f1ce 0c00 	rsble	ip, lr, #0
   b5846:	f04f 0c00 	movgt.w	ip, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   b584a:	fa01 f40c 	lsl.w	r4, r1, ip
   b584e:	3c01      	subs	r4, #1
    if (result < 0)
   b5850:	fa59 fc0c 	asrs.w	ip, r9, ip
    int32_t remainder = remainder_mask & dividend;
   b5854:	ea09 0504 	and.w	r5, r9, r4
    q31_t threshold = remainder_mask >> 1;
   b5858:	fa44 f401 	asr.w	r4, r4, r1
        threshold++;
   b585c:	bf48      	it	mi
   b585e:	1864      	addmi	r4, r4, r1
                out_buff2 = arm_nn_requantize(out_buff2, output_mult[in_ch + 2], output_shift[in_ch + 2]);
   b5860:	9902      	ldr	r1, [sp, #8]
    if (remainder > threshold)
   b5862:	42a5      	cmp	r5, r4
   b5864:	688d      	ldr	r5, [r1, #8]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b5866:	ea25 74e5 	bic.w	r4, r5, r5, asr #31
   b586a:	fa00 f004 	lsl.w	r0, r0, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b586e:	68b4      	ldr	r4, [r6, #8]
        result++;
   b5870:	bfc8      	it	gt
   b5872:	f10c 0c01 	addgt.w	ip, ip, #1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b5876:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b587a:	2d00      	cmp	r5, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b587c:	f04f 0800 	mov.w	r8, #0
   b5880:	fbc0 e804 	smlal	lr, r8, r0, r4
    const q31_t remainder_mask = (1 << exponent) - 1;
   b5884:	f04f 0101 	mov.w	r1, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b5888:	bfd4      	ite	le
   b588a:	426d      	negle	r5, r5
   b588c:	2500      	movgt	r5, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   b588e:	fa01 f005 	lsl.w	r0, r1, r5
    result = (int32_t)(mult.long_long >> 31);
   b5892:	ea4f 7ede 	mov.w	lr, lr, lsr #31
   b5896:	ea4e 0848 	orr.w	r8, lr, r8, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   b589a:	3801      	subs	r0, #1
    if (result < 0)
   b589c:	fa58 f505 	asrs.w	r5, r8, r5
    int32_t remainder = remainder_mask & dividend;
   b58a0:	ea08 0400 	and.w	r4, r8, r0
    q31_t threshold = remainder_mask >> 1;
   b58a4:	fa40 f001 	asr.w	r0, r0, r1
        threshold++;
   b58a8:	bf48      	it	mi
   b58aa:	1840      	addmi	r0, r0, r1
                out_buff3 = arm_nn_requantize(out_buff3, output_mult[in_ch + 3], output_shift[in_ch + 3]);
   b58ac:	9902      	ldr	r1, [sp, #8]
    if (remainder > threshold)
   b58ae:	4284      	cmp	r4, r0
   b58b0:	68cc      	ldr	r4, [r1, #12]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b58b2:	9900      	ldr	r1, [sp, #0]
   b58b4:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   b58b8:	fa01 f100 	lsl.w	r1, r1, r0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b58bc:	68f0      	ldr	r0, [r6, #12]
   b58be:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
   b58c2:	f04f 0800 	mov.w	r8, #0
   b58c6:	fbc1 e800 	smlal	lr, r8, r1, r0
        result++;
   b58ca:	bfc8      	it	gt
   b58cc:	3501      	addgt	r5, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b58ce:	2c00      	cmp	r4, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b58d0:	4670      	mov	r0, lr
    const q31_t remainder_mask = (1 << exponent) - 1;
   b58d2:	f04f 0101 	mov.w	r1, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b58d6:	bfd4      	ite	le
   b58d8:	f1c4 0e00 	rsble	lr, r4, #0
   b58dc:	f04f 0e00 	movgt.w	lr, #0
    result = (int32_t)(mult.long_long >> 31);
   b58e0:	0fc0      	lsrs	r0, r0, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   b58e2:	fa01 f10e 	lsl.w	r1, r1, lr
    result = (int32_t)(mult.long_long >> 31);
   b58e6:	ea40 0848 	orr.w	r8, r0, r8, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   b58ea:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
   b58ec:	ea08 0401 	and.w	r4, r8, r1
    if (result < 0)
   b58f0:	fa58 f80e 	asrs.w	r8, r8, lr
    q31_t threshold = remainder_mask >> 1;
   b58f4:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
   b58f8:	bf48      	it	mi
   b58fa:	3101      	addmi	r1, #1
    if (remainder > threshold)
   b58fc:	428c      	cmp	r4, r1
                out_buff0 += output_offset;
   b58fe:	9905      	ldr	r1, [sp, #20]
   b5900:	440f      	add	r7, r1
                out_buff0 = MIN(MAX(out_buff0, output_activation_min), output_activation_max);
   b5902:	9906      	ldr	r1, [sp, #24]
        result++;
   b5904:	bfc8      	it	gt
   b5906:	f108 0801 	addgt.w	r8, r8, #1
   b590a:	428f      	cmp	r7, r1
   b590c:	bfb8      	it	lt
   b590e:	460f      	movlt	r7, r1
                out_buff1 += output_offset;
   b5910:	9905      	ldr	r1, [sp, #20]
   b5912:	448c      	add	ip, r1
                out_buff1 = MIN(MAX(out_buff1, output_activation_min), output_activation_max);
   b5914:	9906      	ldr	r1, [sp, #24]
   b5916:	458c      	cmp	ip, r1
   b5918:	bfb8      	it	lt
   b591a:	468c      	movlt	ip, r1
                out_buff2 += output_offset;
   b591c:	9905      	ldr	r1, [sp, #20]
   b591e:	440d      	add	r5, r1
                out_buff2 = MIN(MAX(out_buff2, output_activation_min), output_activation_max);
   b5920:	9906      	ldr	r1, [sp, #24]
   b5922:	428d      	cmp	r5, r1
   b5924:	bfb8      	it	lt
   b5926:	460d      	movlt	r5, r1
                out_buff3 += output_offset;
   b5928:	9905      	ldr	r1, [sp, #20]
   b592a:	4488      	add	r8, r1
                out_buff3 = MIN(MAX(out_buff3, output_activation_min), output_activation_max);
   b592c:	9906      	ldr	r1, [sp, #24]
   b592e:	4588      	cmp	r8, r1
   b5930:	bfb8      	it	lt
   b5932:	4688      	movlt	r8, r1
                out_buff0 = MIN(MAX(out_buff0, output_activation_min), output_activation_max);
   b5934:	9907      	ldr	r1, [sp, #28]
   b5936:	428f      	cmp	r7, r1
   b5938:	bfa8      	it	ge
   b593a:	460f      	movge	r7, r1
                output[out_idx++] = (int8_t)out_buff0;
   b593c:	9903      	ldr	r1, [sp, #12]
   b593e:	700f      	strb	r7, [r1, #0]
                out_buff1 = MIN(MAX(out_buff1, output_activation_min), output_activation_max);
   b5940:	9907      	ldr	r1, [sp, #28]
   b5942:	458c      	cmp	ip, r1
   b5944:	bfa8      	it	ge
   b5946:	468c      	movge	ip, r1
                output[out_idx++] = (int8_t)out_buff1;
   b5948:	9903      	ldr	r1, [sp, #12]
   b594a:	f881 c001 	strb.w	ip, [r1, #1]
                out_buff2 = MIN(MAX(out_buff2, output_activation_min), output_activation_max);
   b594e:	9907      	ldr	r1, [sp, #28]
   b5950:	428d      	cmp	r5, r1
   b5952:	bfa8      	it	ge
   b5954:	460d      	movge	r5, r1
                output[out_idx++] = (int8_t)out_buff2;
   b5956:	9903      	ldr	r1, [sp, #12]
   b5958:	708d      	strb	r5, [r1, #2]
                out_buff3 = MIN(MAX(out_buff3, output_activation_min), output_activation_max);
   b595a:	9907      	ldr	r1, [sp, #28]
   b595c:	4588      	cmp	r8, r1
   b595e:	bfa8      	it	ge
   b5960:	4688      	movge	r8, r1
                output[out_idx++] = (int8_t)out_buff3;
   b5962:	9903      	ldr	r1, [sp, #12]
   b5964:	f881 8003 	strb.w	r8, [r1, #3]
            for (; in_ch <= (input_ch - 4); in_ch += 4)
   b5968:	9904      	ldr	r1, [sp, #16]
   b596a:	3104      	adds	r1, #4
   b596c:	9104      	str	r1, [sp, #16]
   b596e:	9903      	ldr	r1, [sp, #12]
   b5970:	3104      	adds	r1, #4
   b5972:	9103      	str	r1, [sp, #12]
   b5974:	9902      	ldr	r1, [sp, #8]
   b5976:	3110      	adds	r1, #16
   b5978:	9102      	str	r1, [sp, #8]
   b597a:	9901      	ldr	r1, [sp, #4]
   b597c:	3110      	adds	r1, #16
   b597e:	3610      	adds	r6, #16
   b5980:	9101      	str	r1, [sp, #4]
   b5982:	e6e1      	b.n	b5748 <arm_depthwise_conv_3x3_s8+0x150>
                    if (ker_w_start == 0)
   b5984:	9f1e      	ldr	r7, [sp, #120]	; 0x78
   b5986:	b9ff      	cbnz	r7, b59c8 <arm_depthwise_conv_3x3_s8+0x3d0>
    memcpy(&val, in_q7, 4);
   b5988:	f8de 7000 	ldr.w	r7, [lr]
   b598c:	f8d8 c000 	ldr.w	ip, [r8]
                        out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
   b5990:	9900      	ldr	r1, [sp, #0]
                        out_buff0 += ((int8_t)in_val + input_offset) * (int8_t)ker_val;
   b5992:	fa42 fa87 	sxtab	sl, r2, r7
   b5996:	fa4f fb8c 	sxtb.w	fp, ip
   b599a:	fb0b 550a 	mla	r5, fp, sl, r5
                        out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
   b599e:	f347 2a07 	sbfx	sl, r7, #8, #8
   b59a2:	f34c 2b07 	sbfx	fp, ip, #8, #8
   b59a6:	4492      	add	sl, r2
   b59a8:	fb0b 440a 	mla	r4, fp, sl, r4
                        out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
   b59ac:	f347 4a07 	sbfx	sl, r7, #16, #8
   b59b0:	f34c 4b07 	sbfx	fp, ip, #16, #8
                        out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
   b59b4:	eb02 6727 	add.w	r7, r2, r7, asr #24
   b59b8:	ea4f 6c2c 	mov.w	ip, ip, asr #24
                        out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
   b59bc:	4492      	add	sl, r2
                        out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
   b59be:	fb0c 1107 	mla	r1, ip, r7, r1
                        out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
   b59c2:	fb0b 000a 	mla	r0, fp, sl, r0
                        out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
   b59c6:	9100      	str	r1, [sp, #0]
   b59c8:	f85e 7003 	ldr.w	r7, [lr, r3]
   b59cc:	f858 c003 	ldr.w	ip, [r8, r3]
                    out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
   b59d0:	9900      	ldr	r1, [sp, #0]
                    out_buff0 += ((int8_t)in_val + input_offset) * (int8_t)ker_val;
   b59d2:	fa42 fa87 	sxtab	sl, r2, r7
   b59d6:	fa4f fb8c 	sxtb.w	fp, ip
   b59da:	fb0b 550a 	mla	r5, fp, sl, r5
                    out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
   b59de:	f347 2a07 	sbfx	sl, r7, #8, #8
   b59e2:	f34c 2b07 	sbfx	fp, ip, #8, #8
   b59e6:	4492      	add	sl, r2
   b59e8:	fb0b 440a 	mla	r4, fp, sl, r4
                    out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
   b59ec:	f347 4a07 	sbfx	sl, r7, #16, #8
   b59f0:	f34c 4b07 	sbfx	fp, ip, #16, #8
                    out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
   b59f4:	eb02 6727 	add.w	r7, r2, r7, asr #24
   b59f8:	ea4f 6c2c 	mov.w	ip, ip, asr #24
   b59fc:	fb0c 1107 	mla	r1, ip, r7, r1
                    if ((input_x - in_w) >= 3)
   b5a00:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
                    out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
   b5a02:	9100      	str	r1, [sp, #0]
                    out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
   b5a04:	4492      	add	sl, r2
                    if ((input_x - in_w) >= 3)
   b5a06:	2f02      	cmp	r7, #2
                    out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
   b5a08:	fb0b 000a 	mla	r0, fp, sl, r0
                    if ((input_x - in_w) >= 3)
   b5a0c:	dd21      	ble.n	b5a52 <arm_depthwise_conv_3x3_s8+0x45a>
   b5a0e:	9908      	ldr	r1, [sp, #32]
   b5a10:	9f08      	ldr	r7, [sp, #32]
   b5a12:	f851 c008 	ldr.w	ip, [r1, r8]
   b5a16:	f857 700e 	ldr.w	r7, [r7, lr]
                        out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
   b5a1a:	9900      	ldr	r1, [sp, #0]
                        out_buff0 += ((int8_t)in_val + input_offset) * (int8_t)ker_val;
   b5a1c:	fa42 fa87 	sxtab	sl, r2, r7
   b5a20:	fa4f fb8c 	sxtb.w	fp, ip
   b5a24:	fb0b 550a 	mla	r5, fp, sl, r5
                        out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
   b5a28:	f347 2a07 	sbfx	sl, r7, #8, #8
   b5a2c:	f34c 2b07 	sbfx	fp, ip, #8, #8
   b5a30:	4492      	add	sl, r2
   b5a32:	fb0b 440a 	mla	r4, fp, sl, r4
                        out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
   b5a36:	f347 4a07 	sbfx	sl, r7, #16, #8
   b5a3a:	f34c 4b07 	sbfx	fp, ip, #16, #8
                        out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
   b5a3e:	eb02 6727 	add.w	r7, r2, r7, asr #24
   b5a42:	ea4f 6c2c 	mov.w	ip, ip, asr #24
                        out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
   b5a46:	4492      	add	sl, r2
                        out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
   b5a48:	fb0c 1107 	mla	r1, ip, r7, r1
                        out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
   b5a4c:	fb0b 000a 	mla	r0, fp, sl, r0
                        out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
   b5a50:	9100      	str	r1, [sp, #0]
                    input_ptr += (input_ch * input_x);
   b5a52:	9912      	ldr	r1, [sp, #72]	; 0x48
   b5a54:	448e      	add	lr, r1
                    kernel_ptr += (input_ch * 3);
   b5a56:	9917      	ldr	r1, [sp, #92]	; 0x5c
                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
   b5a58:	f109 0901 	add.w	r9, r9, #1
                    kernel_ptr += (input_ch * 3);
   b5a5c:	4488      	add	r8, r1
                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
   b5a5e:	e6ae      	b.n	b57be <arm_depthwise_conv_3x3_s8+0x1c6>
                int32_t out_buff = bias[in_ch];
   b5a60:	9836      	ldr	r0, [sp, #216]	; 0xd8
   b5a62:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   b5a64:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
   b5a68:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   b5a6a:	eb08 0401 	add.w	r4, r8, r1
                const int8_t *kernel_ptr = kernel + ker_h_start * (input_ch * 3) + in_ch;
   b5a6e:	440d      	add	r5, r1
                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
   b5a70:	9f20      	ldr	r7, [sp, #128]	; 0x80
   b5a72:	42b7      	cmp	r7, r6
   b5a74:	dc30      	bgt.n	b5ad8 <arm_depthwise_conv_3x3_s8+0x4e0>
                out_buff = arm_nn_requantize(out_buff, output_mult[in_ch], output_shift[in_ch]);
   b5a76:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
   b5a78:	f854 6021 	ldr.w	r6, [r4, r1, lsl #2]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b5a7c:	ea26 74e6 	bic.w	r4, r6, r6, asr #31
   b5a80:	40a0      	lsls	r0, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b5a82:	9c1c      	ldr	r4, [sp, #112]	; 0x70
   b5a84:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b5a88:	2e00      	cmp	r6, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b5a8a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b5a8e:	f04f 0700 	mov.w	r7, #0
   b5a92:	fbc0 5704 	smlal	r5, r7, r0, r4
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b5a96:	bfd4      	ite	le
   b5a98:	4276      	negle	r6, r6
   b5a9a:	2600      	movgt	r6, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   b5a9c:	2001      	movs	r0, #1
    result = (int32_t)(mult.long_long >> 31);
   b5a9e:	0fed      	lsrs	r5, r5, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   b5aa0:	40b0      	lsls	r0, r6
    result = (int32_t)(mult.long_long >> 31);
   b5aa2:	ea45 0747 	orr.w	r7, r5, r7, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   b5aa6:	3801      	subs	r0, #1
    int32_t remainder = remainder_mask & dividend;
   b5aa8:	ea07 0400 	and.w	r4, r7, r0
    if (result < 0)
   b5aac:	4137      	asrs	r7, r6
    q31_t threshold = remainder_mask >> 1;
   b5aae:	ea4f 0060 	mov.w	r0, r0, asr #1
        threshold++;
   b5ab2:	bf48      	it	mi
   b5ab4:	3001      	addmi	r0, #1
    if (remainder > threshold)
   b5ab6:	4284      	cmp	r4, r0
                out_buff += output_offset;
   b5ab8:	9805      	ldr	r0, [sp, #20]
        result++;
   b5aba:	bfc8      	it	gt
   b5abc:	3701      	addgt	r7, #1
   b5abe:	4407      	add	r7, r0
                out_buff = MIN(MAX(out_buff, output_activation_min), output_activation_max);
   b5ac0:	9806      	ldr	r0, [sp, #24]
   b5ac2:	4287      	cmp	r7, r0
   b5ac4:	bfb8      	it	lt
   b5ac6:	4607      	movlt	r7, r0
   b5ac8:	9807      	ldr	r0, [sp, #28]
   b5aca:	4287      	cmp	r7, r0
   b5acc:	bfa8      	it	ge
   b5ace:	4607      	movge	r7, r0
                output[out_idx++] = (int8_t)out_buff;
   b5ad0:	f80e 7b01 	strb.w	r7, [lr], #1
            for (; in_ch < input_ch; ++in_ch)
   b5ad4:	3101      	adds	r1, #1
   b5ad6:	e647      	b.n	b5768 <arm_depthwise_conv_3x3_s8+0x170>
                    if (ker_w_start == 0)
   b5ad8:	9f1e      	ldr	r7, [sp, #120]	; 0x78
   b5ada:	b937      	cbnz	r7, b5aea <arm_depthwise_conv_3x3_s8+0x4f2>
                        out_buff += (*(input_ptr) + input_offset) * *(kernel_ptr);
   b5adc:	f994 7000 	ldrsb.w	r7, [r4]
   b5ae0:	f995 9000 	ldrsb.w	r9, [r5]
   b5ae4:	4417      	add	r7, r2
   b5ae6:	fb09 0007 	mla	r0, r9, r7, r0
                    out_buff += (*(input_ptr + input_ch) + input_offset) * *(kernel_ptr + input_ch);
   b5aea:	56e7      	ldrsb	r7, [r4, r3]
   b5aec:	f915 9003 	ldrsb.w	r9, [r5, r3]
   b5af0:	4417      	add	r7, r2
   b5af2:	fb09 0007 	mla	r0, r9, r7, r0
                    if ((input_x - in_w) >= 3)
   b5af6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   b5af8:	2f02      	cmp	r7, #2
   b5afa:	dd08      	ble.n	b5b0e <arm_depthwise_conv_3x3_s8+0x516>
                        out_buff += (*(input_ptr + (input_ch << 1)) + input_offset) * *(kernel_ptr + (input_ch << 1));
   b5afc:	9f08      	ldr	r7, [sp, #32]
   b5afe:	57e7      	ldrsb	r7, [r4, r7]
   b5b00:	eb07 0a02 	add.w	sl, r7, r2
   b5b04:	9f08      	ldr	r7, [sp, #32]
   b5b06:	f915 9007 	ldrsb.w	r9, [r5, r7]
   b5b0a:	fb09 000a 	mla	r0, r9, sl, r0
                    input_ptr += (input_ch * input_x);
   b5b0e:	9f12      	ldr	r7, [sp, #72]	; 0x48
   b5b10:	443c      	add	r4, r7
                    kernel_ptr += (input_ch * 3);
   b5b12:	9f17      	ldr	r7, [sp, #92]	; 0x5c
                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
   b5b14:	3601      	adds	r6, #1
                    kernel_ptr += (input_ch * 3);
   b5b16:	443d      	add	r5, r7
                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
   b5b18:	e7aa      	b.n	b5a70 <arm_depthwise_conv_3x3_s8+0x478>
        return ARM_MATH_SIZE_MISMATCH;
   b5b1a:	f06f 0002 	mvn.w	r0, #2
   b5b1e:	e5c7      	b.n	b56b0 <arm_depthwise_conv_3x3_s8+0xb8>
        return ARM_MATH_ARGUMENT_ERROR;
   b5b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b5b24:	e5c4      	b.n	b56b0 <arm_depthwise_conv_3x3_s8+0xb8>

000b5b26 <arm_convolve_1x1_s8_fast>:
                                    const q7_t *filter_data,
                                    const cmsis_nn_dims *bias_dims,
                                    const int32_t *bias_data,
                                    const cmsis_nn_dims *output_dims,
                                    q7_t *output_data)
{
   b5b26:	b530      	push	{r4, r5, lr}
    if (input_dims->c % 4 != 0 || conv_params->padding.w != 0 || conv_params->padding.h != 0 ||
   b5b28:	68d8      	ldr	r0, [r3, #12]
   b5b2a:	0784      	lsls	r4, r0, #30
{
   b5b2c:	b08b      	sub	sp, #44	; 0x2c
    if (input_dims->c % 4 != 0 || conv_params->padding.w != 0 || conv_params->padding.h != 0 ||
   b5b2e:	d128      	bne.n	b5b82 <arm_convolve_1x1_s8_fast+0x5c>
   b5b30:	690c      	ldr	r4, [r1, #16]
   b5b32:	bb34      	cbnz	r4, b5b82 <arm_convolve_1x1_s8_fast+0x5c>
   b5b34:	694c      	ldr	r4, [r1, #20]
   b5b36:	bb24      	cbnz	r4, b5b82 <arm_convolve_1x1_s8_fast+0x5c>
   b5b38:	688d      	ldr	r5, [r1, #8]
   b5b3a:	2d01      	cmp	r5, #1
   b5b3c:	d121      	bne.n	b5b82 <arm_convolve_1x1_s8_fast+0x5c>
        conv_params->stride.w != 1 || conv_params->stride.h != 1)
   b5b3e:	68cd      	ldr	r5, [r1, #12]
   b5b40:	2d01      	cmp	r5, #1
   b5b42:	d11e      	bne.n	b5b82 <arm_convolve_1x1_s8_fast+0x5c>

    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
    const int32_t rhs_rows = output_dims->c;
    const int32_t rhs_cols = input_dims->c;

    arm_nn_mat_mult_nt_t_s8(input_data,
   b5b44:	6a4d      	ldr	r5, [r1, #36]	; 0x24
   b5b46:	9508      	str	r5, [sp, #32]
   b5b48:	6a0d      	ldr	r5, [r1, #32]
   b5b4a:	9507      	str	r5, [sp, #28]
   b5b4c:	684d      	ldr	r5, [r1, #4]
   b5b4e:	9506      	str	r5, [sp, #24]
   b5b50:	6809      	ldr	r1, [r1, #0]
   b5b52:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b5b56:	9913      	ldr	r1, [sp, #76]	; 0x4c
   b5b58:	68c9      	ldr	r1, [r1, #12]
   b5b5a:	9103      	str	r1, [sp, #12]
    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
   b5b5c:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
   b5b60:	681b      	ldr	r3, [r3, #0]
   b5b62:	4341      	muls	r1, r0
   b5b64:	4359      	muls	r1, r3
    arm_nn_mat_mult_nt_t_s8(input_data,
   b5b66:	9102      	str	r1, [sp, #8]
   b5b68:	6853      	ldr	r3, [r2, #4]
   b5b6a:	9301      	str	r3, [sp, #4]
   b5b6c:	6813      	ldr	r3, [r2, #0]
   b5b6e:	9300      	str	r3, [sp, #0]
   b5b70:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b5b72:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b5b74:	9910      	ldr	r1, [sp, #64]	; 0x40
   b5b76:	980e      	ldr	r0, [sp, #56]	; 0x38
   b5b78:	f7fe fad0 	bl	b411c <arm_nn_mat_mult_nt_t_s8>
                            conv_params->activation.max);

#endif

    /* Return to application */
    return ARM_MATH_SUCCESS;
   b5b7c:	4620      	mov	r0, r4
}
   b5b7e:	b00b      	add	sp, #44	; 0x2c
   b5b80:	bd30      	pop	{r4, r5, pc}
        return ARM_MATH_SIZE_MISMATCH;
   b5b82:	f06f 0002 	mvn.w	r0, #2
   b5b86:	e7fa      	b.n	b5b7e <arm_convolve_1x1_s8_fast+0x58>

000b5b88 <arm_convolve_1x1_s8_fast_get_buffer_size>:

int32_t arm_convolve_1x1_s8_fast_get_buffer_size(const cmsis_nn_dims *input_dims)
{
    (void)input_dims;
    return 0;
}
   b5b88:	2000      	movs	r0, #0
   b5b8a:	4770      	bx	lr

000b5b8c <arm_nn_mat_mult_kernel_s8_s16>:
                                    const int16_t activation_min,
                                    const int16_t activation_max,
                                    const uint16_t num_col_a,
                                    const int32_t *const output_bias,
                                    q7_t *out_0)
{
   b5b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5b90:	b097      	sub	sp, #92	; 0x5c
   b5b92:	468b      	mov	fp, r1
   b5b94:	9303      	str	r3, [sp, #12]
   b5b96:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
   b5b9a:	9304      	str	r3, [sp, #16]
   b5b9c:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
   b5ba0:	9305      	str	r3, [sp, #20]
   b5ba2:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
   b5ba6:	9301      	str	r3, [sp, #4]

    return out_1;

#elif defined(ARM_MATH_DSP)
    /* set up the second output pointers */
    q7_t *out_1 = out_0 + output_ch;
   b5ba8:	9b26      	ldr	r3, [sp, #152]	; 0x98
{
   b5baa:	9207      	str	r2, [sp, #28]
    q7_t *out_1 = out_0 + output_ch;
   b5bac:	4413      	add	r3, r2
   b5bae:	9309      	str	r3, [sp, #36]	; 0x24
    /* this loop over rows in A */
    while (row_count)
    {
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
        const q15_t *ip_b1 = ip_b0 + num_col_a;
   b5bb0:	9b01      	ldr	r3, [sp, #4]
{
   b5bb2:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   b5bb6:	900b      	str	r0, [sp, #44]	; 0x2c
        const q15_t *ip_b1 = ip_b0 + num_col_a;
   b5bb8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   b5bbc:	9302      	str	r3, [sp, #8]
   b5bbe:	9b01      	ldr	r3, [sp, #4]
   b5bc0:	f003 0303 	and.w	r3, r3, #3
   b5bc4:	930f      	str	r3, [sp, #60]	; 0x3c
   b5bc6:	9b01      	ldr	r3, [sp, #4]
   b5bc8:	990f      	ldr	r1, [sp, #60]	; 0x3c
   b5bca:	089b      	lsrs	r3, r3, #2
   b5bcc:	009a      	lsls	r2, r3, #2
   b5bce:	9213      	str	r2, [sp, #76]	; 0x4c
   b5bd0:	9a01      	ldr	r2, [sp, #4]
   b5bd2:	1851      	adds	r1, r2, r1
   b5bd4:	eb01 0283 	add.w	r2, r1, r3, lsl #2
   b5bd8:	920a      	str	r2, [sp, #40]	; 0x28
   b5bda:	eb00 0283 	add.w	r2, r0, r3, lsl #2
   b5bde:	9206      	str	r2, [sp, #24]
   b5be0:	9a07      	ldr	r2, [sp, #28]
   b5be2:	0852      	lsrs	r2, r2, #1
   b5be4:	9214      	str	r2, [sp, #80]	; 0x50
   b5be6:	eb0b 02c3 	add.w	r2, fp, r3, lsl #3
   b5bea:	920c      	str	r2, [sp, #48]	; 0x30
   b5bec:	9a02      	ldr	r2, [sp, #8]
   b5bee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   b5bf2:	9308      	str	r3, [sp, #32]
    const q7_t *ip_a0 = input_a;
   b5bf4:	4606      	mov	r6, r0
    while (row_count)
   b5bf6:	2201      	movs	r2, #1
   b5bf8:	2300      	movs	r3, #0
   b5bfa:	9914      	ldr	r1, [sp, #80]	; 0x50
   b5bfc:	428b      	cmp	r3, r1
   b5bfe:	f040 8086 	bne.w	b5d0e <arm_nn_mat_mult_kernel_s8_s16+0x182>
   b5c02:	9a26      	ldr	r2, [sp, #152]	; 0x98
   b5c04:	eb02 0043 	add.w	r0, r2, r3, lsl #1
   b5c08:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   b5c0c:	fb03 2101 	mla	r1, r3, r1, r2
        ip_a0 += num_col_a;
        row_count--;
    }

    /* compute the last odd numbered row if any */
    if (output_ch & 0x1)
   b5c10:	9a07      	ldr	r2, [sp, #28]
   b5c12:	07d2      	lsls	r2, r2, #31
   b5c14:	ea4f 04c3 	mov.w	r4, r3, lsl #3
   b5c18:	ea4f 0843 	mov.w	r8, r3, lsl #1
   b5c1c:	d572      	bpl.n	b5d04 <arm_nn_mat_mult_kernel_s8_s16+0x178>
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
        const q15_t *ip_b1 = ip_b0 + num_col_a;

        /* load the bias */
        q31_t ch_0_out_0 = *bias;
   b5c1e:	9a25      	ldr	r2, [sp, #148]	; 0x94
   b5c20:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
        q31_t ch_0_out_1 = *bias++;

        uint16_t col_count = num_col_a >> 2;
        while (col_count)
   b5c24:	460e      	mov	r6, r1
        q31_t ch_0_out_1 = *bias++;
   b5c26:	4694      	mov	ip, r2
        while (col_count)
   b5c28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b5c2a:	455b      	cmp	r3, fp
   b5c2c:	f040 81ae 	bne.w	b5f8c <arm_nn_mat_mult_kernel_s8_s16+0x400>
   b5c30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b5c32:	4419      	add	r1, r3
            ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);

            col_count--;
        }
        col_count = num_col_a & 0x3;
        while (col_count)
   b5c34:	9b01      	ldr	r3, [sp, #4]
   b5c36:	f003 0303 	and.w	r3, r3, #3
   b5c3a:	440b      	add	r3, r1
   b5c3c:	428b      	cmp	r3, r1
   b5c3e:	f040 81c7 	bne.w	b5fd0 <arm_nn_mat_mult_kernel_s8_s16+0x444>

            ch_0_out_0 += a0 * b0;
            ch_0_out_1 += a0 * b1;
            col_count--;
        }
        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
   b5c42:	9b03      	ldr	r3, [sp, #12]
   b5c44:	591f      	ldr	r7, [r3, r4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b5c46:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b5c4a:	2600      	movs	r6, #0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b5c4c:	409a      	lsls	r2, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b5c4e:	f85a 3004 	ldr.w	r3, [sl, r4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b5c52:	42b7      	cmp	r7, r6
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b5c54:	46b6      	mov	lr, r6
   b5c56:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   b5c5a:	fbc2 1e03 	smlal	r1, lr, r2, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b5c5e:	bfd8      	it	le
   b5c60:	427e      	negle	r6, r7
    const q31_t remainder_mask = (1 << exponent) - 1;
   b5c62:	2301      	movs	r3, #1
    result = (int32_t)(mult.long_long >> 31);
   b5c64:	0fc9      	lsrs	r1, r1, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   b5c66:	40b3      	lsls	r3, r6
    result = (int32_t)(mult.long_long >> 31);
   b5c68:	ea41 0e4e 	orr.w	lr, r1, lr, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   b5c6c:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
   b5c6e:	ea0e 0203 	and.w	r2, lr, r3
    if (result < 0)
   b5c72:	fa5e fe06 	asrs.w	lr, lr, r6
    q31_t threshold = remainder_mask >> 1;
   b5c76:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
   b5c7a:	bf48      	it	mi
   b5c7c:	3301      	addmi	r3, #1
    if (remainder > threshold)
   b5c7e:	429a      	cmp	r2, r3
        ch_0_out_0 += out_offset;
   b5c80:	9b21      	ldr	r3, [sp, #132]	; 0x84
        result++;
   b5c82:	bfc8      	it	gt
   b5c84:	f10e 0e01 	addgt.w	lr, lr, #1
   b5c88:	449e      	add	lr, r3
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
   b5c8a:	9b04      	ldr	r3, [sp, #16]
   b5c8c:	459e      	cmp	lr, r3
   b5c8e:	bfb8      	it	lt
   b5c90:	469e      	movlt	lr, r3
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
   b5c92:	9b05      	ldr	r3, [sp, #20]
   b5c94:	459e      	cmp	lr, r3
   b5c96:	bfa8      	it	ge
   b5c98:	469e      	movge	lr, r3
        *out_0++ = (q7_t)ch_0_out_0;
   b5c9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   b5c9c:	f803 e008 	strb.w	lr, [r3, r8]

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
   b5ca0:	9b03      	ldr	r3, [sp, #12]
   b5ca2:	591e      	ldr	r6, [r3, r4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b5ca4:	f85a 4004 	ldr.w	r4, [sl, r4]
   b5ca8:	2200      	movs	r2, #0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b5caa:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b5cae:	4617      	mov	r7, r2
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b5cb0:	fa0c f303 	lsl.w	r3, ip, r3
   b5cb4:	4296      	cmp	r6, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b5cb6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   b5cba:	fbc3 1704 	smlal	r1, r7, r3, r4
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b5cbe:	bfd8      	it	le
   b5cc0:	4272      	negle	r2, r6
    const q31_t remainder_mask = (1 << exponent) - 1;
   b5cc2:	2301      	movs	r3, #1
   b5cc4:	4093      	lsls	r3, r2
    result = (int32_t)(mult.long_long >> 31);
   b5cc6:	0fc9      	lsrs	r1, r1, #31
   b5cc8:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   b5ccc:	3b01      	subs	r3, #1
    if (result < 0)
   b5cce:	fa51 f202 	asrs.w	r2, r1, r2
    int32_t remainder = remainder_mask & dividend;
   b5cd2:	ea01 0403 	and.w	r4, r1, r3
    q31_t threshold = remainder_mask >> 1;
   b5cd6:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
   b5cda:	bf48      	it	mi
   b5cdc:	3301      	addmi	r3, #1
    if (remainder > threshold)
   b5cde:	429c      	cmp	r4, r3
        ch_0_out_1 += out_offset;
   b5ce0:	9b21      	ldr	r3, [sp, #132]	; 0x84
        result++;
   b5ce2:	bfc8      	it	gt
   b5ce4:	3201      	addgt	r2, #1
   b5ce6:	4413      	add	r3, r2
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
   b5ce8:	9a04      	ldr	r2, [sp, #16]
   b5cea:	429a      	cmp	r2, r3
   b5cec:	bfb8      	it	lt
   b5cee:	461a      	movlt	r2, r3
   b5cf0:	4613      	mov	r3, r2
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
   b5cf2:	9a05      	ldr	r2, [sp, #20]
   b5cf4:	429a      	cmp	r2, r3
   b5cf6:	bfa8      	it	ge
   b5cf8:	461a      	movge	r2, r3
   b5cfa:	4613      	mov	r3, r2
        *out_1++ = (q7_t)ch_0_out_1;
   b5cfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b5cfe:	f802 3008 	strb.w	r3, [r2, r8]
        *out_0++ = (q7_t)ch_0_out_0;
   b5d02:	3001      	adds	r0, #1
    (void)output_bias;
    (void)out_0;
    /* To be completed */
    return NULL;
#endif
}
   b5d04:	9b07      	ldr	r3, [sp, #28]
   b5d06:	4418      	add	r0, r3
   b5d08:	b017      	add	sp, #92	; 0x5c
   b5d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        const q7_t *ip_a1 = ip_a0 + num_col_a;
   b5d0e:	9901      	ldr	r1, [sp, #4]
        const q15_t *ip_b1 = ip_b0 + num_col_a;
   b5d10:	9f02      	ldr	r7, [sp, #8]
   b5d12:	9615      	str	r6, [sp, #84]	; 0x54
   b5d14:	1871      	adds	r1, r6, r1
   b5d16:	910d      	str	r1, [sp, #52]	; 0x34
        q31_t ch_0_out_0 = *bias;
   b5d18:	9925      	ldr	r1, [sp, #148]	; 0x94
        const q15_t *ip_b0 = input_b;
   b5d1a:	f8cd b000 	str.w	fp, [sp]
        q31_t ch_0_out_0 = *bias;
   b5d1e:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
        q31_t ch_1_out_0 = *bias;
   b5d22:	f851 e022 	ldr.w	lr, [r1, r2, lsl #2]
        q31_t ch_0_out_1 = *bias++;
   b5d26:	4604      	mov	r4, r0
        q31_t ch_1_out_1 = *bias++;
   b5d28:	46f0      	mov	r8, lr
        while (col_count)
   b5d2a:	990c      	ldr	r1, [sp, #48]	; 0x30
   b5d2c:	9d00      	ldr	r5, [sp, #0]
   b5d2e:	42a9      	cmp	r1, r5
   b5d30:	f040 80d4 	bne.w	b5edc <arm_nn_mat_mult_kernel_s8_s16+0x350>
   b5d34:	9906      	ldr	r1, [sp, #24]
   b5d36:	9d01      	ldr	r5, [sp, #4]
        while (col_count)
   b5d38:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   b5d3a:	440d      	add	r5, r1
   b5d3c:	950d      	str	r5, [sp, #52]	; 0x34
   b5d3e:	9d08      	ldr	r5, [sp, #32]
   b5d40:	462f      	mov	r7, r5
   b5d42:	460d      	mov	r5, r1
   b5d44:	4435      	add	r5, r6
   b5d46:	9510      	str	r5, [sp, #64]	; 0x40
   b5d48:	9d10      	ldr	r5, [sp, #64]	; 0x40
   b5d4a:	42a9      	cmp	r1, r5
   b5d4c:	f040 8105 	bne.w	b5f5a <arm_nn_mat_mult_kernel_s8_s16+0x3ce>
        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
   b5d50:	9903      	ldr	r1, [sp, #12]
   b5d52:	f851 6033 	ldr.w	r6, [r1, r3, lsl #3]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b5d56:	ea26 71e6 	bic.w	r1, r6, r6, asr #31
   b5d5a:	4088      	lsls	r0, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b5d5c:	f85a 1033 	ldr.w	r1, [sl, r3, lsl #3]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b5d60:	2e00      	cmp	r6, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b5d62:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b5d66:	f04f 0700 	mov.w	r7, #0
   b5d6a:	fbc0 5701 	smlal	r5, r7, r0, r1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b5d6e:	bfd4      	ite	le
   b5d70:	4276      	negle	r6, r6
   b5d72:	2600      	movgt	r6, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   b5d74:	2101      	movs	r1, #1
    result = (int32_t)(mult.long_long >> 31);
   b5d76:	0fed      	lsrs	r5, r5, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   b5d78:	40b1      	lsls	r1, r6
    result = (int32_t)(mult.long_long >> 31);
   b5d7a:	ea45 0747 	orr.w	r7, r5, r7, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   b5d7e:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
   b5d80:	ea07 0001 	and.w	r0, r7, r1
    if (result < 0)
   b5d84:	4137      	asrs	r7, r6
    q31_t threshold = remainder_mask >> 1;
   b5d86:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
   b5d8a:	bf48      	it	mi
   b5d8c:	3101      	addmi	r1, #1
    if (remainder > threshold)
   b5d8e:	4288      	cmp	r0, r1
        ch_0_out_0 += out_offset;
   b5d90:	9921      	ldr	r1, [sp, #132]	; 0x84
        result++;
   b5d92:	bfc8      	it	gt
   b5d94:	3701      	addgt	r7, #1
   b5d96:	440f      	add	r7, r1
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
   b5d98:	9904      	ldr	r1, [sp, #16]
   b5d9a:	428f      	cmp	r7, r1
   b5d9c:	bfb8      	it	lt
   b5d9e:	460f      	movlt	r7, r1
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
   b5da0:	9905      	ldr	r1, [sp, #20]
   b5da2:	428f      	cmp	r7, r1
   b5da4:	bfa8      	it	ge
   b5da6:	460f      	movge	r7, r1
        *out_0++ = (q7_t)ch_0_out_0;
   b5da8:	9926      	ldr	r1, [sp, #152]	; 0x98
   b5daa:	f801 7013 	strb.w	r7, [r1, r3, lsl #1]
        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
   b5dae:	9903      	ldr	r1, [sp, #12]
   b5db0:	f851 5033 	ldr.w	r5, [r1, r3, lsl #3]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b5db4:	ea25 71e5 	bic.w	r1, r5, r5, asr #31
   b5db8:	408c      	lsls	r4, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b5dba:	f85a 1033 	ldr.w	r1, [sl, r3, lsl #3]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b5dbe:	2d00      	cmp	r5, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b5dc0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   b5dc4:	f04f 0600 	mov.w	r6, #0
   b5dc8:	fbc4 0601 	smlal	r0, r6, r4, r1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b5dcc:	bfd4      	ite	le
   b5dce:	426d      	negle	r5, r5
   b5dd0:	2500      	movgt	r5, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   b5dd2:	2101      	movs	r1, #1
    result = (int32_t)(mult.long_long >> 31);
   b5dd4:	0fc0      	lsrs	r0, r0, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   b5dd6:	40a9      	lsls	r1, r5
    result = (int32_t)(mult.long_long >> 31);
   b5dd8:	ea40 0646 	orr.w	r6, r0, r6, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   b5ddc:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
   b5dde:	ea06 0401 	and.w	r4, r6, r1
    if (result < 0)
   b5de2:	412e      	asrs	r6, r5
    q31_t threshold = remainder_mask >> 1;
   b5de4:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
   b5de8:	bf48      	it	mi
   b5dea:	3101      	addmi	r1, #1
    if (remainder > threshold)
   b5dec:	428c      	cmp	r4, r1
        ch_0_out_1 += out_offset;
   b5dee:	9921      	ldr	r1, [sp, #132]	; 0x84
        result++;
   b5df0:	bfc8      	it	gt
   b5df2:	3601      	addgt	r6, #1
   b5df4:	440e      	add	r6, r1
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
   b5df6:	9904      	ldr	r1, [sp, #16]
   b5df8:	428e      	cmp	r6, r1
   b5dfa:	bfb8      	it	lt
   b5dfc:	460e      	movlt	r6, r1
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
   b5dfe:	9905      	ldr	r1, [sp, #20]
   b5e00:	428e      	cmp	r6, r1
   b5e02:	bfa8      	it	ge
   b5e04:	460e      	movge	r6, r1
        *out_1++ = (q7_t)ch_0_out_1;
   b5e06:	9909      	ldr	r1, [sp, #36]	; 0x24
   b5e08:	f801 6013 	strb.w	r6, [r1, r3, lsl #1]
        ch_1_out_0 = arm_nn_requantize(ch_1_out_0, *out_mult, *out_shift);
   b5e0c:	9903      	ldr	r1, [sp, #12]
   b5e0e:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b5e12:	f85a 1022 	ldr.w	r1, [sl, r2, lsl #2]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b5e16:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
   b5e1a:	2c00      	cmp	r4, #0
   b5e1c:	fa0e fc0c 	lsl.w	ip, lr, ip
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b5e20:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   b5e24:	f04f 0500 	mov.w	r5, #0
   b5e28:	fbcc 0501 	smlal	r0, r5, ip, r1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b5e2c:	bfd4      	ite	le
   b5e2e:	4264      	negle	r4, r4
   b5e30:	2400      	movgt	r4, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   b5e32:	2101      	movs	r1, #1
    result = (int32_t)(mult.long_long >> 31);
   b5e34:	0fc0      	lsrs	r0, r0, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   b5e36:	40a1      	lsls	r1, r4
    result = (int32_t)(mult.long_long >> 31);
   b5e38:	ea40 0545 	orr.w	r5, r0, r5, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   b5e3c:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
   b5e3e:	ea05 0601 	and.w	r6, r5, r1
    if (result < 0)
   b5e42:	4125      	asrs	r5, r4
    q31_t threshold = remainder_mask >> 1;
   b5e44:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
   b5e48:	bf48      	it	mi
   b5e4a:	3101      	addmi	r1, #1
    if (remainder > threshold)
   b5e4c:	428e      	cmp	r6, r1
        ch_1_out_0 += out_offset;
   b5e4e:	9921      	ldr	r1, [sp, #132]	; 0x84
        result++;
   b5e50:	bfc8      	it	gt
   b5e52:	3501      	addgt	r5, #1
   b5e54:	440d      	add	r5, r1
        ch_1_out_0 = MAX(ch_1_out_0, activation_min);
   b5e56:	9904      	ldr	r1, [sp, #16]
   b5e58:	428d      	cmp	r5, r1
   b5e5a:	bfb8      	it	lt
   b5e5c:	460d      	movlt	r5, r1
        ch_1_out_0 = MIN(ch_1_out_0, activation_max);
   b5e5e:	9905      	ldr	r1, [sp, #20]
   b5e60:	428d      	cmp	r5, r1
   b5e62:	bfa8      	it	ge
   b5e64:	460d      	movge	r5, r1
        *out_0++ = (q7_t)ch_1_out_0;
   b5e66:	9926      	ldr	r1, [sp, #152]	; 0x98
   b5e68:	548d      	strb	r5, [r1, r2]
        ch_1_out_1 = arm_nn_requantize(ch_1_out_1, *out_mult, *out_shift);
   b5e6a:	9903      	ldr	r1, [sp, #12]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b5e6c:	f85a 0022 	ldr.w	r0, [sl, r2, lsl #2]
   b5e70:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b5e74:	ea25 71e5 	bic.w	r1, r5, r5, asr #31
   b5e78:	2d00      	cmp	r5, #0
   b5e7a:	fa08 f101 	lsl.w	r1, r8, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b5e7e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   b5e82:	f04f 0600 	mov.w	r6, #0
   b5e86:	fbc1 4600 	smlal	r4, r6, r1, r0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b5e8a:	bfd4      	ite	le
   b5e8c:	426d      	negle	r5, r5
   b5e8e:	2500      	movgt	r5, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   b5e90:	2101      	movs	r1, #1
    result = (int32_t)(mult.long_long >> 31);
   b5e92:	0fe4      	lsrs	r4, r4, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   b5e94:	40a9      	lsls	r1, r5
    result = (int32_t)(mult.long_long >> 31);
   b5e96:	ea44 0646 	orr.w	r6, r4, r6, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   b5e9a:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
   b5e9c:	ea06 0001 	and.w	r0, r6, r1
    if (result < 0)
   b5ea0:	412e      	asrs	r6, r5
    q31_t threshold = remainder_mask >> 1;
   b5ea2:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
   b5ea6:	bf48      	it	mi
   b5ea8:	3101      	addmi	r1, #1
    if (remainder > threshold)
   b5eaa:	4288      	cmp	r0, r1
        ch_1_out_1 += out_offset;
   b5eac:	9921      	ldr	r1, [sp, #132]	; 0x84
        result++;
   b5eae:	bfc8      	it	gt
   b5eb0:	3601      	addgt	r6, #1
   b5eb2:	440e      	add	r6, r1
        ch_1_out_1 = MAX(ch_1_out_1, activation_min);
   b5eb4:	9904      	ldr	r1, [sp, #16]
   b5eb6:	428e      	cmp	r6, r1
   b5eb8:	bfb8      	it	lt
   b5eba:	460e      	movlt	r6, r1
        ch_1_out_1 = MIN(ch_1_out_1, activation_max);
   b5ebc:	9905      	ldr	r1, [sp, #20]
   b5ebe:	428e      	cmp	r6, r1
   b5ec0:	bfa8      	it	ge
   b5ec2:	460e      	movge	r6, r1
        *out_1++ = (q7_t)ch_1_out_1;
   b5ec4:	9909      	ldr	r1, [sp, #36]	; 0x24
   b5ec6:	548e      	strb	r6, [r1, r2]
        ip_a0 += num_col_a;
   b5ec8:	9915      	ldr	r1, [sp, #84]	; 0x54
   b5eca:	980a      	ldr	r0, [sp, #40]	; 0x28
   b5ecc:	4401      	add	r1, r0
   b5ece:	460e      	mov	r6, r1
        row_count--;
   b5ed0:	9906      	ldr	r1, [sp, #24]
   b5ed2:	4401      	add	r1, r0
   b5ed4:	3301      	adds	r3, #1
   b5ed6:	9106      	str	r1, [sp, #24]
   b5ed8:	3202      	adds	r2, #2
   b5eda:	e68e      	b.n	b5bfa <arm_nn_mat_mult_kernel_s8_s16+0x6e>
    memcpy(&val, *in_q15, 4);
   b5edc:	9900      	ldr	r1, [sp, #0]
   b5ede:	f856 9b04 	ldr.w	r9, [r6], #4
   b5ee2:	f8d1 c000 	ldr.w	ip, [r1]
   b5ee6:	6839      	ldr	r1, [r7, #0]
   b5ee8:	910e      	str	r1, [sp, #56]	; 0x38
  return (op1 >> op2) | (op1 << (32U - op2));
   b5eea:	ea4f 2139 	mov.w	r1, r9, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   b5eee:	fa2f f989 	sxtb16	r9, r9
   b5ef2:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
   b5ef6:	eac1 4529 	pkhtb	r5, r1, r9, asr #16
   b5efa:	9510      	str	r5, [sp, #64]	; 0x40
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
   b5efc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   b5efe:	eac9 4901 	pkhbt	r9, r9, r1, lsl #16
    memcpy(&val, *in_q7, 4);
   b5f02:	f855 1b04 	ldr.w	r1, [r5], #4
   b5f06:	950d      	str	r5, [sp, #52]	; 0x34
  return (op1 >> op2) | (op1 << (32U - op2));
   b5f08:	ea4f 2531 	mov.w	r5, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   b5f0c:	fa2f f585 	sxtb16	r5, r5
   b5f10:	9511      	str	r5, [sp, #68]	; 0x44
   b5f12:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
   b5f16:	eac5 4521 	pkhtb	r5, r5, r1, asr #16
   b5f1a:	9512      	str	r5, [sp, #72]	; 0x48
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
   b5f1c:	9d11      	ldr	r5, [sp, #68]	; 0x44
   b5f1e:	eac1 4105 	pkhbt	r1, r1, r5, lsl #16
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   b5f22:	fb29 000c 	smlad	r0, r9, ip, r0
   b5f26:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   b5f28:	fb29 4405 	smlad	r4, r9, r5, r4
   b5f2c:	fb21 ec0c 	smlad	ip, r1, ip, lr
   b5f30:	fb21 8105 	smlad	r1, r1, r5, r8
    memcpy(&val, *in_q15, 4);
   b5f34:	9d00      	ldr	r5, [sp, #0]
   b5f36:	f8d7 8004 	ldr.w	r8, [r7, #4]
   b5f3a:	f8d5 9004 	ldr.w	r9, [r5, #4]
    *in_q15 += 2;
   b5f3e:	3508      	adds	r5, #8
   b5f40:	9500      	str	r5, [sp, #0]
   b5f42:	3708      	adds	r7, #8
   b5f44:	9d10      	ldr	r5, [sp, #64]	; 0x40
   b5f46:	fb25 0009 	smlad	r0, r5, r9, r0
   b5f4a:	fb25 4408 	smlad	r4, r5, r8, r4
   b5f4e:	9d12      	ldr	r5, [sp, #72]	; 0x48
   b5f50:	fb25 ce09 	smlad	lr, r5, r9, ip
   b5f54:	fb25 1808 	smlad	r8, r5, r8, r1
            col_count--;
   b5f58:	e6e7      	b.n	b5d2a <arm_nn_mat_mult_kernel_s8_s16+0x19e>
            q15_t b0 = *ip_b0++;
   b5f5a:	9e00      	ldr	r6, [sp, #0]
            q7_t a0 = *ip_a0++;
   b5f5c:	f911 9b01 	ldrsb.w	r9, [r1], #1
            q15_t b0 = *ip_b0++;
   b5f60:	f936 5b02 	ldrsh.w	r5, [r6], #2
   b5f64:	9600      	str	r6, [sp, #0]
   b5f66:	462e      	mov	r6, r5
            q7_t a1 = *ip_a1++;
   b5f68:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   b5f6a:	f915 cb01 	ldrsb.w	ip, [r5], #1
   b5f6e:	950d      	str	r5, [sp, #52]	; 0x34
            q15_t b1 = *ip_b1++;
   b5f70:	f937 5b02 	ldrsh.w	r5, [r7], #2
   b5f74:	950e      	str	r5, [sp, #56]	; 0x38
            ch_0_out_1 += a0 * b1;
   b5f76:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   b5f78:	fb15 4409 	smlabb	r4, r5, r9, r4
            ch_1_out_1 += a1 * b1;
   b5f7c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
            ch_0_out_0 += a0 * b0;
   b5f7e:	fb16 0009 	smlabb	r0, r6, r9, r0
            ch_1_out_0 += a1 * b0;
   b5f82:	fb16 ee0c 	smlabb	lr, r6, ip, lr
            ch_1_out_1 += a1 * b1;
   b5f86:	fb15 880c 	smlabb	r8, r5, ip, r8
            col_count--;
   b5f8a:	e6dd      	b.n	b5d48 <arm_nn_mat_mult_kernel_s8_s16+0x1bc>
    memcpy(&val, *in_q7, 4);
   b5f8c:	f856 3b04 	ldr.w	r3, [r6], #4
  return (op1 >> op2) | (op1 << (32U - op2));
   b5f90:	ea4f 2e33 	mov.w	lr, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   b5f94:	fa2f f383 	sxtb16	r3, r3
   b5f98:	fa2f fe8e 	sxtb16	lr, lr
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
   b5f9c:	eace 4723 	pkhtb	r7, lr, r3, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
   b5fa0:	eac3 430e 	pkhbt	r3, r3, lr, lsl #16
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   b5fa4:	f8db e000 	ldr.w	lr, [fp]
   b5fa8:	fb23 220e 	smlad	r2, r3, lr, r2
   b5fac:	9d02      	ldr	r5, [sp, #8]
   b5fae:	f8d5 e000 	ldr.w	lr, [r5]
   b5fb2:	fb23 c30e 	smlad	r3, r3, lr, ip
    memcpy(&val, *in_q15, 4);
   b5fb6:	f8d5 c004 	ldr.w	ip, [r5, #4]
   b5fba:	f8db e004 	ldr.w	lr, [fp, #4]
    *in_q15 += 2;
   b5fbe:	3508      	adds	r5, #8
   b5fc0:	f10b 0b08 	add.w	fp, fp, #8
   b5fc4:	9502      	str	r5, [sp, #8]
   b5fc6:	fb27 220e 	smlad	r2, r7, lr, r2
   b5fca:	fb27 3c0c 	smlad	ip, r7, ip, r3
            col_count--;
   b5fce:	e62b      	b.n	b5c28 <arm_nn_mat_mult_kernel_s8_s16+0x9c>
            q7_t a0 = *ip_a0++;
   b5fd0:	f911 6b01 	ldrsb.w	r6, [r1], #1
            ch_0_out_0 += a0 * b0;
   b5fd4:	f83b 7b02 	ldrh.w	r7, [fp], #2
            ch_0_out_1 += a0 * b1;
   b5fd8:	9d08      	ldr	r5, [sp, #32]
            ch_0_out_0 += a0 * b0;
   b5fda:	fb17 2206 	smlabb	r2, r7, r6, r2
            ch_0_out_1 += a0 * b1;
   b5fde:	f835 7b02 	ldrh.w	r7, [r5], #2
   b5fe2:	9508      	str	r5, [sp, #32]
   b5fe4:	fb17 cc06 	smlabb	ip, r7, r6, ip
            col_count--;
   b5fe8:	e628      	b.n	b5c3c <arm_nn_mat_mult_kernel_s8_s16+0xb0>

000b5fea <arm_depthwise_conv_wrapper_s8>:
                                         const q7_t *filter,
                                         const cmsis_nn_dims *bias_dims,
                                         const int32_t *bias,
                                         const cmsis_nn_dims *output_dims,
                                         q7_t *output)
{
   b5fea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5fee:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   b5ff0:	9501      	str	r5, [sp, #4]
    arm_status status = ARM_MATH_SUCCESS;
    if (1 == dw_conv_params->ch_mult)
   b5ff2:	688d      	ldr	r5, [r1, #8]
   b5ff4:	2d01      	cmp	r5, #1
{
   b5ff6:	e9dd 7e0c 	ldrd	r7, lr, [sp, #48]	; 0x30
   b5ffa:	e9dd ba0f 	ldrd	fp, sl, [sp, #60]	; 0x3c
   b5ffe:	e9dd 9811 	ldrd	r9, r8, [sp, #68]	; 0x44
   b6002:	ee07 0a90 	vmov	s15, r0
   b6006:	460c      	mov	r4, r1
   b6008:	4616      	mov	r6, r2
   b600a:	469c      	mov	ip, r3
    if (1 == dw_conv_params->ch_mult)
   b600c:	d121      	bne.n	b6052 <arm_depthwise_conv_wrapper_s8+0x68>
    {
#if !defined(ARM_MATH_MVEI)
        if ((filter_dims->w == 3) && (filter_dims->h == 3) && (dw_conv_params->padding.h <= 1))
   b600e:	f8de 5008 	ldr.w	r5, [lr, #8]
   b6012:	2d03      	cmp	r5, #3
   b6014:	d10b      	bne.n	b602e <arm_depthwise_conv_wrapper_s8+0x44>
   b6016:	f8de 5004 	ldr.w	r5, [lr, #4]
   b601a:	2d03      	cmp	r5, #3
   b601c:	d107      	bne.n	b602e <arm_depthwise_conv_wrapper_s8+0x44>
   b601e:	698d      	ldr	r5, [r1, #24]
   b6020:	2d01      	cmp	r5, #1
   b6022:	dc04      	bgt.n	b602e <arm_depthwise_conv_wrapper_s8+0x44>
                                       output);
    }

    /* Return to application */
    return status;
}
   b6024:	b003      	add	sp, #12
   b6026:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            status = arm_depthwise_conv_3x3_s8(ctx,
   b602a:	f7ff bae5 	b.w	b55f8 <arm_depthwise_conv_3x3_s8>
            status = arm_depthwise_conv_s8_opt(ctx,
   b602e:	9b01      	ldr	r3, [sp, #4]
   b6030:	970c      	str	r7, [sp, #48]	; 0x30
   b6032:	ee17 0a90 	vmov	r0, s15
   b6036:	e9cd e30d 	strd	lr, r3, [sp, #52]	; 0x34
   b603a:	4632      	mov	r2, r6
   b603c:	4663      	mov	r3, ip
   b603e:	4621      	mov	r1, r4
   b6040:	e9cd 9811 	strd	r9, r8, [sp, #68]	; 0x44
   b6044:	e9cd ba0f 	strd	fp, sl, [sp, #60]	; 0x3c
}
   b6048:	b003      	add	sp, #12
   b604a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            status = arm_depthwise_conv_s8_opt(ctx,
   b604e:	f000 bb12 	b.w	b6676 <arm_depthwise_conv_s8_opt>
}
   b6052:	b003      	add	sp, #12
   b6054:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        status = arm_depthwise_conv_s8(ctx,
   b6058:	f000 b81f 	b.w	b609a <arm_depthwise_conv_s8>

000b605c <arm_depthwise_conv_wrapper_s8_get_buffer_size>:

int32_t arm_depthwise_conv_wrapper_s8_get_buffer_size(const cmsis_nn_dw_conv_params *dw_conv_params,
                                                      const cmsis_nn_dims *input_dims,
                                                      const cmsis_nn_dims *filter_dims,
                                                      const cmsis_nn_dims *output_dims)
{
   b605c:	4608      	mov	r0, r1
    (void)dw_conv_params;
    int32_t size = 0;

    if (input_dims->c == output_dims->c)
   b605e:	68db      	ldr	r3, [r3, #12]
{
   b6060:	4611      	mov	r1, r2
    if (input_dims->c == output_dims->c)
   b6062:	68c2      	ldr	r2, [r0, #12]
   b6064:	429a      	cmp	r2, r3
   b6066:	d101      	bne.n	b606c <arm_depthwise_conv_wrapper_s8_get_buffer_size+0x10>
    {
        size = arm_depthwise_conv_s8_opt_get_buffer_size(input_dims, filter_dims);
   b6068:	f000 bde6 	b.w	b6c38 <arm_depthwise_conv_s8_opt_get_buffer_size>
    }

    return size;
}
   b606c:	2000      	movs	r0, #0
   b606e:	4770      	bx	lr

000b6070 <arm_convolve_1_x_n_s8>:
                                 const q7_t *filter_data,
                                 const cmsis_nn_dims *bias_dims,
                                 const int32_t *bias_data,
                                 const cmsis_nn_dims *output_dims,
                                 q7_t *output_data)
{
   b6070:	b410      	push	{r4}
    (void)bias_dims;
    arm_status status = ARM_MATH_SUCCESS;
    if (output_dims->w % 4 != 0)
   b6072:	9c06      	ldr	r4, [sp, #24]
   b6074:	68a4      	ldr	r4, [r4, #8]
   b6076:	07a4      	lsls	r4, r4, #30
   b6078:	d103      	bne.n	b6082 <arm_convolve_1_x_n_s8+0x12>
#endif

out:
    /* Return to application */
    return status;
}
   b607a:	f85d 4b04 	ldr.w	r4, [sp], #4
    status = arm_convolve_s8(ctx,
   b607e:	f000 be70 	b.w	b6d62 <arm_convolve_s8>
}
   b6082:	f06f 0002 	mvn.w	r0, #2
   b6086:	f85d 4b04 	ldr.w	r4, [sp], #4
   b608a:	4770      	bx	lr

000b608c <arm_convolve_1_x_n_s8_get_buffer_size>:

int32_t arm_convolve_1_x_n_s8_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * sizeof(int16_t);
   b608c:	688b      	ldr	r3, [r1, #8]
   b608e:	68c0      	ldr	r0, [r0, #12]
   b6090:	4358      	muls	r0, r3
   b6092:	684b      	ldr	r3, [r1, #4]
   b6094:	4358      	muls	r0, r3
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
   b6096:	0080      	lsls	r0, r0, #2
   b6098:	4770      	bx	lr

000b609a <arm_depthwise_conv_s8>:
                                 const q7_t *kernel,
                                 const cmsis_nn_dims *bias_dims,
                                 const int32_t *bias,
                                 const cmsis_nn_dims *output_dims,
                                 q7_t *output)
{
   b609a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b609e:	b0b3      	sub	sp, #204	; 0xcc
    (void)dw_conv_params->dilation;
    (void)bias_dims;
    (void)ctx;

    if (dw_conv_params->ch_mult % 4 == 0)
   b60a0:	688c      	ldr	r4, [r1, #8]
{
   b60a2:	983d      	ldr	r0, [sp, #244]	; 0xf4
    if (dw_conv_params->ch_mult % 4 == 0)
   b60a4:	9401      	str	r4, [sp, #4]
    {
        depthwise_conv_s8_mult_4(input,
   b60a6:	689c      	ldr	r4, [r3, #8]
   b60a8:	941b      	str	r4, [sp, #108]	; 0x6c
   b60aa:	685c      	ldr	r4, [r3, #4]
   b60ac:	68db      	ldr	r3, [r3, #12]
   b60ae:	9302      	str	r3, [sp, #8]
   b60b0:	6883      	ldr	r3, [r0, #8]
   b60b2:	931c      	str	r3, [sp, #112]	; 0x70
   b60b4:	6843      	ldr	r3, [r0, #4]
   b60b6:	9321      	str	r3, [sp, #132]	; 0x84
   b60b8:	694b      	ldr	r3, [r1, #20]
   b60ba:	930c      	str	r3, [sp, #48]	; 0x30
   b60bc:	68cb      	ldr	r3, [r1, #12]
   b60be:	9303      	str	r3, [sp, #12]
   b60c0:	690b      	ldr	r3, [r1, #16]
{
   b60c2:	9d41      	ldr	r5, [sp, #260]	; 0x104
        depthwise_conv_s8_mult_4(input,
   b60c4:	930d      	str	r3, [sp, #52]	; 0x34
                                 dw_conv_params->padding.h,
                                 dw_conv_params->stride.w,
                                 dw_conv_params->stride.h,
                                 bias,
                                 output,
                                 quant_params->shift,
   b60c6:	6853      	ldr	r3, [r2, #4]
   b60c8:	9322      	str	r3, [sp, #136]	; 0x88
                                 quant_params->multiplier,
   b60ca:	6813      	ldr	r3, [r2, #0]
   b60cc:	9323      	str	r3, [sp, #140]	; 0x8c
        depthwise_conv_s8_mult_4(input,
   b60ce:	68ab      	ldr	r3, [r5, #8]
   b60d0:	9324      	str	r3, [sp, #144]	; 0x90
   b60d2:	686b      	ldr	r3, [r5, #4]
   b60d4:	9325      	str	r3, [sp, #148]	; 0x94
   b60d6:	684b      	ldr	r3, [r1, #4]
   b60d8:	9304      	str	r3, [sp, #16]
   b60da:	680b      	ldr	r3, [r1, #0]
   b60dc:	6988      	ldr	r0, [r1, #24]
   b60de:	9326      	str	r3, [sp, #152]	; 0x98
   b60e0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   b60e2:	9305      	str	r3, [sp, #20]
   b60e4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   b60e6:	9306      	str	r3, [sp, #24]
    if (dw_conv_params->ch_mult % 4 == 0)
   b60e8:	9b01      	ldr	r3, [sp, #4]
   b60ea:	f013 0203 	ands.w	r2, r3, #3
   b60ee:	f1c0 0300 	rsb	r3, r0, #0
   b60f2:	f040 81ca 	bne.w	b648a <arm_depthwise_conv_s8+0x3f0>
        depthwise_conv_s8_mult_4(input,
   b60f6:	68e9      	ldr	r1, [r5, #12]
    for (int32_t in_h = -pad_y, out_h = 0, out_idx = 0; out_h < output_y; in_h += stride_y, ++out_h)
   b60f8:	9309      	str	r3, [sp, #36]	; 0x24
                        int32_t ker_idx = ker_h * (output_ch * kernel_x) + ker_w_start * output_ch + out_ch;
   b60fa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
        depthwise_conv_s8_mult_4(input,
   b60fc:	9107      	str	r1, [sp, #28]
                        int32_t ker_idx = ker_h * (output_ch * kernel_x) + ker_w_start * output_ch + out_ch;
   b60fe:	434b      	muls	r3, r1
   b6100:	931e      	str	r3, [sp, #120]	; 0x78
                        int32_t in_idx = (in_h + ker_h) * (input_ch * input_x) + in_w * input_ch + in_ch;
   b6102:	9902      	ldr	r1, [sp, #8]
   b6104:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b6106:	9008      	str	r0, [sp, #32]
   b6108:	434b      	muls	r3, r1
   b610a:	931f      	str	r3, [sp, #124]	; 0x7c
   b610c:	1823      	adds	r3, r4, r0
   b610e:	931d      	str	r3, [sp, #116]	; 0x74
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
   b6110:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    for (int32_t in_h = -pad_y, out_h = 0, out_idx = 0; out_h < output_y; in_h += stride_y, ++out_h)
   b6112:	920b      	str	r2, [sp, #44]	; 0x2c
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
   b6114:	425b      	negs	r3, r3
   b6116:	9320      	str	r3, [sp, #128]	; 0x80
   b6118:	460b      	mov	r3, r1
   b611a:	9903      	ldr	r1, [sp, #12]
    for (int32_t in_h = -pad_y, out_h = 0, out_idx = 0; out_h < output_y; in_h += stride_y, ++out_h)
   b611c:	9217      	str	r2, [sp, #92]	; 0x5c
   b611e:	434b      	muls	r3, r1
   b6120:	9327      	str	r3, [sp, #156]	; 0x9c
   b6122:	9920      	ldr	r1, [sp, #128]	; 0x80
   b6124:	9b02      	ldr	r3, [sp, #8]
   b6126:	434b      	muls	r3, r1
   b6128:	9328      	str	r3, [sp, #160]	; 0xa0
   b612a:	9901      	ldr	r1, [sp, #4]
   b612c:	9b01      	ldr	r3, [sp, #4]
   b612e:	3103      	adds	r1, #3
   b6130:	f103 0303 	add.w	r3, r3, #3
   b6134:	f023 0303 	bic.w	r3, r3, #3
   b6138:	bfb8      	it	lt
   b613a:	2300      	movlt	r3, #0
   b613c:	932e      	str	r3, [sp, #184]	; 0xb8
   b613e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b6140:	9a25      	ldr	r2, [sp, #148]	; 0x94
   b6142:	4293      	cmp	r3, r2
   b6144:	db03      	blt.n	b614e <arm_depthwise_conv_s8+0xb4>
                                  dw_conv_params->activation.max);
    }

    /* Return to application */
    return ARM_MATH_SUCCESS;
}
   b6146:	2000      	movs	r0, #0
   b6148:	b033      	add	sp, #204	; 0xcc
   b614a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
   b614e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b6150:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   b6152:	2b00      	cmp	r3, #0
   b6154:	9b08      	ldr	r3, [sp, #32]
   b6156:	bfc8      	it	gt
   b6158:	2300      	movgt	r3, #0
   b615a:	9312      	str	r3, [sp, #72]	; 0x48
   b615c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b615e:	4413      	add	r3, r2
   b6160:	930f      	str	r3, [sp, #60]	; 0x3c
   b6162:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b6164:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b6166:	4413      	add	r3, r2
   b6168:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   b616a:	4353      	muls	r3, r2
   b616c:	9329      	str	r3, [sp, #164]	; 0xa4
   b616e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b6170:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   b6172:	4353      	muls	r3, r2
   b6174:	932a      	str	r3, [sp, #168]	; 0xa8
   b6176:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   b6178:	9318      	str	r3, [sp, #96]	; 0x60
   b617a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b617c:	930e      	str	r3, [sp, #56]	; 0x38
   b617e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   b6180:	9311      	str	r3, [sp, #68]	; 0x44
   b6182:	2300      	movs	r3, #0
                    for (int32_t ker_h = ker_h_start; ker_h < MIN(kernel_y, input_y - in_h); ++ker_h)
   b6184:	9a21      	ldr	r2, [sp, #132]	; 0x84
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
   b6186:	9316      	str	r3, [sp, #88]	; 0x58
                    for (int32_t ker_h = ker_h_start; ker_h < MIN(kernel_y, input_y - in_h); ++ker_h)
   b6188:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   b618a:	4293      	cmp	r3, r2
   b618c:	bfa8      	it	ge
   b618e:	4613      	movge	r3, r2
   b6190:	9331      	str	r3, [sp, #196]	; 0xc4
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
   b6192:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b6194:	9a24      	ldr	r2, [sp, #144]	; 0x90
   b6196:	4293      	cmp	r3, r2
   b6198:	db0d      	blt.n	b61b6 <arm_depthwise_conv_s8+0x11c>
    for (int32_t in_h = -pad_y, out_h = 0, out_idx = 0; out_h < output_y; in_h += stride_y, ++out_h)
   b619a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b619c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b619e:	4413      	add	r3, r2
   b61a0:	9309      	str	r3, [sp, #36]	; 0x24
   b61a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b61a4:	3301      	adds	r3, #1
   b61a6:	9317      	str	r3, [sp, #92]	; 0x5c
   b61a8:	9b08      	ldr	r3, [sp, #32]
   b61aa:	1a9b      	subs	r3, r3, r2
   b61ac:	9308      	str	r3, [sp, #32]
   b61ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   b61b0:	1a9b      	subs	r3, r3, r2
   b61b2:	931d      	str	r3, [sp, #116]	; 0x74
   b61b4:	e7c3      	b.n	b613e <arm_depthwise_conv_s8+0xa4>
            for (int32_t in_ch = 0, out_ch = 0, ker_w_start = MAX(0, -in_w); out_ch < output_ch;
   b61b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   b61b8:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b61ba:	2b00      	cmp	r3, #0
   b61bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b61be:	bfc8      	it	gt
   b61c0:	2300      	movgt	r3, #0
   b61c2:	9310      	str	r3, [sp, #64]	; 0x40
   b61c4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   b61c6:	9910      	ldr	r1, [sp, #64]	; 0x40
   b61c8:	4413      	add	r3, r2
   b61ca:	9319      	str	r3, [sp, #100]	; 0x64
   b61cc:	9a07      	ldr	r2, [sp, #28]
   b61ce:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   b61d0:	fb01 3302 	mla	r3, r1, r2, r3
   b61d4:	932b      	str	r3, [sp, #172]	; 0xac
   b61d6:	460a      	mov	r2, r1
   b61d8:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
   b61da:	9902      	ldr	r1, [sp, #8]
   b61dc:	fb01 3302 	mla	r3, r1, r2, r3
                        for (int32_t ker_w = ker_w_start; ker_w < MIN(kernel_x, input_x - in_w);
   b61e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   b61e2:	991c      	ldr	r1, [sp, #112]	; 0x70
   b61e4:	932d      	str	r3, [sp, #180]	; 0xb4
   b61e6:	428a      	cmp	r2, r1
   b61e8:	bfa8      	it	ge
   b61ea:	460a      	movge	r2, r1
            for (int32_t in_ch = 0, out_ch = 0, ker_w_start = MAX(0, -in_w); out_ch < output_ch;
   b61ec:	2300      	movs	r3, #0
                        for (int32_t ker_w = ker_w_start; ker_w < MIN(kernel_x, input_x - in_w);
   b61ee:	9230      	str	r2, [sp, #192]	; 0xc0
            for (int32_t in_ch = 0, out_ch = 0, ker_w_start = MAX(0, -in_w); out_ch < output_ch;
   b61f0:	9a07      	ldr	r2, [sp, #28]
   b61f2:	429a      	cmp	r2, r3
   b61f4:	f340 8137 	ble.w	b6466 <arm_depthwise_conv_s8+0x3cc>
   b61f8:	9a42      	ldr	r2, [sp, #264]	; 0x108
   b61fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
   b61fc:	eb02 0901 	add.w	r9, r2, r1
   b6200:	9922      	ldr	r1, [sp, #136]	; 0x88
   b6202:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   b6204:	eb01 0883 	add.w	r8, r1, r3, lsl #2
   b6208:	9940      	ldr	r1, [sp, #256]	; 0x100
   b620a:	eb01 0a83 	add.w	sl, r1, r3, lsl #2
   b620e:	992b      	ldr	r1, [sp, #172]	; 0xac
   b6210:	4419      	add	r1, r3
   b6212:	912c      	str	r1, [sp, #176]	; 0xb0
                for (int mult_tile = 0; mult_tile < ch_mult; mult_tile += 4)
   b6214:	2100      	movs	r1, #0
   b6216:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   b621a:	910a      	str	r1, [sp, #40]	; 0x28
   b621c:	e0e0      	b.n	b63e0 <arm_depthwise_conv_s8+0x346>
                    out_buff[2] = bias[out_ch + 2 + mult_tile];
   b621e:	f8da 1008 	ldr.w	r1, [sl, #8]
   b6222:	9114      	str	r1, [sp, #80]	; 0x50
                    out_buff[3] = bias[out_ch + 3 + mult_tile];
   b6224:	f8da 100c 	ldr.w	r1, [sl, #12]
   b6228:	980a      	ldr	r0, [sp, #40]	; 0x28
   b622a:	9115      	str	r1, [sp, #84]	; 0x54
   b622c:	993e      	ldr	r1, [sp, #248]	; 0xf8
                    for (int32_t ker_h = ker_h_start; ker_h < MIN(kernel_y, input_y - in_h); ++ker_h)
   b622e:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
   b6232:	f8dd e0b0 	ldr.w	lr, [sp, #176]	; 0xb0
   b6236:	9f12      	ldr	r7, [sp, #72]	; 0x48
                    out_buff[1] = bias[out_ch + 1 + mult_tile];
   b6238:	e9da 6500 	ldrd	r6, r5, [sl]
                    for (int32_t ker_h = ker_h_start; ker_h < MIN(kernel_y, input_y - in_h); ++ker_h)
   b623c:	4401      	add	r1, r0
   b623e:	912f      	str	r1, [sp, #188]	; 0xbc
   b6240:	9931      	ldr	r1, [sp, #196]	; 0xc4
   b6242:	428f      	cmp	r7, r1
   b6244:	f2c0 80db 	blt.w	b63fe <arm_depthwise_conv_s8+0x364>
                    out_buff[0] = arm_nn_requantize(
   b6248:	f8d8 0000 	ldr.w	r0, [r8]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b624c:	9c14      	ldr	r4, [sp, #80]	; 0x50
   b624e:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
   b6252:	408e      	lsls	r6, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b6254:	6811      	ldr	r1, [r2, #0]
   b6256:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
   b625a:	f04f 0c00 	mov.w	ip, #0
   b625e:	fbc6 7c01 	smlal	r7, ip, r6, r1
    result = (int32_t)(mult.long_long >> 31);
   b6262:	0ffe      	lsrs	r6, r7, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b6264:	2800      	cmp	r0, #0
    result = (int32_t)(mult.long_long >> 31);
   b6266:	ea46 0c4c 	orr.w	ip, r6, ip, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   b626a:	f04f 0101 	mov.w	r1, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b626e:	bfd4      	ite	le
   b6270:	4246      	negle	r6, r0
   b6272:	2600      	movgt	r6, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   b6274:	40b1      	lsls	r1, r6
   b6276:	3901      	subs	r1, #1
                    out_buff[1] = arm_nn_requantize(
   b6278:	f8d8 0004 	ldr.w	r0, [r8, #4]
    if (result < 0)
   b627c:	fa5c f606 	asrs.w	r6, ip, r6
    int32_t remainder = remainder_mask & dividend;
   b6280:	ea0c 0701 	and.w	r7, ip, r1
    q31_t threshold = remainder_mask >> 1;
   b6284:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
   b6288:	bf48      	it	mi
   b628a:	3101      	addmi	r1, #1
    if (remainder > threshold)
   b628c:	428f      	cmp	r7, r1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b628e:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
   b6292:	fa05 f501 	lsl.w	r5, r5, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b6296:	6851      	ldr	r1, [r2, #4]
   b6298:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
   b629c:	f04f 0c00 	mov.w	ip, #0
   b62a0:	fbc5 7c01 	smlal	r7, ip, r5, r1
    result = (int32_t)(mult.long_long >> 31);
   b62a4:	ea4f 75d7 	mov.w	r5, r7, lsr #31
        result++;
   b62a8:	bfc8      	it	gt
   b62aa:	3601      	addgt	r6, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b62ac:	2800      	cmp	r0, #0
    result = (int32_t)(mult.long_long >> 31);
   b62ae:	ea45 0c4c 	orr.w	ip, r5, ip, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   b62b2:	f04f 0101 	mov.w	r1, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b62b6:	bfd4      	ite	le
   b62b8:	4245      	negle	r5, r0
   b62ba:	2500      	movgt	r5, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   b62bc:	40a9      	lsls	r1, r5
   b62be:	3901      	subs	r1, #1
                    out_buff[2] = arm_nn_requantize(
   b62c0:	f8d8 0008 	ldr.w	r0, [r8, #8]
    if (result < 0)
   b62c4:	fa5c f505 	asrs.w	r5, ip, r5
    int32_t remainder = remainder_mask & dividend;
   b62c8:	ea0c 0701 	and.w	r7, ip, r1
    q31_t threshold = remainder_mask >> 1;
   b62cc:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
   b62d0:	bf48      	it	mi
   b62d2:	3101      	addmi	r1, #1
    if (remainder > threshold)
   b62d4:	428f      	cmp	r7, r1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b62d6:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
   b62da:	fa04 f401 	lsl.w	r4, r4, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b62de:	6891      	ldr	r1, [r2, #8]
   b62e0:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
   b62e4:	f04f 0c00 	mov.w	ip, #0
   b62e8:	fbc4 7c01 	smlal	r7, ip, r4, r1
    result = (int32_t)(mult.long_long >> 31);
   b62ec:	ea4f 74d7 	mov.w	r4, r7, lsr #31
        result++;
   b62f0:	bfc8      	it	gt
   b62f2:	3501      	addgt	r5, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b62f4:	2800      	cmp	r0, #0
    result = (int32_t)(mult.long_long >> 31);
   b62f6:	ea44 0c4c 	orr.w	ip, r4, ip, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   b62fa:	f04f 0101 	mov.w	r1, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b62fe:	bfd4      	ite	le
   b6300:	4244      	negle	r4, r0
   b6302:	2400      	movgt	r4, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   b6304:	40a1      	lsls	r1, r4
   b6306:	3901      	subs	r1, #1
    if (result < 0)
   b6308:	fa5c f404 	asrs.w	r4, ip, r4
    int32_t remainder = remainder_mask & dividend;
   b630c:	ea0c 0701 	and.w	r7, ip, r1
    q31_t threshold = remainder_mask >> 1;
   b6310:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
   b6314:	bf48      	it	mi
   b6316:	3101      	addmi	r1, #1
    if (remainder > threshold)
   b6318:	428f      	cmp	r7, r1
                    out_buff[3] = arm_nn_requantize(
   b631a:	f8d8 700c 	ldr.w	r7, [r8, #12]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b631e:	9915      	ldr	r1, [sp, #84]	; 0x54
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b6320:	68d0      	ldr	r0, [r2, #12]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b6322:	ea27 7ce7 	bic.w	ip, r7, r7, asr #31
   b6326:	fa01 fc0c 	lsl.w	ip, r1, ip
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b632a:	f04f 0e00 	mov.w	lr, #0
   b632e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   b6332:	fbcc 1e00 	smlal	r1, lr, ip, r0
        result++;
   b6336:	bfc8      	it	gt
   b6338:	3401      	addgt	r4, #1
    result = (int32_t)(mult.long_long >> 31);
   b633a:	0fc9      	lsrs	r1, r1, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b633c:	2f00      	cmp	r7, #0
    result = (int32_t)(mult.long_long >> 31);
   b633e:	ea41 0e4e 	orr.w	lr, r1, lr, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b6342:	bfd8      	it	le
   b6344:	427f      	negle	r7, r7
    const q31_t remainder_mask = (1 << exponent) - 1;
   b6346:	f04f 0101 	mov.w	r1, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b634a:	bfc8      	it	gt
   b634c:	2700      	movgt	r7, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   b634e:	fa01 f007 	lsl.w	r0, r1, r7
   b6352:	3801      	subs	r0, #1
    int32_t remainder = remainder_mask & dividend;
   b6354:	ea0e 0c00 	and.w	ip, lr, r0
    if (result < 0)
   b6358:	fa5e fe07 	asrs.w	lr, lr, r7
    q31_t threshold = remainder_mask >> 1;
   b635c:	fa40 f001 	asr.w	r0, r0, r1
        threshold++;
   b6360:	bf48      	it	mi
   b6362:	1840      	addmi	r0, r0, r1
                    out_buff[0] += output_offset;
   b6364:	9904      	ldr	r1, [sp, #16]
   b6366:	440e      	add	r6, r1
                    out_buff[0] = MIN(MAX(out_buff[0], output_activation_min), output_activation_max);
   b6368:	9905      	ldr	r1, [sp, #20]
    if (remainder > threshold)
   b636a:	4584      	cmp	ip, r0
        result++;
   b636c:	bfc8      	it	gt
   b636e:	f10e 0e01 	addgt.w	lr, lr, #1
   b6372:	428e      	cmp	r6, r1
   b6374:	bfb8      	it	lt
   b6376:	460e      	movlt	r6, r1
   b6378:	9906      	ldr	r1, [sp, #24]
   b637a:	428e      	cmp	r6, r1
   b637c:	bfa8      	it	ge
   b637e:	460e      	movge	r6, r1
                    out_buff[1] += output_offset;
   b6380:	9904      	ldr	r1, [sp, #16]
                    output[out_idx++] = (int8_t)out_buff[0];
   b6382:	f889 6000 	strb.w	r6, [r9]
                    out_buff[1] += output_offset;
   b6386:	440d      	add	r5, r1
                    out_buff[1] = MIN(MAX(out_buff[1], output_activation_min), output_activation_max);
   b6388:	9905      	ldr	r1, [sp, #20]
   b638a:	428d      	cmp	r5, r1
   b638c:	bfb8      	it	lt
   b638e:	460d      	movlt	r5, r1
   b6390:	9906      	ldr	r1, [sp, #24]
   b6392:	428d      	cmp	r5, r1
   b6394:	bfa8      	it	ge
   b6396:	460d      	movge	r5, r1
                    out_buff[2] += output_offset;
   b6398:	9904      	ldr	r1, [sp, #16]
                    output[out_idx++] = (int8_t)out_buff[1];
   b639a:	f889 5001 	strb.w	r5, [r9, #1]
                    out_buff[2] += output_offset;
   b639e:	440c      	add	r4, r1
                    out_buff[2] = MIN(MAX(out_buff[2], output_activation_min), output_activation_max);
   b63a0:	9905      	ldr	r1, [sp, #20]
   b63a2:	428c      	cmp	r4, r1
   b63a4:	bfb8      	it	lt
   b63a6:	460c      	movlt	r4, r1
   b63a8:	9906      	ldr	r1, [sp, #24]
   b63aa:	428c      	cmp	r4, r1
   b63ac:	bfa8      	it	ge
   b63ae:	460c      	movge	r4, r1
                    out_buff[3] += output_offset;
   b63b0:	9904      	ldr	r1, [sp, #16]
                    output[out_idx++] = (int8_t)out_buff[2];
   b63b2:	f889 4002 	strb.w	r4, [r9, #2]
                    out_buff[3] += output_offset;
   b63b6:	448e      	add	lr, r1
                    out_buff[3] = MIN(MAX(out_buff[3], output_activation_min), output_activation_max);
   b63b8:	9905      	ldr	r1, [sp, #20]
   b63ba:	458e      	cmp	lr, r1
   b63bc:	bfb8      	it	lt
   b63be:	468e      	movlt	lr, r1
   b63c0:	9906      	ldr	r1, [sp, #24]
   b63c2:	458e      	cmp	lr, r1
   b63c4:	bfa8      	it	ge
   b63c6:	468e      	movge	lr, r1
                for (int mult_tile = 0; mult_tile < ch_mult; mult_tile += 4)
   b63c8:	990a      	ldr	r1, [sp, #40]	; 0x28
                    output[out_idx++] = (int8_t)out_buff[3];
   b63ca:	f889 e003 	strb.w	lr, [r9, #3]
                for (int mult_tile = 0; mult_tile < ch_mult; mult_tile += 4)
   b63ce:	3104      	adds	r1, #4
   b63d0:	910a      	str	r1, [sp, #40]	; 0x28
   b63d2:	f109 0904 	add.w	r9, r9, #4
   b63d6:	3210      	adds	r2, #16
   b63d8:	f108 0810 	add.w	r8, r8, #16
   b63dc:	f10a 0a10 	add.w	sl, sl, #16
   b63e0:	9901      	ldr	r1, [sp, #4]
   b63e2:	980a      	ldr	r0, [sp, #40]	; 0x28
   b63e4:	4281      	cmp	r1, r0
   b63e6:	f73f af1a 	bgt.w	b621e <arm_depthwise_conv_s8+0x184>
   b63ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b63ec:	992e      	ldr	r1, [sp, #184]	; 0xb8
   b63ee:	440a      	add	r2, r1
   b63f0:	920b      	str	r2, [sp, #44]	; 0x2c
                 ++in_ch, out_ch += ch_mult)
   b63f2:	9a01      	ldr	r2, [sp, #4]
   b63f4:	4413      	add	r3, r2
   b63f6:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b63f8:	3201      	adds	r2, #1
   b63fa:	9219      	str	r2, [sp, #100]	; 0x64
   b63fc:	e6f8      	b.n	b61f0 <arm_depthwise_conv_s8+0x156>
                        for (int32_t ker_w = ker_w_start; ker_w < MIN(kernel_x, input_x - in_w);
   b63fe:	992d      	ldr	r1, [sp, #180]	; 0xb4
   b6400:	9810      	ldr	r0, [sp, #64]	; 0x40
   b6402:	9013      	str	r0, [sp, #76]	; 0x4c
   b6404:	4461      	add	r1, ip
   b6406:	911a      	str	r1, [sp, #104]	; 0x68
   b6408:	992f      	ldr	r1, [sp, #188]	; 0xbc
   b640a:	4471      	add	r1, lr
   b640c:	9813      	ldr	r0, [sp, #76]	; 0x4c
   b640e:	9c30      	ldr	r4, [sp, #192]	; 0xc0
   b6410:	42a0      	cmp	r0, r4
   b6412:	db05      	blt.n	b6420 <arm_depthwise_conv_s8+0x386>
                    for (int32_t ker_h = ker_h_start; ker_h < MIN(kernel_y, input_y - in_h); ++ker_h)
   b6414:	991e      	ldr	r1, [sp, #120]	; 0x78
   b6416:	448e      	add	lr, r1
   b6418:	991f      	ldr	r1, [sp, #124]	; 0x7c
   b641a:	3701      	adds	r7, #1
   b641c:	448c      	add	ip, r1
   b641e:	e70f      	b.n	b6240 <arm_depthwise_conv_s8+0x1a6>
                            int32_t in_val = input[in_idx + ker_w * input_ch] + input_offset;
   b6420:	981a      	ldr	r0, [sp, #104]	; 0x68
   b6422:	9c26      	ldr	r4, [sp, #152]	; 0x98
   b6424:	f990 0000 	ldrsb.w	r0, [r0]
                            out_buff[0] += in_val * kernel[ker_idx + 0 + mult_tile];
   b6428:	f991 b000 	ldrsb.w	fp, [r1]
                            int32_t in_val = input[in_idx + ker_w * input_ch] + input_offset;
   b642c:	4420      	add	r0, r4
                            out_buff[0] += in_val * kernel[ker_idx + 0 + mult_tile];
   b642e:	fb00 660b 	mla	r6, r0, fp, r6
                            out_buff[1] += in_val * kernel[ker_idx + 1 + mult_tile];
   b6432:	f991 b001 	ldrsb.w	fp, [r1, #1]
                            out_buff[2] += in_val * kernel[ker_idx + 2 + mult_tile];
   b6436:	9c14      	ldr	r4, [sp, #80]	; 0x50
                            out_buff[1] += in_val * kernel[ker_idx + 1 + mult_tile];
   b6438:	fb00 550b 	mla	r5, r0, fp, r5
                            out_buff[2] += in_val * kernel[ker_idx + 2 + mult_tile];
   b643c:	f991 b002 	ldrsb.w	fp, [r1, #2]
   b6440:	fb00 440b 	mla	r4, r0, fp, r4
   b6444:	9414      	str	r4, [sp, #80]	; 0x50
                            out_buff[3] += in_val * kernel[ker_idx + 3 + mult_tile];
   b6446:	f991 b003 	ldrsb.w	fp, [r1, #3]
   b644a:	9c15      	ldr	r4, [sp, #84]	; 0x54
   b644c:	fb00 400b 	mla	r0, r0, fp, r4
   b6450:	9015      	str	r0, [sp, #84]	; 0x54
                             ++ker_w, ker_idx += output_ch)
   b6452:	9813      	ldr	r0, [sp, #76]	; 0x4c
   b6454:	9c02      	ldr	r4, [sp, #8]
   b6456:	3001      	adds	r0, #1
   b6458:	9013      	str	r0, [sp, #76]	; 0x4c
   b645a:	981a      	ldr	r0, [sp, #104]	; 0x68
   b645c:	4420      	add	r0, r4
   b645e:	901a      	str	r0, [sp, #104]	; 0x68
   b6460:	9807      	ldr	r0, [sp, #28]
   b6462:	4401      	add	r1, r0
   b6464:	e7d2      	b.n	b640c <arm_depthwise_conv_s8+0x372>
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
   b6466:	9a03      	ldr	r2, [sp, #12]
   b6468:	9b11      	ldr	r3, [sp, #68]	; 0x44
   b646a:	4413      	add	r3, r2
   b646c:	9311      	str	r3, [sp, #68]	; 0x44
   b646e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b6470:	3301      	adds	r3, #1
   b6472:	9316      	str	r3, [sp, #88]	; 0x58
   b6474:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b6476:	1a9b      	subs	r3, r3, r2
   b6478:	930e      	str	r3, [sp, #56]	; 0x38
   b647a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   b647c:	1a9b      	subs	r3, r3, r2
   b647e:	930f      	str	r3, [sp, #60]	; 0x3c
   b6480:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   b6482:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b6484:	4413      	add	r3, r2
   b6486:	9318      	str	r3, [sp, #96]	; 0x60
   b6488:	e683      	b.n	b6192 <arm_depthwise_conv_s8+0xf8>
        depthwise_conv_s8_generic(input,
   b648a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   b648e:	9211      	str	r2, [sp, #68]	; 0x44
   b6490:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   b6494:	f8bd 6008 	ldrh.w	r6, [sp, #8]
   b6498:	9212      	str	r2, [sp, #72]	; 0x48
static void depthwise_conv_s8_generic(const q7_t *input,
   b649a:	b29b      	uxth	r3, r3
   b649c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   b64a0:	930e      	str	r3, [sp, #56]	; 0x38
   b64a2:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
   b64a6:	930f      	str	r3, [sp, #60]	; 0x3c
                            int32_t ker_idx_0 = (i_ker_y * kernel_x + i_ker_x) * (input_ch * ch_mult) + idx_out_ch;
   b64a8:	fb02 fb06 	mul.w	fp, r2, r6
   b64ac:	fb0b f303 	mul.w	r3, fp, r3
   b64b0:	9313      	str	r3, [sp, #76]	; 0x4c
   b64b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b64b4:	9209      	str	r2, [sp, #36]	; 0x24
   b64b6:	425b      	negs	r3, r3
   b64b8:	b29b      	uxth	r3, r3
   b64ba:	931a      	str	r3, [sp, #104]	; 0x68
                    const int ker_y_end = MIN(kernel_y, input_y - base_idx_y);
   b64bc:	b2a3      	uxth	r3, r4
    for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
   b64be:	2000      	movs	r0, #0
                    const int ker_y_end = MIN(kernel_y, input_y - base_idx_y);
   b64c0:	931d      	str	r3, [sp, #116]	; 0x74
   b64c2:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
    int i_out = 0;
   b64c6:	9008      	str	r0, [sp, #32]
                    const int ker_y_end = MIN(kernel_y, input_y - base_idx_y);
   b64c8:	931e      	str	r3, [sp, #120]	; 0x78
    for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
   b64ca:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
   b64ce:	4283      	cmp	r3, r0
   b64d0:	f77f ae39 	ble.w	b6146 <arm_depthwise_conv_s8+0xac>
        const int16_t base_idx_y = (i_out_y * stride_y) - pad_y;
   b64d4:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
        for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
   b64d8:	2b00      	cmp	r3, #0
                    const int ker_y_start = MAX(0, -base_idx_y);
   b64da:	f1c3 0200 	rsb	r2, r3, #0
   b64de:	bfc8      	it	gt
   b64e0:	2200      	movgt	r2, #0
   b64e2:	9202      	str	r2, [sp, #8]
   b64e4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   b64e6:	920d      	str	r2, [sp, #52]	; 0x34
   b64e8:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
   b64ec:	920a      	str	r2, [sp, #40]	; 0x28
   b64ee:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
   b64f2:	920b      	str	r2, [sp, #44]	; 0x2c
   b64f4:	9a02      	ldr	r2, [sp, #8]
   b64f6:	990a      	ldr	r1, [sp, #40]	; 0x28
   b64f8:	189a      	adds	r2, r3, r2
   b64fa:	434a      	muls	r2, r1
   b64fc:	9214      	str	r2, [sp, #80]	; 0x50
   b64fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
   b6500:	9a02      	ldr	r2, [sp, #8]
   b6502:	434a      	muls	r2, r1
   b6504:	9215      	str	r2, [sp, #84]	; 0x54
        for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
   b6506:	9a08      	ldr	r2, [sp, #32]
   b6508:	9207      	str	r2, [sp, #28]
   b650a:	2200      	movs	r2, #0
   b650c:	9201      	str	r2, [sp, #4]
                    const int ker_y_end = MIN(kernel_y, input_y - base_idx_y);
   b650e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   b6510:	1ad3      	subs	r3, r2, r3
   b6512:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   b6514:	4293      	cmp	r3, r2
   b6516:	bfa8      	it	ge
   b6518:	4613      	movge	r3, r2
   b651a:	9319      	str	r3, [sp, #100]	; 0x64
        for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
   b651c:	9b01      	ldr	r3, [sp, #4]
   b651e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   b6520:	4293      	cmp	r3, r2
   b6522:	db0a      	blt.n	b653a <arm_depthwise_conv_s8+0x4a0>
   b6524:	9b08      	ldr	r3, [sp, #32]
   b6526:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b6528:	4413      	add	r3, r2
   b652a:	9308      	str	r3, [sp, #32]
    for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
   b652c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b652e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b6530:	4413      	add	r3, r2
   b6532:	b29b      	uxth	r3, r3
   b6534:	3001      	adds	r0, #1
   b6536:	930e      	str	r3, [sp, #56]	; 0x38
   b6538:	e7c7      	b.n	b64ca <arm_depthwise_conv_s8+0x430>
            const int16_t base_idx_x = (i_out_x * stride_x) - pad_x;
   b653a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
                    const int ker_x_end = MIN(kernel_x, input_x - base_idx_x);
   b653e:	990a      	ldr	r1, [sp, #40]	; 0x28
   b6540:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
            for (int i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
   b6542:	9b07      	ldr	r3, [sp, #28]
   b6544:	9303      	str	r3, [sp, #12]
                    const int ker_x_end = MIN(kernel_x, input_x - base_idx_x);
   b6546:	1a89      	subs	r1, r1, r2
   b6548:	2a00      	cmp	r2, #0
                    const int ker_x_start = MAX(0, -base_idx_x);
   b654a:	f1c2 0400 	rsb	r4, r2, #0
   b654e:	bfc8      	it	gt
   b6550:	2400      	movgt	r4, #0
                    const int ker_x_end = MIN(kernel_x, input_x - base_idx_x);
   b6552:	42b9      	cmp	r1, r7
            for (int i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
   b6554:	f04f 0300 	mov.w	r3, #0
                    const int ker_x_end = MIN(kernel_x, input_x - base_idx_x);
   b6558:	bfa8      	it	ge
   b655a:	4639      	movge	r1, r7
   b655c:	4422      	add	r2, r4
            for (int i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
   b655e:	461d      	mov	r5, r3
                    const int ker_x_end = MIN(kernel_x, input_x - base_idx_x);
   b6560:	9117      	str	r1, [sp, #92]	; 0x5c
   b6562:	9218      	str	r2, [sp, #96]	; 0x60
            for (int i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
   b6564:	42b5      	cmp	r5, r6
   b6566:	d07a      	beq.n	b665e <arm_depthwise_conv_s8+0x5c4>
   b6568:	9a42      	ldr	r2, [sp, #264]	; 0x108
   b656a:	9903      	ldr	r1, [sp, #12]
   b656c:	440a      	add	r2, r1
   b656e:	9210      	str	r2, [sp, #64]	; 0x40
   b6570:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b6572:	441a      	add	r2, r3
   b6574:	9216      	str	r2, [sp, #88]	; 0x58
   b6576:	e041      	b.n	b65fc <arm_depthwise_conv_s8+0x562>
                    acc_0 = bias[idx_out_ch];
   b6578:	9a40      	ldr	r2, [sp, #256]	; 0x100
                    for (int i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
   b657a:	f8dd c008 	ldr.w	ip, [sp, #8]
                    acc_0 = bias[idx_out_ch];
   b657e:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
                    for (int i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
   b6582:	e9dd e814 	ldrd	lr, r8, [sp, #80]	; 0x50
   b6586:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b6588:	4562      	cmp	r2, ip
   b658a:	dc40      	bgt.n	b660e <arm_depthwise_conv_s8+0x574>
                    acc_0 = arm_nn_requantize(acc_0, output_mult[idx_out_ch], output_shift[idx_out_ch]);
   b658c:	9a22      	ldr	r2, [sp, #136]	; 0x88
   b658e:	f852 c023 	ldr.w	ip, [r2, r3, lsl #2]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b6592:	ea2c 72ec 	bic.w	r2, ip, ip, asr #31
   b6596:	4097      	lsls	r7, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b6598:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   b659a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b659e:	f1bc 0f00 	cmp.w	ip, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b65a2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   b65a6:	f04f 0e00 	mov.w	lr, #0
   b65aa:	fbc7 1e02 	smlal	r1, lr, r7, r2
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b65ae:	bfd4      	ite	le
   b65b0:	f1cc 0c00 	rsble	ip, ip, #0
   b65b4:	f04f 0c00 	movgt.w	ip, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   b65b8:	2201      	movs	r2, #1
    result = (int32_t)(mult.long_long >> 31);
   b65ba:	0fc9      	lsrs	r1, r1, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   b65bc:	fa02 f20c 	lsl.w	r2, r2, ip
    result = (int32_t)(mult.long_long >> 31);
   b65c0:	ea41 0e4e 	orr.w	lr, r1, lr, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   b65c4:	3a01      	subs	r2, #1
    int32_t remainder = remainder_mask & dividend;
   b65c6:	ea0e 0702 	and.w	r7, lr, r2
    if (result < 0)
   b65ca:	fa5e fe0c 	asrs.w	lr, lr, ip
    q31_t threshold = remainder_mask >> 1;
   b65ce:	ea4f 0262 	mov.w	r2, r2, asr #1
        threshold++;
   b65d2:	bf48      	it	mi
   b65d4:	3201      	addmi	r2, #1
    if (remainder > threshold)
   b65d6:	4297      	cmp	r7, r2
                    acc_0 += output_offset;
   b65d8:	9a04      	ldr	r2, [sp, #16]
        result++;
   b65da:	bfc8      	it	gt
   b65dc:	f10e 0e01 	addgt.w	lr, lr, #1
   b65e0:	4496      	add	lr, r2
                    acc_0 = MAX(acc_0, output_activation_min);
   b65e2:	9a05      	ldr	r2, [sp, #20]
   b65e4:	4596      	cmp	lr, r2
   b65e6:	bfb8      	it	lt
   b65e8:	4696      	movlt	lr, r2
                    acc_0 = MIN(acc_0, output_activation_max);
   b65ea:	9a06      	ldr	r2, [sp, #24]
   b65ec:	4596      	cmp	lr, r2
   b65ee:	bfa8      	it	ge
   b65f0:	4696      	movge	lr, r2
                    output[i_out++] = acc_0;
   b65f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   b65f4:	f802 eb01 	strb.w	lr, [r2], #1
   b65f8:	3301      	adds	r3, #1
   b65fa:	9210      	str	r2, [sp, #64]	; 0x40
                for (int i_ch_mult = 0; i_ch_mult < ch_mult; i_ch_mult++)
   b65fc:	9a16      	ldr	r2, [sp, #88]	; 0x58
   b65fe:	4293      	cmp	r3, r2
   b6600:	d1ba      	bne.n	b6578 <arm_depthwise_conv_s8+0x4de>
   b6602:	9a03      	ldr	r2, [sp, #12]
   b6604:	9909      	ldr	r1, [sp, #36]	; 0x24
   b6606:	440a      	add	r2, r1
   b6608:	9203      	str	r2, [sp, #12]
            for (int i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
   b660a:	3501      	adds	r5, #1
   b660c:	e7aa      	b.n	b6564 <arm_depthwise_conv_s8+0x4ca>
                        for (int i_ker_x = ker_x_start; i_ker_x < ker_x_end; i_ker_x++)
   b660e:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b6610:	993c      	ldr	r1, [sp, #240]	; 0xf0
   b6612:	4472      	add	r2, lr
   b6614:	fb06 5202 	mla	r2, r6, r2, r5
   b6618:	440a      	add	r2, r1
   b661a:	920c      	str	r2, [sp, #48]	; 0x30
   b661c:	eb08 0104 	add.w	r1, r8, r4
   b6620:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
   b6622:	fb0b 3101 	mla	r1, fp, r1, r3
   b6626:	4411      	add	r1, r2
   b6628:	46a1      	mov	r9, r4
   b662a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b662c:	454a      	cmp	r2, r9
   b662e:	dc06      	bgt.n	b663e <arm_depthwise_conv_s8+0x5a4>
                    for (int i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
   b6630:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b6632:	4496      	add	lr, r2
   b6634:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b6636:	f10c 0c01 	add.w	ip, ip, #1
   b663a:	4490      	add	r8, r2
   b663c:	e7a3      	b.n	b6586 <arm_depthwise_conv_s8+0x4ec>
                            acc_0 += (input[idx_0] + input_offset) * kernel[ker_idx_0];
   b663e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   b6640:	f992 a000 	ldrsb.w	sl, [r2]
   b6644:	9a26      	ldr	r2, [sp, #152]	; 0x98
   b6646:	4492      	add	sl, r2
   b6648:	f991 2000 	ldrsb.w	r2, [r1]
   b664c:	fb02 770a 	mla	r7, r2, sl, r7
                        for (int i_ker_x = ker_x_start; i_ker_x < ker_x_end; i_ker_x++)
   b6650:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   b6652:	4432      	add	r2, r6
   b6654:	f109 0901 	add.w	r9, r9, #1
   b6658:	920c      	str	r2, [sp, #48]	; 0x30
   b665a:	4459      	add	r1, fp
   b665c:	e7e5      	b.n	b662a <arm_depthwise_conv_s8+0x590>
   b665e:	9b07      	ldr	r3, [sp, #28]
   b6660:	9a11      	ldr	r2, [sp, #68]	; 0x44
   b6662:	445b      	add	r3, fp
   b6664:	9307      	str	r3, [sp, #28]
        for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
   b6666:	9b01      	ldr	r3, [sp, #4]
   b6668:	3301      	adds	r3, #1
   b666a:	9301      	str	r3, [sp, #4]
   b666c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b666e:	4413      	add	r3, r2
   b6670:	b29b      	uxth	r3, r3
   b6672:	930d      	str	r3, [sp, #52]	; 0x34
   b6674:	e752      	b.n	b651c <arm_depthwise_conv_s8+0x482>

000b6676 <arm_depthwise_conv_s8_opt>:
                                     const q7_t *kernel,
                                     const cmsis_nn_dims *bias_dims,
                                     const int32_t *bias,
                                     const cmsis_nn_dims *output_dims,
                                     q7_t *output)
{
   b6676:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b667a:	ed2d 8b04 	vpush	{d8-d9}
   b667e:	b0b7      	sub	sp, #220	; 0xdc

    const int32_t input_ch = input_dims->c;
   b6680:	f8d3 800c 	ldr.w	r8, [r3, #12]
{
   b6684:	9c49      	ldr	r4, [sp, #292]	; 0x124
   b6686:	9e45      	ldr	r6, [sp, #276]	; 0x114
    const int32_t output_ch = output_dims->c;
   b6688:	68e5      	ldr	r5, [r4, #12]

    /* Check input constraints input_ch == output_ch */
    if (input_ch != output_ch)
   b668a:	45a8      	cmp	r8, r5
   b668c:	f040 82d1 	bne.w	b6c32 <arm_depthwise_conv_s8_opt+0x5bc>
    {
        return ARM_MATH_SIZE_MISMATCH;
    }
#ifdef ARM_MATH_DSP
    const int32_t input_x = input_dims->w;
   b6690:	689f      	ldr	r7, [r3, #8]
    const int32_t input_y = input_dims->h;
   b6692:	685b      	ldr	r3, [r3, #4]
   b6694:	9328      	str	r3, [sp, #160]	; 0xa0
    const int32_t kernel_x = filter_dims->w;
   b6696:	68b3      	ldr	r3, [r6, #8]
   b6698:	9305      	str	r3, [sp, #20]
    const int32_t kernel_y = filter_dims->h;
   b669a:	6873      	ldr	r3, [r6, #4]
   b669c:	930f      	str	r3, [sp, #60]	; 0x3c
    const int32_t pad_x = dw_conv_params->padding.w;
   b669e:	694b      	ldr	r3, [r1, #20]
   b66a0:	9329      	str	r3, [sp, #164]	; 0xa4
    const int32_t pad_y = dw_conv_params->padding.h;
   b66a2:	698b      	ldr	r3, [r1, #24]
   b66a4:	932a      	str	r3, [sp, #168]	; 0xa8
    const int32_t stride_x = dw_conv_params->stride.w;
   b66a6:	68cb      	ldr	r3, [r1, #12]
   b66a8:	932b      	str	r3, [sp, #172]	; 0xac
    const int32_t stride_y = dw_conv_params->stride.h;
   b66aa:	690b      	ldr	r3, [r1, #16]
   b66ac:	932c      	str	r3, [sp, #176]	; 0xb0
    const int32_t *output_shift = quant_params->shift;
   b66ae:	6853      	ldr	r3, [r2, #4]
   b66b0:	9317      	str	r3, [sp, #92]	; 0x5c
    const int32_t *output_mult = quant_params->multiplier;
   b66b2:	6813      	ldr	r3, [r2, #0]
   b66b4:	9318      	str	r3, [sp, #96]	; 0x60
    const int32_t output_x = output_dims->w;
   b66b6:	68a3      	ldr	r3, [r4, #8]
   b66b8:	9319      	str	r3, [sp, #100]	; 0x64
    const int32_t output_y = output_dims->h;
   b66ba:	6863      	ldr	r3, [r4, #4]
   b66bc:	932d      	str	r3, [sp, #180]	; 0xb4
    const int32_t output_offset = dw_conv_params->output_offset;
   b66be:	684b      	ldr	r3, [r1, #4]
   b66c0:	9306      	str	r3, [sp, #24]
    const int32_t input_offset = dw_conv_params->input_offset;
    const int32_t output_activation_min = dw_conv_params->activation.min;
   b66c2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   b66c4:	9307      	str	r3, [sp, #28]
    const int32_t output_activation_max = dw_conv_params->activation.max;
   b66c6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   b66c8:	9308      	str	r3, [sp, #32]
    q15_t *buffer_a = (q15_t *)ctx->buf;
   b66ca:	6803      	ldr	r3, [r0, #0]
    const int32_t input_offset = dw_conv_params->input_offset;
   b66cc:	680c      	ldr	r4, [r1, #0]
    const int32_t input_x = input_dims->w;
   b66ce:	9711      	str	r7, [sp, #68]	; 0x44
    q15_t *buffer_a = (q15_t *)ctx->buf;
   b66d0:	9309      	str	r3, [sp, #36]	; 0x24
            const int ker_y_end = MIN(kernel_y, input_y - base_idx_y);

            int32_t index = 0;
            if (ker_y_start != 0)
            {
                memset(&col_buffer[index], 0, (kernel_x * input_ch) * ker_y_start * sizeof(q15_t));
   b66d2:	9b05      	ldr	r3, [sp, #20]
            while (row_count)
            {
                q15_t *col_pos = col_buffer_start + row_shift;
                const q7_t *row_pos = kernel + row_shift;
                q31_t sum = *bias++;
                const uint16_t col_count = (kernel_x * kernel_y);
   b66d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
            row_count = output_ch / 4;
   b66d6:	f1b8 0f00 	cmp.w	r8, #0
   b66da:	4641      	mov	r1, r8
                memset(&col_buffer[index], 0, (kernel_x * input_ch) * ker_y_start * sizeof(q15_t));
   b66dc:	fb03 f308 	mul.w	r3, r3, r8
            row_count = output_ch / 4;
   b66e0:	bfb8      	it	lt
   b66e2:	f108 0103 	addlt.w	r1, r8, #3
                memset(&col_buffer[index], 0, (kernel_x * input_ch) * ker_y_start * sizeof(q15_t));
   b66e6:	9314      	str	r3, [sp, #80]	; 0x50
            row_count = output_ch / 4;
   b66e8:	f3c1 038f 	ubfx	r3, r1, #2, #16
   b66ec:	931b      	str	r3, [sp, #108]	; 0x6c
                const uint16_t col_count = (kernel_x * kernel_y);
   b66ee:	9b05      	ldr	r3, [sp, #20]
   b66f0:	fb13 f002 	smulbb	r0, r3, r2
   b66f4:	b283      	uxth	r3, r0
   b66f6:	932f      	str	r3, [sp, #188]	; 0xbc
                uint16_t col_count = (kernel_x * kernel_y) / 2;
   b66f8:	9b05      	ldr	r3, [sp, #20]
   b66fa:	4353      	muls	r3, r2
   b66fc:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
   b6700:	f3c2 034f 	ubfx	r3, r2, #1, #16
   b6704:	9330      	str	r3, [sp, #192]	; 0xc0
                col_count = (kernel_x * kernel_y) & 0x1;
   b6706:	f000 0301 	and.w	r3, r0, #1
   b670a:	9331      	str	r3, [sp, #196]	; 0xc4
                    op_b = arm_nn_read_q15x2(col_pos + input_ch);
   b670c:	ea4f 0348 	mov.w	r3, r8, lsl #1
   b6710:	9300      	str	r3, [sp, #0]
                    op_b = arm_nn_read_q15x2(col_pos + input_ch + 2);
   b6712:	3304      	adds	r3, #4
   b6714:	9322      	str	r3, [sp, #136]	; 0x88
                    col_pos += input_ch << 1;
   b6716:	ea4f 0388 	mov.w	r3, r8, lsl #2
   b671a:	9315      	str	r3, [sp, #84]	; 0x54
   b671c:	f3c1 038f 	ubfx	r3, r1, #2, #16
   b6720:	0099      	lsls	r1, r3, #2
   b6722:	9124      	str	r1, [sp, #144]	; 0x90
   b6724:	f005 0103 	and.w	r1, r5, #3
   b6728:	9d19      	ldr	r5, [sp, #100]	; 0x64
   b672a:	eb01 0083 	add.w	r0, r1, r3, lsl #2
   b672e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   b6732:	4368      	muls	r0, r5
   b6734:	9023      	str	r0, [sp, #140]	; 0x8c
   b6736:	9811      	ldr	r0, [sp, #68]	; 0x44
   b6738:	fb00 f008 	mul.w	r0, r0, r8
   b673c:	9034      	str	r0, [sp, #208]	; 0xd0
   b673e:	9848      	ldr	r0, [sp, #288]	; 0x120
   b6740:	eb00 1003 	add.w	r0, r0, r3, lsl #4
   b6744:	9021      	str	r0, [sp, #132]	; 0x84
   b6746:	9817      	ldr	r0, [sp, #92]	; 0x5c
   b6748:	eb00 1003 	add.w	r0, r0, r3, lsl #4
   b674c:	9033      	str	r0, [sp, #204]	; 0xcc
   b674e:	9818      	ldr	r0, [sp, #96]	; 0x60
   b6750:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   b6754:	9332      	str	r3, [sp, #200]	; 0xc8
   b6756:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b6758:	009b      	lsls	r3, r3, #2
   b675a:	b29b      	uxth	r3, r3
   b675c:	931e      	str	r3, [sp, #120]	; 0x78
            row_count = output_ch & 0x3;
   b675e:	b28b      	uxth	r3, r1
   b6760:	932e      	str	r3, [sp, #184]	; 0xb8
   b6762:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   b6764:	4419      	add	r1, r3
   b6766:	b28b      	uxth	r3, r1
   b6768:	9327      	str	r3, [sp, #156]	; 0x9c
   b676a:	f3c2 034f 	ubfx	r3, r2, #1, #16
   b676e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   b6770:	435a      	muls	r2, r3
   b6772:	921d      	str	r2, [sp, #116]	; 0x74
   b6774:	9a00      	ldr	r2, [sp, #0]
   b6776:	4353      	muls	r3, r2
   b6778:	931c      	str	r3, [sp, #112]	; 0x70
   b677a:	9b05      	ldr	r3, [sp, #20]
   b677c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b6780:	fb08 f303 	mul.w	r3, r8, r3
   b6784:	9325      	str	r3, [sp, #148]	; 0x94
    for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
   b6786:	2300      	movs	r3, #0
   b6788:	930c      	str	r3, [sp, #48]	; 0x30
                        arm_q7_to_q15_with_offset((q7_t *)input + (idx_y * input_x + idx_x) * input_ch,
   b678a:	b223      	sxth	r3, r4
   b678c:	ee09 3a10 	vmov	s18, r3
    for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
   b6790:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b6792:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   b6794:	4293      	cmp	r3, r2
   b6796:	db05      	blt.n	b67a4 <arm_depthwise_conv_s8_opt+0x12e>
                                 output_dims,
                                 output);
#endif /* ARM_MATH_MVEI | ARM_MATH_DSP */

    /* Return to application */
    return ARM_MATH_SUCCESS;
   b6798:	2000      	movs	r0, #0
}
   b679a:	b037      	add	sp, #220	; 0xdc
   b679c:	ecbd 8b04 	vpop	{d8-d9}
   b67a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        const int16_t base_idx_y = (i_out_y * stride_y) - pad_y;
   b67a4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   b67a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            const int ker_y_end = MIN(kernel_y, input_y - base_idx_y);
   b67a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
        const int16_t base_idx_y = (i_out_y * stride_y) - pad_y;
   b67aa:	fb13 f302 	smulbb	r3, r3, r2
   b67ae:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   b67b0:	1a9b      	subs	r3, r3, r2
   b67b2:	b21b      	sxth	r3, r3
        for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
   b67b4:	2b00      	cmp	r3, #0
            const int ker_y_start = MAX(0, -base_idx_y);
   b67b6:	f1c3 0200 	rsb	r2, r3, #0
   b67ba:	bfc8      	it	gt
   b67bc:	2200      	movgt	r2, #0
   b67be:	9204      	str	r2, [sp, #16]
            const int ker_y_end = MIN(kernel_y, input_y - base_idx_y);
   b67c0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   b67c2:	1ad2      	subs	r2, r2, r3
   b67c4:	428a      	cmp	r2, r1
   b67c6:	bfa8      	it	ge
   b67c8:	460a      	movge	r2, r1
   b67ca:	921a      	str	r2, [sp, #104]	; 0x68
                memset(&col_buffer[index], 0, (kernel_x * input_ch) * ker_y_start * sizeof(q15_t));
   b67cc:	9914      	ldr	r1, [sp, #80]	; 0x50
   b67ce:	9a04      	ldr	r2, [sp, #16]
            const int diff = kernel_y - ker_y_end;
   b67d0:	981a      	ldr	r0, [sp, #104]	; 0x68
                memset(&col_buffer[index], 0, (kernel_x * input_ch) * ker_y_start * sizeof(q15_t));
   b67d2:	434a      	muls	r2, r1
   b67d4:	0051      	lsls	r1, r2, #1
   b67d6:	ee08 1a10 	vmov	s16, r1
            const int diff = kernel_y - ker_y_end;
   b67da:	990f      	ldr	r1, [sp, #60]	; 0x3c
   b67dc:	1a09      	subs	r1, r1, r0
   b67de:	9116      	str	r1, [sp, #88]	; 0x58
                memset(&col_buffer[index], 0, (kernel_x * input_ch) * diff * sizeof(q15_t));
   b67e0:	9816      	ldr	r0, [sp, #88]	; 0x58
   b67e2:	9914      	ldr	r1, [sp, #80]	; 0x50
   b67e4:	4341      	muls	r1, r0
   b67e6:	0049      	lsls	r1, r1, #1
   b67e8:	ee08 1a90 	vmov	s17, r1
   b67ec:	9904      	ldr	r1, [sp, #16]
   b67ee:	2900      	cmp	r1, #0
   b67f0:	bf08      	it	eq
   b67f2:	2200      	moveq	r2, #0
   b67f4:	9226      	str	r2, [sp, #152]	; 0x98
   b67f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   b67f8:	440b      	add	r3, r1
   b67fa:	4353      	muls	r3, r2
   b67fc:	9335      	str	r3, [sp, #212]	; 0xd4
        for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
   b67fe:	9b4a      	ldr	r3, [sp, #296]	; 0x128
   b6800:	9310      	str	r3, [sp, #64]	; 0x40
   b6802:	2300      	movs	r3, #0
   b6804:	930d      	str	r3, [sp, #52]	; 0x34
   b6806:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b6808:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b680a:	4293      	cmp	r3, r2
   b680c:	db07      	blt.n	b681e <arm_depthwise_conv_s8_opt+0x1a8>
   b680e:	9b4a      	ldr	r3, [sp, #296]	; 0x128
   b6810:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   b6812:	4413      	add	r3, r2
   b6814:	934a      	str	r3, [sp, #296]	; 0x128
    for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
   b6816:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b6818:	3301      	adds	r3, #1
   b681a:	930c      	str	r3, [sp, #48]	; 0x30
   b681c:	e7b8      	b.n	b6790 <arm_depthwise_conv_s8_opt+0x11a>
            const int16_t base_idx_x = (i_out_x * stride_x) - pad_x;
   b681e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b6820:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   b6822:	fb13 f402 	smulbb	r4, r3, r2
   b6826:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   b6828:	1ae4      	subs	r4, r4, r3
            if (ker_y_start != 0)
   b682a:	9b04      	ldr	r3, [sp, #16]
            const int16_t base_idx_x = (i_out_x * stride_x) - pad_x;
   b682c:	b224      	sxth	r4, r4
            if (ker_y_start != 0)
   b682e:	b12b      	cbz	r3, b683c <arm_depthwise_conv_s8_opt+0x1c6>
                memset(&col_buffer[index], 0, (kernel_x * input_ch) * ker_y_start * sizeof(q15_t));
   b6830:	ee18 2a10 	vmov	r2, s16
   b6834:	9809      	ldr	r0, [sp, #36]	; 0x24
   b6836:	2100      	movs	r1, #0
   b6838:	f007 ffd7 	bl	be7ea <memset>
                index += (kernel_x * input_ch) * ker_y_start;
   b683c:	9b35      	ldr	r3, [sp, #212]	; 0xd4
                for (int i_ker_x = 0; i_ker_x < kernel_x; i_ker_x++)
   b683e:	f8dd a010 	ldr.w	sl, [sp, #16]
   b6842:	9f26      	ldr	r7, [sp, #152]	; 0x98
   b6844:	191d      	adds	r5, r3, r4
   b6846:	9b44      	ldr	r3, [sp, #272]	; 0x110
   b6848:	fb08 3505 	mla	r5, r8, r5, r3
            for (int i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
   b684c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   b684e:	459a      	cmp	sl, r3
   b6850:	db36      	blt.n	b68c0 <arm_depthwise_conv_s8_opt+0x24a>
            if (diff != 0)
   b6852:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b6854:	b13b      	cbz	r3, b6866 <arm_depthwise_conv_s8_opt+0x1f0>
                memset(&col_buffer[index], 0, (kernel_x * input_ch) * diff * sizeof(q15_t));
   b6856:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b6858:	ee18 2a90 	vmov	r2, s17
   b685c:	2100      	movs	r1, #0
   b685e:	eb03 0047 	add.w	r0, r3, r7, lsl #1
   b6862:	f007 ffc2 	bl	be7ea <memset>
            while (row_count)
   b6866:	9b48      	ldr	r3, [sp, #288]	; 0x120
   b6868:	f103 0610 	add.w	r6, r3, #16
   b686c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b686e:	f103 0910 	add.w	r9, r3, #16
   b6872:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b6874:	f103 0e10 	add.w	lr, r3, #16
   b6878:	9b10      	ldr	r3, [sp, #64]	; 0x40
   b687a:	f103 0c04 	add.w	ip, r3, #4
            row_count = output_ch / 4;
   b687e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b6880:	930a      	str	r3, [sp, #40]	; 0x28
            row_shift = 0;
   b6882:	2300      	movs	r3, #0
   b6884:	930b      	str	r3, [sp, #44]	; 0x2c
            while (row_count)
   b6886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b6888:	2b00      	cmp	r3, #0
   b688a:	d13f      	bne.n	b690c <arm_depthwise_conv_s8_opt+0x296>
   b688c:	9a24      	ldr	r2, [sp, #144]	; 0x90
   b688e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   b6890:	4413      	add	r3, r2
   b6892:	461d      	mov	r5, r3
            while (row_count)
   b6894:	461f      	mov	r7, r3
   b6896:	e9dd ec32 	ldrd	lr, ip, [sp, #200]	; 0xc8
   b689a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   b689c:	9301      	str	r3, [sp, #4]
   b689e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b68a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b68a2:	9302      	str	r3, [sp, #8]
   b68a4:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
    const q31_t remainder_mask = (1 << exponent) - 1;
   b68a8:	f04f 0b01 	mov.w	fp, #1
   b68ac:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   b68ae:	429a      	cmp	r2, r3
   b68b0:	f040 8177 	bne.w	b6ba2 <arm_depthwise_conv_s8_opt+0x52c>
   b68b4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   b68b6:	18eb      	adds	r3, r5, r3
   b68b8:	9310      	str	r3, [sp, #64]	; 0x40
        for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
   b68ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b68bc:	3301      	adds	r3, #1
   b68be:	e7a1      	b.n	b6804 <arm_depthwise_conv_s8_opt+0x18e>
                for (int i_ker_x = 0; i_ker_x < kernel_x; i_ker_x++)
   b68c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b68c2:	46ab      	mov	fp, r5
   b68c4:	eb03 0947 	add.w	r9, r3, r7, lsl #1
   b68c8:	2600      	movs	r6, #0
   b68ca:	9b05      	ldr	r3, [sp, #20]
   b68cc:	429e      	cmp	r6, r3
   b68ce:	db06      	blt.n	b68de <arm_depthwise_conv_s8_opt+0x268>
   b68d0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   b68d2:	441f      	add	r7, r3
            for (int i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
   b68d4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
   b68d6:	f10a 0a01 	add.w	sl, sl, #1
   b68da:	441d      	add	r5, r3
   b68dc:	e7b6      	b.n	b684c <arm_depthwise_conv_s8_opt+0x1d6>
                    if (idx_x < 0 || idx_x >= input_x)
   b68de:	1933      	adds	r3, r6, r4
   b68e0:	d402      	bmi.n	b68e8 <arm_depthwise_conv_s8_opt+0x272>
   b68e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   b68e4:	429a      	cmp	r2, r3
   b68e6:	dc09      	bgt.n	b68fc <arm_depthwise_conv_s8_opt+0x286>
                        memset(&col_buffer[index], 0, input_ch * sizeof(q15_t));
   b68e8:	9a00      	ldr	r2, [sp, #0]
   b68ea:	2100      	movs	r1, #0
   b68ec:	4648      	mov	r0, r9
   b68ee:	f007 ff7c 	bl	be7ea <memset>
                for (int i_ker_x = 0; i_ker_x < kernel_x; i_ker_x++)
   b68f2:	9b00      	ldr	r3, [sp, #0]
   b68f4:	3601      	adds	r6, #1
   b68f6:	4499      	add	r9, r3
   b68f8:	44c3      	add	fp, r8
   b68fa:	e7e6      	b.n	b68ca <arm_depthwise_conv_s8_opt+0x254>
                        arm_q7_to_q15_with_offset((q7_t *)input + (idx_y * input_x + idx_x) * input_ch,
   b68fc:	ee19 3a10 	vmov	r3, s18
   b6900:	4642      	mov	r2, r8
   b6902:	4649      	mov	r1, r9
   b6904:	4658      	mov	r0, fp
   b6906:	f7fd ff8c 	bl	b4822 <arm_q7_to_q15_with_offset>
   b690a:	e7f2      	b.n	b68f2 <arm_depthwise_conv_s8_opt+0x27c>
                q31_t sum_2 = *bias++;
   b690c:	e956 4304 	ldrd	r4, r3, [r6, #-16]
   b6910:	9301      	str	r3, [sp, #4]
                q31_t sum_3 = *bias++;
   b6912:	f856 3c08 	ldr.w	r3, [r6, #-8]
   b6916:	9302      	str	r3, [sp, #8]
                q31_t sum_4 = *bias++;
   b6918:	f856 3c04 	ldr.w	r3, [r6, #-4]
                q15_t *col_pos = col_buffer_start + row_shift;
   b691c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
                q31_t sum_4 = *bias++;
   b691e:	9303      	str	r3, [sp, #12]
                q15_t *col_pos = col_buffer_start + row_shift;
   b6920:	9b09      	ldr	r3, [sp, #36]	; 0x24
                uint16_t col_count = (kernel_x * kernel_y) / 2;
   b6922:	9d30      	ldr	r5, [sp, #192]	; 0xc0
                q15_t *col_pos = col_buffer_start + row_shift;
   b6924:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   b6928:	9312      	str	r3, [sp, #72]	; 0x48
                const q7_t *row_pos = kernel + row_shift;
   b692a:	9b46      	ldr	r3, [sp, #280]	; 0x118
                q15_t *col_pos = col_buffer_start + row_shift;
   b692c:	9812      	ldr	r0, [sp, #72]	; 0x48
                const q7_t *row_pos = kernel + row_shift;
   b692e:	4413      	add	r3, r2
   b6930:	9313      	str	r3, [sp, #76]	; 0x4c
                row_shift += 4;
   b6932:	4613      	mov	r3, r2
   b6934:	3304      	adds	r3, #4
   b6936:	b29b      	uxth	r3, r3
   b6938:	930b      	str	r3, [sp, #44]	; 0x2c
                const q7_t *row_pos = kernel + row_shift;
   b693a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b693c:	930e      	str	r3, [sp, #56]	; 0x38
                while (col_count)
   b693e:	2d00      	cmp	r5, #0
   b6940:	f040 80eb 	bne.w	b6b1a <arm_depthwise_conv_s8_opt+0x4a4>
   b6944:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   b6946:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b6948:	991c      	ldr	r1, [sp, #112]	; 0x70
   b694a:	4413      	add	r3, r2
   b694c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b694e:	440a      	add	r2, r1
                while (col_count)
   b6950:	9931      	ldr	r1, [sp, #196]	; 0xc4
   b6952:	b1e1      	cbz	r1, b698e <arm_depthwise_conv_s8_opt+0x318>
                    sum += row_pos[0] * col_pos[0];
   b6954:	981c      	ldr	r0, [sp, #112]	; 0x70
   b6956:	9913      	ldr	r1, [sp, #76]	; 0x4c
   b6958:	9d1d      	ldr	r5, [sp, #116]	; 0x74
   b695a:	5609      	ldrsb	r1, [r1, r0]
   b695c:	9812      	ldr	r0, [sp, #72]	; 0x48
   b695e:	5b40      	ldrh	r0, [r0, r5]
                    sum_2 += row_pos[1] * col_pos[1];
   b6960:	9d01      	ldr	r5, [sp, #4]
                    sum += row_pos[0] * col_pos[0];
   b6962:	fb10 4401 	smlabb	r4, r0, r1, r4
                    sum_2 += row_pos[1] * col_pos[1];
   b6966:	8858      	ldrh	r0, [r3, #2]
   b6968:	f992 1001 	ldrsb.w	r1, [r2, #1]
   b696c:	fb10 5101 	smlabb	r1, r0, r1, r5
   b6970:	9101      	str	r1, [sp, #4]
                    sum_3 += row_pos[2] * col_pos[2];
   b6972:	8898      	ldrh	r0, [r3, #4]
   b6974:	f992 1002 	ldrsb.w	r1, [r2, #2]
   b6978:	9d02      	ldr	r5, [sp, #8]
                    sum_4 += row_pos[3] * col_pos[3];
   b697a:	f992 2003 	ldrsb.w	r2, [r2, #3]
   b697e:	88db      	ldrh	r3, [r3, #6]
                    sum_3 += row_pos[2] * col_pos[2];
   b6980:	fb10 5101 	smlabb	r1, r0, r1, r5
   b6984:	9102      	str	r1, [sp, #8]
                    sum_4 += row_pos[3] * col_pos[3];
   b6986:	9903      	ldr	r1, [sp, #12]
   b6988:	fb13 1302 	smlabb	r3, r3, r2, r1
   b698c:	9303      	str	r3, [sp, #12]
                sum = arm_nn_requantize(sum, *output_mult++, *output_shift++);
   b698e:	f85e 1c10 	ldr.w	r1, [lr, #-16]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b6992:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
   b6996:	409c      	lsls	r4, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b6998:	f859 3c10 	ldr.w	r3, [r9, #-16]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b699c:	2900      	cmp	r1, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b699e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   b69a2:	f04f 0000 	mov.w	r0, #0
   b69a6:	fbc4 2003 	smlal	r2, r0, r4, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b69aa:	bfd4      	ite	le
   b69ac:	4249      	negle	r1, r1
   b69ae:	2100      	movgt	r1, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   b69b0:	2301      	movs	r3, #1
    result = (int32_t)(mult.long_long >> 31);
   b69b2:	0fd2      	lsrs	r2, r2, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   b69b4:	408b      	lsls	r3, r1
    result = (int32_t)(mult.long_long >> 31);
   b69b6:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   b69ba:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
   b69bc:	ea00 0403 	and.w	r4, r0, r3
    if (result < 0)
   b69c0:	4108      	asrs	r0, r1
    q31_t threshold = remainder_mask >> 1;
   b69c2:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
   b69c6:	bf48      	it	mi
   b69c8:	3301      	addmi	r3, #1
    if (remainder > threshold)
   b69ca:	429c      	cmp	r4, r3
                sum += output_offset;
   b69cc:	9b06      	ldr	r3, [sp, #24]
        result++;
   b69ce:	bfc8      	it	gt
   b69d0:	3001      	addgt	r0, #1
   b69d2:	4418      	add	r0, r3
                sum = MAX(sum, output_activation_min);
   b69d4:	9b07      	ldr	r3, [sp, #28]
   b69d6:	4298      	cmp	r0, r3
   b69d8:	bfb8      	it	lt
   b69da:	4618      	movlt	r0, r3
                sum = MIN(sum, output_activation_max);
   b69dc:	9b08      	ldr	r3, [sp, #32]
   b69de:	4298      	cmp	r0, r3
   b69e0:	bfa8      	it	ge
   b69e2:	4618      	movge	r0, r3
                *output++ = (q7_t)sum;
   b69e4:	f80c 0c04 	strb.w	r0, [ip, #-4]
                sum_2 = arm_nn_requantize(sum_2, *output_mult++, *output_shift++);
   b69e8:	f85e 1c0c 	ldr.w	r1, [lr, #-12]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b69ec:	9b01      	ldr	r3, [sp, #4]
   b69ee:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
   b69f2:	4083      	lsls	r3, r0
   b69f4:	4618      	mov	r0, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b69f6:	f859 3c0c 	ldr.w	r3, [r9, #-12]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b69fa:	2900      	cmp	r1, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b69fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   b6a00:	f04f 0400 	mov.w	r4, #0
   b6a04:	fbc0 2403 	smlal	r2, r4, r0, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b6a08:	bfd4      	ite	le
   b6a0a:	4249      	negle	r1, r1
   b6a0c:	2100      	movgt	r1, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   b6a0e:	2301      	movs	r3, #1
    result = (int32_t)(mult.long_long >> 31);
   b6a10:	0fd2      	lsrs	r2, r2, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   b6a12:	408b      	lsls	r3, r1
    result = (int32_t)(mult.long_long >> 31);
   b6a14:	ea42 0444 	orr.w	r4, r2, r4, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   b6a18:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
   b6a1a:	ea04 0003 	and.w	r0, r4, r3
    if (result < 0)
   b6a1e:	410c      	asrs	r4, r1
    q31_t threshold = remainder_mask >> 1;
   b6a20:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
   b6a24:	bf48      	it	mi
   b6a26:	3301      	addmi	r3, #1
    if (remainder > threshold)
   b6a28:	4298      	cmp	r0, r3
                sum_2 += output_offset;
   b6a2a:	9b06      	ldr	r3, [sp, #24]
        result++;
   b6a2c:	bfc8      	it	gt
   b6a2e:	3401      	addgt	r4, #1
   b6a30:	441c      	add	r4, r3
                sum_2 = MAX(sum_2, output_activation_min);
   b6a32:	9b07      	ldr	r3, [sp, #28]
   b6a34:	429c      	cmp	r4, r3
   b6a36:	bfb8      	it	lt
   b6a38:	461c      	movlt	r4, r3
                sum_2 = MIN(sum_2, output_activation_max);
   b6a3a:	9b08      	ldr	r3, [sp, #32]
   b6a3c:	429c      	cmp	r4, r3
   b6a3e:	bfa8      	it	ge
   b6a40:	461c      	movge	r4, r3
                *output++ = (q7_t)sum_2;
   b6a42:	f80c 4c03 	strb.w	r4, [ip, #-3]
                sum_3 = arm_nn_requantize(sum_3, *output_mult++, *output_shift++);
   b6a46:	f85e 1c08 	ldr.w	r1, [lr, #-8]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b6a4a:	9b02      	ldr	r3, [sp, #8]
   b6a4c:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
   b6a50:	4083      	lsls	r3, r0
   b6a52:	4618      	mov	r0, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b6a54:	f859 3c08 	ldr.w	r3, [r9, #-8]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b6a58:	2900      	cmp	r1, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b6a5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   b6a5e:	f04f 0400 	mov.w	r4, #0
   b6a62:	fbc0 2403 	smlal	r2, r4, r0, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b6a66:	bfd4      	ite	le
   b6a68:	4249      	negle	r1, r1
   b6a6a:	2100      	movgt	r1, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   b6a6c:	2301      	movs	r3, #1
    result = (int32_t)(mult.long_long >> 31);
   b6a6e:	0fd2      	lsrs	r2, r2, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   b6a70:	408b      	lsls	r3, r1
    result = (int32_t)(mult.long_long >> 31);
   b6a72:	ea42 0444 	orr.w	r4, r2, r4, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   b6a76:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
   b6a78:	ea04 0003 	and.w	r0, r4, r3
    if (result < 0)
   b6a7c:	410c      	asrs	r4, r1
    q31_t threshold = remainder_mask >> 1;
   b6a7e:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
   b6a82:	bf48      	it	mi
   b6a84:	3301      	addmi	r3, #1
    if (remainder > threshold)
   b6a86:	4298      	cmp	r0, r3
                sum_3 += output_offset;
   b6a88:	9b06      	ldr	r3, [sp, #24]
        result++;
   b6a8a:	bfc8      	it	gt
   b6a8c:	3401      	addgt	r4, #1
   b6a8e:	441c      	add	r4, r3
                sum_3 = MAX(sum_3, output_activation_min);
   b6a90:	9b07      	ldr	r3, [sp, #28]
   b6a92:	429c      	cmp	r4, r3
   b6a94:	bfb8      	it	lt
   b6a96:	461c      	movlt	r4, r3
                sum_3 = MIN(sum_3, output_activation_max);
   b6a98:	9b08      	ldr	r3, [sp, #32]
   b6a9a:	429c      	cmp	r4, r3
   b6a9c:	bfa8      	it	ge
   b6a9e:	461c      	movge	r4, r3
                *output++ = (q7_t)sum_3;
   b6aa0:	f80c 4c02 	strb.w	r4, [ip, #-2]
                sum_4 = arm_nn_requantize(sum_4, *output_mult++, *output_shift++);
   b6aa4:	f85e 1c04 	ldr.w	r1, [lr, #-4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b6aa8:	9b03      	ldr	r3, [sp, #12]
   b6aaa:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
   b6aae:	4083      	lsls	r3, r0
   b6ab0:	4618      	mov	r0, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b6ab2:	f859 3c04 	ldr.w	r3, [r9, #-4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b6ab6:	2900      	cmp	r1, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b6ab8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   b6abc:	f04f 0400 	mov.w	r4, #0
   b6ac0:	fbc0 2403 	smlal	r2, r4, r0, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b6ac4:	bfd4      	ite	le
   b6ac6:	4249      	negle	r1, r1
   b6ac8:	2100      	movgt	r1, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   b6aca:	2301      	movs	r3, #1
    result = (int32_t)(mult.long_long >> 31);
   b6acc:	0fd2      	lsrs	r2, r2, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   b6ace:	408b      	lsls	r3, r1
    result = (int32_t)(mult.long_long >> 31);
   b6ad0:	ea42 0444 	orr.w	r4, r2, r4, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   b6ad4:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
   b6ad6:	ea04 0003 	and.w	r0, r4, r3
    if (result < 0)
   b6ada:	410c      	asrs	r4, r1
    q31_t threshold = remainder_mask >> 1;
   b6adc:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
   b6ae0:	bf48      	it	mi
   b6ae2:	3301      	addmi	r3, #1
    if (remainder > threshold)
   b6ae4:	4298      	cmp	r0, r3
                sum_4 += output_offset;
   b6ae6:	9b06      	ldr	r3, [sp, #24]
        result++;
   b6ae8:	bfc8      	it	gt
   b6aea:	3401      	addgt	r4, #1
   b6aec:	441c      	add	r4, r3
                sum_4 = MAX(sum_4, output_activation_min);
   b6aee:	9b07      	ldr	r3, [sp, #28]
   b6af0:	429c      	cmp	r4, r3
   b6af2:	bfb8      	it	lt
   b6af4:	461c      	movlt	r4, r3
                sum_4 = MIN(sum_4, output_activation_max);
   b6af6:	9b08      	ldr	r3, [sp, #32]
   b6af8:	429c      	cmp	r4, r3
   b6afa:	bfa8      	it	ge
   b6afc:	461c      	movge	r4, r3
                row_count--;
   b6afe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                *output++ = (q7_t)sum_4;
   b6b00:	f80c 4c01 	strb.w	r4, [ip, #-1]
                row_count--;
   b6b04:	3b01      	subs	r3, #1
   b6b06:	b29b      	uxth	r3, r3
   b6b08:	930a      	str	r3, [sp, #40]	; 0x28
   b6b0a:	3610      	adds	r6, #16
   b6b0c:	f109 0910 	add.w	r9, r9, #16
   b6b10:	f10e 0e10 	add.w	lr, lr, #16
   b6b14:	f10c 0c04 	add.w	ip, ip, #4
   b6b18:	e6b5      	b.n	b6886 <arm_depthwise_conv_s8_opt+0x210>
    memcpy(&val, in_q7, 4);
   b6b1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b6b1c:	9a00      	ldr	r2, [sp, #0]
   b6b1e:	6819      	ldr	r1, [r3, #0]
   b6b20:	f853 3008 	ldr.w	r3, [r3, r8]
    memcpy(&val, in_q15, 4);
   b6b24:	f8d0 b000 	ldr.w	fp, [r0]
   b6b28:	5817      	ldr	r7, [r2, r0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   b6b2a:	fa2f f281 	sxtb16	r2, r1
                    op_c = __PKHBT(op_b, op_a, 16);
   b6b2e:	eac7 4a0b 	pkhbt	sl, r7, fp, lsl #16
  return (op1 >> op2) | (op1 << (32U - op2));
   b6b32:	ea4f 2131 	mov.w	r1, r1, ror #8
                    op_a = __PKHTB(op_b, op_a, 16);
   b6b36:	eac7 472b 	pkhtb	r7, r7, fp, asr #16
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   b6b3a:	fa2f f181 	sxtb16	r1, r1
   b6b3e:	911f      	str	r1, [sp, #124]	; 0x7c
   b6b40:	fa2f f183 	sxtb16	r1, r3
  return (op1 >> op2) | (op1 << (32U - op2));
   b6b44:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   b6b48:	9120      	str	r1, [sp, #128]	; 0x80
   b6b4a:	fa2f f383 	sxtb16	r3, r3
                    op_b = __PKHBT(ip_b2, ip_a2, 16);
   b6b4e:	eac1 4b02 	pkhbt	fp, r1, r2, lsl #16
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   b6b52:	fb2a 440b 	smlad	r4, sl, fp, r4
                    op_b = __PKHBT(ip_b1, ip_a1, 16);
   b6b56:	991f      	ldr	r1, [sp, #124]	; 0x7c
   b6b58:	eac1 4a03 	pkhbt	sl, r1, r3, lsl #16
   b6b5c:	9901      	ldr	r1, [sp, #4]
   b6b5e:	fb27 110a 	smlad	r1, r7, sl, r1
   b6b62:	9101      	str	r1, [sp, #4]
   b6b64:	9922      	ldr	r1, [sp, #136]	; 0x88
   b6b66:	f8d0 a004 	ldr.w	sl, [r0, #4]
   b6b6a:	580f      	ldr	r7, [r1, r0]
                    op_b = __PKHTB(ip_a2, ip_b2, 16);
   b6b6c:	9920      	ldr	r1, [sp, #128]	; 0x80
                    op_c = __PKHBT(op_b, op_a, 16);
   b6b6e:	eac7 4b0a 	pkhbt	fp, r7, sl, lsl #16
                    op_b = __PKHTB(ip_a2, ip_b2, 16);
   b6b72:	eac2 4221 	pkhtb	r2, r2, r1, asr #16
                    op_a = __PKHTB(op_b, op_a, 16);
   b6b76:	eac7 472a 	pkhtb	r7, r7, sl, asr #16
   b6b7a:	9902      	ldr	r1, [sp, #8]
   b6b7c:	fb2b 1202 	smlad	r2, fp, r2, r1
   b6b80:	9202      	str	r2, [sp, #8]
                    op_b = __PKHTB(ip_a1, ip_b1, 16);
   b6b82:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   b6b84:	eac3 4322 	pkhtb	r3, r3, r2, asr #16
   b6b88:	9a03      	ldr	r2, [sp, #12]
   b6b8a:	fb27 2303 	smlad	r3, r7, r3, r2
                    row_pos += input_ch << 1;
   b6b8e:	9a00      	ldr	r2, [sp, #0]
   b6b90:	9303      	str	r3, [sp, #12]
   b6b92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b6b94:	4413      	add	r3, r2
   b6b96:	930e      	str	r3, [sp, #56]	; 0x38
                    col_pos += input_ch << 1;
   b6b98:	9b15      	ldr	r3, [sp, #84]	; 0x54
                    col_count--;
   b6b9a:	3d01      	subs	r5, #1
                    col_pos += input_ch << 1;
   b6b9c:	4418      	add	r0, r3
                    col_count--;
   b6b9e:	b2ad      	uxth	r5, r5
   b6ba0:	e6cd      	b.n	b693e <arm_depthwise_conv_s8_opt+0x2c8>
                q15_t *col_pos = col_buffer_start + row_shift;
   b6ba2:	4613      	mov	r3, r2
                q31_t sum = *bias++;
   b6ba4:	9846      	ldr	r0, [sp, #280]	; 0x118
   b6ba6:	9a01      	ldr	r2, [sp, #4]
   b6ba8:	18c4      	adds	r4, r0, r3
   b6baa:	f852 1b04 	ldr.w	r1, [r2], #4
   b6bae:	9809      	ldr	r0, [sp, #36]	; 0x24
   b6bb0:	9201      	str	r2, [sp, #4]
                row_shift += 1;
   b6bb2:	1c5a      	adds	r2, r3, #1
   b6bb4:	b292      	uxth	r2, r2
                for (int i = 0; i < col_count; i++)
   b6bb6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   b6bba:	2000      	movs	r0, #0
   b6bbc:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
   b6bbe:	4286      	cmp	r6, r0
   b6bc0:	dc2d      	bgt.n	b6c1e <arm_depthwise_conv_s8_opt+0x5a8>
                sum = arm_nn_requantize(sum, *output_mult++, *output_shift++);
   b6bc2:	f85c 0b04 	ldr.w	r0, [ip], #4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b6bc6:	f85e 4b04 	ldr.w	r4, [lr], #4
   b6bca:	9e02      	ldr	r6, [sp, #8]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b6bcc:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   b6bd0:	4099      	lsls	r1, r3
   b6bd2:	2800      	cmp	r0, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b6bd4:	4653      	mov	r3, sl
   b6bd6:	fbc1 3604 	smlal	r3, r6, r1, r4
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b6bda:	bfd4      	ite	le
   b6bdc:	4240      	negle	r0, r0
   b6bde:	2000      	movgt	r0, #0
    result = (int32_t)(mult.long_long >> 31);
   b6be0:	0fdb      	lsrs	r3, r3, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   b6be2:	fa0b f100 	lsl.w	r1, fp, r0
    result = (int32_t)(mult.long_long >> 31);
   b6be6:	ea43 0946 	orr.w	r9, r3, r6, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   b6bea:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
   b6bec:	ea09 0401 	and.w	r4, r9, r1
    if (result < 0)
   b6bf0:	fa59 f900 	asrs.w	r9, r9, r0
    q31_t threshold = remainder_mask >> 1;
   b6bf4:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
   b6bf8:	bf48      	it	mi
   b6bfa:	3101      	addmi	r1, #1
                sum += output_offset;
   b6bfc:	9b06      	ldr	r3, [sp, #24]
    if (remainder > threshold)
   b6bfe:	428c      	cmp	r4, r1
        result++;
   b6c00:	bfc8      	it	gt
   b6c02:	f109 0901 	addgt.w	r9, r9, #1
   b6c06:	4499      	add	r9, r3
                sum = MAX(sum, output_activation_min);
   b6c08:	9b07      	ldr	r3, [sp, #28]
   b6c0a:	4599      	cmp	r9, r3
   b6c0c:	bfb8      	it	lt
   b6c0e:	4699      	movlt	r9, r3
                sum = MIN(sum, output_activation_max);
   b6c10:	9b08      	ldr	r3, [sp, #32]
   b6c12:	4599      	cmp	r9, r3
   b6c14:	bfa8      	it	ge
   b6c16:	4699      	movge	r9, r3
                *output++ = (q7_t)sum;
   b6c18:	f807 9b01 	strb.w	r9, [r7], #1
                row_count--;
   b6c1c:	e646      	b.n	b68ac <arm_depthwise_conv_s8_opt+0x236>
                    sum += row_pos[i * input_ch] * col_pos[i * input_ch];
   b6c1e:	881e      	ldrh	r6, [r3, #0]
   b6c20:	f994 9000 	ldrsb.w	r9, [r4]
   b6c24:	fb16 1109 	smlabb	r1, r6, r9, r1
                for (int i = 0; i < col_count; i++)
   b6c28:	9e00      	ldr	r6, [sp, #0]
   b6c2a:	3001      	adds	r0, #1
   b6c2c:	4444      	add	r4, r8
   b6c2e:	4433      	add	r3, r6
   b6c30:	e7c4      	b.n	b6bbc <arm_depthwise_conv_s8_opt+0x546>
        return ARM_MATH_SIZE_MISMATCH;
   b6c32:	f06f 0002 	mvn.w	r0, #2
   b6c36:	e5b0      	b.n	b679a <arm_depthwise_conv_s8_opt+0x124>

000b6c38 <arm_depthwise_conv_s8_opt_get_buffer_size>:
{
#if defined(ARM_MATH_MVEI)
    /* The + 4 accounts for out of bounds read of the lhs buffers in the *_nt_t_* functions.  */
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * (int32_t)sizeof(int16_t) + 4;
#elif defined(ARM_MATH_DSP)
    return (input_dims->c * filter_dims->w * filter_dims->h) * sizeof(int16_t);
   b6c38:	688b      	ldr	r3, [r1, #8]
   b6c3a:	68c0      	ldr	r0, [r0, #12]
   b6c3c:	4358      	muls	r0, r3
   b6c3e:	684b      	ldr	r3, [r1, #4]
   b6c40:	4358      	muls	r0, r3
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
   b6c42:	0040      	lsls	r0, r0, #1
   b6c44:	4770      	bx	lr

000b6c46 <arm_convolve_wrapper_s8>:
                                   const q7_t *filter_data,
                                   const cmsis_nn_dims *bias_dims,
                                   const int32_t *bias_data,
                                   const cmsis_nn_dims *output_dims,
                                   q7_t *output_data)
{
   b6c46:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6c4a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   b6c4c:	9600      	str	r6, [sp, #0]
   b6c4e:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
   b6c52:	9701      	str	r7, [sp, #4]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
   b6c54:	690f      	ldr	r7, [r1, #16]
{
   b6c56:	e9dd ba0f 	ldrd	fp, sl, [sp, #60]	; 0x3c
   b6c5a:	e9dd 8911 	ldrd	r8, r9, [sp, #68]	; 0x44
   b6c5e:	4684      	mov	ip, r0
   b6c60:	460c      	mov	r4, r1
   b6c62:	4696      	mov	lr, r2
   b6c64:	461d      	mov	r5, r3
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
   b6c66:	b9af      	cbnz	r7, b6c94 <arm_convolve_wrapper_s8+0x4e>
   b6c68:	694f      	ldr	r7, [r1, #20]
   b6c6a:	b99f      	cbnz	r7, b6c94 <arm_convolve_wrapper_s8+0x4e>
   b6c6c:	68df      	ldr	r7, [r3, #12]
   b6c6e:	07bf      	lsls	r7, r7, #30
   b6c70:	d110      	bne.n	b6c94 <arm_convolve_wrapper_s8+0x4e>
   b6c72:	688f      	ldr	r7, [r1, #8]
   b6c74:	2f01      	cmp	r7, #1
   b6c76:	d10d      	bne.n	b6c94 <arm_convolve_wrapper_s8+0x4e>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
   b6c78:	68cf      	ldr	r7, [r1, #12]
   b6c7a:	2f01      	cmp	r7, #1
   b6c7c:	d10a      	bne.n	b6c94 <arm_convolve_wrapper_s8+0x4e>
   b6c7e:	68b7      	ldr	r7, [r6, #8]
   b6c80:	2f01      	cmp	r7, #1
   b6c82:	d107      	bne.n	b6c94 <arm_convolve_wrapper_s8+0x4e>
   b6c84:	6877      	ldr	r7, [r6, #4]
   b6c86:	2f01      	cmp	r7, #1
   b6c88:	d104      	bne.n	b6c94 <arm_convolve_wrapper_s8+0x4e>
                               bias_dims,
                               bias_data,
                               output_dims,
                               output_data);
    }
}
   b6c8a:	b003      	add	sp, #12
   b6c8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return arm_convolve_1x1_s8_fast(ctx,
   b6c90:	f7fe bf49 	b.w	b5b26 <arm_convolve_1x1_s8_fast>
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
   b6c94:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b6c98:	2b01      	cmp	r3, #1
   b6c9a:	d11e      	bne.n	b6cda <arm_convolve_wrapper_s8+0x94>
   b6c9c:	686b      	ldr	r3, [r5, #4]
   b6c9e:	2b01      	cmp	r3, #1
   b6ca0:	d11b      	bne.n	b6cda <arm_convolve_wrapper_s8+0x94>
   b6ca2:	6873      	ldr	r3, [r6, #4]
   b6ca4:	2b01      	cmp	r3, #1
   b6ca6:	d118      	bne.n	b6cda <arm_convolve_wrapper_s8+0x94>
   b6ca8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b6cac:	079b      	lsls	r3, r3, #30
   b6cae:	d114      	bne.n	b6cda <arm_convolve_wrapper_s8+0x94>
   b6cb0:	682b      	ldr	r3, [r5, #0]
   b6cb2:	2b01      	cmp	r3, #1
   b6cb4:	d111      	bne.n	b6cda <arm_convolve_wrapper_s8+0x94>
        return arm_convolve_1_x_n_s8(ctx,
   b6cb6:	9b01      	ldr	r3, [sp, #4]
   b6cb8:	e9cd 630d 	strd	r6, r3, [sp, #52]	; 0x34
   b6cbc:	9b00      	ldr	r3, [sp, #0]
   b6cbe:	930c      	str	r3, [sp, #48]	; 0x30
   b6cc0:	4672      	mov	r2, lr
   b6cc2:	462b      	mov	r3, r5
   b6cc4:	4621      	mov	r1, r4
   b6cc6:	4660      	mov	r0, ip
   b6cc8:	e9cd 8911 	strd	r8, r9, [sp, #68]	; 0x44
   b6ccc:	e9cd ba0f 	strd	fp, sl, [sp, #60]	; 0x3c
}
   b6cd0:	b003      	add	sp, #12
   b6cd2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return arm_convolve_1_x_n_s8(ctx,
   b6cd6:	f7ff b9cb 	b.w	b6070 <arm_convolve_1_x_n_s8>
        return arm_convolve_s8(ctx,
   b6cda:	9b01      	ldr	r3, [sp, #4]
   b6cdc:	e9cd 630d 	strd	r6, r3, [sp, #52]	; 0x34
   b6ce0:	9b00      	ldr	r3, [sp, #0]
   b6ce2:	930c      	str	r3, [sp, #48]	; 0x30
   b6ce4:	4672      	mov	r2, lr
   b6ce6:	462b      	mov	r3, r5
   b6ce8:	4621      	mov	r1, r4
   b6cea:	4660      	mov	r0, ip
   b6cec:	e9cd 8911 	strd	r8, r9, [sp, #68]	; 0x44
   b6cf0:	e9cd ba0f 	strd	fp, sl, [sp, #60]	; 0x3c
}
   b6cf4:	b003      	add	sp, #12
   b6cf6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return arm_convolve_s8(ctx,
   b6cfa:	f000 b832 	b.w	b6d62 <arm_convolve_s8>

000b6cfe <arm_convolve_wrapper_s8_get_buffer_size>:

int32_t arm_convolve_wrapper_s8_get_buffer_size(const cmsis_nn_conv_params *conv_params,
                                                const cmsis_nn_dims *input_dims,
                                                const cmsis_nn_dims *filter_dims,
                                                const cmsis_nn_dims *output_dims)
{
   b6cfe:	b410      	push	{r4}
   b6d00:	4604      	mov	r4, r0
   b6d02:	4608      	mov	r0, r1
   b6d04:	4611      	mov	r1, r2
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
   b6d06:	6922      	ldr	r2, [r4, #16]
   b6d08:	b9a2      	cbnz	r2, b6d34 <arm_convolve_wrapper_s8_get_buffer_size+0x36>
   b6d0a:	6962      	ldr	r2, [r4, #20]
   b6d0c:	b992      	cbnz	r2, b6d34 <arm_convolve_wrapper_s8_get_buffer_size+0x36>
   b6d0e:	68c2      	ldr	r2, [r0, #12]
   b6d10:	0792      	lsls	r2, r2, #30
   b6d12:	d10f      	bne.n	b6d34 <arm_convolve_wrapper_s8_get_buffer_size+0x36>
   b6d14:	68a2      	ldr	r2, [r4, #8]
   b6d16:	2a01      	cmp	r2, #1
   b6d18:	d10c      	bne.n	b6d34 <arm_convolve_wrapper_s8_get_buffer_size+0x36>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
   b6d1a:	68e2      	ldr	r2, [r4, #12]
   b6d1c:	2a01      	cmp	r2, #1
   b6d1e:	d109      	bne.n	b6d34 <arm_convolve_wrapper_s8_get_buffer_size+0x36>
   b6d20:	688a      	ldr	r2, [r1, #8]
   b6d22:	2a01      	cmp	r2, #1
   b6d24:	d106      	bne.n	b6d34 <arm_convolve_wrapper_s8_get_buffer_size+0x36>
   b6d26:	684a      	ldr	r2, [r1, #4]
   b6d28:	2a01      	cmp	r2, #1
   b6d2a:	d103      	bne.n	b6d34 <arm_convolve_wrapper_s8_get_buffer_size+0x36>
    }
    else
    {
        return arm_convolve_s8_get_buffer_size(input_dims, filter_dims);
    }
}
   b6d2c:	f85d 4b04 	ldr.w	r4, [sp], #4
        return arm_convolve_1x1_s8_fast_get_buffer_size(input_dims);
   b6d30:	f7fe bf2a 	b.w	b5b88 <arm_convolve_1x1_s8_fast_get_buffer_size>
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
   b6d34:	685a      	ldr	r2, [r3, #4]
   b6d36:	2a01      	cmp	r2, #1
   b6d38:	d10f      	bne.n	b6d5a <arm_convolve_wrapper_s8_get_buffer_size+0x5c>
   b6d3a:	6842      	ldr	r2, [r0, #4]
   b6d3c:	2a01      	cmp	r2, #1
   b6d3e:	d10c      	bne.n	b6d5a <arm_convolve_wrapper_s8_get_buffer_size+0x5c>
   b6d40:	684a      	ldr	r2, [r1, #4]
   b6d42:	2a01      	cmp	r2, #1
   b6d44:	d109      	bne.n	b6d5a <arm_convolve_wrapper_s8_get_buffer_size+0x5c>
   b6d46:	689b      	ldr	r3, [r3, #8]
   b6d48:	079b      	lsls	r3, r3, #30
   b6d4a:	d106      	bne.n	b6d5a <arm_convolve_wrapper_s8_get_buffer_size+0x5c>
   b6d4c:	6803      	ldr	r3, [r0, #0]
   b6d4e:	2b01      	cmp	r3, #1
   b6d50:	d103      	bne.n	b6d5a <arm_convolve_wrapper_s8_get_buffer_size+0x5c>
}
   b6d52:	f85d 4b04 	ldr.w	r4, [sp], #4
        return arm_convolve_1_x_n_s8_get_buffer_size(input_dims, filter_dims);
   b6d56:	f7ff b999 	b.w	b608c <arm_convolve_1_x_n_s8_get_buffer_size>
}
   b6d5a:	f85d 4b04 	ldr.w	r4, [sp], #4
        return arm_convolve_s8_get_buffer_size(input_dims, filter_dims);
   b6d5e:	f000 b983 	b.w	b7068 <arm_convolve_s8_get_buffer_size>

000b6d62 <arm_convolve_s8>:
                           const q7_t *filter_data,
                           const cmsis_nn_dims *bias_dims,
                           const int32_t *bias_data,
                           const cmsis_nn_dims *output_dims,
                           q7_t *output_data)
{
   b6d62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6d66:	ed2d 8b02 	vpush	{d8}
   b6d6a:	b0b1      	sub	sp, #196	; 0xc4
   b6d6c:	4694      	mov	ip, r2
   b6d6e:	9c41      	ldr	r4, [sp, #260]	; 0x104
   b6d70:	9e3d      	ldr	r6, [sp, #244]	; 0xf4
    const uint16_t input_ch = input_dims->c;
    const uint16_t kernel_x = filter_dims->w;
    const uint16_t kernel_y = filter_dims->h;
    const uint16_t output_x = output_dims->w;
    const uint16_t output_y = output_dims->h;
    const uint16_t output_ch = output_dims->c;
   b6d72:	68e7      	ldr	r7, [r4, #12]
    q15_t *buffer_a = (q15_t *)ctx->buf;
   b6d74:	f8d0 b000 	ldr.w	fp, [r0]
    const uint16_t input_batches = input_dims->n;
   b6d78:	6818      	ldr	r0, [r3, #0]
    const uint16_t input_ch = input_dims->c;
   b6d7a:	68dd      	ldr	r5, [r3, #12]
    const uint16_t input_batches = input_dims->n;
   b6d7c:	901f      	str	r0, [sp, #124]	; 0x7c
    const uint16_t output_ch = output_dims->c;
   b6d7e:	b2ba      	uxth	r2, r7
   b6d80:	ee08 2a10 	vmov	s16, r2

    const uint16_t pad_x = conv_params->padding.w;
   b6d84:	690a      	ldr	r2, [r1, #16]
   b6d86:	9220      	str	r2, [sp, #128]	; 0x80
    const uint16_t pad_y = conv_params->padding.h;
   b6d88:	694a      	ldr	r2, [r1, #20]
   b6d8a:	9221      	str	r2, [sp, #132]	; 0x84
    const uint16_t stride_x = conv_params->stride.w;
   b6d8c:	688a      	ldr	r2, [r1, #8]
   b6d8e:	9222      	str	r2, [sp, #136]	; 0x88
    const uint16_t stride_y = conv_params->stride.h;
   b6d90:	68ca      	ldr	r2, [r1, #12]
   b6d92:	9223      	str	r2, [sp, #140]	; 0x8c

    const int32_t input_offset = conv_params->input_offset;
    const int32_t out_offset = conv_params->output_offset;
   b6d94:	684a      	ldr	r2, [r1, #4]
   b6d96:	9214      	str	r2, [sp, #80]	; 0x50
    const int32_t out_activation_min = conv_params->activation.min;
   b6d98:	6a0a      	ldr	r2, [r1, #32]
   b6d9a:	9215      	str	r2, [sp, #84]	; 0x54
    const int32_t out_activation_max = conv_params->activation.max;
   b6d9c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
   b6d9e:	9216      	str	r2, [sp, #88]	; 0x58
    int32_t *output_mult = quant_params->multiplier;
   b6da0:	f8dc 2000 	ldr.w	r2, [ip]
   b6da4:	9217      	str	r2, [sp, #92]	; 0x5c
    int32_t *output_shift = quant_params->shift;
   b6da6:	f8dc 2004 	ldr.w	r2, [ip, #4]
   b6daa:	9218      	str	r2, [sp, #96]	; 0x60
   b6dac:	88a2      	ldrh	r2, [r4, #4]
   b6dae:	9219      	str	r2, [sp, #100]	; 0x64
   b6db0:	891a      	ldrh	r2, [r3, #8]
    const uint16_t kernel_y = filter_dims->h;
   b6db2:	e9d6 6001 	ldrd	r6, r0, [r6, #4]

    int i_batch;
    for (i_batch = 0; i_batch < input_batches; i_batch++)
   b6db6:	920b      	str	r2, [sp, #44]	; 0x2c
   b6db8:	889b      	ldrh	r3, [r3, #4]
   b6dba:	9313      	str	r3, [sp, #76]	; 0x4c
                }
            }
        }
#endif
        /* Advance to the next batch */
        input_data += (input_x * input_y * input_ch);
   b6dbc:	4613      	mov	r3, r2
   b6dbe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b6dc0:	fa1f fa85 	uxth.w	sl, r5
   b6dc4:	4353      	muls	r3, r2
   b6dc6:	fb0a f303 	mul.w	r3, sl, r3
   b6dca:	9329      	str	r3, [sp, #164]	; 0xa4
   b6dcc:	8923      	ldrh	r3, [r4, #8]
   b6dce:	931a      	str	r3, [sp, #104]	; 0x68
   b6dd0:	b2bb      	uxth	r3, r7
   b6dd2:	931b      	str	r3, [sp, #108]	; 0x6c
        output_data += (output_x * output_y * output_ch);
   b6dd4:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	; 0x64
   b6dd8:	4353      	muls	r3, r2
   b6dda:	ee18 2a10 	vmov	r2, s16
   b6dde:	4353      	muls	r3, r2
   b6de0:	9328      	str	r3, [sp, #160]	; 0xa0
   b6de2:	b2b3      	uxth	r3, r6
   b6de4:	931c      	str	r3, [sp, #112]	; 0x70
   b6de6:	b283      	uxth	r3, r0
   b6de8:	9312      	str	r3, [sp, #72]	; 0x48
   b6dea:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b6dec:	9b1c      	ldr	r3, [sp, #112]	; 0x70
                col_count = input_ch * kernel_y * kernel_x & 0x3;
   b6dee:	fb10 f006 	smulbb	r0, r0, r6
   b6df2:	435a      	muls	r2, r3
   b6df4:	fb10 f505 	smulbb	r5, r0, r5
                uint16_t col_count = (input_ch * kernel_y * kernel_x) >> 2;
   b6df8:	fb02 f30a 	mul.w	r3, r2, sl
                col_count = input_ch * kernel_y * kernel_x & 0x3;
   b6dfc:	b2a8      	uxth	r0, r5
   b6dfe:	9026      	str	r0, [sp, #152]	; 0x98
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
   b6e00:	eb0b 0083 	add.w	r0, fp, r3, lsl #2
   b6e04:	9024      	str	r0, [sp, #144]	; 0x90
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
   b6e06:	ea4f 004a 	mov.w	r0, sl, lsl #1
   b6e0a:	9009      	str	r0, [sp, #36]	; 0x24
   b6e0c:	f3c3 038f 	ubfx	r3, r3, #2, #16
   b6e10:	f005 0003 	and.w	r0, r5, #3
   b6e14:	901e      	str	r0, [sp, #120]	; 0x78
   b6e16:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   b6e1a:	901d      	str	r0, [sp, #116]	; 0x74
   b6e1c:	983e      	ldr	r0, [sp, #248]	; 0xf8
   b6e1e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   b6e22:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
   b6e26:	932d      	str	r3, [sp, #180]	; 0xb4
   b6e28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b6e2a:	902a      	str	r0, [sp, #168]	; 0xa8
   b6e2c:	fb0a f303 	mul.w	r3, sl, r3
   b6e30:	9327      	str	r3, [sp, #156]	; 0x9c
   b6e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b6e34:	4353      	muls	r3, r2
   b6e36:	932b      	str	r3, [sp, #172]	; 0xac
   b6e38:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b6e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b6e3c:	4353      	muls	r3, r2
   b6e3e:	932c      	str	r3, [sp, #176]	; 0xb0
    for (i_batch = 0; i_batch < input_batches; i_batch++)
   b6e40:	2300      	movs	r3, #0
   b6e42:	930d      	str	r3, [sp, #52]	; 0x34
                            arm_q7_to_q15_with_offset(input_data + (i_ker_y * input_x + i_ker_x) * input_ch,
   b6e44:	f9b1 3000 	ldrsh.w	r3, [r1]
   b6e48:	ee08 3a90 	vmov	s17, r3
    for (i_batch = 0; i_batch < input_batches; i_batch++)
   b6e4c:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
   b6e50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b6e52:	429a      	cmp	r2, r3
   b6e54:	f2c0 8086 	blt.w	b6f64 <arm_convolve_s8+0x202>
    }

    /* Return to application */
    return ARM_MATH_SUCCESS;
}
   b6e58:	2000      	movs	r0, #0
   b6e5a:	b031      	add	sp, #196	; 0xc4
   b6e5c:	ecbd 8b02 	vpop	{d8}
   b6e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
   b6e64:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
   b6e68:	f8bd 2080 	ldrh.w	r2, [sp, #128]	; 0x80
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
   b6e6c:	9e10      	ldr	r6, [sp, #64]	; 0x40
   b6e6e:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
   b6e72:	fb09 f303 	mul.w	r3, r9, r3
   b6e76:	1a9b      	subs	r3, r3, r2
   b6e78:	9311      	str	r3, [sp, #68]	; 0x44
   b6e7a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   b6e7c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   b6e7e:	189c      	adds	r4, r3, r2
   b6e80:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
   b6e82:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   b6e84:	fb0a 3304 	mla	r3, sl, r4, r3
   b6e88:	930c      	str	r3, [sp, #48]	; 0x30
   b6e8a:	4633      	mov	r3, r6
   b6e8c:	4413      	add	r3, r2
   b6e8e:	932f      	str	r3, [sp, #188]	; 0xbc
   b6e90:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   b6e92:	42b3      	cmp	r3, r6
   b6e94:	dc5e      	bgt.n	b6f54 <arm_convolve_s8+0x1f2>
   b6e96:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   b6e98:	4498      	add	r8, r3
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
   b6e9a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b6e9c:	4543      	cmp	r3, r8
   b6e9e:	d118      	bne.n	b6ed2 <arm_convolve_s8+0x170>
                    out = arm_nn_mat_mult_kernel_s8_s16(filter_data,
   b6ea0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   b6ea2:	9306      	str	r3, [sp, #24]
   b6ea4:	9b40      	ldr	r3, [sp, #256]	; 0x100
   b6ea6:	9305      	str	r3, [sp, #20]
   b6ea8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   b6eaa:	9304      	str	r3, [sp, #16]
   b6eac:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
   b6eb0:	9303      	str	r3, [sp, #12]
   b6eb2:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
   b6eb6:	9302      	str	r3, [sp, #8]
   b6eb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b6eba:	9301      	str	r3, [sp, #4]
   b6ebc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b6ebe:	9300      	str	r3, [sp, #0]
   b6ec0:	ee18 2a10 	vmov	r2, s16
   b6ec4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b6ec6:	983e      	ldr	r0, [sp, #248]	; 0xf8
   b6ec8:	4659      	mov	r1, fp
   b6eca:	f7fe fe5f 	bl	b5b8c <arm_nn_mat_mult_kernel_s8_s16>
    q15_t *buffer_a = (q15_t *)ctx->buf;
   b6ece:	46d8      	mov	r8, fp
                    out = arm_nn_mat_mult_kernel_s8_s16(filter_data,
   b6ed0:	900f      	str	r0, [sp, #60]	; 0x3c
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
   b6ed2:	f109 0901 	add.w	r9, r9, #1
   b6ed6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   b6ed8:	4599      	cmp	r9, r3
   b6eda:	dbc3      	blt.n	b6e64 <arm_convolve_s8+0x102>
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
   b6edc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b6ede:	3301      	adds	r3, #1
   b6ee0:	930a      	str	r3, [sp, #40]	; 0x28
   b6ee2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b6ee4:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b6ee6:	4293      	cmp	r3, r2
   b6ee8:	da41      	bge.n	b6f6e <arm_convolve_s8+0x20c>
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
   b6eea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b6eec:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
   b6ef0:	4353      	muls	r3, r2
   b6ef2:	f8bd 2084 	ldrh.w	r2, [sp, #132]	; 0x84
   b6ef6:	1a9b      	subs	r3, r3, r2
   b6ef8:	9310      	str	r3, [sp, #64]	; 0x40
   b6efa:	9a10      	ldr	r2, [sp, #64]	; 0x40
   b6efc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b6efe:	4353      	muls	r3, r2
   b6f00:	9325      	str	r3, [sp, #148]	; 0x94
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
   b6f02:	f04f 0900 	mov.w	r9, #0
   b6f06:	e7e6      	b.n	b6ed6 <arm_convolve_s8+0x174>
                        if (i_ker_y < 0 || i_ker_y >= input_y || i_ker_x < 0 || i_ker_x >= input_x)
   b6f08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b6f0a:	42b3      	cmp	r3, r6
   b6f0c:	d904      	bls.n	b6f18 <arm_convolve_s8+0x1b6>
   b6f0e:	2d00      	cmp	r5, #0
   b6f10:	db02      	blt.n	b6f18 <arm_convolve_s8+0x1b6>
   b6f12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b6f14:	429d      	cmp	r5, r3
   b6f16:	db15      	blt.n	b6f44 <arm_convolve_s8+0x1e2>
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
   b6f18:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b6f1a:	2100      	movs	r1, #0
   b6f1c:	4638      	mov	r0, r7
   b6f1e:	f007 fc64 	bl	be7ea <memset>
                        two_column_buf += input_ch;
   b6f22:	9b09      	ldr	r3, [sp, #36]	; 0x24
                         i_ker_x++)
   b6f24:	3501      	adds	r5, #1
                        two_column_buf += input_ch;
   b6f26:	441f      	add	r7, r3
                         i_ker_x++)
   b6f28:	4454      	add	r4, sl
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
   b6f2a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   b6f2c:	42ab      	cmp	r3, r5
   b6f2e:	dceb      	bgt.n	b6f08 <arm_convolve_s8+0x1a6>
   b6f30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b6f32:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   b6f34:	4413      	add	r3, r2
   b6f36:	930e      	str	r3, [sp, #56]	; 0x38
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
   b6f38:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   b6f3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b6f3c:	4413      	add	r3, r2
   b6f3e:	3601      	adds	r6, #1
   b6f40:	930c      	str	r3, [sp, #48]	; 0x30
   b6f42:	e7a5      	b.n	b6e90 <arm_convolve_s8+0x12e>
                            arm_q7_to_q15_with_offset(input_data + (i_ker_y * input_x + i_ker_x) * input_ch,
   b6f44:	ee18 3a90 	vmov	r3, s17
   b6f48:	4652      	mov	r2, sl
   b6f4a:	4639      	mov	r1, r7
   b6f4c:	4620      	mov	r0, r4
   b6f4e:	f7fd fc68 	bl	b4822 <arm_q7_to_q15_with_offset>
   b6f52:	e7e6      	b.n	b6f22 <arm_convolve_s8+0x1c0>
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
   b6f54:	9d11      	ldr	r5, [sp, #68]	; 0x44
   b6f56:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b6f58:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b6f5a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   b6f5c:	462b      	mov	r3, r5
   b6f5e:	4413      	add	r3, r2
   b6f60:	932e      	str	r3, [sp, #184]	; 0xb8
   b6f62:	e7e2      	b.n	b6f2a <arm_convolve_s8+0x1c8>
        q7_t *out = output_data;
   b6f64:	9b42      	ldr	r3, [sp, #264]	; 0x108
   b6f66:	930f      	str	r3, [sp, #60]	; 0x3c
    q15_t *buffer_a = (q15_t *)ctx->buf;
   b6f68:	46d8      	mov	r8, fp
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
   b6f6a:	2300      	movs	r3, #0
   b6f6c:	e7b8      	b.n	b6ee0 <arm_convolve_s8+0x17e>
        if (two_column_buf != buffer_a)
   b6f6e:	45d8      	cmp	r8, fp
   b6f70:	d171      	bne.n	b7056 <arm_convolve_s8+0x2f4>
        input_data += (input_x * input_y * input_ch);
   b6f72:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
   b6f74:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   b6f76:	4413      	add	r3, r2
   b6f78:	933c      	str	r3, [sp, #240]	; 0xf0
        output_data += (output_x * output_y * output_ch);
   b6f7a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   b6f7c:	9b42      	ldr	r3, [sp, #264]	; 0x108
   b6f7e:	4413      	add	r3, r2
   b6f80:	9342      	str	r3, [sp, #264]	; 0x108
    for (i_batch = 0; i_batch < input_batches; i_batch++)
   b6f82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b6f84:	3301      	adds	r3, #1
   b6f86:	930d      	str	r3, [sp, #52]	; 0x34
   b6f88:	e760      	b.n	b6e4c <arm_convolve_s8+0xea>
                if (bias_data)
   b6f8a:	9b40      	ldr	r3, [sp, #256]	; 0x100
   b6f8c:	2b00      	cmp	r3, #0
   b6f8e:	d044      	beq.n	b701a <arm_convolve_s8+0x2b8>
                    sum = bias_data[i];
   b6f90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                while (col_count)
   b6f94:	465c      	mov	r4, fp
   b6f96:	462e      	mov	r6, r5
   b6f98:	42b0      	cmp	r0, r6
   b6f9a:	4603      	mov	r3, r0
   b6f9c:	d13f      	bne.n	b701e <arm_convolve_s8+0x2bc>
                while (col_count)
   b6f9e:	9e1e      	ldr	r6, [sp, #120]	; 0x78
   b6fa0:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
   b6fa2:	4406      	add	r6, r0
   b6fa4:	42b3      	cmp	r3, r6
   b6fa6:	d14f      	bne.n	b7048 <arm_convolve_s8+0x2e6>
   b6fa8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   b6faa:	441d      	add	r5, r3
                sum = arm_nn_requantize(sum, output_mult[i], output_shift[i]);
   b6fac:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b6fae:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b6fb2:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
   b6fb6:	4099      	lsls	r1, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b6fb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b6fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b6fbe:	2e00      	cmp	r6, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b6fc0:	464c      	mov	r4, r9
   b6fc2:	46be      	mov	lr, r7
   b6fc4:	fbc1 4e03 	smlal	r4, lr, r1, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b6fc8:	bfd4      	ite	le
   b6fca:	4276      	negle	r6, r6
   b6fcc:	2600      	movgt	r6, #0
    result = (int32_t)(mult.long_long >> 31);
   b6fce:	0fe4      	lsrs	r4, r4, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   b6fd0:	fa0c f306 	lsl.w	r3, ip, r6
    result = (int32_t)(mult.long_long >> 31);
   b6fd4:	ea44 0e4e 	orr.w	lr, r4, lr, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   b6fd8:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
   b6fda:	ea0e 0103 	and.w	r1, lr, r3
    if (result < 0)
   b6fde:	fa5e fe06 	asrs.w	lr, lr, r6
    q31_t threshold = remainder_mask >> 1;
   b6fe2:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
   b6fe6:	bf48      	it	mi
   b6fe8:	3301      	addmi	r3, #1
    if (remainder > threshold)
   b6fea:	4299      	cmp	r1, r3
                sum += out_offset;
   b6fec:	9b14      	ldr	r3, [sp, #80]	; 0x50
        result++;
   b6fee:	bfc8      	it	gt
   b6ff0:	f10e 0e01 	addgt.w	lr, lr, #1
   b6ff4:	449e      	add	lr, r3
                sum = MAX(sum, out_activation_min);
   b6ff6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b6ff8:	459e      	cmp	lr, r3
   b6ffa:	bfb8      	it	lt
   b6ffc:	469e      	movlt	lr, r3
                sum = MIN(sum, out_activation_max);
   b6ffe:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b7000:	459e      	cmp	lr, r3
   b7002:	bfa8      	it	ge
   b7004:	469e      	movge	lr, r3
                *out++ = (q7_t)sum;
   b7006:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   b7008:	f803 e002 	strb.w	lr, [r3, r2]
            for (i = 0; i < output_ch; i++)
   b700c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   b700e:	3201      	adds	r2, #1
   b7010:	4418      	add	r0, r3
   b7012:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b7014:	429a      	cmp	r2, r3
   b7016:	d1b8      	bne.n	b6f8a <arm_convolve_s8+0x228>
   b7018:	e7ab      	b.n	b6f72 <arm_convolve_s8+0x210>
                q31_t sum = 0;
   b701a:	9940      	ldr	r1, [sp, #256]	; 0x100
   b701c:	e7ba      	b.n	b6f94 <arm_convolve_s8+0x232>
    memcpy(&val, *in_q7, 4);
   b701e:	f856 eb04 	ldr.w	lr, [r6], #4
  return (op1 >> op2) | (op1 << (32U - op2));
   b7022:	ea4f 233e 	mov.w	r3, lr, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   b7026:	fa2f f883 	sxtb16	r8, r3
   b702a:	fa2f f38e 	sxtb16	r3, lr
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
   b702e:	eac8 4e23 	pkhtb	lr, r8, r3, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
   b7032:	eac3 4308 	pkhbt	r3, r3, r8, lsl #16
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   b7036:	f8d4 8000 	ldr.w	r8, [r4]
   b703a:	fb23 1308 	smlad	r3, r3, r8, r1
    memcpy(&val, *in_q15, 4);
   b703e:	6861      	ldr	r1, [r4, #4]
    *in_q15 += 2;
   b7040:	3408      	adds	r4, #8
   b7042:	fb2e 3101 	smlad	r1, lr, r1, r3
                    col_count--;
   b7046:	e7a7      	b.n	b6f98 <arm_convolve_s8+0x236>
                    sum += ker_a1 * ip_b1;
   b7048:	f913 eb01 	ldrsb.w	lr, [r3], #1
   b704c:	f834 8b02 	ldrh.w	r8, [r4], #2
   b7050:	fb18 110e 	smlabb	r1, r8, lr, r1
                    col_count--;
   b7054:	e7a6      	b.n	b6fa4 <arm_convolve_s8+0x242>
            for (i = 0; i < output_ch; i++)
   b7056:	2200      	movs	r2, #0
   b7058:	982a      	ldr	r0, [sp, #168]	; 0xa8
            const q7_t *ker_a = filter_data;
   b705a:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b705c:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
   b7060:	4617      	mov	r7, r2
    const q31_t remainder_mask = (1 << exponent) - 1;
   b7062:	f04f 0c01 	mov.w	ip, #1
   b7066:	e7d4      	b.n	b7012 <arm_convolve_s8+0x2b0>

000b7068 <arm_convolve_s8_get_buffer_size>:

int32_t arm_convolve_s8_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
#if defined(ARM_MATH_DSP)
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * (int32_t)sizeof(int16_t);
   b7068:	688b      	ldr	r3, [r1, #8]
   b706a:	68c0      	ldr	r0, [r0, #12]
   b706c:	4358      	muls	r0, r3
   b706e:	684b      	ldr	r3, [r1, #4]
   b7070:	4358      	muls	r0, r3
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
   b7072:	0080      	lsls	r0, r0, #2
   b7074:	4770      	bx	lr

000b7076 <_ZL21ei_cube_check_overlapP4cubeiiiif>:

/**
 * Checks whether a new section overlaps with a cube,
 * and if so, will **update the cube**
 */
__attribute__((unused)) static bool ei_cube_check_overlap(ei_classifier_cube_t *c, int x, int y, int width, int height, float confidence) {
   b7076:	b5f0      	push	{r4, r5, r6, r7, lr}
    bool is_overlapping = !(c->x + c->width < x || c->y + c->height < y || c->x > x + width || c->y > y + height);
   b7078:	f8d0 c000 	ldr.w	ip, [r0]
   b707c:	6886      	ldr	r6, [r0, #8]
   b707e:	eb0c 0406 	add.w	r4, ip, r6
   b7082:	428c      	cmp	r4, r1
   b7084:	d329      	bcc.n	b70da <_ZL21ei_cube_check_overlapP4cubeiiiif+0x64>
   b7086:	6847      	ldr	r7, [r0, #4]
   b7088:	68c5      	ldr	r5, [r0, #12]
   b708a:	197c      	adds	r4, r7, r5
   b708c:	4294      	cmp	r4, r2
   b708e:	d324      	bcc.n	b70da <_ZL21ei_cube_check_overlapP4cubeiiiif+0x64>
   b7090:	440b      	add	r3, r1
   b7092:	459c      	cmp	ip, r3
   b7094:	d821      	bhi.n	b70da <_ZL21ei_cube_check_overlapP4cubeiiiif+0x64>
   b7096:	9c05      	ldr	r4, [sp, #20]
   b7098:	4414      	add	r4, r2
   b709a:	42a7      	cmp	r7, r4
   b709c:	d81d      	bhi.n	b70da <_ZL21ei_cube_check_overlapP4cubeiiiif+0x64>
    if (!is_overlapping) return false;

    // if we overlap, but the x of the new box is lower than the x of the current box
    if (x < c->x) {
   b709e:	458c      	cmp	ip, r1
        // update x to match new box and make width larger (by the diff between the boxes)
        c->x = x;
   b70a0:	bf88      	it	hi
   b70a2:	6001      	strhi	r1, [r0, #0]
        c->width += c->x - x;
    }
    // if we overlap, but the y of the new box is lower than the y of the current box
    if (y < c->y) {
   b70a4:	4297      	cmp	r7, r2
        // update y to match new box and make height larger (by the diff between the boxes)
        c->y = y;
   b70a6:	bf88      	it	hi
   b70a8:	6042      	strhi	r2, [r0, #4]
        c->height += c->y - y;
    }
    // if we overlap, and x+width of the new box is higher than the x+width of the current box
    if (x + width > c->x + c->width) {
   b70aa:	6802      	ldr	r2, [r0, #0]
    if (y + height > c->y + c->height) {
        // just make the box higher
        c->height += (y + height) - (c->y + c->height);
    }
    // if the new box has higher confidence, then override confidence of the whole box
    if (confidence > c->confidence) {
   b70ac:	edd0 7a04 	vldr	s15, [r0, #16]
    if (x + width > c->x + c->width) {
   b70b0:	4416      	add	r6, r2
   b70b2:	42b3      	cmp	r3, r6
        c->width += (x + width) - (c->x + c->width);
   b70b4:	bf84      	itt	hi
   b70b6:	1a9b      	subhi	r3, r3, r2
   b70b8:	6083      	strhi	r3, [r0, #8]
    if (y + height > c->y + c->height) {
   b70ba:	6843      	ldr	r3, [r0, #4]
   b70bc:	441d      	add	r5, r3
   b70be:	42ac      	cmp	r4, r5
        c->height += (y + height) - (c->y + c->height);
   b70c0:	bf88      	it	hi
   b70c2:	1ae4      	subhi	r4, r4, r3
    if (confidence > c->confidence) {
   b70c4:	eef4 7ac0 	vcmpe.f32	s15, s0
        c->height += (y + height) - (c->y + c->height);
   b70c8:	bf88      	it	hi
   b70ca:	60c4      	strhi	r4, [r0, #12]
    if (confidence > c->confidence) {
   b70cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b70d0:	d501      	bpl.n	b70d6 <_ZL21ei_cube_check_overlapP4cubeiiiif+0x60>
        c->confidence = confidence;
   b70d2:	ed80 0a04 	vstr	s0, [r0, #16]
    }
    return true;
   b70d6:	2001      	movs	r0, #1
   b70d8:	e000      	b.n	b70dc <_ZL21ei_cube_check_overlapP4cubeiiiif+0x66>
    if (!is_overlapping) return false;
   b70da:	2000      	movs	r0, #0
}
   b70dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b70e0 <_Z12receiveEventi>:
 * @brief Event to be triggered when Master sends data via I2C
 * 
 * @param[in] howMany Amount of bytes received
 */
void receiveEvent(int howMany) {
    m_flag = true;
   b70e0:	4b02      	ldr	r3, [pc, #8]	; (b70ec <_Z12receiveEventi+0xc>)
   b70e2:	2201      	movs	r2, #1
   b70e4:	701a      	strb	r2, [r3, #0]
    bytes_rec = howMany;
   b70e6:	4b02      	ldr	r3, [pc, #8]	; (b70f0 <_Z12receiveEventi+0x10>)
   b70e8:	6018      	str	r0, [r3, #0]
    return;
}
   b70ea:	4770      	bx	lr
   b70ec:	2003c83c 	.word	0x2003c83c
   b70f0:	2003a434 	.word	0x2003a434

000b70f4 <_Z9myHandlerPKcS0_>:
void myHandler(const char *event, const char *data) {
   b70f4:	b510      	push	{r4, lr}
    float temp = atof(data) - 32; //Convert from Fahrenheit to Celsius
   b70f6:	4608      	mov	r0, r1
   b70f8:	f007 fb30 	bl	be75c <atof>
   b70fc:	4b08      	ldr	r3, [pc, #32]	; (b7120 <_Z9myHandlerPKcS0_+0x2c>)
   b70fe:	2200      	movs	r2, #0
   b7100:	ec51 0b10 	vmov	r0, r1, d0
   b7104:	f006 fc4a 	bl	bd99c <__aeabi_dsub>
   b7108:	f007 f8e2 	bl	be2d0 <__aeabi_d2f>
    ei_printf("%.2f Celsius in Copenhagen \n",temp);
   b710c:	f006 fda6 	bl	bdc5c <__aeabi_f2d>
}
   b7110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ei_printf("%.2f Celsius in Copenhagen \n",temp);
   b7114:	4602      	mov	r2, r0
   b7116:	460b      	mov	r3, r1
   b7118:	4802      	ldr	r0, [pc, #8]	; (b7124 <_Z9myHandlerPKcS0_+0x30>)
   b711a:	f001 b9f5 	b.w	b8508 <ei_printf>
   b711e:	bf00      	nop
   b7120:	40400000 	.word	0x40400000
   b7124:	000c07c9 	.word	0x000c07c9

000b7128 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
__attribute__((unused)) void ei_aligned_free(void * ptr)
{
   b7128:	b508      	push	{r3, lr}
	assert(ptr);
   b712a:	b928      	cbnz	r0, b7138 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x10>
   b712c:	4b06      	ldr	r3, [pc, #24]	; (b7148 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x20>)
   b712e:	4a07      	ldr	r2, [pc, #28]	; (b714c <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x24>)
   b7130:	4807      	ldr	r0, [pc, #28]	; (b7150 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x28>)
   b7132:	215a      	movs	r1, #90	; 0x5a
   b7134:	f005 fa42 	bl	bc5bc <__assert_func>
	offset_t offset = *((offset_t *)ptr - 1);

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
   b7138:	f830 3c02 	ldrh.w	r3, [r0, #-2]
	ei_free(p);
   b713c:	1ac0      	subs	r0, r0, r3
}
   b713e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ei_free(p);
   b7142:	f001 ba11 	b.w	b8568 <ei_free>
   b7146:	bf00      	nop
   b7148:	000cb68d 	.word	0x000cb68d
   b714c:	000c07e6 	.word	0x000c07e6
   b7150:	000c080f 	.word	0x000c080f

000b7154 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj>:
	assert((align & (align - 1)) == 0);
   b7154:	1e43      	subs	r3, r0, #1
   b7156:	4203      	tst	r3, r0
{
   b7158:	b510      	push	{r4, lr}
   b715a:	4604      	mov	r4, r0
	assert((align & (align - 1)) == 0);
   b715c:	d005      	beq.n	b716a <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x16>
   b715e:	4b0d      	ldr	r3, [pc, #52]	; (b7194 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x40>)
   b7160:	4a0d      	ldr	r2, [pc, #52]	; (b7198 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x44>)
   b7162:	480e      	ldr	r0, [pc, #56]	; (b719c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x48>)
   b7164:	2137      	movs	r1, #55	; 0x37
   b7166:	f005 fa29 	bl	bc5bc <__assert_func>
	if(align && size)
   b716a:	b910      	cbnz	r0, b7172 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x1e>
	void * ptr = NULL;
   b716c:	2400      	movs	r4, #0
}
   b716e:	4620      	mov	r0, r4
   b7170:	bd10      	pop	{r4, pc}
	if(align && size)
   b7172:	2900      	cmp	r1, #0
   b7174:	d0fa      	beq.n	b716c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x18>
		void * p = ei_calloc(size + hdr_size, 1);
   b7176:	1c48      	adds	r0, r1, #1
   b7178:	4420      	add	r0, r4
   b717a:	2101      	movs	r1, #1
   b717c:	f001 f9f2 	bl	b8564 <ei_calloc>
		if(p)
   b7180:	2800      	cmp	r0, #0
   b7182:	d0f3      	beq.n	b716c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x18>
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
   b7184:	1c63      	adds	r3, r4, #1
   b7186:	4403      	add	r3, r0
   b7188:	4264      	negs	r4, r4
   b718a:	401c      	ands	r4, r3
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
   b718c:	1a20      	subs	r0, r4, r0
   b718e:	f824 0c02 	strh.w	r0, [r4, #-2]
	return ptr;
   b7192:	e7ec      	b.n	b716e <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x1a>
   b7194:	000c08ab 	.word	0x000c08ab
   b7198:	000c08c6 	.word	0x000c08c6
   b719c:	000c080f 	.word	0x000c080f

000b71a0 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0>:
 * @param      output             Pointer to output tensor
 * @param      micro_tensor_arena Pointer to the arena that will be allocated
 *
 * @return  EI_IMPULSE_OK if successful
 */
static EI_IMPULSE_ERROR inference_tflite_setup(const ei_impulse_t *impulse, uint64_t *ctx_start_us, TfLiteTensor** input, TfLiteTensor** output,
   b71a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b71a4:	4689      	mov	r9, r1
   b71a6:	4616      	mov	r6, r2
   b71a8:	461d      	mov	r5, r3
   b71aa:	e9dd 780a 	ldrd	r7, r8, [sp, #40]	; 0x28
   b71ae:	4604      	mov	r4, r0
    TfLiteTensor** output_labels,
    TfLiteTensor** output_scores,
    ei_unique_ptr_t& p_tensor_arena) {

    *ctx_start_us = ei_read_timer_us();
   b71b0:	f001 f9a4 	bl	b84fc <ei_read_timer_us>
   b71b4:	e9c9 0100 	strd	r0, r1, [r9]

    TfLiteStatus init_status = trained_model_init(ei_aligned_calloc);
   b71b8:	484c      	ldr	r0, [pc, #304]	; (b72ec <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x14c>)
   b71ba:	f000 ffeb 	bl	b8194 <_Z18trained_model_initPFPvjjE>
    if (init_status != kTfLiteOk) {
   b71be:	4601      	mov	r1, r0
   b71c0:	b138      	cbz	r0, b71d2 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x32>
        ei_printf("Failed to allocate TFLite arena (error code %d)\n", init_status);
   b71c2:	484b      	ldr	r0, [pc, #300]	; (b72f0 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x150>)
   b71c4:	f001 f9a0 	bl	b8508 <ei_printf>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
   b71c8:	f06f 0005 	mvn.w	r0, #5
            assert((*output)->params.zero_point == impulse->tflite_output_zeropoint);
        }
        tflite_first_run = false;
    }
    return EI_IMPULSE_OK;
}
   b71cc:	b003      	add	sp, #12
   b71ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *input = impulse->model_input(0);
   b71d2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   b71d6:	9001      	str	r0, [sp, #4]
   b71d8:	4798      	blx	r3
    *output = impulse->model_output(0);
   b71da:	9901      	ldr	r1, [sp, #4]
    *input = impulse->model_input(0);
   b71dc:	6030      	str	r0, [r6, #0]
    *output = impulse->model_output(0);
   b71de:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   b71e2:	4608      	mov	r0, r1
   b71e4:	4798      	blx	r3
   b71e6:	6028      	str	r0, [r5, #0]
    if (impulse->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_SSD) {
   b71e8:	f994 3048 	ldrsb.w	r3, [r4, #72]	; 0x48
   b71ec:	2b01      	cmp	r3, #1
   b71ee:	d10c      	bne.n	b720a <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x6a>
        *output_scores = impulse->model_output(impulse->tflite_output_score_tensor);
   b71f0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   b71f4:	f894 004a 	ldrb.w	r0, [r4, #74]	; 0x4a
   b71f8:	4798      	blx	r3
   b71fa:	f8c8 0000 	str.w	r0, [r8]
        *output_labels = impulse->model_output(impulse->tflite_output_labels_tensor);
   b71fe:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   b7202:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   b7206:	4798      	blx	r3
   b7208:	6038      	str	r0, [r7, #0]
    if (tflite_first_run) {
   b720a:	493a      	ldr	r1, [pc, #232]	; (b72f4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x154>)
   b720c:	7808      	ldrb	r0, [r1, #0]
   b720e:	2800      	cmp	r0, #0
   b7210:	d0dc      	beq.n	b71cc <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x2c>
        assert((*input)->type == impulse->tflite_input_datatype);
   b7212:	6832      	ldr	r2, [r6, #0]
   b7214:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
   b7218:	7810      	ldrb	r0, [r2, #0]
   b721a:	4298      	cmp	r0, r3
   b721c:	d005      	beq.n	b722a <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x8a>
   b721e:	4b36      	ldr	r3, [pc, #216]	; (b72f8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x158>)
   b7220:	4a36      	ldr	r2, [pc, #216]	; (b72fc <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x15c>)
   b7222:	2159      	movs	r1, #89	; 0x59
        assert((*output)->type == impulse->tflite_output_datatype);
   b7224:	4836      	ldr	r0, [pc, #216]	; (b7300 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x160>)
   b7226:	f005 f9c9 	bl	bc5bc <__assert_func>
   b722a:	682b      	ldr	r3, [r5, #0]
   b722c:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
   b7230:	781d      	ldrb	r5, [r3, #0]
   b7232:	4285      	cmp	r5, r0
   b7234:	d003      	beq.n	b723e <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x9e>
   b7236:	4b33      	ldr	r3, [pc, #204]	; (b7304 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x164>)
   b7238:	4a30      	ldr	r2, [pc, #192]	; (b72fc <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x15c>)
   b723a:	215a      	movs	r1, #90	; 0x5a
   b723c:	e7f2      	b.n	b7224 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x84>
        if (impulse->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_SSD) {
   b723e:	f994 0048 	ldrsb.w	r0, [r4, #72]	; 0x48
   b7242:	2801      	cmp	r0, #1
   b7244:	d110      	bne.n	b7268 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0xc8>
            assert((*output_scores)->type == impulse->tflite_output_datatype);
   b7246:	f8d8 0000 	ldr.w	r0, [r8]
   b724a:	7800      	ldrb	r0, [r0, #0]
   b724c:	42a8      	cmp	r0, r5
   b724e:	d003      	beq.n	b7258 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0xb8>
   b7250:	4b2d      	ldr	r3, [pc, #180]	; (b7308 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x168>)
   b7252:	4a2a      	ldr	r2, [pc, #168]	; (b72fc <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x15c>)
   b7254:	215c      	movs	r1, #92	; 0x5c
   b7256:	e7e5      	b.n	b7224 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x84>
            assert((*output_labels)->type == impulse->tflite_output_datatype);
   b7258:	683d      	ldr	r5, [r7, #0]
   b725a:	782d      	ldrb	r5, [r5, #0]
   b725c:	4285      	cmp	r5, r0
   b725e:	d003      	beq.n	b7268 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0xc8>
   b7260:	4b2a      	ldr	r3, [pc, #168]	; (b730c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x16c>)
   b7262:	4a26      	ldr	r2, [pc, #152]	; (b72fc <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x15c>)
   b7264:	215d      	movs	r1, #93	; 0x5d
   b7266:	e7dd      	b.n	b7224 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x84>
        if (impulse->tflite_input_quantized) {
   b7268:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
   b726c:	b1d8      	cbz	r0, b72a6 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x106>
            assert((*input)->params.scale == impulse->tflite_input_scale);
   b726e:	ed92 7a03 	vldr	s14, [r2, #12]
   b7272:	edd4 7a18 	vldr	s15, [r4, #96]	; 0x60
   b7276:	eeb4 7a67 	vcmp.f32	s14, s15
   b727a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b727e:	d003      	beq.n	b7288 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0xe8>
   b7280:	4b23      	ldr	r3, [pc, #140]	; (b7310 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x170>)
   b7282:	4a1e      	ldr	r2, [pc, #120]	; (b72fc <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x15c>)
   b7284:	2160      	movs	r1, #96	; 0x60
   b7286:	e7cd      	b.n	b7224 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x84>
            assert((*input)->params.zero_point == impulse->tflite_input_zeropoint);
   b7288:	edd2 7a04 	vldr	s15, [r2, #16]
   b728c:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
   b7290:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b7294:	eef4 7a47 	vcmp.f32	s15, s14
   b7298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b729c:	d003      	beq.n	b72a6 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x106>
   b729e:	4b1d      	ldr	r3, [pc, #116]	; (b7314 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x174>)
   b72a0:	4a16      	ldr	r2, [pc, #88]	; (b72fc <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x15c>)
   b72a2:	2161      	movs	r1, #97	; 0x61
   b72a4:	e7be      	b.n	b7224 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x84>
        if (impulse->tflite_output_quantized) {
   b72a6:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
   b72aa:	b1da      	cbz	r2, b72e4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x144>
            assert((*output)->params.scale == impulse->tflite_output_scale);
   b72ac:	ed93 7a03 	vldr	s14, [r3, #12]
   b72b0:	edd4 7a1b 	vldr	s15, [r4, #108]	; 0x6c
   b72b4:	eeb4 7a67 	vcmp.f32	s14, s15
   b72b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b72bc:	d003      	beq.n	b72c6 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x126>
   b72be:	4b16      	ldr	r3, [pc, #88]	; (b7318 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x178>)
   b72c0:	4a0e      	ldr	r2, [pc, #56]	; (b72fc <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x15c>)
   b72c2:	2164      	movs	r1, #100	; 0x64
   b72c4:	e7ae      	b.n	b7224 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x84>
            assert((*output)->params.zero_point == impulse->tflite_output_zeropoint);
   b72c6:	edd3 7a04 	vldr	s15, [r3, #16]
   b72ca:	ed94 7a1c 	vldr	s14, [r4, #112]	; 0x70
   b72ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b72d2:	eef4 7a47 	vcmp.f32	s15, s14
   b72d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b72da:	d003      	beq.n	b72e4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x144>
   b72dc:	4b0f      	ldr	r3, [pc, #60]	; (b731c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x17c>)
   b72de:	4a07      	ldr	r2, [pc, #28]	; (b72fc <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x15c>)
   b72e0:	2165      	movs	r1, #101	; 0x65
   b72e2:	e79f      	b.n	b7224 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x84>
        tflite_first_run = false;
   b72e4:	2000      	movs	r0, #0
   b72e6:	7008      	strb	r0, [r1, #0]
   b72e8:	e770      	b.n	b71cc <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x2c>
   b72ea:	bf00      	nop
   b72ec:	000b7155 	.word	0x000b7155
   b72f0:	000c08fb 	.word	0x000c08fb
   b72f4:	20039b70 	.word	0x20039b70
   b72f8:	000c092c 	.word	0x000c092c
   b72fc:	000c095d 	.word	0x000c095d
   b7300:	000c09f7 	.word	0x000c09f7
   b7304:	000c0aa0 	.word	0x000c0aa0
   b7308:	000c0ad3 	.word	0x000c0ad3
   b730c:	000c0b0d 	.word	0x000c0b0d
   b7310:	000c0b47 	.word	0x000c0b47
   b7314:	000c0b7d 	.word	0x000c0b7d
   b7318:	000c0bbc 	.word	0x000c0bbc
   b731c:	000c0bf4 	.word	0x000c0bf4

000b7320 <__tcf_1>:
      { }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
      {
	_M_deallocate(_M_impl._M_start,
   b7320:	4b03      	ldr	r3, [pc, #12]	; (b7330 <__tcf_1+0x10>)
   b7322:	6818      	ldr	r0, [r3, #0]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
   b7324:	b118      	cbz	r0, b732e <__tcf_1+0xe>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b7326:	6899      	ldr	r1, [r3, #8]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b7328:	1a09      	subs	r1, r1, r0
   b732a:	f7fc beba 	b.w	b40a2 <_ZdlPvj>
    }
}

__attribute__((unused)) static void fill_result_struct_from_cubes(ei_impulse_result_t *result, std::vector<ei_classifier_cube_t*> *cubes, int out_width_factor, uint32_t object_detection_count) {
    std::vector<ei_classifier_cube_t*> bbs;
    static std::vector<ei_impulse_result_bounding_box_t> results;
   b732e:	4770      	bx	lr
   b7330:	2003a428 	.word	0x2003a428

000b7334 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b7334:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b7336:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b7338:	4604      	mov	r4, r0
      if (_M_manager)
   b733a:	b113      	cbz	r3, b7342 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b733c:	2203      	movs	r2, #3
   b733e:	4601      	mov	r1, r0
   b7340:	4798      	blx	r3
    }
   b7342:	4620      	mov	r0, r4
   b7344:	bd10      	pop	{r4, pc}

000b7346 <_ZN2ei9ei_matrixC1EmmPf>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix(
   b7346:	b570      	push	{r4, r5, r6, lr}
   b7348:	4604      	mov	r4, r0
   b734a:	460e      	mov	r6, r1
   b734c:	4615      	mov	r5, r2
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
   b734e:	b133      	cbz	r3, b735e <_ZN2ei9ei_matrixC1EmmPf+0x18>
            buffer = a_buffer;
   b7350:	6003      	str	r3, [r0, #0]
            buffer_managed_by_me = false;
   b7352:	2300      	movs	r3, #0
        else {
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
            buffer_managed_by_me = true;
        }
        rows = n_rows;
        cols = n_cols;
   b7354:	e9c4 6501 	strd	r6, r5, [r4, #4]
            buffer_managed_by_me = true;
   b7358:	7323      	strb	r3, [r4, #12]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(float), buffer);
            }
#endif
        }
    }
   b735a:	4620      	mov	r0, r4
   b735c:	bd70      	pop	{r4, r5, r6, pc}
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   b735e:	fb02 f001 	mul.w	r0, r2, r1
   b7362:	0080      	lsls	r0, r0, #2
   b7364:	2101      	movs	r1, #1
   b7366:	f001 f8fd 	bl	b8564 <ei_calloc>
            buffer_managed_by_me = true;
   b736a:	2301      	movs	r3, #1
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   b736c:	6020      	str	r0, [r4, #0]
            buffer_managed_by_me = true;
   b736e:	e7f1      	b.n	b7354 <_ZN2ei9ei_matrixC1EmmPf+0xe>

000b7370 <_ZN2ei9ei_matrixD1Ev>:

    ~ei_matrix() {
   b7370:	b510      	push	{r4, lr}
   b7372:	4604      	mov	r4, r0
        if (buffer && buffer_managed_by_me) {
   b7374:	6800      	ldr	r0, [r0, #0]
   b7376:	b118      	cbz	r0, b7380 <_ZN2ei9ei_matrixD1Ev+0x10>
   b7378:	7b23      	ldrb	r3, [r4, #12]
   b737a:	b10b      	cbz	r3, b7380 <_ZN2ei9ei_matrixD1Ev+0x10>
            ei_free(buffer);
   b737c:	f001 f8f4 	bl	b8568 <ei_free>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(float), buffer);
            }
#endif
        }
    }
   b7380:	4620      	mov	r0, r4
   b7382:	bd10      	pop	{r4, pc}

000b7384 <_ZSt25__throw_bad_function_callv>:
#endif // __cplusplus

// required on Adafruit nRF52, it seems not to matter too much on other targets...
#ifdef __cplusplus
namespace std {
    __attribute__((weak)) void __throw_bad_function_call() { while(1); };
   b7384:	e7fe      	b.n	b7384 <_ZSt25__throw_bad_function_callv>
	...

000b7388 <ei_construct_impulse>:
#if EI_CLASSIFIER_STUDIO_VERSION < 3
/**
 * @brief      Construct impulse from macros - for run_classifer compatibility
 */
extern "C" const ei_impulse_t ei_construct_impulse()
{
   b7388:	b510      	push	{r4, lr}

const ei_impulse_t impulse =
   b738a:	4903      	ldr	r1, [pc, #12]	; (b7398 <ei_construct_impulse+0x10>)
{
   b738c:	4604      	mov	r4, r0
const ei_impulse_t impulse =
   b738e:	22a4      	movs	r2, #164	; 0xa4
   b7390:	f007 fa03 	bl	be79a <memcpy>
#endif
    .categories = ei_classifier_inferencing_categories
    };

    return impulse;
}
   b7394:	4620      	mov	r0, r4
   b7396:	bd10      	pop	{r4, pc}
   b7398:	000c0eec 	.word	0x000c0eec

000b739c <setup>:

/**
 * @brief      Argon setup function
 */
void setup()
{
   b739c:	b507      	push	{r0, r1, r2, lr}
    // put your setup code here, to run once:
    Serial.begin(115200);
   b739e:	f005 fb3d 	bl	bca1c <_Z16_fetch_usbserialv>
   b73a2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b73a6:	f005 fb27 	bl	bc9f8 <_ZN9USBSerial5beginEl>
    // comment out the below line to cancel the wait for USB connection (needed for native USB)
    while (!Serial);
   b73aa:	f005 fb37 	bl	bca1c <_Z16_fetch_usbserialv>
   b73ae:	f005 fb2a 	bl	bca06 <_ZN9USBSerialcvbEv>
   b73b2:	2800      	cmp	r0, #0
   b73b4:	d0f9      	beq.n	b73aa <setup+0xe>
    Serial.println("Edge Impulse Inferencing Demo");
   b73b6:	f005 fb31 	bl	bca1c <_Z16_fetch_usbserialv>
   b73ba:	490c      	ldr	r1, [pc, #48]	; (b73ec <setup+0x50>)
   b73bc:	f005 ff61 	bl	bd282 <_ZN5Print7printlnEPKc>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b73c0:	2300      	movs	r3, #0
   b73c2:	e9cd 3300 	strd	r3, r3, [sp]
   b73c6:	461a      	mov	r2, r3
   b73c8:	4909      	ldr	r1, [pc, #36]	; (b73f0 <setup+0x54>)
   b73ca:	480a      	ldr	r0, [pc, #40]	; (b73f4 <setup+0x58>)
   b73cc:	f005 f82a 	bl	bc424 <spark_subscribe>
    Particle.subscribe("hook-response/local_temp", myHandler, MY_DEVICES);
    Wire.begin(8);
   b73d0:	f005 fffa 	bl	bd3c8 <_Z19__fetch_global_Wirev>
   b73d4:	2108      	movs	r1, #8
   b73d6:	f005 fa51 	bl	bc87c <_ZN7TwoWire5beginEi>
    Wire.onReceive(receiveEvent);
   b73da:	f005 fff5 	bl	bd3c8 <_Z19__fetch_global_Wirev>
   b73de:	4906      	ldr	r1, [pc, #24]	; (b73f8 <setup+0x5c>)
}
   b73e0:	b003      	add	sp, #12
   b73e2:	f85d eb04 	ldr.w	lr, [sp], #4
    Wire.onReceive(receiveEvent);
   b73e6:	f005 ba4c 	b.w	bc882 <_ZN7TwoWire9onReceiveEPFviE>
   b73ea:	bf00      	nop
   b73ec:	000c0c35 	.word	0x000c0c35
   b73f0:	000b70f5 	.word	0x000b70f5
   b73f4:	000c0c53 	.word	0x000c0c53
   b73f8:	000b70e1 	.word	0x000b70e1

000b73fc <_ZNSt10unique_ptrIvPFvPvEED1Ev>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
   b73fc:	b510      	push	{r4, lr}
   b73fe:	4604      	mov	r4, r0
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   b7400:	6840      	ldr	r0, [r0, #4]
   b7402:	b108      	cbz	r0, b7408 <_ZNSt10unique_ptrIvPFvPvEED1Ev+0xc>
	  get_deleter()(std::move(__ptr));
   b7404:	6823      	ldr	r3, [r4, #0]
   b7406:	4798      	blx	r3
	__ptr = pointer();
      }
   b7408:	4620      	mov	r0, r4
   b740a:	bd10      	pop	{r4, pc}

000b740c <_ZNKSt8functionIFijjPfEEclEjjS0_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   b740c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b740e:	9301      	str	r3, [sp, #4]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b7410:	6883      	ldr	r3, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b7412:	e9cd 2102 	strd	r2, r1, [sp, #8]
      if (_M_empty())
   b7416:	b90b      	cbnz	r3, b741c <_ZNKSt8functionIFijjPfEEclEjjS0_+0x10>
	__throw_bad_function_call();
   b7418:	f7ff ffb4 	bl	b7384 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b741c:	68c4      	ldr	r4, [r0, #12]
   b741e:	ab01      	add	r3, sp, #4
   b7420:	aa02      	add	r2, sp, #8
   b7422:	a903      	add	r1, sp, #12
   b7424:	47a0      	blx	r4
    }
   b7426:	b004      	add	sp, #16
   b7428:	bd10      	pop	{r4, pc}
	...

000b742c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:

    return EIDSP_OK;
#endif
}

__attribute__((unused)) int extract_image_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
   b742c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7430:	ed2d 8b02 	vpush	{d8}
   b7434:	4606      	mov	r6, r0
   b7436:	b085      	sub	sp, #20
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
   b7438:	6890      	ldr	r0, [r2, #8]
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
   b743a:	f8d2 b004 	ldr.w	fp, [r2, #4]

        for (size_t jx = 0; jx < elements_to_read; jx++) {
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);

            // rgb to 0..1
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
   b743e:	ed9f 8a41 	vldr	s16, [pc, #260]	; b7544 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x118>
                output_matrix->buffer[output_ix++] = b;
            }
            else {
                // ITU-R 601-2 luma transform
                // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
   b7442:	eddf 8a41 	vldr	s17, [pc, #260]	; b7548 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x11c>
__attribute__((unused)) int extract_image_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
   b7446:	460f      	mov	r7, r1
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
   b7448:	4940      	ldr	r1, [pc, #256]	; (b754c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x120>)
   b744a:	f007 fa13 	bl	be874 <strcmp>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
   b744e:	2400      	movs	r4, #0
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
   b7450:	2800      	cmp	r0, #0
    size_t bytes_left = signal->total_length;
   b7452:	f8d6 8010 	ldr.w	r8, [r6, #16]
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
   b7456:	bf0c      	ite	eq
   b7458:	f04f 0a01 	moveq.w	sl, #1
   b745c:	f04f 0a03 	movne.w	sl, #3
    size_t output_ix = 0;
   b7460:	4625      	mov	r5, r4
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
   b7462:	6933      	ldr	r3, [r6, #16]
   b7464:	42a3      	cmp	r3, r4
   b7466:	d96b      	bls.n	b7540 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x114>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
   b7468:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
   b746c:	46c1      	mov	r9, r8
   b746e:	bf28      	it	cs
   b7470:	f44f 6980 	movcs.w	r9, #1024	; 0x400
        matrix_t input_matrix(elements_to_read, config.axes);
   b7474:	2300      	movs	r3, #0
   b7476:	465a      	mov	r2, fp
   b7478:	4649      	mov	r1, r9
   b747a:	4668      	mov	r0, sp
   b747c:	f7ff ff63 	bl	b7346 <_ZN2ei9ei_matrixC1EmmPf>
        if (!input_matrix.buffer) {
   b7480:	9b00      	ldr	r3, [sp, #0]
   b7482:	b943      	cbnz	r3, b7496 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x6a>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
   b7484:	4668      	mov	r0, sp
   b7486:	f7ff ff73 	bl	b7370 <_ZN2ei9ei_matrixD1Ev>
   b748a:	4831      	ldr	r0, [pc, #196]	; (b7550 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x124>)

        bytes_left -= elements_to_read;
    }

    return EIDSP_OK;
}
   b748c:	b005      	add	sp, #20
   b748e:	ecbd 8b02 	vpop	{d8}
   b7492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
   b7496:	464a      	mov	r2, r9
   b7498:	4621      	mov	r1, r4
   b749a:	4630      	mov	r0, r6
   b749c:	f7ff ffb6 	bl	b740c <_ZNKSt8functionIFijjPfEEclEjjS0_>
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
   b74a0:	eddf 5a2c 	vldr	s11, [pc, #176]	; b7554 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x128>
   b74a4:	ed9f 5a2c 	vldr	s10, [pc, #176]	; b7558 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x12c>
        for (size_t jx = 0; jx < elements_to_read; jx++) {
   b74a8:	2200      	movs	r2, #0
   b74aa:	454a      	cmp	r2, r9
   b74ac:	d040      	beq.n	b7530 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x104>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
   b74ae:	9b00      	ldr	r3, [sp, #0]
   b74b0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   b74b4:	edd3 7a00 	vldr	s15, [r3]
   b74b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
            if (channel_count == 3) {
   b74bc:	f1ba 0f03 	cmp.w	sl, #3
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
   b74c0:	ee17 3a90 	vmov	r3, s15
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
   b74c4:	f3c3 4107 	ubfx	r1, r3, #16, #8
   b74c8:	ee07 1a90 	vmov	s15, r1
   b74cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
   b74d0:	f3c3 2107 	ubfx	r1, r3, #8, #8
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
   b74d4:	ee87 6a88 	vdiv.f32	s12, s15, s16
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
   b74d8:	b2db      	uxtb	r3, r3
                output_matrix->buffer[output_ix++] = r;
   b74da:	ea4f 0085 	mov.w	r0, r5, lsl #2
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
   b74de:	ee07 1a90 	vmov	s15, r1
   b74e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                output_matrix->buffer[output_ix++] = r;
   b74e6:	f105 0101 	add.w	r1, r5, #1
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
   b74ea:	ee87 7a88 	vdiv.f32	s14, s15, s16
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
   b74ee:	ee07 3a90 	vmov	s15, r3
                output_matrix->buffer[output_ix++] = r;
   b74f2:	683b      	ldr	r3, [r7, #0]
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
   b74f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                output_matrix->buffer[output_ix++] = r;
   b74f8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
   b74fc:	eec7 6a88 	vdiv.f32	s13, s15, s16
            if (channel_count == 3) {
   b7500:	d10d      	bne.n	b751e <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xf2>
                output_matrix->buffer[output_ix++] = b;
   b7502:	1ce9      	adds	r1, r5, #3
                output_matrix->buffer[output_ix++] = r;
   b7504:	ed83 6a00 	vstr	s12, [r3]
                output_matrix->buffer[output_ix++] = g;
   b7508:	683b      	ldr	r3, [r7, #0]
   b750a:	4403      	add	r3, r0
   b750c:	ed83 7a01 	vstr	s14, [r3, #4]
                output_matrix->buffer[output_ix++] = b;
   b7510:	683b      	ldr	r3, [r7, #0]
   b7512:	4403      	add	r3, r0
   b7514:	edc3 6a02 	vstr	s13, [r3, #8]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
   b7518:	3201      	adds	r2, #1
   b751a:	460d      	mov	r5, r1
   b751c:	e7c5      	b.n	b74aa <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x7e>
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
   b751e:	ee27 7a28 	vmul.f32	s14, s14, s17
   b7522:	eea6 7a25 	vfma.f32	s14, s12, s11
   b7526:	eea6 7a85 	vfma.f32	s14, s13, s10
                output_matrix->buffer[output_ix++] = v;
   b752a:	ed83 7a00 	vstr	s14, [r3]
   b752e:	e7f3      	b.n	b7518 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xec>
        matrix_t input_matrix(elements_to_read, config.axes);
   b7530:	4668      	mov	r0, sp
        bytes_left -= elements_to_read;
   b7532:	eba8 0802 	sub.w	r8, r8, r2
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
   b7536:	f504 6480 	add.w	r4, r4, #1024	; 0x400
        matrix_t input_matrix(elements_to_read, config.axes);
   b753a:	f7ff ff19 	bl	b7370 <_ZN2ei9ei_matrixD1Ev>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
   b753e:	e790      	b.n	b7462 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x36>
    return EIDSP_OK;
   b7540:	2000      	movs	r0, #0
   b7542:	e7a3      	b.n	b748c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x60>
   b7544:	437f0000 	.word	0x437f0000
   b7548:	3f1645a2 	.word	0x3f1645a2
   b754c:	000c0c6c 	.word	0x000c0c6c
   b7550:	fffffc16 	.word	0xfffffc16
   b7554:	3e991687 	.word	0x3e991687
   b7558:	3de978d5 	.word	0x3de978d5

000b755c <_ZNSt12_Vector_baseIP4cubeSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b755c:	b510      	push	{r4, lr}
   b755e:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b7560:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b7562:	b118      	cbz	r0, b756c <_ZNSt12_Vector_baseIP4cubeSaIS1_EED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b7564:	68a1      	ldr	r1, [r4, #8]
   b7566:	1a09      	subs	r1, r1, r0
   b7568:	f7fc fd9b 	bl	b40a2 <_ZdlPvj>
      }
   b756c:	4620      	mov	r0, r4
   b756e:	bd10      	pop	{r4, pc}

000b7570 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   b7570:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7574:	e9d0 8900 	ldrd	r8, r9, [r0]
   b7578:	4693      	mov	fp, r2

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   b757a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b757e:	eba9 0208 	sub.w	r2, r9, r8
	if (max_size() - size() < __n)
   b7582:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
   b7586:	4607      	mov	r7, r0
   b7588:	468a      	mov	sl, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b758a:	ea4f 04a2 	mov.w	r4, r2, asr #2
	if (max_size() - size() < __n)
   b758e:	d102      	bne.n	b7596 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   b7590:	481f      	ldr	r0, [pc, #124]	; (b7610 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa0>)
   b7592:	f005 ff82 	bl	bd49a <_ZSt20__throw_length_errorPKc>
   b7596:	2c01      	cmp	r4, #1
   b7598:	4622      	mov	r2, r4
   b759a:	bf38      	it	cc
   b759c:	2201      	movcc	r2, #1
   b759e:	18a4      	adds	r4, r4, r2
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b75a0:	eba1 0508 	sub.w	r5, r1, r8

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b75a4:	d230      	bcs.n	b7608 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x98>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b75a6:	b38c      	cbz	r4, b760c <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9c>
   b75a8:	429c      	cmp	r4, r3
   b75aa:	bf28      	it	cs
   b75ac:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b75ae:	00a0      	lsls	r0, r4, #2
   b75b0:	f7fc fd71 	bl	b4096 <_Znwj>
   b75b4:	4606      	mov	r6, r0
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b75b6:	42ee      	cmn	r6, r5
   b75b8:	bf1c      	itt	ne
   b75ba:	f8db 3000 	ldrne.w	r3, [fp]
   b75be:	5173      	strne	r3, [r6, r5]
    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result, allocator<_Up>&) noexcept
    {
      ptrdiff_t __count = __last - __first;
      if (__count > 0)
   b75c0:	2d00      	cmp	r5, #0
   b75c2:	dd04      	ble.n	b75ce <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x5e>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b75c4:	462a      	mov	r2, r5
   b75c6:	4641      	mov	r1, r8
   b75c8:	4630      	mov	r0, r6
   b75ca:	f007 f8f4 	bl	be7b6 <memmove>
      ptrdiff_t __count = __last - __first;
   b75ce:	eba9 090a 	sub.w	r9, r9, sl
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
   b75d2:	3504      	adds	r5, #4
      if (__count > 0)
   b75d4:	f1b9 0f00 	cmp.w	r9, #0
   b75d8:	4435      	add	r5, r6
   b75da:	dd04      	ble.n	b75e6 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x76>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b75dc:	464a      	mov	r2, r9
   b75de:	4651      	mov	r1, sl
   b75e0:	4628      	mov	r0, r5
   b75e2:	f007 f8da 	bl	be79a <memcpy>
      return __result + __count;
   b75e6:	444d      	add	r5, r9
	if (__p)
   b75e8:	f1b8 0f00 	cmp.w	r8, #0
   b75ec:	d005      	beq.n	b75fa <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8a>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
   b75ee:	68b9      	ldr	r1, [r7, #8]
	::operator delete(__p
   b75f0:	4640      	mov	r0, r8
   b75f2:	eba1 0108 	sub.w	r1, r1, r8
   b75f6:	f7fc fd54 	bl	b40a2 <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b75fa:	eb06 0484 	add.w	r4, r6, r4, lsl #2
      this->_M_impl._M_finish = __new_finish;
   b75fe:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b7602:	60bc      	str	r4, [r7, #8]
    }
   b7604:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b7608:	461c      	mov	r4, r3
   b760a:	e7d0      	b.n	b75ae <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b760c:	4626      	mov	r6, r4
   b760e:	e7d2      	b.n	b75b6 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
   b7610:	000c0c76 	.word	0x000c0c76

000b7614 <_ZNSt6vectorIP4cubeSaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
   b7614:	b510      	push	{r4, lr}
   b7616:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b7618:	e9d0 1401 	ldrd	r1, r4, [r0, #4]
   b761c:	42a1      	cmp	r1, r4
      push_back(const value_type& __x)
   b761e:	4603      	mov	r3, r0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b7620:	d006      	beq.n	b7630 <_ZNSt6vectorIP4cubeSaIS1_EE9push_backERKS1_+0x1c>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b7622:	b109      	cbz	r1, b7628 <_ZNSt6vectorIP4cubeSaIS1_EE9push_backERKS1_+0x14>
   b7624:	6812      	ldr	r2, [r2, #0]
   b7626:	600a      	str	r2, [r1, #0]
	    ++this->_M_impl._M_finish;
   b7628:	685a      	ldr	r2, [r3, #4]
   b762a:	3204      	adds	r2, #4
   b762c:	605a      	str	r2, [r3, #4]
      }
   b762e:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), __x);
   b7630:	f7ff ff9e 	bl	b7570 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
   b7634:	e7fb      	b.n	b762e <_ZNSt6vectorIP4cubeSaIS1_EE9push_backERKS1_+0x1a>

000b7636 <_ZL14ei_handle_cubePSt6vectorIP4cubeSaIS1_EEiifPKcf.part.0>:
__attribute__((unused)) static void ei_handle_cube(std::vector<ei_classifier_cube_t*> *cubes, int x, int y, float vf, const char *label, float detection_threshold) {
   b7636:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b763a:	ed2d 8b02 	vpush	{d8}
   b763e:	e9d0 8b00 	ldrd	r8, fp, [r0]
   b7642:	b085      	sub	sp, #20
   b7644:	4604      	mov	r4, r0
   b7646:	460f      	mov	r7, r1
   b7648:	4616      	mov	r6, r2
   b764a:	eeb0 8a40 	vmov.f32	s16, s0
   b764e:	461d      	mov	r5, r3
        if (ei_cube_check_overlap(c, x, y, width, height, vf)) {
   b7650:	f04f 0a01 	mov.w	sl, #1
    for (auto c : *cubes) {
   b7654:	45c3      	cmp	fp, r8
   b7656:	d019      	beq.n	b768c <_ZL14ei_handle_cubePSt6vectorIP4cubeSaIS1_EEiifPKcf.part.0+0x56>
   b7658:	f858 9b04 	ldr.w	r9, [r8], #4
        if (strcmp(c->label, label) != 0) continue;
   b765c:	4629      	mov	r1, r5
   b765e:	f8d9 0014 	ldr.w	r0, [r9, #20]
   b7662:	f007 f907 	bl	be874 <strcmp>
   b7666:	2800      	cmp	r0, #0
   b7668:	d1f4      	bne.n	b7654 <_ZL14ei_handle_cubePSt6vectorIP4cubeSaIS1_EEiifPKcf.part.0+0x1e>
        if (ei_cube_check_overlap(c, x, y, width, height, vf)) {
   b766a:	f8cd a000 	str.w	sl, [sp]
   b766e:	eeb0 0a48 	vmov.f32	s0, s16
   b7672:	2301      	movs	r3, #1
   b7674:	4632      	mov	r2, r6
   b7676:	4639      	mov	r1, r7
   b7678:	4648      	mov	r0, r9
   b767a:	f7ff fcfc 	bl	b7076 <_ZL21ei_cube_check_overlapP4cubeiiiif>
   b767e:	2800      	cmp	r0, #0
   b7680:	d0e8      	beq.n	b7654 <_ZL14ei_handle_cubePSt6vectorIP4cubeSaIS1_EEiifPKcf.part.0+0x1e>
}
   b7682:	b005      	add	sp, #20
   b7684:	ecbd 8b02 	vpop	{d8}
   b7688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ei_classifier_cube_t *cube = new ei_classifier_cube_t();
   b768c:	2018      	movs	r0, #24
   b768e:	f7fc fd02 	bl	b4096 <_Znwj>
        cube->width = 1;
   b7692:	2301      	movs	r3, #1
        cube->y = y;
   b7694:	e9c0 7600 	strd	r7, r6, [r0]
        cube->height = 1;
   b7698:	e9c0 3302 	strd	r3, r3, [r0, #8]
        ei_classifier_cube_t *cube = new ei_classifier_cube_t();
   b769c:	9003      	str	r0, [sp, #12]
        cube->confidence = vf;
   b769e:	ed80 8a04 	vstr	s16, [r0, #16]
        cube->label = label;
   b76a2:	6145      	str	r5, [r0, #20]
        cubes->push_back(cube);
   b76a4:	a903      	add	r1, sp, #12
   b76a6:	4620      	mov	r0, r4
   b76a8:	f7ff ffb4 	bl	b7614 <_ZNSt6vectorIP4cubeSaIS1_EE9push_backERKS1_>
   b76ac:	e7e9      	b.n	b7682 <_ZL14ei_handle_cubePSt6vectorIP4cubeSaIS1_EEiifPKcf.part.0+0x4c>
	...

000b76b0 <_ZNKSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
   b76b0:	b510      	push	{r4, lr}
   b76b2:	4604      	mov	r4, r0
   b76b4:	4610      	mov	r0, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b76b6:	e9d4 2300 	ldrd	r2, r3, [r4]
   b76ba:	1a9b      	subs	r3, r3, r2
   b76bc:	4a0a      	ldr	r2, [pc, #40]	; (b76e8 <_ZNKSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE12_M_check_lenEjPKc+0x38>)
	if (max_size() - size() < __n)
   b76be:	4c0b      	ldr	r4, [pc, #44]	; (b76ec <_ZNKSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE12_M_check_lenEjPKc+0x3c>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b76c0:	10db      	asrs	r3, r3, #3
   b76c2:	4353      	muls	r3, r2
	if (max_size() - size() < __n)
   b76c4:	1ae2      	subs	r2, r4, r3
   b76c6:	428a      	cmp	r2, r1
   b76c8:	d201      	bcs.n	b76ce <_ZNKSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE12_M_check_lenEjPKc+0x1e>
	  __throw_length_error(__N(__s));
   b76ca:	f005 fee6 	bl	bd49a <_ZSt20__throw_length_errorPKc>
   b76ce:	4299      	cmp	r1, r3
   b76d0:	bf38      	it	cc
   b76d2:	4619      	movcc	r1, r3
   b76d4:	185b      	adds	r3, r3, r1
   b76d6:	d204      	bcs.n	b76e2 <_ZNKSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE12_M_check_lenEjPKc+0x32>
   b76d8:	42a3      	cmp	r3, r4
   b76da:	bf28      	it	cs
   b76dc:	4623      	movcs	r3, r4
   b76de:	4618      	mov	r0, r3
      }
   b76e0:	bd10      	pop	{r4, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b76e2:	4620      	mov	r0, r4
   b76e4:	e7fc      	b.n	b76e0 <_ZNKSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE12_M_check_lenEjPKc+0x30>
   b76e6:	bf00      	nop
   b76e8:	aaaaaaab 	.word	0xaaaaaaab
   b76ec:	05555555 	.word	0x05555555

000b76f0 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
   b76f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b76f4:	4606      	mov	r6, r0
   b76f6:	468a      	mov	sl, r1
   b76f8:	4693      	mov	fp, r2
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
   b76fa:	2101      	movs	r1, #1
   b76fc:	4a22      	ldr	r2, [pc, #136]	; (b7788 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>)
   b76fe:	f7ff ffd7 	bl	b76b0 <_ZNKSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE12_M_check_lenEjPKc>
      pointer __old_finish = this->_M_impl._M_finish;
   b7702:	e9d6 8900 	ldrd	r8, r9, [r6]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b7706:	4607      	mov	r7, r0
   b7708:	ebaa 0408 	sub.w	r4, sl, r8
   b770c:	2800      	cmp	r0, #0
   b770e:	d039      	beq.n	b7784 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x94>
	if (__n > this->_M_max_size())
   b7710:	4b1e      	ldr	r3, [pc, #120]	; (b778c <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9c>)
   b7712:	4298      	cmp	r0, r3
   b7714:	d901      	bls.n	b771a <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x2a>
	  std::__throw_bad_alloc();
   b7716:	f005 febd 	bl	bd494 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b771a:	2018      	movs	r0, #24
   b771c:	4378      	muls	r0, r7
   b771e:	f7fc fcba 	bl	b4096 <_Znwj>
   b7722:	4605      	mov	r5, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b7724:	eb15 0c04 	adds.w	ip, r5, r4
   b7728:	bf1f      	itttt	ne
   b772a:	e8bb 000f 	ldmiane.w	fp!, {r0, r1, r2, r3}
   b772e:	e8ac 000f 	stmiane.w	ip!, {r0, r1, r2, r3}
   b7732:	e9db 0100 	ldrdne	r0, r1, [fp]
   b7736:	e9cc 0100 	strdne	r0, r1, [ip]
      if (__count > 0)
   b773a:	2c00      	cmp	r4, #0
   b773c:	dd04      	ble.n	b7748 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x58>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b773e:	4622      	mov	r2, r4
   b7740:	4641      	mov	r1, r8
   b7742:	4628      	mov	r0, r5
   b7744:	f007 f837 	bl	be7b6 <memmove>
      ptrdiff_t __count = __last - __first;
   b7748:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
   b774c:	3418      	adds	r4, #24
      if (__count > 0)
   b774e:	f1b9 0f00 	cmp.w	r9, #0
   b7752:	442c      	add	r4, r5
   b7754:	dd04      	ble.n	b7760 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x70>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b7756:	464a      	mov	r2, r9
   b7758:	4651      	mov	r1, sl
   b775a:	4620      	mov	r0, r4
   b775c:	f007 f81d 	bl	be79a <memcpy>
      return __result + __count;
   b7760:	444c      	add	r4, r9
	if (__p)
   b7762:	f1b8 0f00 	cmp.w	r8, #0
   b7766:	d005      	beq.n	b7774 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x84>
		    this->_M_impl._M_end_of_storage - __old_start);
   b7768:	68b1      	ldr	r1, [r6, #8]
	::operator delete(__p
   b776a:	4640      	mov	r0, r8
   b776c:	eba1 0108 	sub.w	r1, r1, r8
   b7770:	f7fc fc97 	bl	b40a2 <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b7774:	2018      	movs	r0, #24
      this->_M_impl._M_finish = __new_finish;
   b7776:	e9c6 5400 	strd	r5, r4, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b777a:	fb00 5507 	mla	r5, r0, r7, r5
   b777e:	60b5      	str	r5, [r6, #8]
    }
   b7780:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b7784:	4605      	mov	r5, r0
   b7786:	e7cd      	b.n	b7724 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x34>
   b7788:	000c0c76 	.word	0x000c0c76
   b778c:	05555555 	.word	0x05555555

000b7790 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP32ei_impulse_result_bounding_box_tjEET_S4_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
   b7790:	b5f0      	push	{r4, r5, r6, r7, lr}
	  return std::fill_n(__first, __n, _ValueType());
   b7792:	2518      	movs	r5, #24
        __uninit_default_n(_ForwardIterator __first, _Size __n)
   b7794:	b087      	sub	sp, #28
   b7796:	460c      	mov	r4, r1
   b7798:	4606      	mov	r6, r0
	  return std::fill_n(__first, __n, _ValueType());
   b779a:	462a      	mov	r2, r5
   b779c:	2100      	movs	r1, #0
   b779e:	4668      	mov	r0, sp
   b77a0:	f007 f823 	bl	be7ea <memset>
	       std::random_access_iterator_tag)
    {
#if __cplusplus >= 201103L
      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
#endif
      if (__n <= 0)
   b77a4:	b16c      	cbz	r4, b77c2 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP32ei_impulse_result_bounding_box_tjEET_S4_T0_+0x32>
	return __first;

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
   b77a6:	436c      	muls	r4, r5
   b77a8:	eb06 0e04 	add.w	lr, r6, r4
   b77ac:	46b4      	mov	ip, r6
      for (; __first != __last; ++__first)
   b77ae:	45e6      	cmp	lr, ip
   b77b0:	d10a      	bne.n	b77c8 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP32ei_impulse_result_bounding_box_tjEET_S4_T0_+0x38>
   b77b2:	4a0b      	ldr	r2, [pc, #44]	; (b77e0 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP32ei_impulse_result_bounding_box_tjEET_S4_T0_+0x50>)
   b77b4:	08e4      	lsrs	r4, r4, #3
   b77b6:	4354      	muls	r4, r2
   b77b8:	f024 4460 	bic.w	r4, r4, #3758096384	; 0xe0000000
   b77bc:	2318      	movs	r3, #24
   b77be:	fb03 6604 	mla	r6, r3, r4, r6
	}
   b77c2:	4630      	mov	r0, r6
   b77c4:	b007      	add	sp, #28
   b77c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*__first = __value;
   b77c8:	466f      	mov	r7, sp
   b77ca:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b77cc:	4665      	mov	r5, ip
   b77ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b77d0:	e897 0003 	ldmia.w	r7, {r0, r1}
      for (; __first != __last; ++__first)
   b77d4:	f10c 0c18 	add.w	ip, ip, #24
	*__first = __value;
   b77d8:	e885 0003 	stmia.w	r5, {r0, r1}
      for (; __first != __last; ++__first)
   b77dc:	e7e7      	b.n	b77ae <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP32ei_impulse_result_bounding_box_tjEET_S4_T0_+0x1e>
   b77de:	bf00      	nop
   b77e0:	0aaaaaab 	.word	0x0aaaaaab

000b77e4 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj>:
    }

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
   b77e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b77e8:	4604      	mov	r4, r0
    _M_default_append(size_type __n)
    {
      if (__n != 0)
   b77ea:	460e      	mov	r6, r1
   b77ec:	b191      	cbz	r1, b7814 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x30>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b77ee:	e9d0 3200 	ldrd	r3, r2, [r0]
   b77f2:	eba2 0803 	sub.w	r8, r2, r3
	{
	  const size_type __size = size();
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
					 - this->_M_impl._M_finish);
   b77f6:	6883      	ldr	r3, [r0, #8]
   b77f8:	4d21      	ldr	r5, [pc, #132]	; (b7880 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x9c>)
   b77fa:	1a9b      	subs	r3, r3, r2
   b77fc:	10db      	asrs	r3, r3, #3
   b77fe:	436b      	muls	r3, r5
   b7800:	ea4f 09e8 	mov.w	r9, r8, asr #3

	  if (__size > max_size() || __navail > max_size() - __size)
	    __builtin_unreachable();

	  if (__navail >= __n)
   b7804:	4299      	cmp	r1, r3
   b7806:	fb05 f909 	mul.w	r9, r5, r9
   b780a:	d805      	bhi.n	b7818 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x34>
	__uninit_default_n(__first, __n);
   b780c:	4610      	mov	r0, r2
   b780e:	f7ff ffbf 	bl	b7790 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP32ei_impulse_result_bounding_box_tjEET_S4_T0_>
	    {
	      _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	      this->_M_impl._M_finish =
   b7812:	6060      	str	r0, [r4, #4]
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_start + __size + __n;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
	    }
	}
    }
   b7814:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		_M_check_len(__n, "vector::_M_default_append");
   b7818:	4a1a      	ldr	r2, [pc, #104]	; (b7884 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0xa0>)
   b781a:	f7ff ff49 	bl	b76b0 <_ZNKSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE12_M_check_lenEjPKc>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b781e:	4607      	mov	r7, r0
   b7820:	b1f8      	cbz	r0, b7862 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x7e>
	if (__n > this->_M_max_size())
   b7822:	4b19      	ldr	r3, [pc, #100]	; (b7888 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0xa4>)
   b7824:	4298      	cmp	r0, r3
   b7826:	d901      	bls.n	b782c <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x48>
	  std::__throw_bad_alloc();
   b7828:	f005 fe34 	bl	bd494 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b782c:	2018      	movs	r0, #24
   b782e:	4378      	muls	r0, r7
   b7830:	f7fc fc31 	bl	b4096 <_Znwj>
   b7834:	4605      	mov	r5, r0
   b7836:	eb05 0008 	add.w	r0, r5, r8
   b783a:	4631      	mov	r1, r6
   b783c:	f7ff ffa8 	bl	b7790 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP32ei_impulse_result_bounding_box_tjEET_S4_T0_>
      ptrdiff_t __count = __last - __first;
   b7840:	e9d4 8200 	ldrd	r8, r2, [r4]
   b7844:	eba2 0208 	sub.w	r2, r2, r8
      if (__count > 0)
   b7848:	2a00      	cmp	r2, #0
   b784a:	dd0c      	ble.n	b7866 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x82>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b784c:	4641      	mov	r1, r8
   b784e:	4628      	mov	r0, r5
   b7850:	f006 ffb1 	bl	be7b6 <memmove>
			    - this->_M_impl._M_start);
   b7854:	68a1      	ldr	r1, [r4, #8]
	::operator delete(__p
   b7856:	4640      	mov	r0, r8
   b7858:	eba1 0108 	sub.w	r1, r1, r8
   b785c:	f7fc fc21 	bl	b40a2 <_ZdlPvj>
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static _GLIBCXX20_CONSTEXPR void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
      { __a.deallocate(__p, __n); }
   b7860:	e004      	b.n	b786c <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x88>
   b7862:	4605      	mov	r5, r0
   b7864:	e7e7      	b.n	b7836 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x52>
	if (__p)
   b7866:	f1b8 0f00 	cmp.w	r8, #0
   b786a:	d1f3      	bne.n	b7854 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x70>
	      this->_M_impl._M_finish = __new_start + __size + __n;
   b786c:	2018      	movs	r0, #24
   b786e:	444e      	add	r6, r9
   b7870:	fb00 5606 	mla	r6, r0, r6, r5
	      this->_M_impl._M_start = __new_start;
   b7874:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
   b7876:	fb00 5507 	mla	r5, r0, r7, r5
	      this->_M_impl._M_finish = __new_start + __size + __n;
   b787a:	6066      	str	r6, [r4, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
   b787c:	60a5      	str	r5, [r4, #8]
    }
   b787e:	e7c9      	b.n	b7814 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x30>
   b7880:	aaaaaaab 	.word	0xaaaaaaab
   b7884:	000c0c90 	.word	0x000c0c90
   b7888:	05555555 	.word	0x05555555

000b788c <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim>:
__attribute__((unused)) static void fill_result_struct_from_cubes(ei_impulse_result_t *result, std::vector<ei_classifier_cube_t*> *cubes, int out_width_factor, uint32_t object_detection_count) {
   b788c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7890:	ed2d 8b04 	vpush	{d8-d9}
   b7894:	461d      	mov	r5, r3
   b7896:	b095      	sub	sp, #84	; 0x54
	: _M_start(), _M_finish(), _M_end_of_storage()
   b7898:	2300      	movs	r3, #0
   b789a:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
    static std::vector<ei_impulse_result_bounding_box_t> results;
   b789e:	f8df 91ac 	ldr.w	r9, [pc, #428]	; b7a4c <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x1c0>
__attribute__((unused)) static void fill_result_struct_from_cubes(ei_impulse_result_t *result, std::vector<ei_classifier_cube_t*> *cubes, int out_width_factor, uint32_t object_detection_count) {
   b78a2:	9004      	str	r0, [sp, #16]
   b78a4:	930d      	str	r3, [sp, #52]	; 0x34
    static std::vector<ei_impulse_result_bounding_box_t> results;
   b78a6:	f899 8000 	ldrb.w	r8, [r9]
   b78aa:	4c65      	ldr	r4, [pc, #404]	; (b7a40 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x1b4>)
   b78ac:	f3bf 8f5b 	dmb	ish
   b78b0:	f018 0801 	ands.w	r8, r8, #1
__attribute__((unused)) static void fill_result_struct_from_cubes(ei_impulse_result_t *result, std::vector<ei_classifier_cube_t*> *cubes, int out_width_factor, uint32_t object_detection_count) {
   b78b4:	460e      	mov	r6, r1
   b78b6:	4617      	mov	r7, r2
    static std::vector<ei_impulse_result_bounding_box_t> results;
   b78b8:	d10d      	bne.n	b78d6 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x4a>
   b78ba:	4648      	mov	r0, r9
   b78bc:	f7fc fbf3 	bl	b40a6 <__cxa_guard_acquire>
   b78c0:	b148      	cbz	r0, b78d6 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x4a>
   b78c2:	4648      	mov	r0, r9
   b78c4:	e9c4 8800 	strd	r8, r8, [r4]
   b78c8:	f8c4 8008 	str.w	r8, [r4, #8]
   b78cc:	f7fc fbf0 	bl	b40b0 <__cxa_guard_release>
   b78d0:	485c      	ldr	r0, [pc, #368]	; (b7a44 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x1b8>)
   b78d2:	f006 ff3d 	bl	be750 <atexit>
      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b78d6:	e9d4 3200 	ldrd	r3, r2, [r4]
   b78da:	4293      	cmp	r3, r2
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
   b78dc:	bf18      	it	ne
   b78de:	6063      	strne	r3, [r4, #4]
      : _M_current(__i) { }
   b78e0:	6873      	ldr	r3, [r6, #4]
   b78e2:	f8d6 a000 	ldr.w	sl, [r6]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b78e6:	f8df 8158 	ldr.w	r8, [pc, #344]	; b7a40 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x1b4>
   b78ea:	9305      	str	r3, [sp, #20]
    int added_boxes_count = 0;
   b78ec:	f04f 0b00 	mov.w	fp, #0
    results.clear();
    for (auto sc : *cubes) {
   b78f0:	9b05      	ldr	r3, [sp, #20]
   b78f2:	4553      	cmp	r3, sl
   b78f4:	d045      	beq.n	b7982 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0xf6>
   b78f6:	f85a 1b04 	ldr.w	r1, [sl], #4
   b78fa:	910a      	str	r1, [sp, #40]	; 0x28
        bool has_overlapping = false;

        int x = sc->x;
        int y = sc->y;
        int width = sc->width;
        int height = sc->height;
   b78fc:	68c8      	ldr	r0, [r1, #12]
        int x = sc->x;
   b78fe:	680b      	ldr	r3, [r1, #0]
        int height = sc->height;
   b7900:	9006      	str	r0, [sp, #24]
        const char *label = sc->label;
   b7902:	6948      	ldr	r0, [r1, #20]
        float vf = sc->confidence;
   b7904:	ed91 8a04 	vldr	s16, [r1, #16]
   b7908:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
        int x = sc->x;
   b790c:	ee08 3a90 	vmov	s17, r3
        const char *label = sc->label;
   b7910:	ee09 0a10 	vmov	s18, r0
        int width = sc->width;
   b7914:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
   b7918:	990c      	ldr	r1, [sp, #48]	; 0x30
   b791a:	9107      	str	r1, [sp, #28]
   b791c:	e9cd 2308 	strd	r2, r3, [sp, #32]

        for (auto c : bbs) {
   b7920:	9b07      	ldr	r3, [sp, #28]
   b7922:	454b      	cmp	r3, r9
   b7924:	d06d      	beq.n	b7a02 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x176>
   b7926:	f859 3b04 	ldr.w	r3, [r9], #4
   b792a:	9303      	str	r3, [sp, #12]
            // not cube for same class? continue
            if (strcmp(c->label, label) != 0) continue;
   b792c:	6958      	ldr	r0, [r3, #20]
   b792e:	ee19 1a10 	vmov	r1, s18
   b7932:	f006 ff9f 	bl	be874 <strcmp>
   b7936:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b793a:	2800      	cmp	r0, #0
   b793c:	d1ee      	bne.n	b791c <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x90>

            if (ei_cube_check_overlap(c, x, y, width, height, vf)) {
   b793e:	9906      	ldr	r1, [sp, #24]
   b7940:	9100      	str	r1, [sp, #0]
   b7942:	9803      	ldr	r0, [sp, #12]
   b7944:	ee18 1a90 	vmov	r1, s17
   b7948:	eeb0 0a48 	vmov.f32	s0, s16
   b794c:	f7ff fb93 	bl	b7076 <_ZL21ei_cube_check_overlapP4cubeiiiif>
   b7950:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b7954:	2800      	cmp	r0, #0
   b7956:	d0e1      	beq.n	b791c <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x90>
   b7958:	e7ca      	b.n	b78f0 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x64>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b795a:	b151      	cbz	r1, b7972 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0xe6>
   b795c:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
   b7960:	468c      	mov	ip, r1
   b7962:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b7966:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b796a:	e89e 0003 	ldmia.w	lr, {r0, r1}
   b796e:	e88c 0003 	stmia.w	ip, {r0, r1}
	    ++this->_M_impl._M_finish;
   b7972:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b7976:	3318      	adds	r3, #24
   b7978:	f8c8 3004 	str.w	r3, [r8, #4]
            .height = (uint32_t)(sc->height * out_width_factor),
            .value = sc->confidence
        };

        results.push_back(tmp);
        added_boxes_count++;
   b797c:	f10b 0b01 	add.w	fp, fp, #1
	return *this;
   b7980:	e7b6      	b.n	b78f0 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x64>
    }

    // if we didn't detect min required objects, fill the rest with fixed value
    if(added_boxes_count < object_detection_count) {
   b7982:	45ab      	cmp	fp, r5
   b7984:	d30b      	bcc.n	b799e <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x112>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b7986:	e9d6 5700 	ldrd	r5, r7, [r6]
        for (size_t ix = added_boxes_count; ix < object_detection_count; ix++) {
            results[ix].value = 0.0f;
        }
    }

    for (auto c : *cubes) {
   b798a:	42bd      	cmp	r5, r7
   b798c:	d027      	beq.n	b79de <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x152>
   b798e:	f855 0b04 	ldr.w	r0, [r5], #4
        delete c;
   b7992:	2800      	cmp	r0, #0
   b7994:	d0f9      	beq.n	b798a <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0xfe>
   b7996:	2118      	movs	r1, #24
   b7998:	f7fc fb83 	bl	b40a2 <_ZdlPvj>
	return *this;
   b799c:	e7f5      	b.n	b798a <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0xfe>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b799e:	e9d4 3200 	ldrd	r3, r2, [r4]
   b79a2:	4829      	ldr	r0, [pc, #164]	; (b7a48 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x1bc>)
   b79a4:	1ad1      	subs	r1, r2, r3
   b79a6:	10c9      	asrs	r1, r1, #3
   b79a8:	4341      	muls	r1, r0
	if (__new_size > size())
   b79aa:	428d      	cmp	r5, r1
   b79ac:	d90f      	bls.n	b79ce <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x142>
	  _M_default_append(__new_size - size());
   b79ae:	4824      	ldr	r0, [pc, #144]	; (b7a40 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x1b4>)
   b79b0:	1a69      	subs	r1, r5, r1
   b79b2:	f7ff ff17 	bl	b77e4 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj>
	return *(this->_M_impl._M_start + __n);
   b79b6:	6823      	ldr	r3, [r4, #0]
   b79b8:	2118      	movs	r1, #24
   b79ba:	fb01 320b 	mla	r2, r1, fp, r3
   b79be:	fb01 3305 	mla	r3, r1, r5, r3
            results[ix].value = 0.0f;
   b79c2:	2100      	movs	r1, #0
   b79c4:	6151      	str	r1, [r2, #20]
        for (size_t ix = added_boxes_count; ix < object_detection_count; ix++) {
   b79c6:	3218      	adds	r2, #24
   b79c8:	429a      	cmp	r2, r3
   b79ca:	d1fb      	bne.n	b79c4 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x138>
   b79cc:	e7db      	b.n	b7986 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0xfa>
	else if (__new_size < size())
   b79ce:	d2f2      	bcs.n	b79b6 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x12a>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
   b79d0:	2118      	movs	r1, #24
   b79d2:	fb01 3305 	mla	r3, r1, r5, r3
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b79d6:	429a      	cmp	r2, r3
   b79d8:	d0ed      	beq.n	b79b6 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x12a>
	    this->_M_impl._M_finish = __pos;
   b79da:	6063      	str	r3, [r4, #4]
   b79dc:	e7eb      	b.n	b79b6 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x12a>
    }

    result->bounding_boxes = results.data();
   b79de:	9b04      	ldr	r3, [sp, #16]
      { return _M_data_ptr(this->_M_impl._M_start); }
   b79e0:	6822      	ldr	r2, [r4, #0]
   b79e2:	601a      	str	r2, [r3, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b79e4:	6863      	ldr	r3, [r4, #4]
   b79e6:	1a9b      	subs	r3, r3, r2
   b79e8:	4a17      	ldr	r2, [pc, #92]	; (b7a48 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x1bc>)
   b79ea:	10db      	asrs	r3, r3, #3
   b79ec:	4353      	muls	r3, r2
    result->bounding_boxes_count = results.size();
   b79ee:	9a04      	ldr	r2, [sp, #16]
      }
   b79f0:	a80b      	add	r0, sp, #44	; 0x2c
   b79f2:	6053      	str	r3, [r2, #4]
   b79f4:	f7ff fdb2 	bl	b755c <_ZNSt12_Vector_baseIP4cubeSaIS1_EED1Ev>
}
   b79f8:	b015      	add	sp, #84	; 0x54
   b79fa:	ecbd 8b04 	vpop	{d8-d9}
   b79fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        bbs.push_back(sc);
   b7a02:	a90a      	add	r1, sp, #40	; 0x28
   b7a04:	a80b      	add	r0, sp, #44	; 0x2c
   b7a06:	f7ff fe05 	bl	b7614 <_ZNSt6vectorIP4cubeSaIS1_EE9push_backERKS1_>
            .label = sc->label,
   b7a0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        };
   b7a0c:	695a      	ldr	r2, [r3, #20]
   b7a0e:	920e      	str	r2, [sp, #56]	; 0x38
            .x = (uint32_t)(sc->x * out_width_factor),
   b7a10:	681a      	ldr	r2, [r3, #0]
   b7a12:	437a      	muls	r2, r7
        };
   b7a14:	920f      	str	r2, [sp, #60]	; 0x3c
            .y = (uint32_t)(sc->y * out_width_factor),
   b7a16:	685a      	ldr	r2, [r3, #4]
   b7a18:	437a      	muls	r2, r7
        };
   b7a1a:	9210      	str	r2, [sp, #64]	; 0x40
            .width = (uint32_t)(sc->width * out_width_factor),
   b7a1c:	689a      	ldr	r2, [r3, #8]
   b7a1e:	437a      	muls	r2, r7
        };
   b7a20:	9211      	str	r2, [sp, #68]	; 0x44
            .height = (uint32_t)(sc->height * out_width_factor),
   b7a22:	68da      	ldr	r2, [r3, #12]
   b7a24:	437a      	muls	r2, r7
        };
   b7a26:	9212      	str	r2, [sp, #72]	; 0x48
            .value = sc->confidence
   b7a28:	691b      	ldr	r3, [r3, #16]
        };
   b7a2a:	9313      	str	r3, [sp, #76]	; 0x4c
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b7a2c:	e9d8 1301 	ldrd	r1, r3, [r8, #4]
   b7a30:	4299      	cmp	r1, r3
   b7a32:	d192      	bne.n	b795a <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0xce>
	  _M_realloc_insert(end(), __x);
   b7a34:	aa0e      	add	r2, sp, #56	; 0x38
   b7a36:	4640      	mov	r0, r8
   b7a38:	f7ff fe5a 	bl	b76f0 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
   b7a3c:	e79e      	b.n	b797c <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0xf0>
   b7a3e:	bf00      	nop
   b7a40:	2003a428 	.word	0x2003a428
   b7a44:	000b7321 	.word	0x000b7321
   b7a48:	aaaaaaab 	.word	0xaaaaaaab
   b7a4c:	2003a420 	.word	0x2003a420

000b7a50 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0>:
 * @param   result          Struct for results
 * @param   debug           Whether to print debug info
 *
 * @return  EI_IMPULSE_OK if successful
 */
static EI_IMPULSE_ERROR inference_tflite_run(const ei_impulse_t *impulse,
   b7a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7a54:	ed2d 8b04 	vpush	{d8-d9}
   b7a58:	b089      	sub	sp, #36	; 0x24
   b7a5a:	e9dd 7616 	ldrd	r7, r6, [sp, #88]	; 0x58
   b7a5e:	f89d 8060 	ldrb.w	r8, [sp, #96]	; 0x60
   b7a62:	4604      	mov	r4, r0
   b7a64:	4691      	mov	r9, r2
   b7a66:	461d      	mov	r5, r3
    TfLiteTensor* scores_tensor,
    uint8_t* tensor_arena,
    ei_impulse_result_t *result,
    bool debug) {

    if(trained_model_invoke() != kTfLiteOk) {
   b7a68:	f000 fcb0 	bl	b83cc <_Z20trained_model_invokev>
   b7a6c:	2800      	cmp	r0, #0
   b7a6e:	f040 8130 	bne.w	b7cd2 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x282>
        return EI_IMPULSE_TFLITE_ERROR;
    }

    uint64_t ctx_end_us = ei_read_timer_us();
   b7a72:	f000 fd43 	bl	b84fc <ei_read_timer_us>

    result->timing.classification_us = ctx_end_us - ctx_start_us;
   b7a76:	ebb0 0009 	subs.w	r0, r0, r9
   b7a7a:	eb61 0105 	sbc.w	r1, r1, r5
   b7a7e:	e9c6 013c 	strd	r0, r1, [r6, #240]	; 0xf0
    result->timing.classification = (int)(result->timing.classification_us / 1000);
   b7a82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b7a86:	2300      	movs	r3, #0
   b7a88:	f006 fc72 	bl	be370 <__aeabi_ldivmod>
   b7a8c:	4601      	mov	r1, r0
   b7a8e:	f8c6 00e0 	str.w	r0, [r6, #224]	; 0xe0

    // Read the predicted y value from the model's output tensor
    if (debug) {
   b7a92:	f1b8 0f00 	cmp.w	r8, #0
   b7a96:	d002      	beq.n	b7a9e <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x4e>
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
   b7a98:	488f      	ldr	r0, [pc, #572]	; (b7cd8 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x288>)
   b7a9a:	f000 fd35 	bl	b8508 <ei_printf>
    }

    EI_IMPULSE_ERROR fill_res = EI_IMPULSE_OK;

    if (impulse->object_detection) {
   b7a9e:	f894 5040 	ldrb.w	r5, [r4, #64]	; 0x40
   b7aa2:	2d00      	cmp	r5, #0
   b7aa4:	f000 80b6 	beq.w	b7c14 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x1c4>
        switch (impulse->object_detection_last_layer) {
   b7aa8:	f994 1048 	ldrsb.w	r1, [r4, #72]	; 0x48
   b7aac:	1e4b      	subs	r3, r1, #1
   b7aae:	2b04      	cmp	r3, #4
   b7ab0:	f200 80ae 	bhi.w	b7c10 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x1c0>
   b7ab4:	e8df f003 	tbb	[pc, r3]
   b7ab8:	a9a5039b 	.word	0xa9a5039b
   b7abc:	a5          	.byte	0xa5
   b7abd:	00          	.byte	0x00
            case EI_CLASSIFIER_LAST_LAYER_FOMO: {
                bool int8_output = output->type == TfLiteType::kTfLiteInt8;
                if (int8_output) {
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
                        (int)output->dims->data[1], (int)output->dims->data[2]);
   b7abe:	68bb      	ldr	r3, [r7, #8]
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
   b7ac0:	687a      	ldr	r2, [r7, #4]
                                                                           int out_width,
                                                                           int out_height) {
#ifdef EI_HAS_FOMO
    std::vector<ei_classifier_cube_t*> cubes;

    int out_width_factor = impulse->input_width / out_width;
   b7ac2:	f8d3 a008 	ldr.w	sl, [r3, #8]
                        (int)output->dims->data[1], (int)output->dims->data[2]);
   b7ac6:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b7aca:	6a23      	ldr	r3, [r4, #32]
   b7acc:	fbb3 f8fa 	udiv	r8, r3, sl
                if (int8_output) {
   b7ad0:	783b      	ldrb	r3, [r7, #0]
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
   b7ad2:	9201      	str	r2, [sp, #4]
                if (int8_output) {
   b7ad4:	2b09      	cmp	r3, #9
   b7ad6:	f04f 0500 	mov.w	r5, #0
   b7ada:	d140      	bne.n	b7b5e <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x10e>
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
   b7adc:	edd7 7a04 	vldr	s15, [r7, #16]
   b7ae0:	edd7 8a03 	vldr	s17, [r7, #12]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b7ae4:	9507      	str	r5, [sp, #28]
   b7ae6:	e9cd 5505 	strd	r5, r5, [sp, #20]
   b7aea:	eeb8 8ae7 	vcvt.f32.s32	s16, s15

    for (size_t y = 0; y < out_width; y++) {
   b7aee:	462a      	mov	r2, r5
   b7af0:	4552      	cmp	r2, sl
   b7af2:	d069      	beq.n	b7bc8 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x178>
        // ei_printf("    [ ");
        for (size_t x = 0; x < out_height; x++) {
   b7af4:	2100      	movs	r1, #0
   b7af6:	4549      	cmp	r1, r9
   b7af8:	d02e      	beq.n	b7b58 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x108>
            size_t loc = ((y * out_height) + x) * (impulse->label_count + 1);
   b7afa:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   b7afc:	194f      	adds	r7, r1, r5
   b7afe:	fb03 7707 	mla	r7, r3, r7, r7
   b7b02:	9b01      	ldr	r3, [sp, #4]

            for (size_t ix = 1; ix < impulse->label_count + 1; ix++) {
   b7b04:	f04f 0b01 	mov.w	fp, #1
   b7b08:	441f      	add	r7, r3
   b7b0a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   b7b0c:	3301      	adds	r3, #1
   b7b0e:	455b      	cmp	r3, fp
   b7b10:	d920      	bls.n	b7b54 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x104>
                int8_t v = data[loc+ix];
                float vf = static_cast<float>(v - zero_point) * scale;
   b7b12:	f917 3f01 	ldrsb.w	r3, [r7, #1]!
    if (vf < detection_threshold) return;
   b7b16:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
                float vf = static_cast<float>(v - zero_point) * scale;
   b7b1a:	ee00 3a10 	vmov	s0, r3
   b7b1e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   b7b22:	ee30 0a48 	vsub.f32	s0, s0, s16
   b7b26:	ee20 0a28 	vmul.f32	s0, s0, s17
    if (vf < detection_threshold) return;
   b7b2a:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b7b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b7b32:	d40c      	bmi.n	b7b4e <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0xfe>

                ei_handle_cube(&cubes, x, y, vf, impulse->categories[ix - 1], impulse->object_detection_threshold);
   b7b34:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   b7b38:	eb03 038b 	add.w	r3, r3, fp, lsl #2
   b7b3c:	a805      	add	r0, sp, #20
   b7b3e:	f853 3c04 	ldr.w	r3, [r3, #-4]
   b7b42:	e9cd 1202 	strd	r1, r2, [sp, #8]
   b7b46:	f7ff fd76 	bl	b7636 <_ZL14ei_handle_cubePSt6vectorIP4cubeSaIS1_EEiifPKcf.part.0>
   b7b4a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
            for (size_t ix = 1; ix < impulse->label_count + 1; ix++) {
   b7b4e:	f10b 0b01 	add.w	fp, fp, #1
   b7b52:	e7da      	b.n	b7b0a <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0xba>
        for (size_t x = 0; x < out_height; x++) {
   b7b54:	3101      	adds	r1, #1
   b7b56:	e7ce      	b.n	b7af6 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0xa6>
    for (size_t y = 0; y < out_width; y++) {
   b7b58:	3201      	adds	r2, #1
   b7b5a:	444d      	add	r5, r9
   b7b5c:	e7c8      	b.n	b7af0 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0xa0>
   b7b5e:	e9cd 5505 	strd	r5, r5, [sp, #20]
   b7b62:	9507      	str	r5, [sp, #28]
    for (size_t y = 0; y < out_width; y++) {
   b7b64:	462a      	mov	r2, r5
   b7b66:	4552      	cmp	r2, sl
   b7b68:	d02e      	beq.n	b7bc8 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x178>
        for (size_t x = 0; x < out_height; x++) {
   b7b6a:	2100      	movs	r1, #0
   b7b6c:	4589      	cmp	r9, r1
   b7b6e:	d028      	beq.n	b7bc2 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x172>
            size_t loc = ((y * out_height) + x) * (impulse->label_count + 1);
   b7b70:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   b7b72:	194f      	adds	r7, r1, r5
   b7b74:	fb03 7707 	mla	r7, r3, r7, r7
   b7b78:	9b01      	ldr	r3, [sp, #4]
   b7b7a:	3701      	adds	r7, #1
   b7b7c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
            for (size_t ix = 1; ix < impulse->label_count + 1; ix++) {
   b7b80:	f04f 0b01 	mov.w	fp, #1
   b7b84:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   b7b86:	3301      	adds	r3, #1
   b7b88:	455b      	cmp	r3, fp
   b7b8a:	d918      	bls.n	b7bbe <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x16e>
                float vf = data[loc+ix];
   b7b8c:	ecb7 0a01 	vldmia	r7!, {s0}
    if (vf < detection_threshold) return;
   b7b90:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
   b7b94:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b7b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b7b9c:	d40c      	bmi.n	b7bb8 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x168>
                ei_handle_cube(&cubes, x, y, vf, impulse->categories[ix - 1], impulse->object_detection_threshold);
   b7b9e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   b7ba2:	eb03 038b 	add.w	r3, r3, fp, lsl #2
   b7ba6:	a805      	add	r0, sp, #20
   b7ba8:	f853 3c04 	ldr.w	r3, [r3, #-4]
   b7bac:	e9cd 1202 	strd	r1, r2, [sp, #8]
   b7bb0:	f7ff fd41 	bl	b7636 <_ZL14ei_handle_cubePSt6vectorIP4cubeSaIS1_EEiifPKcf.part.0>
   b7bb4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
            for (size_t ix = 1; ix < impulse->label_count + 1; ix++) {
   b7bb8:	f10b 0b01 	add.w	fp, fp, #1
   b7bbc:	e7e2      	b.n	b7b84 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x134>
        for (size_t x = 0; x < out_height; x++) {
   b7bbe:	3101      	adds	r1, #1
   b7bc0:	e7d4      	b.n	b7b6c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x11c>
    for (size_t y = 0; y < out_width; y++) {
   b7bc2:	3201      	adds	r2, #1
   b7bc4:	444d      	add	r5, r9
   b7bc6:	e7ce      	b.n	b7b66 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x116>
    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);
   b7bc8:	4630      	mov	r0, r6
   b7bca:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   b7bce:	4642      	mov	r2, r8
   b7bd0:	a905      	add	r1, sp, #20
   b7bd2:	f7ff fe5b 	bl	b788c <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim>
      }
   b7bd6:	a805      	add	r0, sp, #20
   b7bd8:	f7ff fcc0 	bl	b755c <_ZNSt12_Vector_baseIP4cubeSaIS1_EED1Ev>
        else {
            fill_res = fill_result_struct_f32(impulse, result, output->data.f, debug);
        }
    }

    trained_model_reset(ei_aligned_free);
   b7bdc:	483f      	ldr	r0, [pc, #252]	; (b7cdc <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x28c>)
   b7bde:	f000 fc17 	bl	b8410 <_Z19trained_model_resetPFvPvE>

    if (fill_res != EI_IMPULSE_OK) {
        return fill_res;
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
   b7be2:	f000 fc89 	bl	b84f8 <ei_run_impulse_check_canceled>
        return EI_IMPULSE_CANCELED;
    }

    return EI_IMPULSE_OK;
   b7be6:	1c83      	adds	r3, r0, #2
   b7be8:	bf18      	it	ne
   b7bea:	2000      	movne	r0, #0
   b7bec:	e004      	b.n	b7bf8 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x1a8>
                    ei_printf("ERR: Cannot run SSD model, EI_CLASSIFIER_ENABLE_DETECTION_POSTPROCESS_OP is disabled\n");
   b7bee:	483c      	ldr	r0, [pc, #240]	; (b7ce0 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x290>)
   b7bf0:	f000 fc8a 	bl	b8508 <ei_printf>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
   b7bf4:	f06f 0009 	mvn.w	r0, #9
}
   b7bf8:	b009      	add	sp, #36	; 0x24
   b7bfa:	ecbd 8b04 	vpop	{d8-d9}
   b7bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                ei_printf("ERR: YOLOv5 models are not supported using EON Compiler, use full TFLite (%d)\n",
   b7c02:	4838      	ldr	r0, [pc, #224]	; (b7ce4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x294>)
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
   b7c04:	f000 fc80 	bl	b8508 <ei_printf>
   b7c08:	e7f4      	b.n	b7bf4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x1a4>
                ei_printf("ERR: YOLOX models are not supported using EON Compiler, use full TFLite (%d)\n",
   b7c0a:	4837      	ldr	r0, [pc, #220]	; (b7ce8 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x298>)
   b7c0c:	2104      	movs	r1, #4
   b7c0e:	e7f9      	b.n	b7c04 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x1b4>
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
   b7c10:	4836      	ldr	r0, [pc, #216]	; (b7cec <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x29c>)
   b7c12:	e7f7      	b.n	b7c04 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x1b4>
        if (int8_output) {
   b7c14:	783b      	ldrb	r3, [r7, #0]
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
   b7c16:	f8d7 9004 	ldr.w	r9, [r7, #4]
        if (int8_output) {
   b7c1a:	2b09      	cmp	r3, #9
   b7c1c:	d026      	beq.n	b7c6c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x21c>
                                                                       bool debug) {
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
        float value = data[ix];

        if (debug) {
            ei_printf("%s:\t", impulse->categories[ix]);
   b7c1e:	f8df b0d4 	ldr.w	fp, [pc, #212]	; b7cf4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x2a4>
            ei_printf_float(value);
            ei_printf("\n");
   b7c22:	f8df a0cc 	ldr.w	sl, [pc, #204]	; b7cf0 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x2a0>
   b7c26:	464f      	mov	r7, r9
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
   b7c28:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   b7c2a:	42ab      	cmp	r3, r5
   b7c2c:	d9d6      	bls.n	b7bdc <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x18c>
        float value = data[ix];
   b7c2e:	ecb7 8a01 	vldmia	r7!, {s16}
        if (debug) {
   b7c32:	ea4f 0985 	mov.w	r9, r5, lsl #2
   b7c36:	f1b8 0f00 	cmp.w	r8, #0
   b7c3a:	d00d      	beq.n	b7c58 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x208>
            ei_printf("%s:\t", impulse->categories[ix]);
   b7c3c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   b7c40:	4658      	mov	r0, fp
   b7c42:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
   b7c46:	f000 fc5f 	bl	b8508 <ei_printf>
            ei_printf_float(value);
   b7c4a:	eeb0 0a48 	vmov.f32	s0, s16
   b7c4e:	f000 fc7b 	bl	b8548 <ei_printf_float>
            ei_printf("\n");
   b7c52:	4650      	mov	r0, sl
   b7c54:	f000 fc58 	bl	b8508 <ei_printf>
        }
        result->classification[ix].label = impulse->categories[ix];
   b7c58:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   b7c5c:	f853 3009 	ldr.w	r3, [r3, r9]
   b7c60:	60b3      	str	r3, [r6, #8]
        result->classification[ix].value = value;
   b7c62:	ed86 8a03 	vstr	s16, [r6, #12]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
   b7c66:	3501      	adds	r5, #1
   b7c68:	3608      	adds	r6, #8
   b7c6a:	e7dd      	b.n	b7c28 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x1d8>
            fill_res = fill_result_struct_i8(impulse, result, output->data.int8, output->params.zero_point, output->params.scale, debug);
   b7c6c:	edd7 7a04 	vldr	s15, [r7, #16]
   b7c70:	ed97 9a03 	vldr	s18, [r7, #12]
            ei_printf("%s:\t", impulse->categories[ix]);
   b7c74:	f8df b07c 	ldr.w	fp, [pc, #124]	; b7cf4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x2a4>
            ei_printf("\n");
   b7c78:	4f1d      	ldr	r7, [pc, #116]	; (b7cf0 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x2a0>)
   b7c7a:	eef8 8ae7 	vcvt.f32.s32	s17, s15
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
   b7c7e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   b7c80:	42ab      	cmp	r3, r5
   b7c82:	d9ab      	bls.n	b7bdc <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x18c>
        float value = static_cast<float>(data[ix] - zero_point) * scale;
   b7c84:	f919 3005 	ldrsb.w	r3, [r9, r5]
   b7c88:	ee08 3a10 	vmov	s16, r3
   b7c8c:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   b7c90:	ea4f 0a85 	mov.w	sl, r5, lsl #2
   b7c94:	ee38 8a68 	vsub.f32	s16, s16, s17
   b7c98:	ee28 8a09 	vmul.f32	s16, s16, s18
        if (debug) {
   b7c9c:	f1b8 0f00 	cmp.w	r8, #0
   b7ca0:	d00d      	beq.n	b7cbe <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x26e>
            ei_printf("%s:\t", impulse->categories[ix]);
   b7ca2:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   b7ca6:	4658      	mov	r0, fp
   b7ca8:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
   b7cac:	f000 fc2c 	bl	b8508 <ei_printf>
            ei_printf_float(value);
   b7cb0:	eeb0 0a48 	vmov.f32	s0, s16
   b7cb4:	f000 fc48 	bl	b8548 <ei_printf_float>
            ei_printf("\n");
   b7cb8:	4638      	mov	r0, r7
   b7cba:	f000 fc25 	bl	b8508 <ei_printf>
        result->classification[ix].label = impulse->categories[ix];
   b7cbe:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   b7cc2:	f853 300a 	ldr.w	r3, [r3, sl]
   b7cc6:	60b3      	str	r3, [r6, #8]
        result->classification[ix].value = value;
   b7cc8:	ed86 8a03 	vstr	s16, [r6, #12]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
   b7ccc:	3501      	adds	r5, #1
   b7cce:	3608      	adds	r6, #8
   b7cd0:	e7d5      	b.n	b7c7e <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x22e>
        return EI_IMPULSE_TFLITE_ERROR;
   b7cd2:	f06f 0002 	mvn.w	r0, #2
   b7cd6:	e78f      	b.n	b7bf8 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x1a8>
   b7cd8:	000c0caa 	.word	0x000c0caa
   b7cdc:	000b7129 	.word	0x000b7129
   b7ce0:	000c0cc7 	.word	0x000c0cc7
   b7ce4:	000c0d1d 	.word	0x000c0d1d
   b7ce8:	000c0d6c 	.word	0x000c0d6c
   b7cec:	000c0dba 	.word	0x000c0dba
   b7cf0:	000c0e85 	.word	0x000c0e85
   b7cf4:	000c0ded 	.word	0x000c0ded

000b7cf8 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb>:
EI_IMPULSE_ERROR run_nn_inference(
    const ei_impulse_t *impulse,
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
   b7cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7cfc:	b08c      	sub	sp, #48	; 0x30
   b7cfe:	4607      	mov	r7, r0
   b7d00:	4690      	mov	r8, r2
   b7d02:	4699      	mov	r9, r3
   b7d04:	460e      	mov	r6, r1
    TfLiteTensor* input;
    TfLiteTensor* output;
    TfLiteTensor* output_scores;
    TfLiteTensor* output_labels;

    uint64_t ctx_start_us = ei_read_timer_us();
   b7d06:	f000 fbf9 	bl	b84fc <ei_read_timer_us>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b7d0a:	4b63      	ldr	r3, [pc, #396]	; (b7e98 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1a0>)
   b7d0c:	930a      	str	r3, [sp, #40]	; 0x28
   b7d0e:	2300      	movs	r3, #0
   b7d10:	930b      	str	r3, [sp, #44]	; 0x2c
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(impulse,
   b7d12:	ab06      	add	r3, sp, #24
   b7d14:	9301      	str	r3, [sp, #4]
   b7d16:	ab07      	add	r3, sp, #28
    uint64_t ctx_start_us = ei_read_timer_us();
   b7d18:	e9cd 0108 	strd	r0, r1, [sp, #32]
    EI_IMPULSE_ERROR init_res = inference_tflite_setup(impulse,
   b7d1c:	9300      	str	r3, [sp, #0]
   b7d1e:	aa04      	add	r2, sp, #16
   b7d20:	ab05      	add	r3, sp, #20
   b7d22:	a908      	add	r1, sp, #32
   b7d24:	4638      	mov	r0, r7
   b7d26:	f7ff fa3b 	bl	b71a0 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0>
        &input, &output,
        &output_labels,
        &output_scores,
        p_tensor_arena);

    if (init_res != EI_IMPULSE_OK) {
   b7d2a:	4604      	mov	r4, r0
   b7d2c:	2800      	cmp	r0, #0
   b7d2e:	d161      	bne.n	b7df4 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0xfc>
        return init_res;
    }

    uint8_t* tensor_arena = static_cast<uint8_t*>(p_tensor_arena.get());

    switch (input->type) {
   b7d30:	9b04      	ldr	r3, [sp, #16]
   b7d32:	781b      	ldrb	r3, [r3, #0]
   b7d34:	2b03      	cmp	r3, #3
   b7d36:	d038      	beq.n	b7daa <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0xb2>
   b7d38:	2b09      	cmp	r3, #9
   b7d3a:	d014      	beq.n	b7d66 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x6e>
   b7d3c:	2b01      	cmp	r3, #1
   b7d3e:	d152      	bne.n	b7de6 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0xee>
        case kTfLiteFloat32: {
            ei_printf("STATUS: kTfLite Type = Float32\n");
   b7d40:	4856      	ldr	r0, [pc, #344]	; (b7e9c <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1a4>)
   b7d42:	f000 fbe1 	bl	b8508 <ei_printf>
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
   b7d46:	e9d6 3201 	ldrd	r3, r2, [r6, #4]
   b7d4a:	4353      	muls	r3, r2
   b7d4c:	42a3      	cmp	r3, r4
   b7d4e:	d958      	bls.n	b7e02 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x10a>
                input->data.f[ix] = fmatrix->buffer[ix];
   b7d50:	6833      	ldr	r3, [r6, #0]
   b7d52:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   b7d56:	681a      	ldr	r2, [r3, #0]
   b7d58:	9b04      	ldr	r3, [sp, #16]
   b7d5a:	685b      	ldr	r3, [r3, #4]
   b7d5c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
   b7d60:	3401      	adds	r4, #1
                input->data.f[ix] = fmatrix->buffer[ix];
   b7d62:	601a      	str	r2, [r3, #0]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
   b7d64:	e7ef      	b.n	b7d46 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x4e>
            }
            break;
        }
        case kTfLiteInt8: {
            ei_printf("STATUS: kTfLite Type = Int8\n");
   b7d66:	484e      	ldr	r0, [pc, #312]	; (b7ea0 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1a8>)
   b7d68:	f000 fbce 	bl	b8508 <ei_printf>
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
   b7d6c:	e9d6 3201 	ldrd	r3, r2, [r6, #4]
   b7d70:	4353      	muls	r3, r2
   b7d72:	42a3      	cmp	r3, r4
   b7d74:	d945      	bls.n	b7e02 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x10a>
                float pixel = (float)fmatrix->buffer[ix];
   b7d76:	6833      	ldr	r3, [r6, #0]
                input->data.int8[ix] = static_cast<int8_t>(round(pixel / input->params.scale) + input->params.zero_point);
   b7d78:	9d04      	ldr	r5, [sp, #16]
                float pixel = (float)fmatrix->buffer[ix];
   b7d7a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
                input->data.int8[ix] = static_cast<int8_t>(round(pixel / input->params.scale) + input->params.zero_point);
   b7d7e:	edd5 7a03 	vldr	s15, [r5, #12]
   b7d82:	ed93 0a00 	vldr	s0, [r3]
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
   b7d86:	ee80 0a27 	vdiv.f32	s0, s0, s15
   b7d8a:	f005 fc93 	bl	bd6b4 <roundf>
   b7d8e:	686b      	ldr	r3, [r5, #4]
   b7d90:	edd5 7a04 	vldr	s15, [r5, #16]
   b7d94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b7d98:	ee37 0a80 	vadd.f32	s0, s15, s0
   b7d9c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b7da0:	ee17 5a90 	vmov	r5, s15
   b7da4:	551d      	strb	r5, [r3, r4]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
   b7da6:	3401      	adds	r4, #1
   b7da8:	e7e0      	b.n	b7d6c <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x74>
            }
            break;
        }
        case kTfLiteUInt8: {
            ei_printf("STATUS: kTfLite Type = UInt8\n");
   b7daa:	483e      	ldr	r0, [pc, #248]	; (b7ea4 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1ac>)
   b7dac:	f000 fbac 	bl	b8508 <ei_printf>
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
   b7db0:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
   b7db4:	434b      	muls	r3, r1
   b7db6:	42a3      	cmp	r3, r4
                float pixel = (float)fmatrix->buffer[ix];
                input->data.uint8[ix] = static_cast<uint8_t>((pixel / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
   b7db8:	9a04      	ldr	r2, [sp, #16]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
   b7dba:	d914      	bls.n	b7de6 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0xee>
                float pixel = (float)fmatrix->buffer[ix];
   b7dbc:	6833      	ldr	r3, [r6, #0]
                input->data.uint8[ix] = static_cast<uint8_t>((pixel / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
   b7dbe:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
   b7dc2:	6852      	ldr	r2, [r2, #4]
                float pixel = (float)fmatrix->buffer[ix];
   b7dc4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
                input->data.uint8[ix] = static_cast<uint8_t>((pixel / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
   b7dc8:	edd3 6a00 	vldr	s13, [r3]
   b7dcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
   b7dd0:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
   b7dd4:	ee77 7a87 	vadd.f32	s15, s15, s14
   b7dd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   b7ddc:	ee17 3a90 	vmov	r3, s15
   b7de0:	5513      	strb	r3, [r2, r4]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
   b7de2:	3401      	adds	r4, #1
   b7de4:	e7e4      	b.n	b7db0 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0xb8>
            }
        }
        default: {
            ei_printf("ERR: Cannot handle input type (%d)\n", input->type);
   b7de6:	9b04      	ldr	r3, [sp, #16]
   b7de8:	482f      	ldr	r0, [pc, #188]	; (b7ea8 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1b0>)
   b7dea:	7819      	ldrb	r1, [r3, #0]
   b7dec:	f000 fb8c 	bl	b8508 <ei_printf>
            return EI_IMPULSE_INPUT_TENSOR_WAS_NULL;
   b7df0:	f06f 040c 	mvn.w	r4, #12
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
   b7df4:	a80a      	add	r0, sp, #40	; 0x28
   b7df6:	f7ff fb01 	bl	b73fc <_ZNSt10unique_ptrIvPFvPvEED1Ev>
    if (run_res != EI_IMPULSE_OK) {
        return run_res;
    }

    return EI_IMPULSE_OK;
}
   b7dfa:	4620      	mov	r0, r4
   b7dfc:	b00c      	add	sp, #48	; 0x30
   b7dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(debug){
   b7e02:	f1b9 0f00 	cmp.w	r9, #0
   b7e06:	d032      	beq.n	b7e6e <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x176>
        ei_printf("Quantized features: \n");
   b7e08:	4828      	ldr	r0, [pc, #160]	; (b7eac <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1b4>)
            ei_printf("%d", input->data.uint8[ix]);
   b7e0a:	f8df a0b0 	ldr.w	sl, [pc, #176]	; b7ebc <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1c4>
            ei_printf(" ");
   b7e0e:	4d28      	ldr	r5, [pc, #160]	; (b7eb0 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1b8>)
        ei_printf("Quantized features: \n");
   b7e10:	f000 fb7a 	bl	b8508 <ei_printf>
        for(size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++){
   b7e14:	2400      	movs	r4, #0
   b7e16:	e9d6 3201 	ldrd	r3, r2, [r6, #4]
   b7e1a:	4353      	muls	r3, r2
   b7e1c:	42a3      	cmp	r3, r4
   b7e1e:	d90a      	bls.n	b7e36 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x13e>
            ei_printf("%d", input->data.uint8[ix]);
   b7e20:	9b04      	ldr	r3, [sp, #16]
   b7e22:	685b      	ldr	r3, [r3, #4]
   b7e24:	4650      	mov	r0, sl
   b7e26:	5d19      	ldrb	r1, [r3, r4]
   b7e28:	f000 fb6e 	bl	b8508 <ei_printf>
            ei_printf(" ");
   b7e2c:	4628      	mov	r0, r5
   b7e2e:	f000 fb6b 	bl	b8508 <ei_printf>
        for(size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++){
   b7e32:	3401      	adds	r4, #1
   b7e34:	e7ef      	b.n	b7e16 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x11e>
        ei_printf("\n");
   b7e36:	481f      	ldr	r0, [pc, #124]	; (b7eb4 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1bc>)
            ei_printf(" ");
   b7e38:	4d1d      	ldr	r5, [pc, #116]	; (b7eb0 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1b8>)
        ei_printf("\n");
   b7e3a:	f000 fb65 	bl	b8508 <ei_printf>
        ei_printf("Float features: \n");
   b7e3e:	481e      	ldr	r0, [pc, #120]	; (b7eb8 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1c0>)
   b7e40:	f000 fb62 	bl	b8508 <ei_printf>
        for(size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++){
   b7e44:	2400      	movs	r4, #0
   b7e46:	e9d6 3201 	ldrd	r3, r2, [r6, #4]
   b7e4a:	4353      	muls	r3, r2
   b7e4c:	42a3      	cmp	r3, r4
   b7e4e:	d90b      	bls.n	b7e68 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x170>
            ei_printf_float(fmatrix->buffer[ix]);
   b7e50:	6833      	ldr	r3, [r6, #0]
   b7e52:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   b7e56:	ed93 0a00 	vldr	s0, [r3]
   b7e5a:	f000 fb75 	bl	b8548 <ei_printf_float>
            ei_printf(" ");
   b7e5e:	4628      	mov	r0, r5
   b7e60:	f000 fb52 	bl	b8508 <ei_printf>
        for(size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++){
   b7e64:	3401      	adds	r4, #1
   b7e66:	e7ee      	b.n	b7e46 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x14e>
        ei_printf("\n");
   b7e68:	4812      	ldr	r0, [pc, #72]	; (b7eb4 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1bc>)
   b7e6a:	f000 fb4d 	bl	b8508 <ei_printf>
    EI_IMPULSE_ERROR run_res = inference_tflite_run(impulse, ctx_start_us,
   b7e6e:	9b05      	ldr	r3, [sp, #20]
   b7e70:	9300      	str	r3, [sp, #0]
   b7e72:	e9cd 8901 	strd	r8, r9, [sp, #4]
   b7e76:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b7e7a:	4638      	mov	r0, r7
   b7e7c:	f7ff fde8 	bl	b7a50 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0>
   b7e80:	4604      	mov	r4, r0
    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
   b7e82:	f000 fb3b 	bl	b84fc <ei_read_timer_us>
   b7e86:	9b08      	ldr	r3, [sp, #32]
   b7e88:	1ac0      	subs	r0, r0, r3
   b7e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b7e8c:	eb61 0103 	sbc.w	r1, r1, r3
   b7e90:	e9c8 013c 	strd	r0, r1, [r8, #240]	; 0xf0
    if (run_res != EI_IMPULSE_OK) {
   b7e94:	e7ae      	b.n	b7df4 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0xfc>
   b7e96:	bf00      	nop
   b7e98:	000b7129 	.word	0x000b7129
   b7e9c:	000c0df2 	.word	0x000c0df2
   b7ea0:	000c0e12 	.word	0x000c0e12
   b7ea4:	000c0e2f 	.word	0x000c0e2f
   b7ea8:	000c0e4d 	.word	0x000c0e4d
   b7eac:	000c0e71 	.word	0x000c0e71
   b7eb0:	000c0e87 	.word	0x000c0e87
   b7eb4:	000c0e85 	.word	0x000c0e85
   b7eb8:	000c0e89 	.word	0x000c0e89
   b7ebc:	000c0ebd 	.word	0x000c0ebd

000b7ec0 <loop>:
 * @brief   Argon main function
 * @def     Handles I2C communication and processing of quantized features.
 *          
 */
void loop()
{
   b7ec0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7ec4:	ed2d 8b04 	vpush	{d8-d9}
    if(m_flag){
   b7ec8:	4c64      	ldr	r4, [pc, #400]	; (b805c <loop+0x19c>)
   b7eca:	7823      	ldrb	r3, [r4, #0]
{
   b7ecc:	b0f3      	sub	sp, #460	; 0x1cc
    if(m_flag){
   b7ece:	b1ab      	cbz	r3, b7efc <loop+0x3c>
{
   b7ed0:	eddf 8a63 	vldr	s17, [pc, #396]	; b8060 <loop+0x1a0>
        float feature = 0.0;
        uint8_t byte_counter = 0;
        while(Wire.available())
        {
            if(bytes_rec == 3){
   b7ed4:	4d63      	ldr	r5, [pc, #396]	; (b8064 <loop+0x1a4>)
            }
            
            byte_counter++;
            uint8_t s_receive = Wire.read();
            if(s_receive == 100) s_receive = 0; // Instead of 0, which cant be handle by wire.write, we receive 100.
            feature = (feature + s_receive) / 100;
   b7ed6:	ed9f 9a64 	vldr	s18, [pc, #400]	; b8068 <loop+0x1a8>
{
   b7eda:	2602      	movs	r6, #2
   b7edc:	eeb0 8a68 	vmov.f32	s16, s17
        while(Wire.available())
   b7ee0:	f005 fa72 	bl	bd3c8 <_Z19__fetch_global_Wirev>
   b7ee4:	6803      	ldr	r3, [r0, #0]
   b7ee6:	691b      	ldr	r3, [r3, #16]
   b7ee8:	4798      	blx	r3
   b7eea:	b128      	cbz	r0, b7ef8 <loop+0x38>
            if(bytes_rec == 3){
   b7eec:	682b      	ldr	r3, [r5, #0]
   b7eee:	2b03      	cmp	r3, #3
   b7ef0:	d132      	bne.n	b7f58 <loop+0x98>
                end_flag = true;
   b7ef2:	4b5e      	ldr	r3, [pc, #376]	; (b806c <loop+0x1ac>)
   b7ef4:	2201      	movs	r2, #1
   b7ef6:	701a      	strb	r2, [r3, #0]
            g_Feature_buf[g_Buf_ix] = s_receive;
            g_Buf_ix += 1;
            */
            
        }
        m_flag=false;
   b7ef8:	2300      	movs	r3, #0
   b7efa:	7023      	strb	r3, [r4, #0]
    }
    if(end_flag){
   b7efc:	4e5b      	ldr	r6, [pc, #364]	; (b806c <loop+0x1ac>)
   b7efe:	7833      	ldrb	r3, [r6, #0]
   b7f00:	b31b      	cbz	r3, b7f4a <loop+0x8a>
    /*Run inferencing only, no DSP ********************************************************/
    ei_impulse_result_t result = { 0 };
   b7f02:	f44f 7280 	mov.w	r2, #256	; 0x100
   b7f06:	2100      	movs	r1, #0
   b7f08:	a832      	add	r0, sp, #200	; 0xc8
   b7f0a:	f006 fc6e 	bl	be7ea <memset>
#if EI_CLASSIFIER_STUDIO_VERSION < 3
        const ei_impulse_t impulse = ei_construct_impulse();
   b7f0e:	a809      	add	r0, sp, #36	; 0x24
   b7f10:	f7ff fa3a 	bl	b7388 <ei_construct_impulse>
#else
       const ei_impulse_t impulse = ei_default_impulse;
#endif
    
    ei::matrix_t fm(1, impulse.nn_input_frame_size);
   b7f14:	2300      	movs	r3, #0
   b7f16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b7f18:	2101      	movs	r1, #1
   b7f1a:	a805      	add	r0, sp, #20
   b7f1c:	f7ff fa13 	bl	b7346 <_ZN2ei9ei_matrixC1EmmPf>
    if((memcpy(fm.buffer,g_Feature_buf, SIFEA*sizeof(float)))==NULL){
   b7f20:	4953      	ldr	r1, [pc, #332]	; (b8070 <loop+0x1b0>)
   b7f22:	9805      	ldr	r0, [sp, #20]
   b7f24:	f44f 5210 	mov.w	r2, #9216	; 0x2400
   b7f28:	f006 fc37 	bl	be79a <memcpy>
        ei_printf("ERR: Failed to memcpy features to matrix. \n");
        return;
    }
    //Works with processed features as float
    EI_IMPULSE_ERROR init_res = run_nn_inference(&impulse, &fm, &result);
   b7f2c:	2300      	movs	r3, #0
   b7f2e:	aa32      	add	r2, sp, #200	; 0xc8
   b7f30:	a905      	add	r1, sp, #20
   b7f32:	a809      	add	r0, sp, #36	; 0x24
   b7f34:	f7ff fee0 	bl	b7cf8 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb>
    

    // EI_IMPULSE_ERROR init_res = run_nn_inference_image_quantized(&impulse, g_Feature_buf, SIFEA, &result, true); Dosent work, cant figure out why
    if (init_res != EI_IMPULSE_OK) {
   b7f38:	4604      	mov	r4, r0
   b7f3a:	b350      	cbz	r0, b7f92 <loop+0xd2>
        ei_printf("ERROR accured during inferencing: %d", init_res);
   b7f3c:	4601      	mov	r1, r0
   b7f3e:	484d      	ldr	r0, [pc, #308]	; (b8074 <loop+0x1b4>)
   b7f40:	f000 fae2 	bl	b8508 <ei_printf>
    ei::matrix_t fm(1, impulse.nn_input_frame_size);
   b7f44:	a805      	add	r0, sp, #20
   b7f46:	f7ff fa13 	bl	b7370 <_ZN2ei9ei_matrixD1Ev>
    //Make ready for new detection
    end_flag=false;
    g_Buf_ix = 0;
    memset(g_Feature_buf,0,sizeof(g_Feature_buf));
    }
}
   b7f4a:	b073      	add	sp, #460	; 0x1cc
   b7f4c:	ecbd 8b04 	vpop	{d8-d9}
   b7f50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b7f54:	2601      	movs	r6, #1
   b7f56:	e7c3      	b.n	b7ee0 <loop+0x20>
            uint8_t s_receive = Wire.read();
   b7f58:	f005 fa36 	bl	bd3c8 <_Z19__fetch_global_Wirev>
   b7f5c:	6803      	ldr	r3, [r0, #0]
   b7f5e:	695b      	ldr	r3, [r3, #20]
   b7f60:	4798      	blx	r3
   b7f62:	b2c0      	uxtb	r0, r0
            if(s_receive == 100) s_receive = 0; // Instead of 0, which cant be handle by wire.write, we receive 100.
   b7f64:	2864      	cmp	r0, #100	; 0x64
   b7f66:	bf08      	it	eq
   b7f68:	2000      	moveq	r0, #0
            feature = (feature + s_receive) / 100;
   b7f6a:	ee07 0a90 	vmov	s15, r0
   b7f6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            if(byte_counter==2){
   b7f72:	2e01      	cmp	r6, #1
            feature = (feature + s_receive) / 100;
   b7f74:	ee77 7a88 	vadd.f32	s15, s15, s16
   b7f78:	ee87 8a89 	vdiv.f32	s16, s15, s18
            if(byte_counter==2){
   b7f7c:	d1ea      	bne.n	b7f54 <loop+0x94>
                g_Feature_buf[g_Buf_ix] = feature;
   b7f7e:	493e      	ldr	r1, [pc, #248]	; (b8078 <loop+0x1b8>)
   b7f80:	4a3b      	ldr	r2, [pc, #236]	; (b8070 <loop+0x1b0>)
   b7f82:	880b      	ldrh	r3, [r1, #0]
   b7f84:	eb02 0283 	add.w	r2, r2, r3, lsl #2
                g_Buf_ix += 1;
   b7f88:	3301      	adds	r3, #1
                g_Feature_buf[g_Buf_ix] = feature;
   b7f8a:	ed82 8a00 	vstr	s16, [r2]
                g_Buf_ix += 1;
   b7f8e:	800b      	strh	r3, [r1, #0]
                feature = 0.0;
   b7f90:	e7a1      	b.n	b7ed6 <loop+0x16>
    ei_printf("(Classification: %d ms.)",result.timing.classification);
   b7f92:	996a      	ldr	r1, [sp, #424]	; 0x1a8
   b7f94:	4839      	ldr	r0, [pc, #228]	; (b807c <loop+0x1bc>)
   b7f96:	f8df 80f0 	ldr.w	r8, [pc, #240]	; b8088 <loop+0x1c8>
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b7f9a:	f8df 90f0 	ldr.w	r9, [pc, #240]	; b808c <loop+0x1cc>
   b7f9e:	f000 fab3 	bl	b8508 <ei_printf>
    ei_printf(": \n");
   b7fa2:	4837      	ldr	r0, [pc, #220]	; (b8080 <loop+0x1c0>)
   b7fa4:	f000 fab0 	bl	b8508 <ei_printf>
    bool bb_found = result.bounding_boxes[0].value > 0;
   b7fa8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
   b7faa:	ed93 8a05 	vldr	s16, [r3, #20]
        auto bb = result.bounding_boxes[ix];
   b7fae:	2718      	movs	r7, #24
    for (size_t ix = 0; ix < result.bounding_boxes_count; ix++) {
   b7fb0:	9b33      	ldr	r3, [sp, #204]	; 0xcc
   b7fb2:	42a3      	cmp	r3, r4
   b7fb4:	d93f      	bls.n	b8036 <loop+0x176>
        auto bb = result.bounding_boxes[ix];
   b7fb6:	9a32      	ldr	r2, [sp, #200]	; 0xc8
   b7fb8:	fb07 f304 	mul.w	r3, r7, r4
   b7fbc:	18d1      	adds	r1, r2, r3
        if (bb.value == 0) {
   b7fbe:	edd1 7a05 	vldr	s15, [r1, #20]
   b7fc2:	eef5 7a40 	vcmp.f32	s15, #0.0
   b7fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b7fca:	d032      	beq.n	b8032 <loop+0x172>
        int value = *bb.label;
   b7fcc:	58d3      	ldr	r3, [r2, r3]
            switch(label){
   b7fce:	781b      	ldrb	r3, [r3, #0]
   b7fd0:	2b61      	cmp	r3, #97	; 0x61
   b7fd2:	d12e      	bne.n	b8032 <loop+0x172>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b7fd4:	f898 3000 	ldrb.w	r3, [r8]
   b7fd8:	f88d 3000 	strb.w	r3, [sp]
   b7fdc:	2200      	movs	r2, #0
   b7fde:	233c      	movs	r3, #60	; 0x3c
   b7fe0:	4649      	mov	r1, r9
   b7fe2:	a803      	add	r0, sp, #12
   b7fe4:	f004 fef6 	bl	bcdd4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b7fe8:	9d04      	ldr	r5, [sp, #16]
   b7fea:	b17d      	cbz	r5, b800c <loop+0x14c>
      if (--_M_use_count == 0)
   b7fec:	686b      	ldr	r3, [r5, #4]
   b7fee:	3b01      	subs	r3, #1
   b7ff0:	606b      	str	r3, [r5, #4]
   b7ff2:	b95b      	cbnz	r3, b800c <loop+0x14c>
          _M_dispose();
   b7ff4:	682b      	ldr	r3, [r5, #0]
   b7ff6:	4628      	mov	r0, r5
   b7ff8:	689b      	ldr	r3, [r3, #8]
   b7ffa:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b7ffc:	68ab      	ldr	r3, [r5, #8]
   b7ffe:	3b01      	subs	r3, #1
   b8000:	60ab      	str	r3, [r5, #8]
   b8002:	b91b      	cbnz	r3, b800c <loop+0x14c>
            _M_destroy();
   b8004:	682b      	ldr	r3, [r5, #0]
   b8006:	4628      	mov	r0, r5
   b8008:	68db      	ldr	r3, [r3, #12]
   b800a:	4798      	blx	r3
                Serial.println(value);
   b800c:	f004 fd06 	bl	bca1c <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b8010:	2161      	movs	r1, #97	; 0x61
   b8012:	220a      	movs	r2, #10
   b8014:	4605      	mov	r5, r0
   b8016:	f005 f948 	bl	bd2aa <_ZN5Print11printNumberEmh>
        n += println();
   b801a:	4628      	mov	r0, r5
   b801c:	f005 f925 	bl	bd26a <_ZN5Print7printlnEv>
                Serial.println();
   b8020:	f004 fcfc 	bl	bca1c <_Z16_fetch_usbserialv>
   b8024:	f005 f921 	bl	bd26a <_ZN5Print7printlnEv>
                Serial.println(label);
   b8028:	f004 fcf8 	bl	bca1c <_Z16_fetch_usbserialv>
   b802c:	2161      	movs	r1, #97	; 0x61
   b802e:	f005 f932 	bl	bd296 <_ZN5Print7printlnEc>
    for (size_t ix = 0; ix < result.bounding_boxes_count; ix++) {
   b8032:	3401      	adds	r4, #1
   b8034:	e7bc      	b.n	b7fb0 <loop+0xf0>
    if (!bb_found) {
   b8036:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   b803a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b803e:	dc02      	bgt.n	b8046 <loop+0x186>
        ei_printf("No objects found\n");
   b8040:	4810      	ldr	r0, [pc, #64]	; (b8084 <loop+0x1c4>)
   b8042:	f000 fa61 	bl	b8508 <ei_printf>
    g_Buf_ix = 0;
   b8046:	4b0c      	ldr	r3, [pc, #48]	; (b8078 <loop+0x1b8>)
    memset(g_Feature_buf,0,sizeof(g_Feature_buf));
   b8048:	4809      	ldr	r0, [pc, #36]	; (b8070 <loop+0x1b0>)
    end_flag=false;
   b804a:	2100      	movs	r1, #0
    memset(g_Feature_buf,0,sizeof(g_Feature_buf));
   b804c:	f44f 5210 	mov.w	r2, #9216	; 0x2400
    end_flag=false;
   b8050:	7031      	strb	r1, [r6, #0]
    g_Buf_ix = 0;
   b8052:	8019      	strh	r1, [r3, #0]
    memset(g_Feature_buf,0,sizeof(g_Feature_buf));
   b8054:	f006 fbc9 	bl	be7ea <memset>
   b8058:	e774      	b.n	b7f44 <loop+0x84>
   b805a:	bf00      	nop
   b805c:	2003c83c 	.word	0x2003c83c
   b8060:	00000000 	.word	0x00000000
   b8064:	2003a434 	.word	0x2003a434
   b8068:	42c80000 	.word	0x42c80000
   b806c:	2003a439 	.word	0x2003a439
   b8070:	2003a43c 	.word	0x2003a43c
   b8074:	000c0e9b 	.word	0x000c0e9b
   b8078:	2003a43a 	.word	0x2003a43a
   b807c:	000c0ec0 	.word	0x000c0ec0
   b8080:	000c0e83 	.word	0x000c0e83
   b8084:	000c0ed9 	.word	0x000c0ed9
   b8088:	2003a424 	.word	0x2003a424
   b808c:	000c0c61 	.word	0x000c0c61

000b8090 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
        val_(val) {
   b8090:	4b01      	ldr	r3, [pc, #4]	; (b8098 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x8>)
   b8092:	2200      	movs	r2, #0
   b8094:	701a      	strb	r2, [r3, #0]
}
   b8096:	4770      	bx	lr
   b8098:	2003a424 	.word	0x2003a424

000b809c <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti>:

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
   b809c:	4b04      	ldr	r3, [pc, #16]	; (b80b0 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x14>)
   b809e:	681b      	ldr	r3, [r3, #0]
   b80a0:	428b      	cmp	r3, r1
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
   b80a2:	bfa3      	ittte	ge
   b80a4:	4b03      	ldrge	r3, [pc, #12]	; (b80b4 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x18>)
   b80a6:	eb03 01c1 	addge.w	r1, r3, r1, lsl #3
   b80aa:	6848      	ldrge	r0, [r1, #4]
    return NULL;
   b80ac:	2000      	movlt	r0, #0
}
   b80ae:	4770      	bx	lr
   b80b0:	2003e2bc 	.word	0x2003e2bc
   b80b4:	2003e21c 	.word	0x2003e21c

000b80b8 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti>:

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}
   b80b8:	4801      	ldr	r0, [pc, #4]	; (b80c0 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti+0x8>)
   b80ba:	eb00 1081 	add.w	r0, r0, r1, lsl #6
   b80be:	4770      	bx	lr
   b80c0:	2003c840 	.word	0x2003c840

000b80c4 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti>:

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}
   b80c4:	4b02      	ldr	r3, [pc, #8]	; (b80d0 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0xc>)
   b80c6:	200c      	movs	r0, #12
   b80c8:	fb00 3001 	mla	r0, r0, r1, r3
   b80cc:	4770      	bx	lr
   b80ce:	bf00      	nop
   b80d0:	2003daa4 	.word	0x2003daa4

000b80d4 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>:
                                       size_t bytes) {
   b80d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (current_location - bytes < tensor_boundary) {
   b80d6:	4b16      	ldr	r3, [pc, #88]	; (b8130 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x5c>)
   b80d8:	4816      	ldr	r0, [pc, #88]	; (b8134 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x60>)
   b80da:	681c      	ldr	r4, [r3, #0]
   b80dc:	6800      	ldr	r0, [r0, #0]
   b80de:	1a64      	subs	r4, r4, r1
   b80e0:	4284      	cmp	r4, r0
                                       size_t bytes) {
   b80e2:	460a      	mov	r2, r1
  if (current_location - bytes < tensor_boundary) {
   b80e4:	d21e      	bcs.n	b8124 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x50>
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
   b80e6:	4d14      	ldr	r5, [pc, #80]	; (b8138 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x64>)
   b80e8:	682b      	ldr	r3, [r5, #0]
   b80ea:	2b09      	cmp	r3, #9
   b80ec:	d906      	bls.n	b80fc <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x28>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
   b80ee:	4813      	ldr	r0, [pc, #76]	; (b813c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x68>)
   b80f0:	f000 fa0a 	bl	b8508 <ei_printf>
      return NULL;
   b80f4:	2400      	movs	r4, #0
}
   b80f6:	4620      	mov	r0, r4
   b80f8:	b003      	add	sp, #12
   b80fa:	bd30      	pop	{r4, r5, pc}
    ptr = ei_calloc(bytes, 1);
   b80fc:	4610      	mov	r0, r2
   b80fe:	2101      	movs	r1, #1
   b8100:	9201      	str	r2, [sp, #4]
   b8102:	f000 fa2f 	bl	b8564 <ei_calloc>
    if (ptr == NULL) {
   b8106:	9a01      	ldr	r2, [sp, #4]
   b8108:	4604      	mov	r4, r0
   b810a:	b920      	cbnz	r0, b8116 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x42>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
   b810c:	480c      	ldr	r0, [pc, #48]	; (b8140 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x6c>)
   b810e:	4611      	mov	r1, r2
   b8110:	f000 f9fa 	bl	b8508 <ei_printf>
      return NULL;
   b8114:	e7ef      	b.n	b80f6 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x22>
    overflow_buffers[overflow_buffers_ix++] = ptr;
   b8116:	682b      	ldr	r3, [r5, #0]
   b8118:	1c5a      	adds	r2, r3, #1
   b811a:	602a      	str	r2, [r5, #0]
   b811c:	4a09      	ldr	r2, [pc, #36]	; (b8144 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x70>)
   b811e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    return ptr;
   b8122:	e7e8      	b.n	b80f6 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x22>
  memset(ptr, 0, bytes);
   b8124:	2100      	movs	r1, #0
   b8126:	4620      	mov	r0, r4
  current_location -= bytes;
   b8128:	601c      	str	r4, [r3, #0]
  memset(ptr, 0, bytes);
   b812a:	f006 fb5e 	bl	be7ea <memset>
  return ptr;
   b812e:	e7e2      	b.n	b80f6 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x22>
   b8130:	2003e290 	.word	0x2003e290
   b8134:	2003e28c 	.word	0x2003e28c
   b8138:	2003e2c0 	.word	0x2003e2c0
   b813c:	000c0f90 	.word	0x000c0f90
   b8140:	000c100d 	.word	0x000c100d
   b8144:	2003e294 	.word	0x2003e294

000b8148 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
                                                int* buffer_idx) {
   b8148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
   b814a:	4e0e      	ldr	r6, [pc, #56]	; (b8184 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x3c>)
   b814c:	6833      	ldr	r3, [r6, #0]
   b814e:	2b0d      	cmp	r3, #13
                                                int* buffer_idx) {
   b8150:	460d      	mov	r5, r1
   b8152:	4617      	mov	r7, r2
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
   b8154:	d904      	bls.n	b8160 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x18>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
   b8156:	480c      	ldr	r0, [pc, #48]	; (b8188 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x40>)
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
   b8158:	f000 f9d6 	bl	b8508 <ei_printf>
    return kTfLiteError;
   b815c:	2001      	movs	r0, #1
}
   b815e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
   b8160:	f7ff ffb8 	bl	b80d4 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>
  if (!b.ptr) {
   b8164:	b910      	cbnz	r0, b816c <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x24>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
   b8166:	4809      	ldr	r0, [pc, #36]	; (b818c <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x44>)
   b8168:	4629      	mov	r1, r5
   b816a:	e7f5      	b.n	b8158 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x10>
  scratch_buffers[scratch_buffers_ix] = b;
   b816c:	6833      	ldr	r3, [r6, #0]
   b816e:	4c08      	ldr	r4, [pc, #32]	; (b8190 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x48>)
  *buffer_idx = scratch_buffers_ix;
   b8170:	603b      	str	r3, [r7, #0]
  scratch_buffers[scratch_buffers_ix] = b;
   b8172:	f844 5033 	str.w	r5, [r4, r3, lsl #3]
   b8176:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
  scratch_buffers_ix++;
   b817a:	3301      	adds	r3, #1
  scratch_buffers[scratch_buffers_ix] = b;
   b817c:	6060      	str	r0, [r4, #4]
  scratch_buffers_ix++;
   b817e:	6033      	str	r3, [r6, #0]
  return kTfLiteOk;
   b8180:	2000      	movs	r0, #0
   b8182:	e7ec      	b.n	b815e <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x16>
   b8184:	2003e2bc 	.word	0x2003e2bc
   b8188:	000c1043 	.word	0x000c1043
   b818c:	000c109b 	.word	0x000c109b
   b8190:	2003e21c 	.word	0x2003e21c

000b8194 <_Z18trained_model_initPFPvjjE>:

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
   b8194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8198:	4603      	mov	r3, r0
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
   b819a:	4973      	ldr	r1, [pc, #460]	; (b8368 <_Z18trained_model_initPFPvjjE+0x1d4>)
TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
   b819c:	b089      	sub	sp, #36	; 0x24
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
   b819e:	2010      	movs	r0, #16
   b81a0:	4798      	blx	r3
   b81a2:	4b72      	ldr	r3, [pc, #456]	; (b836c <_Z18trained_model_initPFPvjjE+0x1d8>)
   b81a4:	4604      	mov	r4, r0
   b81a6:	6018      	str	r0, [r3, #0]
  if (!tensor_arena) {
   b81a8:	b930      	cbnz	r0, b81b8 <_Z18trained_model_initPFPvjjE+0x24>
    ei_printf("ERR: failed to allocate tensor arena\n");
   b81aa:	4871      	ldr	r0, [pc, #452]	; (b8370 <_Z18trained_model_initPFPvjjE+0x1dc>)
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
   b81ac:	f000 f9ac 	bl	b8508 <ei_printf>
    return kTfLiteError;
   b81b0:	2001      	movs	r0, #1
        return status;
      }
    }
  }
  return kTfLiteOk;
}
   b81b2:	b009      	add	sp, #36	; 0x24
   b81b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  current_location = tensor_arena + kTensorArenaSize;
   b81b8:	4b6e      	ldr	r3, [pc, #440]	; (b8374 <_Z18trained_model_initPFPvjjE+0x1e0>)
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
   b81ba:	4a6f      	ldr	r2, [pc, #444]	; (b8378 <_Z18trained_model_initPFPvjjE+0x1e4>)
  tensor_boundary = tensor_arena;
   b81bc:	f8df c1e4 	ldr.w	ip, [pc, #484]	; b83a4 <_Z18trained_model_initPFPvjjE+0x210>
   b81c0:	4d6e      	ldr	r5, [pc, #440]	; (b837c <_Z18trained_model_initPFPvjjE+0x1e8>)
   b81c2:	f8cc 0000 	str.w	r0, [ip]
  current_location = tensor_arena + kTensorArenaSize;
   b81c6:	f500 368e 	add.w	r6, r0, #72704	; 0x11c00
   b81ca:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   b81ce:	601e      	str	r6, [r3, #0]
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
   b81d0:	4b6b      	ldr	r3, [pc, #428]	; (b8380 <_Z18trained_model_initPFPvjjE+0x1ec>)
   b81d2:	6393      	str	r3, [r2, #56]	; 0x38
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
   b81d4:	4b6b      	ldr	r3, [pc, #428]	; (b8384 <_Z18trained_model_initPFPvjjE+0x1f0>)
   b81d6:	6413      	str	r3, [r2, #64]	; 0x40
  ctx.GetScratchBuffer = &GetScratchBuffer;
   b81d8:	4b6b      	ldr	r3, [pc, #428]	; (b8388 <_Z18trained_model_initPFPvjjE+0x1f4>)
   b81da:	6453      	str	r3, [r2, #68]	; 0x44
  ctx.GetTensor = &GetTensor;
   b81dc:	4b6b      	ldr	r3, [pc, #428]	; (b838c <_Z18trained_model_initPFPvjjE+0x1f8>)
   b81de:	6513      	str	r3, [r2, #80]	; 0x50
  ctx.GetEvalTensor = &GetEvalTensor;
   b81e0:	4b6b      	ldr	r3, [pc, #428]	; (b8390 <_Z18trained_model_initPFPvjjE+0x1fc>)
   b81e2:	6553      	str	r3, [r2, #84]	; 0x54
  ctx.tensors_size = 71;
   b81e4:	2747      	movs	r7, #71	; 0x47
  ctx.tensors = tflTensors;
   b81e6:	4b6b      	ldr	r3, [pc, #428]	; (b8394 <_Z18trained_model_initPFPvjjE+0x200>)
   b81e8:	6093      	str	r3, [r2, #8]
  ctx.tensors_size = 71;
   b81ea:	6017      	str	r7, [r2, #0]
  for (size_t i = 0; i < 71; ++i) {
   b81ec:	4a6a      	ldr	r2, [pc, #424]	; (b8398 <_Z18trained_model_initPFPvjjE+0x204>)
    tflTensors[i].is_variable = 0;
   b81ee:	f04f 0e00 	mov.w	lr, #0
    tflTensors[i].type = tensorData[i].type;
   b81f2:	7851      	ldrb	r1, [r2, #1]
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
   b81f4:	f892 9000 	ldrb.w	r9, [r2]
    tflTensors[i].type = tensorData[i].type;
   b81f8:	7019      	strb	r1, [r3, #0]
    tflEvalTensors[i].type = tensorData[i].type;
   b81fa:	7229      	strb	r1, [r5, #8]
    tflTensors[i].dims = tensorData[i].dims;
   b81fc:	6891      	ldr	r1, [r2, #8]
   b81fe:	6099      	str	r1, [r3, #8]
    tflEvalTensors[i].dims = tensorData[i].dims;
   b8200:	6069      	str	r1, [r5, #4]
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
   b8202:	6851      	ldr	r1, [r2, #4]
    tflTensors[i].bytes = tensorData[i].bytes;
   b8204:	f8d2 800c 	ldr.w	r8, [r2, #12]
    tflTensors[i].is_variable = 0;
   b8208:	f883 e02d 	strb.w	lr, [r3, #45]	; 0x2d
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
   b820c:	f1b9 0f02 	cmp.w	r9, #2
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
   b8210:	bf08      	it	eq
   b8212:	1909      	addeq	r1, r1, r4
       tflTensors[i].data.data = tensorData[i].data;
   b8214:	6059      	str	r1, [r3, #4]
       tflEvalTensors[i].data.data = tensorData[i].data;
   b8216:	6029      	str	r1, [r5, #0]
    tflTensors[i].quantization = tensorData[i].quantization;
   b8218:	e9d2 0104 	ldrd	r0, r1, [r2, #16]
   b821c:	f103 0a30 	add.w	sl, r3, #48	; 0x30
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
   b8220:	f883 9014 	strb.w	r9, [r3, #20]
    tflTensors[i].bytes = tensorData[i].bytes;
   b8224:	f8c3 8018 	str.w	r8, [r3, #24]
    tflTensors[i].quantization = tensorData[i].quantization;
   b8228:	e88a 0003 	stmia.w	sl, {r0, r1}
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
   b822c:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
   b8230:	2901      	cmp	r1, #1
   b8232:	d106      	bne.n	b8242 <_Z18trained_model_initPFPvjjE+0xae>
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
   b8234:	6951      	ldr	r1, [r2, #20]
      tflTensors[i].params.scale = quant->scale->data[0];
   b8236:	6808      	ldr	r0, [r1, #0]
   b8238:	6840      	ldr	r0, [r0, #4]
   b823a:	60d8      	str	r0, [r3, #12]
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
   b823c:	6849      	ldr	r1, [r1, #4]
   b823e:	6849      	ldr	r1, [r1, #4]
   b8240:	6119      	str	r1, [r3, #16]
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
   b8242:	f1b9 0f02 	cmp.w	r9, #2
   b8246:	d107      	bne.n	b8258 <_Z18trained_model_initPFPvjjE+0xc4>
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
   b8248:	6859      	ldr	r1, [r3, #4]
      if (data_end_ptr > tensor_boundary) {
   b824a:	f8dc 0000 	ldr.w	r0, [ip]
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
   b824e:	4441      	add	r1, r8
      if (data_end_ptr > tensor_boundary) {
   b8250:	4281      	cmp	r1, r0
        tensor_boundary = data_end_ptr;
   b8252:	bf88      	it	hi
   b8254:	f8cc 1000 	strhi.w	r1, [ip]
  for (size_t i = 0; i < 71; ++i) {
   b8258:	3f01      	subs	r7, #1
   b825a:	f102 0218 	add.w	r2, r2, #24
   b825e:	f103 0340 	add.w	r3, r3, #64	; 0x40
   b8262:	f105 050c 	add.w	r5, r5, #12
   b8266:	d1c4      	bne.n	b81f2 <_Z18trained_model_initPFPvjjE+0x5e>
  if (tensor_boundary > current_location /* end of arena size */) {
   b8268:	f8dc 3000 	ldr.w	r3, [ip]
   b826c:	429e      	cmp	r6, r3
   b826e:	d201      	bcs.n	b8274 <_Z18trained_model_initPFPvjjE+0xe0>
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
   b8270:	484a      	ldr	r0, [pc, #296]	; (b839c <_Z18trained_model_initPFPvjjE+0x208>)
   b8272:	e79b      	b.n	b81ac <_Z18trained_model_initPFPvjjE+0x18>
  registrations[OP_CONV_2D] = Register_CONV_2D();
   b8274:	4668      	mov	r0, sp
   b8276:	466c      	mov	r4, sp
   b8278:	f002 fbac 	bl	ba9d4 <_ZN6tflite16Register_CONV_2DEv>
   b827c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b827e:	4d48      	ldr	r5, [pc, #288]	; (b83a0 <_Z18trained_model_initPFPvjjE+0x20c>)
   b8280:	f8df 9124 	ldr.w	r9, [pc, #292]	; b83a8 <_Z18trained_model_initPFPvjjE+0x214>
   b8284:	f8df 8124 	ldr.w	r8, [pc, #292]	; b83ac <_Z18trained_model_initPFPvjjE+0x218>
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
   b8288:	f8df b0ec 	ldr.w	fp, [pc, #236]	; b8378 <_Z18trained_model_initPFPvjjE+0x1e4>
  registrations[OP_CONV_2D] = Register_CONV_2D();
   b828c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b828e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   b8292:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
   b8296:	4668      	mov	r0, sp
   b8298:	f001 f87a 	bl	b9390 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>
   b829c:	46ec      	mov	ip, sp
   b829e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b82a2:	f105 0610 	add.w	r6, r5, #16
   b82a6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b82a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   b82ac:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  registrations[OP_PAD] = Register_PAD();
   b82b0:	4668      	mov	r0, sp
   b82b2:	f001 fc37 	bl	b9b24 <_ZN6tflite3ops5micro12Register_PADEv>
   b82b6:	46ec      	mov	ip, sp
   b82b8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b82bc:	f105 0630 	add.w	r6, r5, #48	; 0x30
   b82c0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b82c2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   b82c6:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  registrations[OP_ADD] = Register_ADD();
   b82ca:	4668      	mov	r0, sp
   b82cc:	f002 fce2 	bl	bac94 <_ZN6tflite3ops5micro12Register_ADDEv>
   b82d0:	46ec      	mov	ip, sp
   b82d2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b82d6:	f105 0650 	add.w	r6, r5, #80	; 0x50
   b82da:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b82dc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   b82e0:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
   b82e4:	4668      	mov	r0, sp
   b82e6:	466e      	mov	r6, sp
   b82e8:	f001 f9a2 	bl	b9630 <_ZN6tflite16Register_SOFTMAXEv>
   b82ec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b82ee:	f105 0c70 	add.w	ip, r5, #112	; 0x70
   b82f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b82f6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   b82fa:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
   b82fe:	4644      	mov	r4, r8
   b8300:	46ca      	mov	sl, r9
   b8302:	261b      	movs	r6, #27
   b8304:	3d10      	subs	r5, #16
    tflNodes[i].inputs = nodeData[i].inputs;
   b8306:	f8da 3000 	ldr.w	r3, [sl]
   b830a:	6023      	str	r3, [r4, #0]
    tflNodes[i].outputs = nodeData[i].outputs;
   b830c:	f8da 3004 	ldr.w	r3, [sl, #4]
   b8310:	6063      	str	r3, [r4, #4]
if (registrations[nodeData[i].used_op_index].init) {
   b8312:	f89a 300c 	ldrb.w	r3, [sl, #12]
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
   b8316:	f8da 1008 	ldr.w	r1, [sl, #8]
      tflNodes[i].custom_initial_data_size = 0;
   b831a:	61e7      	str	r7, [r4, #28]
if (registrations[nodeData[i].used_op_index].init) {
   b831c:	015b      	lsls	r3, r3, #5
tflNodes[i].custom_initial_data = nullptr;
   b831e:	e9c4 1705 	strd	r1, r7, [r4, #20]
if (registrations[nodeData[i].used_op_index].init) {
   b8322:	58eb      	ldr	r3, [r5, r3]
   b8324:	b11b      	cbz	r3, b832e <_Z18trained_model_initPFPvjjE+0x19a>
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
   b8326:	2200      	movs	r2, #0
   b8328:	4658      	mov	r0, fp
   b832a:	4798      	blx	r3
   b832c:	6120      	str	r0, [r4, #16]
  for (size_t i = 0; i < 27; ++i) {
   b832e:	3e01      	subs	r6, #1
   b8330:	f10a 0a10 	add.w	sl, sl, #16
   b8334:	f104 0424 	add.w	r4, r4, #36	; 0x24
   b8338:	d1e5      	bne.n	b8306 <_Z18trained_model_initPFPvjjE+0x172>
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
   b833a:	4c0f      	ldr	r4, [pc, #60]	; (b8378 <_Z18trained_model_initPFPvjjE+0x1e4>)
    if (registrations[nodeData[i].used_op_index].prepare) {
   b833c:	f899 300c 	ldrb.w	r3, [r9, #12]
   b8340:	eb05 1343 	add.w	r3, r5, r3, lsl #5
   b8344:	689b      	ldr	r3, [r3, #8]
   b8346:	b943      	cbnz	r3, b835a <_Z18trained_model_initPFPvjjE+0x1c6>
  for (size_t i = 0; i < 27; ++i) {
   b8348:	3601      	adds	r6, #1
   b834a:	2e1b      	cmp	r6, #27
   b834c:	f109 0910 	add.w	r9, r9, #16
   b8350:	f108 0824 	add.w	r8, r8, #36	; 0x24
   b8354:	d1f2      	bne.n	b833c <_Z18trained_model_initPFPvjjE+0x1a8>
  return kTfLiteOk;
   b8356:	2000      	movs	r0, #0
   b8358:	e72b      	b.n	b81b2 <_Z18trained_model_initPFPvjjE+0x1e>
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
   b835a:	4641      	mov	r1, r8
   b835c:	4620      	mov	r0, r4
   b835e:	4798      	blx	r3
      if (status != kTfLiteOk) {
   b8360:	2800      	cmp	r0, #0
   b8362:	d0f1      	beq.n	b8348 <_Z18trained_model_initPFPvjjE+0x1b4>
   b8364:	e725      	b.n	b81b2 <_Z18trained_model_initPFPvjjE+0x1e>
   b8366:	bf00      	nop
   b8368:	00011dc0 	.word	0x00011dc0
   b836c:	2003da00 	.word	0x2003da00
   b8370:	000c10ce 	.word	0x000c10ce
   b8374:	2003e290 	.word	0x2003e290
   b8378:	2003ddf8 	.word	0x2003ddf8
   b837c:	2003daa4 	.word	0x2003daa4
   b8380:	000b80d5 	.word	0x000b80d5
   b8384:	000b8149 	.word	0x000b8149
   b8388:	000b809d 	.word	0x000b809d
   b838c:	000b80b9 	.word	0x000b80b9
   b8390:	000b80c5 	.word	0x000b80c5
   b8394:	2003c840 	.word	0x2003c840
   b8398:	20039b98 	.word	0x20039b98
   b839c:	000c10f4 	.word	0x000c10f4
   b83a0:	2003da04 	.word	0x2003da04
   b83a4:	2003e28c 	.word	0x2003e28c
   b83a8:	000ca7c0 	.word	0x000ca7c0
   b83ac:	2003de50 	.word	0x2003de50

000b83b0 <_Z19trained_model_inputi>:
static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}
   b83b0:	4b01      	ldr	r3, [pc, #4]	; (b83b8 <_Z19trained_model_inputi+0x8>)
   b83b2:	6898      	ldr	r0, [r3, #8]
   b83b4:	4770      	bx	lr
   b83b6:	bf00      	nop
   b83b8:	2003ddf8 	.word	0x2003ddf8

000b83bc <_Z20trained_model_outputi>:

static const int outTensorIndices[] = {
  70, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
   b83bc:	4b02      	ldr	r3, [pc, #8]	; (b83c8 <_Z20trained_model_outputi+0xc>)
   b83be:	6898      	ldr	r0, [r3, #8]
}
   b83c0:	f500 508c 	add.w	r0, r0, #4480	; 0x1180
   b83c4:	4770      	bx	lr
   b83c6:	bf00      	nop
   b83c8:	2003ddf8 	.word	0x2003ddf8

000b83cc <_Z20trained_model_invokev>:

TfLiteStatus trained_model_invoke() {
   b83cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b83d0:	4e0b      	ldr	r6, [pc, #44]	; (b8400 <_Z20trained_model_invokev+0x34>)
   b83d2:	4d0c      	ldr	r5, [pc, #48]	; (b8404 <_Z20trained_model_invokev+0x38>)
  for (size_t i = 0; i < 27; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
   b83d4:	4f0c      	ldr	r7, [pc, #48]	; (b8408 <_Z20trained_model_invokev+0x3c>)
   b83d6:	f8df 8034 	ldr.w	r8, [pc, #52]	; b840c <_Z20trained_model_invokev+0x40>
  for (size_t i = 0; i < 27; ++i) {
   b83da:	2400      	movs	r4, #0
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
   b83dc:	7b33      	ldrb	r3, [r6, #12]
   b83de:	eb07 1343 	add.w	r3, r7, r3, lsl #5
   b83e2:	4629      	mov	r1, r5
   b83e4:	68db      	ldr	r3, [r3, #12]
   b83e6:	4640      	mov	r0, r8
   b83e8:	4798      	blx	r3
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
   b83ea:	b930      	cbnz	r0, b83fa <_Z20trained_model_invokev+0x2e>
  for (size_t i = 0; i < 27; ++i) {
   b83ec:	3401      	adds	r4, #1
   b83ee:	2c1b      	cmp	r4, #27
   b83f0:	f106 0610 	add.w	r6, r6, #16
   b83f4:	f105 0524 	add.w	r5, r5, #36	; 0x24
   b83f8:	d1f0      	bne.n	b83dc <_Z20trained_model_invokev+0x10>
      return status;
    }
  }
  return kTfLiteOk;
}
   b83fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b83fe:	bf00      	nop
   b8400:	000ca7c0 	.word	0x000ca7c0
   b8404:	2003de50 	.word	0x2003de50
   b8408:	2003da04 	.word	0x2003da04
   b840c:	2003ddf8 	.word	0x2003ddf8

000b8410 <_Z19trained_model_resetPFvPvE>:

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
   b8410:	b570      	push	{r4, r5, r6, lr}
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
   b8412:	4a0a      	ldr	r2, [pc, #40]	; (b843c <_Z19trained_model_resetPFvPvE+0x2c>)
   b8414:	4e0a      	ldr	r6, [pc, #40]	; (b8440 <_Z19trained_model_resetPFvPvE+0x30>)

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
   b8416:	4d0b      	ldr	r5, [pc, #44]	; (b8444 <_Z19trained_model_resetPFvPvE+0x34>)
TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
   b8418:	4603      	mov	r3, r0
  free_fnc(tensor_arena);
   b841a:	6810      	ldr	r0, [r2, #0]
   b841c:	4798      	blx	r3
  scratch_buffers_ix = 0;
   b841e:	4b0a      	ldr	r3, [pc, #40]	; (b8448 <_Z19trained_model_resetPFvPvE+0x38>)
   b8420:	2400      	movs	r4, #0
   b8422:	601c      	str	r4, [r3, #0]
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
   b8424:	682b      	ldr	r3, [r5, #0]
   b8426:	42a3      	cmp	r3, r4
   b8428:	d905      	bls.n	b8436 <_Z19trained_model_resetPFvPvE+0x26>
    ei_free(overflow_buffers[ix]);
   b842a:	f856 0b04 	ldr.w	r0, [r6], #4
   b842e:	f000 f89b 	bl	b8568 <ei_free>
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
   b8432:	3401      	adds	r4, #1
   b8434:	e7f6      	b.n	b8424 <_Z19trained_model_resetPFvPvE+0x14>
  }
  overflow_buffers_ix = 0;
   b8436:	2000      	movs	r0, #0
   b8438:	6028      	str	r0, [r5, #0]
  return kTfLiteOk;
}
   b843a:	bd70      	pop	{r4, r5, r6, pc}
   b843c:	2003da00 	.word	0x2003da00
   b8440:	2003e294 	.word	0x2003e294
   b8444:	2003e2c0 	.word	0x2003e2c0
   b8448:	2003e2bc 	.word	0x2003e2bc

000b844c <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE>:
};const NodeInfo_t nodeData[] = {
   b844c:	4b28      	ldr	r3, [pc, #160]	; (b84f0 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE+0xa4>)
   b844e:	681a      	ldr	r2, [r3, #0]
   b8450:	4b28      	ldr	r3, [pc, #160]	; (b84f4 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE+0xa8>)
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 9216, (TfLiteIntArray*)&tensor_dimension44, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
   b8452:	f502 5110 	add.w	r1, r2, #9216	; 0x2400
};const NodeInfo_t nodeData[] = {
   b8456:	f8c3 1424 	str.w	r1, [r3, #1060]	; 0x424
   b845a:	f8c3 1454 	str.w	r1, [r3, #1108]	; 0x454
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension47, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
   b845e:	f502 41ea 	add.w	r1, r2, #29952	; 0x7500
   b8462:	3130      	adds	r1, #48	; 0x30
};const NodeInfo_t nodeData[] = {
   b8464:	f8c3 146c 	str.w	r1, [r3, #1132]	; 0x46c
   b8468:	f8c3 149c 	str.w	r1, [r3, #1180]	; 0x49c
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension50, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
   b846c:	f502 5158 	add.w	r1, r2, #13824	; 0x3600
};const NodeInfo_t nodeData[] = {
   b8470:	f8c3 14b4 	str.w	r1, [r3, #1204]	; 0x4b4
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension51, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
   b8474:	f502 51d8 	add.w	r1, r2, #6912	; 0x1b00
};const NodeInfo_t nodeData[] = {
   b8478:	f8c3 14cc 	str.w	r1, [r3, #1228]	; 0x4cc
   b847c:	f8c3 14fc 	str.w	r1, [r3, #1276]	; 0x4fc
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 8112, (TfLiteIntArray*)&tensor_dimension55, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
   b8480:	f502 51fd 	add.w	r1, r2, #8096	; 0x1fa0
   b8484:	3110      	adds	r1, #16
};const NodeInfo_t nodeData[] = {
   b8486:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
   b848a:	f8c3 155c 	str.w	r1, [r3, #1372]	; 0x55c
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 9840, (TfLiteIntArray*)&tensor_dimension58, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
   b848e:	f502 5119 	add.w	r1, r2, #9792	; 0x2640
   b8492:	3130      	adds	r1, #48	; 0x30
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 8640, (TfLiteIntArray*)&tensor_dimension62, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
   b8494:	f502 5007 	add.w	r0, r2, #8640	; 0x21c0
};const NodeInfo_t nodeData[] = {
   b8498:	f8c3 1574 	str.w	r1, [r3, #1396]	; 0x574
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3456, (TfLiteIntArray*)&tensor_dimension59, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
   b849c:	f502 6158 	add.w	r1, r2, #3456	; 0xd80
};const NodeInfo_t nodeData[] = {
   b84a0:	f8c3 158c 	str.w	r1, [r3, #1420]	; 0x58c
   b84a4:	f8c3 15bc 	str.w	r1, [r3, #1468]	; 0x5bc
   b84a8:	f8c3 05d4 	str.w	r0, [r3, #1492]	; 0x5d4
   b84ac:	f8c3 15ec 	str.w	r1, [r3, #1516]	; 0x5ec
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 4032, (TfLiteIntArray*)&tensor_dimension65, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
   b84b0:	f502 607c 	add.w	r0, r2, #4032	; 0xfc0
};const NodeInfo_t nodeData[] = {
   b84b4:	f8c3 1634 	str.w	r1, [r3, #1588]	; 0x634
   b84b8:	f8c3 1664 	str.w	r1, [r3, #1636]	; 0x664
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 80, (TfLiteIntArray*)&tensor_dimension69, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
   b84bc:	f102 0150 	add.w	r1, r2, #80	; 0x50
};const NodeInfo_t nodeData[] = {
   b84c0:	605a      	str	r2, [r3, #4]
   b84c2:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
   b84c6:	f8c3 2484 	str.w	r2, [r3, #1156]	; 0x484
   b84ca:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
   b84ce:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
   b84d2:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
   b84d6:	f8c3 25a4 	str.w	r2, [r3, #1444]	; 0x5a4
   b84da:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
   b84de:	f8c3 061c 	str.w	r0, [r3, #1564]	; 0x61c
   b84e2:	f8c3 264c 	str.w	r2, [r3, #1612]	; 0x64c
   b84e6:	f8c3 167c 	str.w	r1, [r3, #1660]	; 0x67c
   b84ea:	f8c3 2694 	str.w	r2, [r3, #1684]	; 0x694
}
   b84ee:	4770      	bx	lr
   b84f0:	2003da00 	.word	0x2003da00
   b84f4:	20039b98 	.word	0x20039b98

000b84f8 <ei_run_impulse_check_canceled>:

#define EI_WEAK_FN __attribute__((weak))

EI_WEAK_FN EI_IMPULSE_ERROR ei_run_impulse_check_canceled() {
    return EI_IMPULSE_OK;
}
   b84f8:	2000      	movs	r0, #0
   b84fa:	4770      	bx	lr

000b84fc <ei_read_timer_us>:

uint64_t ei_read_timer_ms() {
    return millis();
}

uint64_t ei_read_timer_us() {
   b84fc:	b508      	push	{r3, lr}
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b84fe:	f003 ff61 	bl	bc3c4 <HAL_Timer_Get_Micro_Seconds>
    return micros();
}
   b8502:	2100      	movs	r1, #0
   b8504:	bd08      	pop	{r3, pc}
	...

000b8508 <ei_printf>:
}

/**
 *  Printf function uses vsnprintf and output using Arduino Serial
 */
void ei_printf(const char *format, ...) {
   b8508:	b40f      	push	{r0, r1, r2, r3}
   b850a:	b513      	push	{r0, r1, r4, lr}
   b850c:	ab04      	add	r3, sp, #16
    static char print_buf[1024] = { 0 };

    va_list args;
    va_start(args, format);
    int r = vsnprintf(print_buf, sizeof(print_buf), format, args);
   b850e:	480d      	ldr	r0, [pc, #52]	; (b8544 <ei_printf+0x3c>)
void ei_printf(const char *format, ...) {
   b8510:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, format);
   b8514:	9301      	str	r3, [sp, #4]
    int r = vsnprintf(print_buf, sizeof(print_buf), format, args);
   b8516:	f44f 6180 	mov.w	r1, #1024	; 0x400
   b851a:	f004 f82f 	bl	bc57c <vsnprintf>
    va_end(args);

    if (r > 0) {
   b851e:	2800      	cmp	r0, #0
   b8520:	dd0b      	ble.n	b853a <ei_printf+0x32>
        Serial.write(print_buf);
   b8522:	f004 fa7b 	bl	bca1c <_Z16_fetch_usbserialv>
   b8526:	4604      	mov	r4, r0
      return write((const uint8_t *)str, strlen(str));
   b8528:	4806      	ldr	r0, [pc, #24]	; (b8544 <ei_printf+0x3c>)
   b852a:	f006 f9ca 	bl	be8c2 <strlen>
   b852e:	6823      	ldr	r3, [r4, #0]
   b8530:	4904      	ldr	r1, [pc, #16]	; (b8544 <ei_printf+0x3c>)
   b8532:	68db      	ldr	r3, [r3, #12]
   b8534:	4602      	mov	r2, r0
   b8536:	4620      	mov	r0, r4
   b8538:	4798      	blx	r3
    }
}
   b853a:	b002      	add	sp, #8
   b853c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8540:	b004      	add	sp, #16
   b8542:	4770      	bx	lr
   b8544:	2003e2c4 	.word	0x2003e2c4

000b8548 <ei_printf_float>:

void ei_printf_float(float f) {
   b8548:	b510      	push	{r4, lr}
   b854a:	ee10 0a10 	vmov	r0, s0
    ei_printf("%f", f);
   b854e:	f005 fb85 	bl	bdc5c <__aeabi_f2d>
}
   b8552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ei_printf("%f", f);
   b8556:	4602      	mov	r2, r0
   b8558:	460b      	mov	r3, r1
   b855a:	4801      	ldr	r0, [pc, #4]	; (b8560 <ei_printf_float+0x18>)
   b855c:	f7ff bfd4 	b.w	b8508 <ei_printf>
   b8560:	000cab84 	.word	0x000cab84

000b8564 <ei_calloc>:
void *ei_malloc(size_t size) {
    return malloc(size);
}

void *ei_calloc(size_t nitems, size_t size) {
    return calloc(nitems, size);
   b8564:	f006 b8fe 	b.w	be764 <calloc>

000b8568 <ei_free>:
}

void ei_free(void *ptr) {
    free(ptr);
   b8568:	f004 b800 	b.w	bc56c <free>

000b856c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
   b856c:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context != nullptr);
   b856e:	b908      	cbnz	r0, b8574 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x8>
   b8570:	f004 f80c 	bl	bc58c <abort>
  TFLITE_DCHECK(node != nullptr);
   b8574:	2900      	cmp	r1, #0
   b8576:	d0fb      	beq.n	b8570 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x4>
  return context->GetEvalTensor(context, node->inputs->data[index]);
   b8578:	6809      	ldr	r1, [r1, #0]
   b857a:	6d43      	ldr	r3, [r0, #84]	; 0x54
   b857c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
}
   b8580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->GetEvalTensor(context, node->inputs->data[index]);
   b8584:	6851      	ldr	r1, [r2, #4]
   b8586:	4718      	bx	r3

000b8588 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:
// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   b8588:	4288      	cmp	r0, r1
                                                      std::int32_t b) {
   b858a:	b510      	push	{r4, lr}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   b858c:	d119      	bne.n	b85c2 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x3a>
   b858e:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
   b8592:	425c      	negs	r4, r3
   b8594:	415c      	adcs	r4, r3
  std::int64_t a_64(a);
  std::int64_t b_64(b);
  std::int64_t ab_64 = a_64 * b_64;
   b8596:	fb80 0301 	smull	r0, r3, r0, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   b859a:	2b00      	cmp	r3, #0
   b859c:	4a0b      	ldr	r2, [pc, #44]	; (b85cc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x44>)
   b859e:	bfa8      	it	ge
   b85a0:	f04f 4280 	movge.w	r2, #1073741824	; 0x40000000
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   b85a4:	b97c      	cbnz	r4, b85c6 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x3e>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   b85a6:	1811      	adds	r1, r2, r0
   b85a8:	eb43 70e2 	adc.w	r0, r3, r2, asr #31
   b85ac:	2800      	cmp	r0, #0
   b85ae:	da04      	bge.n	b85ba <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x32>
   b85b0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b85b4:	18c9      	adds	r1, r1, r3
   b85b6:	f140 0000 	adc.w	r0, r0, #0
   b85ba:	0fc9      	lsrs	r1, r1, #31
   b85bc:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
}
   b85c0:	bd10      	pop	{r4, pc}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   b85c2:	2400      	movs	r4, #0
   b85c4:	e7e7      	b.n	b8596 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xe>
   b85c6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   b85ca:	e7f9      	b.n	b85c0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x38>
   b85cc:	c0000001 	.word	0xc0000001

000b85d0 <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {
   b85d0:	b510      	push	{r4, lr}
    if (size_ > kMaxSmallSize) {
   b85d2:	6803      	ldr	r3, [r0, #0]
   b85d4:	2b05      	cmp	r3, #5
  ~RuntimeShape() {
   b85d6:	4604      	mov	r4, r0
    if (size_ > kMaxSmallSize) {
   b85d8:	dd03      	ble.n	b85e2 <_ZN6tflite12RuntimeShapeD1Ev+0x12>
   b85da:	6840      	ldr	r0, [r0, #4]
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
   b85dc:	b108      	cbz	r0, b85e2 <_ZN6tflite12RuntimeShapeD1Ev+0x12>
   b85de:	f7fb fd5e 	bl	b409e <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
   b85e2:	4620      	mov	r0, r4
   b85e4:	bd10      	pop	{r4, pc}

000b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>:

  inline int32_t DimensionsCount() const { return size_; }
  inline int32_t Dims(int i) const {
    TFLITE_DCHECK_GE(i, 0);
   b85e6:	2900      	cmp	r1, #0
  inline int32_t Dims(int i) const {
   b85e8:	b508      	push	{r3, lr}
    TFLITE_DCHECK_GE(i, 0);
   b85ea:	da01      	bge.n	b85f0 <_ZNK6tflite12RuntimeShape4DimsEi+0xa>
   b85ec:	f003 ffce 	bl	bc58c <abort>
    TFLITE_DCHECK_LT(i, size_);
   b85f0:	6803      	ldr	r3, [r0, #0]
   b85f2:	428b      	cmp	r3, r1
   b85f4:	ddfa      	ble.n	b85ec <_ZNK6tflite12RuntimeShape4DimsEi+0x6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   b85f6:	2b05      	cmp	r3, #5
   b85f8:	bfcb      	itete	gt
   b85fa:	6843      	ldrgt	r3, [r0, #4]
   b85fc:	eb00 0081 	addle.w	r0, r0, r1, lsl #2
   b8600:	f853 0021 	ldrgt.w	r0, [r3, r1, lsl #2]
   b8604:	6840      	ldrle	r0, [r0, #4]
  }
   b8606:	bd08      	pop	{r3, pc}

000b8608 <_ZN6tflite12RuntimeShape6SetDimEil>:
  inline void SetDim(int i, int32_t val) {
    TFLITE_DCHECK_GE(i, 0);
   b8608:	2900      	cmp	r1, #0
  inline void SetDim(int i, int32_t val) {
   b860a:	b508      	push	{r3, lr}
    TFLITE_DCHECK_GE(i, 0);
   b860c:	da01      	bge.n	b8612 <_ZN6tflite12RuntimeShape6SetDimEil+0xa>
   b860e:	f003 ffbd 	bl	bc58c <abort>
    TFLITE_DCHECK_LT(i, size_);
   b8612:	6803      	ldr	r3, [r0, #0]
   b8614:	428b      	cmp	r3, r1
   b8616:	ddfa      	ble.n	b860e <_ZN6tflite12RuntimeShape6SetDimEil+0x6>
    if (size_ > kMaxSmallSize) {
   b8618:	2b05      	cmp	r3, #5
      dims_pointer_[i] = val;
   b861a:	bfcb      	itete	gt
   b861c:	6843      	ldrgt	r3, [r0, #4]
    } else {
      dims_[i] = val;
   b861e:	eb00 0081 	addle.w	r0, r0, r1, lsl #2
      dims_pointer_[i] = val;
   b8622:	f843 2021 	strgt.w	r2, [r3, r1, lsl #2]
      dims_[i] = val;
   b8626:	6042      	strle	r2, [r0, #4]
    }
  }
   b8628:	bd08      	pop	{r3, pc}

000b862a <_ZN6tflite12RuntimeShape6ResizeEi>:
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
  }
  // The caller must ensure that the shape is no bigger than 5-D.
  inline const int32_t* DimsDataUpTo5D() const { return dims_; }

  inline void Resize(int dimensions_count) {
   b862a:	b538      	push	{r3, r4, r5, lr}
    if (size_ > kMaxSmallSize) {
   b862c:	6803      	ldr	r3, [r0, #0]
   b862e:	2b05      	cmp	r3, #5
  inline void Resize(int dimensions_count) {
   b8630:	4605      	mov	r5, r0
   b8632:	460c      	mov	r4, r1
    if (size_ > kMaxSmallSize) {
   b8634:	dd03      	ble.n	b863e <_ZN6tflite12RuntimeShape6ResizeEi+0x14>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
   b8636:	6840      	ldr	r0, [r0, #4]
   b8638:	b108      	cbz	r0, b863e <_ZN6tflite12RuntimeShape6ResizeEi+0x14>
   b863a:	f7fb fd30 	bl	b409e <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
    if (dimensions_count > kMaxSmallSize) {
   b863e:	2c05      	cmp	r4, #5
    size_ = dimensions_count;
   b8640:	602c      	str	r4, [r5, #0]
    if (dimensions_count > kMaxSmallSize) {
   b8642:	dd09      	ble.n	b8658 <_ZN6tflite12RuntimeShape6ResizeEi+0x2e>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32_t[dimensions_count];
   b8644:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   b8648:	429c      	cmp	r4, r3
   b864a:	bfb4      	ite	lt
   b864c:	00a0      	lsllt	r0, r4, #2
   b864e:	f04f 30ff 	movge.w	r0, #4294967295	; 0xffffffff
   b8652:	f7fb fd22 	bl	b409a <_Znaj>
   b8656:	6068      	str	r0, [r5, #4]
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
   b8658:	bd38      	pop	{r3, r4, r5, pc}

000b865a <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    BuildFrom<const std::initializer_list<int>>(init_list);
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
   b865a:	b510      	push	{r4, lr}
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   b865c:	6801      	ldr	r1, [r0, #0]
   b865e:	2905      	cmp	r1, #5
   b8660:	bfcc      	ite	gt
   b8662:	6843      	ldrgt	r3, [r0, #4]
   b8664:	1d03      	addle	r3, r0, #4
    int buffer_size = 1;
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
    for (int i = 0; i < size_; i++) {
   b8666:	2200      	movs	r2, #0
    int buffer_size = 1;
   b8668:	2001      	movs	r0, #1
    for (int i = 0; i < size_; i++) {
   b866a:	428a      	cmp	r2, r1
   b866c:	da04      	bge.n	b8678 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x1e>
      buffer_size *= dims_data[i];
   b866e:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
    for (int i = 0; i < size_; i++) {
   b8672:	3201      	adds	r2, #1
      buffer_size *= dims_data[i];
   b8674:	4360      	muls	r0, r4
    for (int i = 0; i < size_; i++) {
   b8676:	e7f8      	b.n	b866a <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x10>
    }
    return buffer_size;
  }
   b8678:	bd10      	pop	{r4, pc}

000b867a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>:

 private:
  // For use only by ExtendedShape(), written to guarantee (return-value) copy
  // elision in C++17.
  // This creates a shape padded to the desired size with the specified value.
  RuntimeShape(int new_shape_size, const RuntimeShape& shape, int pad_value)
   b867a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b867e:	4698      	mov	r8, r3
      : size_(0) {
    // If the following check fails, it is likely because a 4D-only kernel is
    // being used with an array of larger dimension count.
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   b8680:	6813      	ldr	r3, [r2, #0]
      : size_(0) {
   b8682:	2700      	movs	r7, #0
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   b8684:	4299      	cmp	r1, r3
  RuntimeShape(int new_shape_size, const RuntimeShape& shape, int pad_value)
   b8686:	4605      	mov	r5, r0
   b8688:	460e      	mov	r6, r1
   b868a:	4614      	mov	r4, r2
      : size_(0) {
   b868c:	6007      	str	r7, [r0, #0]
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   b868e:	da01      	bge.n	b8694 <_ZN6tflite12RuntimeShapeC1EiRKS0_i+0x1a>
   b8690:	f003 ff7c 	bl	bc58c <abort>
    Resize(new_shape_size);
   b8694:	f7ff ffc9 	bl	b862a <_ZN6tflite12RuntimeShape6ResizeEi>
    const int size_increase = new_shape_size - shape.DimensionsCount();
   b8698:	6820      	ldr	r0, [r4, #0]
   b869a:	1a36      	subs	r6, r6, r0
    for (int i = 0; i < size_increase; ++i) {
   b869c:	42b7      	cmp	r7, r6
   b869e:	da06      	bge.n	b86ae <_ZN6tflite12RuntimeShapeC1EiRKS0_i+0x34>
      SetDim(i, pad_value);
   b86a0:	4639      	mov	r1, r7
   b86a2:	4642      	mov	r2, r8
   b86a4:	4628      	mov	r0, r5
   b86a6:	f7ff ffaf 	bl	b8608 <_ZN6tflite12RuntimeShape6SetDimEil>
    for (int i = 0; i < size_increase; ++i) {
   b86aa:	3701      	adds	r7, #1
   b86ac:	e7f6      	b.n	b869c <_ZN6tflite12RuntimeShapeC1EiRKS0_i+0x22>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   b86ae:	682b      	ldr	r3, [r5, #0]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   b86b0:	6822      	ldr	r2, [r4, #0]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   b86b2:	2b05      	cmp	r3, #5
   b86b4:	bfcc      	ite	gt
   b86b6:	6868      	ldrgt	r0, [r5, #4]
   b86b8:	1d28      	addle	r0, r5, #4
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   b86ba:	2a05      	cmp	r2, #5
   b86bc:	bfc8      	it	gt
   b86be:	6861      	ldrgt	r1, [r4, #4]
    }
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   b86c0:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   b86c4:	bfd8      	it	le
   b86c6:	1d21      	addle	r1, r4, #4
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   b86c8:	0092      	lsls	r2, r2, #2
   b86ca:	f006 f866 	bl	be79a <memcpy>
                sizeof(int32_t) * shape.DimensionsCount());
  }
   b86ce:	4628      	mov	r0, r5
   b86d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b86d4 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>:
  return size_1;
}

inline int MatchingElementsSize(const RuntimeShape& shape,
                                const RuntimeShape& check_shape_0,
                                const RuntimeShape& check_shape_1) {
   b86d4:	b570      	push	{r4, r5, r6, lr}
   b86d6:	460d      	mov	r5, r1
   b86d8:	4616      	mov	r6, r2
  const int size_1 = shape.FlatSize();
   b86da:	f7ff ffbe 	bl	b865a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   b86de:	4604      	mov	r4, r0
  const int size_2 = check_shape_0.FlatSize();
   b86e0:	4628      	mov	r0, r5
   b86e2:	f7ff ffba 	bl	b865a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   b86e6:	4605      	mov	r5, r0
  const int size_3 = check_shape_1.FlatSize();
   b86e8:	4630      	mov	r0, r6
   b86ea:	f7ff ffb6 	bl	b865a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
  TFLITE_CHECK_EQ(size_1, size_2);
   b86ee:	42ac      	cmp	r4, r5
   b86f0:	d001      	beq.n	b86f6 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_+0x22>
   b86f2:	f003 ff4b 	bl	bc58c <abort>
  TFLITE_CHECK_EQ(size_2, size_3);
   b86f6:	4284      	cmp	r4, r0
   b86f8:	d1fb      	bne.n	b86f2 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_+0x1e>
  return size_1;
}
   b86fa:	bd70      	pop	{r4, r5, r6, pc}

000b86fc <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>:
  }
#endif
}

inline int32_t MultiplyByQuantizedMultiplierSmallerThanOneExp(
    int32_t x, int32_t quantized_multiplier, int left_shift) {
   b86fc:	b510      	push	{r4, lr}
   b86fe:	4614      	mov	r4, r2
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  return RoundingDivideByPOT(
   b8700:	f7ff ff42 	bl	b8588 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
  assert(exponent >= 0);
   b8704:	2c00      	cmp	r4, #0
   b8706:	f1c4 0200 	rsb	r2, r4, #0
   b870a:	dd06      	ble.n	b871a <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0x1e>
   b870c:	4b0d      	ldr	r3, [pc, #52]	; (b8744 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0x48>)
   b870e:	4a0e      	ldr	r2, [pc, #56]	; (b8748 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0x4c>)
   b8710:	f44f 71b3 	mov.w	r1, #358	; 0x166
  assert(exponent <= 31);
   b8714:	480d      	ldr	r0, [pc, #52]	; (b874c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0x50>)
   b8716:	f003 ff51 	bl	bc5bc <__assert_func>
   b871a:	341f      	adds	r4, #31
   b871c:	da04      	bge.n	b8728 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0x2c>
   b871e:	4b0c      	ldr	r3, [pc, #48]	; (b8750 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0x54>)
   b8720:	4a09      	ldr	r2, [pc, #36]	; (b8748 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0x4c>)
   b8722:	f240 1167 	movw	r1, #359	; 0x167
   b8726:	e7f5      	b.n	b8714 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli+0x18>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   b8728:	2301      	movs	r3, #1
   b872a:	4093      	lsls	r3, r2
   b872c:	3b01      	subs	r3, #1
  return a & b;
   b872e:	ea00 0103 	and.w	r1, r0, r3
  return a >> offset;
   b8732:	105b      	asrs	r3, r3, #1
  return a + b;
   b8734:	eb03 73d0 	add.w	r3, r3, r0, lsr #31
  return a >> offset;
   b8738:	4110      	asrs	r0, r2
      SaturatingRoundingDoublingHighMul(x, quantized_multiplier), -left_shift);
}
   b873a:	4299      	cmp	r1, r3
   b873c:	bfc8      	it	gt
   b873e:	3001      	addgt	r0, #1
   b8740:	bd10      	pop	{r4, pc}
   b8742:	bf00      	nop
   b8744:	000cab87 	.word	0x000cab87
   b8748:	000cab95 	.word	0x000cab95
   b874c:	000cabef 	.word	0x000cabef
   b8750:	000cac99 	.word	0x000cac99

000b8754 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>:
//
// Returns true iff there is some sort of broadcast, which includes five-fold
// patterns and falling back to generic broadcast.
inline bool ProcessBroadcastShapes(const RuntimeShape& shape0,
                                   const RuntimeShape& shape1,
                                   tflite::ArithmeticParams* params) {
   b8754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8758:	6804      	ldr	r4, [r0, #0]
   b875a:	680b      	ldr	r3, [r1, #0]
   b875c:	429c      	cmp	r4, r3
   b875e:	b092      	sub	sp, #72	; 0x48
   b8760:	bfb8      	it	lt
   b8762:	461c      	movlt	r4, r3
  const int dims_count =
      std::max(shape0.DimensionsCount(), shape1.DimensionsCount());

  params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
   b8764:	2304      	movs	r3, #4
                                   tflite::ArithmeticParams* params) {
   b8766:	4680      	mov	r8, r0
   b8768:	460f      	mov	r7, r1
  RuntimeShape(int shape_size, int32_t value) : size_(0) {
   b876a:	2600      	movs	r6, #0
  params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
   b876c:	7013      	strb	r3, [r2, #0]
    Resize(shape_size);
   b876e:	4621      	mov	r1, r4
   b8770:	4668      	mov	r0, sp
                                   tflite::ArithmeticParams* params) {
   b8772:	4615      	mov	r5, r2
  RuntimeShape(int shape_size, int32_t value) : size_(0) {
   b8774:	9600      	str	r6, [sp, #0]
    Resize(shape_size);
   b8776:	f7ff ff58 	bl	b862a <_ZN6tflite12RuntimeShape6ResizeEi>
    for (int i = 0; i < shape_size; ++i) {
   b877a:	42a6      	cmp	r6, r4
   b877c:	da06      	bge.n	b878c <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x38>
      SetDim(i, value);
   b877e:	4631      	mov	r1, r6
   b8780:	2201      	movs	r2, #1
   b8782:	4668      	mov	r0, sp
   b8784:	f7ff ff40 	bl	b8608 <_ZN6tflite12RuntimeShape6SetDimEil>
    for (int i = 0; i < shape_size; ++i) {
   b8788:	3601      	adds	r6, #1
   b878a:	e7f6      	b.n	b877a <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x26>
    return RuntimeShape(new_shape_size, shape, 1);
   b878c:	2301      	movs	r3, #1
   b878e:	4642      	mov	r2, r8
   b8790:	4621      	mov	r1, r4
   b8792:	a806      	add	r0, sp, #24
   b8794:	f7ff ff71 	bl	b867a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   b8798:	2301      	movs	r3, #1
   b879a:	463a      	mov	r2, r7
   b879c:	4621      	mov	r1, r4
   b879e:	a80c      	add	r0, sp, #48	; 0x30
   b87a0:	f7ff ff6b 	bl	b867a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
    return this->size_ == comp.size_ &&
   b87a4:	9a06      	ldr	r2, [sp, #24]
   b87a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b87a8:	429a      	cmp	r2, r3
   b87aa:	d11b      	bne.n	b87e4 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x90>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   b87ac:	2a05      	cmp	r2, #5
   b87ae:	bfcc      	ite	gt
   b87b0:	9807      	ldrgt	r0, [sp, #28]
   b87b2:	a807      	addle	r0, sp, #28
   b87b4:	2b05      	cmp	r3, #5
   b87b6:	bfcc      	ite	gt
   b87b8:	990d      	ldrgt	r1, [sp, #52]	; 0x34
   b87ba:	a90d      	addle	r1, sp, #52	; 0x34
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
   b87bc:	0092      	lsls	r2, r2, #2
   b87be:	f005 ffdc 	bl	be77a <memcmp>
    return this->size_ == comp.size_ &&
   b87c2:	b978      	cbnz	r0, b87e4 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x90>
  auto extended_shape0 = RuntimeShape::ExtendedShape(dims_count, shape0);
  auto extended_shape1 = RuntimeShape::ExtendedShape(dims_count, shape1);

  // Check for "exact" match, implicitly accepting any scalar shapes.
  if (extended_shape0 == extended_shape1) {
    params->broadcast_category = BroadcastableOpCategory::kNonBroadcast;
   b87c4:	2301      	movs	r3, #1
   b87c6:	702b      	strb	r3, [r5, #0]
    return false;
   b87c8:	4604      	mov	r4, r0
  auto extended_shape1 = RuntimeShape::ExtendedShape(dims_count, shape1);
   b87ca:	a80c      	add	r0, sp, #48	; 0x30
   b87cc:	f7ff ff00 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
  auto extended_shape0 = RuntimeShape::ExtendedShape(dims_count, shape0);
   b87d0:	a806      	add	r0, sp, #24
   b87d2:	f7ff fefd 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape scalar_shape(dims_count, 1);
   b87d6:	4668      	mov	r0, sp
   b87d8:	f7ff fefa 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
  // loop.
  if (i >= 0) {
    params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
  }
  return true;
}
   b87dc:	4620      	mov	r0, r4
   b87de:	b012      	add	sp, #72	; 0x48
   b87e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (int i = dims_count - 1; i >= 0; --i) {
   b87e4:	3c01      	subs	r4, #1
   b87e6:	4626      	mov	r6, r4
   b87e8:	2e00      	cmp	r6, #0
   b87ea:	db10      	blt.n	b880e <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xba>
    if (extended_shape0.Dims(i) == extended_shape1.Dims(i)) {
   b87ec:	4631      	mov	r1, r6
   b87ee:	a806      	add	r0, sp, #24
   b87f0:	f7ff fef9 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
   b87f4:	4631      	mov	r1, r6
   b87f6:	4607      	mov	r7, r0
   b87f8:	a80c      	add	r0, sp, #48	; 0x30
   b87fa:	f7ff fef4 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
   b87fe:	4287      	cmp	r7, r0
   b8800:	d101      	bne.n	b8806 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xb2>
  for (int i = dims_count - 1; i >= 0; --i) {
   b8802:	3e01      	subs	r6, #1
   b8804:	e7f0      	b.n	b87e8 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x94>
    } else if (extended_shape0.Dims(i) == 1) {
   b8806:	2f01      	cmp	r7, #1
   b8808:	d107      	bne.n	b881a <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xc6>
      params->broadcast_category =
   b880a:	2302      	movs	r3, #2
      params->broadcast_category =
   b880c:	702b      	strb	r3, [r5, #0]
  if (params->broadcast_category !=
   b880e:	782b      	ldrb	r3, [r5, #0]
   b8810:	1e9a      	subs	r2, r3, #2
   b8812:	2a01      	cmp	r2, #1
   b8814:	d909      	bls.n	b882a <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xd6>
    TFLITE_DCHECK(false);
   b8816:	f003 feb9 	bl	bc58c <abort>
    } else if (extended_shape1.Dims(i) == 1) {
   b881a:	2801      	cmp	r0, #1
   b881c:	d101      	bne.n	b8822 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xce>
      params->broadcast_category =
   b881e:	2303      	movs	r3, #3
   b8820:	e7f4      	b.n	b880c <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xb8>
      params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
   b8822:	2304      	movs	r3, #4
   b8824:	702b      	strb	r3, [r5, #0]
  return true;
   b8826:	2401      	movs	r4, #1
   b8828:	e7cf      	b.n	b87ca <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x76>
  const RuntimeShape* shape_a =
   b882a:	2b03      	cmp	r3, #3
  params->broadcast_shape[0] = 1;
   b882c:	f04f 0301 	mov.w	r3, #1
  params->broadcast_shape[1] = 1;
   b8830:	e9c5 3314 	strd	r3, r3, [r5, #80]	; 0x50
  params->broadcast_shape[3] = 1;
   b8834:	e9c5 3316 	strd	r3, r3, [r5, #88]	; 0x58
  const RuntimeShape* shape_a =
   b8838:	bf19      	ittee	ne
   b883a:	af06      	addne	r7, sp, #24
  const RuntimeShape* shape_b =
   b883c:	ae0c      	addne	r6, sp, #48	; 0x30
  const RuntimeShape* shape_a =
   b883e:	af0c      	addeq	r7, sp, #48	; 0x30
  const RuntimeShape* shape_b =
   b8840:	ae06      	addeq	r6, sp, #24
  params->broadcast_shape[4] = 1;
   b8842:	662b      	str	r3, [r5, #96]	; 0x60
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   b8844:	2c00      	cmp	r4, #0
   b8846:	dbee      	blt.n	b8826 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xd2>
   b8848:	4621      	mov	r1, r4
   b884a:	4638      	mov	r0, r7
   b884c:	f7ff fecb 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
   b8850:	4621      	mov	r1, r4
   b8852:	4680      	mov	r8, r0
   b8854:	4630      	mov	r0, r6
   b8856:	f7ff fec6 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
   b885a:	4580      	cmp	r8, r0
   b885c:	d105      	bne.n	b886a <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x116>
    params->broadcast_shape[4] *= shape_b->Dims(i);
   b885e:	6e28      	ldr	r0, [r5, #96]	; 0x60
   b8860:	fb08 f000 	mul.w	r0, r8, r0
   b8864:	6628      	str	r0, [r5, #96]	; 0x60
    --i;
   b8866:	3c01      	subs	r4, #1
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   b8868:	e7ec      	b.n	b8844 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xf0>
  while (i >= 0 && shape_a->Dims(i) == 1) {
   b886a:	4621      	mov	r1, r4
   b886c:	4638      	mov	r0, r7
   b886e:	f7ff feba 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
   b8872:	2801      	cmp	r0, #1
   b8874:	d10a      	bne.n	b888c <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x138>
    params->broadcast_shape[3] *= shape_b->Dims(i);
   b8876:	4621      	mov	r1, r4
   b8878:	4630      	mov	r0, r6
   b887a:	f7ff feb4 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
   b887e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
  while (i >= 0 && shape_a->Dims(i) == 1) {
   b8880:	3c01      	subs	r4, #1
    params->broadcast_shape[3] *= shape_b->Dims(i);
   b8882:	fb03 f000 	mul.w	r0, r3, r0
   b8886:	65e8      	str	r0, [r5, #92]	; 0x5c
  while (i >= 0 && shape_a->Dims(i) == 1) {
   b8888:	d2ef      	bcs.n	b886a <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x116>
   b888a:	e7cc      	b.n	b8826 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xd2>
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   b888c:	4621      	mov	r1, r4
   b888e:	4638      	mov	r0, r7
   b8890:	f7ff fea9 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
   b8894:	4621      	mov	r1, r4
   b8896:	4680      	mov	r8, r0
   b8898:	4630      	mov	r0, r6
   b889a:	f7ff fea4 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
   b889e:	4580      	cmp	r8, r0
   b88a0:	d106      	bne.n	b88b0 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x15c>
    params->broadcast_shape[2] *= shape_a->Dims(i);
   b88a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   b88a4:	3c01      	subs	r4, #1
    params->broadcast_shape[2] *= shape_a->Dims(i);
   b88a6:	fb08 f000 	mul.w	r0, r8, r0
   b88aa:	65a8      	str	r0, [r5, #88]	; 0x58
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   b88ac:	d2ee      	bcs.n	b888c <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x138>
   b88ae:	e7ba      	b.n	b8826 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xd2>
  while (i >= 0 && shape_b->Dims(i) == 1) {
   b88b0:	4621      	mov	r1, r4
   b88b2:	4630      	mov	r0, r6
   b88b4:	f7ff fe97 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
   b88b8:	2801      	cmp	r0, #1
   b88ba:	d10a      	bne.n	b88d2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x17e>
    params->broadcast_shape[1] *= shape_a->Dims(i);
   b88bc:	4621      	mov	r1, r4
   b88be:	4638      	mov	r0, r7
   b88c0:	f7ff fe91 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
   b88c4:	6d6b      	ldr	r3, [r5, #84]	; 0x54
  while (i >= 0 && shape_b->Dims(i) == 1) {
   b88c6:	3c01      	subs	r4, #1
    params->broadcast_shape[1] *= shape_a->Dims(i);
   b88c8:	fb03 f000 	mul.w	r0, r3, r0
   b88cc:	6568      	str	r0, [r5, #84]	; 0x54
  while (i >= 0 && shape_b->Dims(i) == 1) {
   b88ce:	d2ef      	bcs.n	b88b0 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x15c>
   b88d0:	e7a9      	b.n	b8826 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xd2>
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   b88d2:	4621      	mov	r1, r4
   b88d4:	4638      	mov	r0, r7
   b88d6:	f7ff fe86 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
   b88da:	4621      	mov	r1, r4
   b88dc:	4680      	mov	r8, r0
   b88de:	4630      	mov	r0, r6
   b88e0:	f7ff fe81 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
   b88e4:	4580      	cmp	r8, r0
   b88e6:	d19c      	bne.n	b8822 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xce>
    params->broadcast_shape[0] *= shape_b->Dims(i);
   b88e8:	6d28      	ldr	r0, [r5, #80]	; 0x50
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   b88ea:	3c01      	subs	r4, #1
    params->broadcast_shape[0] *= shape_b->Dims(i);
   b88ec:	fb08 f000 	mul.w	r0, r8, r0
   b88f0:	6528      	str	r0, [r5, #80]	; 0x50
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   b88f2:	d2ee      	bcs.n	b88d2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x17e>
   b88f4:	e797      	b.n	b8826 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xd2>

000b88f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
   b88f6:	b570      	push	{r4, r5, r6, lr}
   b88f8:	4604      	mov	r4, r0
  if (tensor == nullptr || tensor->dims == nullptr) {
   b88fa:	b109      	cbz	r1, b8900 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0xa>
   b88fc:	684d      	ldr	r5, [r1, #4]
   b88fe:	b91d      	cbnz	r5, b8908 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x12>
  RuntimeShape() : size_(0) {}
   b8900:	2300      	movs	r3, #0
   b8902:	6023      	str	r3, [r4, #0]
  }
  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
   b8904:	4620      	mov	r0, r4
   b8906:	bd70      	pop	{r4, r5, r6, pc}
  const int dims_size = dims->size;
   b8908:	f855 3b04 	ldr.w	r3, [r5], #4
    size_ = dimensions_count;
   b890c:	6003      	str	r3, [r0, #0]
    if (dimensions_count > kMaxSmallSize) {
   b890e:	2b05      	cmp	r3, #5
      dims_pointer_ = new int32_t[dimensions_count];
   b8910:	ea4f 0683 	mov.w	r6, r3, lsl #2
    if (dimensions_count > kMaxSmallSize) {
   b8914:	dc05      	bgt.n	b8922 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x2c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   b8916:	1d20      	adds	r0, r4, #4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   b8918:	4632      	mov	r2, r6
   b891a:	4629      	mov	r1, r5
   b891c:	f005 ff3d 	bl	be79a <memcpy>
  }
   b8920:	e7f0      	b.n	b8904 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0xe>
      dims_pointer_ = new int32_t[dimensions_count];
   b8922:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   b8926:	4293      	cmp	r3, r2
   b8928:	bfb4      	ite	lt
   b892a:	4630      	movlt	r0, r6
   b892c:	f04f 30ff 	movge.w	r0, #4294967295	; 0xffffffff
   b8930:	f7fb fbb3 	bl	b409a <_Znaj>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   b8934:	6823      	ldr	r3, [r4, #0]
      dims_pointer_ = new int32_t[dimensions_count];
   b8936:	6060      	str	r0, [r4, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   b8938:	2b05      	cmp	r3, #5
   b893a:	dced      	bgt.n	b8918 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x22>
   b893c:	e7eb      	b.n	b8916 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>

000b893e <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>:

PaddingType RuntimePaddingType(TfLitePadding padding) {
  switch (padding) {
   b893e:	2801      	cmp	r0, #1
   b8940:	d002      	beq.n	b8948 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0xa>
      return PaddingType::kSame;
    case TfLitePadding::kTfLitePaddingValid:
      return PaddingType::kValid;
    case TfLitePadding::kTfLitePaddingUnknown:
    default:
      return PaddingType::kNone;
   b8942:	2802      	cmp	r0, #2
   b8944:	bf18      	it	ne
   b8946:	2000      	movne	r0, #0
  }
}
   b8948:	4770      	bx	lr

000b894a <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>:
inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
   b894a:	b570      	push	{r4, r5, r6, lr}
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   b894c:	6805      	ldr	r5, [r0, #0]
inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
   b894e:	9c04      	ldr	r4, [sp, #16]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   b8950:	2d04      	cmp	r5, #4
   b8952:	d001      	beq.n	b8958 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xe>
   b8954:	f003 fe1a 	bl	bc58c <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   b8958:	2900      	cmp	r1, #0
   b895a:	dbfb      	blt.n	b8954 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
   b895c:	6845      	ldr	r5, [r0, #4]
   b895e:	428d      	cmp	r5, r1
   b8960:	ddf8      	ble.n	b8954 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   b8962:	2a00      	cmp	r2, #0
   b8964:	dbf6      	blt.n	b8954 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
   b8966:	6886      	ldr	r6, [r0, #8]
   b8968:	4296      	cmp	r6, r2
   b896a:	ddf3      	ble.n	b8954 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   b896c:	2b00      	cmp	r3, #0
   b896e:	dbf1      	blt.n	b8954 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
   b8970:	68c5      	ldr	r5, [r0, #12]
   b8972:	429d      	cmp	r5, r3
   b8974:	ddee      	ble.n	b8954 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   b8976:	2c00      	cmp	r4, #0
   b8978:	dbec      	blt.n	b8954 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
   b897a:	6900      	ldr	r0, [r0, #16]
   b897c:	42a0      	cmp	r0, r4
   b897e:	dde9      	ble.n	b8954 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   b8980:	fb01 2206 	mla	r2, r1, r6, r2
   b8984:	fb05 3302 	mla	r3, r5, r2, r3
}
   b8988:	fb00 4003 	mla	r0, r0, r3, r4
   b898c:	bd70      	pop	{r4, r5, r6, pc}

000b898e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
                       const RuntimeShape& shape2, int index2) {
   b898e:	b570      	push	{r4, r5, r6, lr}
   b8990:	4615      	mov	r5, r2
   b8992:	461e      	mov	r6, r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   b8994:	f7ff fe27 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
   b8998:	4631      	mov	r1, r6
   b899a:	4604      	mov	r4, r0
   b899c:	4628      	mov	r0, r5
   b899e:	f7ff fe22 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
   b89a2:	4284      	cmp	r4, r0
   b89a4:	d001      	beq.n	b89aa <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x1c>
   b89a6:	f003 fdf1 	bl	bc58c <abort>
}
   b89aa:	bd70      	pop	{r4, r5, r6, pc}

000b89ac <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>:
                          int filter_size, int stride, int dilation_rate = 1) {
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;

  // TODO(b/186448822): This uses 0 since the function has no other way to
  // report error case
  if (stride == 0) return 0;
   b89ac:	b123      	cbz	r3, b89b8 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0xc>

  switch (padding) {
   b89ae:	2801      	cmp	r0, #1
   b89b0:	d004      	beq.n	b89bc <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x10>
   b89b2:	2802      	cmp	r0, #2
   b89b4:	d007      	beq.n	b89c6 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x1a>
   b89b6:	2300      	movs	r3, #0
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
    default:
      return 0;
  }
}
   b89b8:	4618      	mov	r0, r3
   b89ba:	4770      	bx	lr
      return (image_size + stride - 1) / stride;
   b89bc:	4419      	add	r1, r3
   b89be:	3901      	subs	r1, #1
      return (image_size + stride - effective_filter_size) / stride;
   b89c0:	fb91 f3f3 	sdiv	r3, r1, r3
   b89c4:	e7f8      	b.n	b89b8 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0xc>
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   b89c6:	9800      	ldr	r0, [sp, #0]
   b89c8:	3a01      	subs	r2, #1
   b89ca:	4342      	muls	r2, r0
      return (image_size + stride - effective_filter_size) / stride;
   b89cc:	4419      	add	r1, r3
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   b89ce:	3201      	adds	r2, #1
      return (image_size + stride - effective_filter_size) / stride;
   b89d0:	1a89      	subs	r1, r1, r2
   b89d2:	e7f5      	b.n	b89c0 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x14>

000b89d4 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>:
// DO NOT USE THIS FUNCTION FOR NEW FUNCTIONALITY BEYOND IMPLEMENTING
// BROADCASTING.
//
// Same as Offset(), except takes as NdArrayDesc<N> instead of Dims<N>.
inline int SubscriptToIndex(const NdArrayDesc<4>& desc, int i0, int i1, int i2,
                            int i3) {
   b89d4:	b570      	push	{r4, r5, r6, lr}
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
   b89d6:	2900      	cmp	r1, #0
                            int i3) {
   b89d8:	9d04      	ldr	r5, [sp, #16]
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
   b89da:	db02      	blt.n	b89e2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
   b89dc:	6804      	ldr	r4, [r0, #0]
   b89de:	428c      	cmp	r4, r1
   b89e0:	dc01      	bgt.n	b89e6 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0x12>
   b89e2:	f003 fdd3 	bl	bc58c <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
   b89e6:	2a00      	cmp	r2, #0
   b89e8:	dbfb      	blt.n	b89e2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
   b89ea:	6844      	ldr	r4, [r0, #4]
   b89ec:	4294      	cmp	r4, r2
   b89ee:	ddf8      	ble.n	b89e2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
   b89f0:	2b00      	cmp	r3, #0
   b89f2:	dbf6      	blt.n	b89e2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
   b89f4:	6884      	ldr	r4, [r0, #8]
   b89f6:	429c      	cmp	r4, r3
   b89f8:	ddf3      	ble.n	b89e2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
   b89fa:	2d00      	cmp	r5, #0
   b89fc:	dbf1      	blt.n	b89e2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
   b89fe:	68c4      	ldr	r4, [r0, #12]
   b8a00:	42ac      	cmp	r4, r5
   b8a02:	ddee      	ble.n	b89e2 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
   b8a04:	e9d0 6404 	ldrd	r6, r4, [r0, #16]
   b8a08:	4354      	muls	r4, r2
   b8a0a:	6982      	ldr	r2, [r0, #24]
         i3 * desc.strides[3];
   b8a0c:	69c0      	ldr	r0, [r0, #28]
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
   b8a0e:	fb06 4101 	mla	r1, r6, r1, r4
   b8a12:	fb02 1203 	mla	r2, r2, r3, r1
}
   b8a16:	fb00 2005 	mla	r0, r0, r5, r2
   b8a1a:	bd70      	pop	{r4, r5, r6, pc}

000b8a1c <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>:
  }
}

// Copies dims to desc, calculating strides.
template <int N>
inline void CopyDimsToDesc(const RuntimeShape& input_shape,
   b8a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8a1e:	4606      	mov	r6, r0
   b8a20:	f101 050c 	add.w	r5, r1, #12
                           NdArrayDesc<N>* desc_out) {
  int desc_stride = 1;
  for (int i = N - 1; i >= 0; --i) {
   b8a24:	2403      	movs	r4, #3
  int desc_stride = 1;
   b8a26:	2701      	movs	r7, #1
    desc_out->extents[i] = input_shape.Dims(i);
   b8a28:	4621      	mov	r1, r4
   b8a2a:	4630      	mov	r0, r6
   b8a2c:	f7ff fddb 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
   b8a30:	f845 0904 	str.w	r0, [r5], #-4
    desc_out->strides[i] = desc_stride;
    desc_stride *= input_shape.Dims(i);
   b8a34:	4621      	mov	r1, r4
    desc_out->strides[i] = desc_stride;
   b8a36:	616f      	str	r7, [r5, #20]
    desc_stride *= input_shape.Dims(i);
   b8a38:	4630      	mov	r0, r6
   b8a3a:	f7ff fdd4 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int i = N - 1; i >= 0; --i) {
   b8a3e:	3c01      	subs	r4, #1
    desc_stride *= input_shape.Dims(i);
   b8a40:	fb00 f707 	mul.w	r7, r0, r7
  for (int i = N - 1; i >= 0; --i) {
   b8a44:	d2f0      	bcs.n	b8a28 <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE+0xc>
  }
}
   b8a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8a48 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>:

template <int N>
inline void NdArrayDescsForElementwiseBroadcast(
   b8a48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8a4c:	460d      	mov	r5, r1
   b8a4e:	b08d      	sub	sp, #52	; 0x34
   b8a50:	461e      	mov	r6, r3
    const RuntimeShape& input0_shape, const RuntimeShape& input1_shape,
    NdArrayDesc<N>* desc0_out, NdArrayDesc<N>* desc1_out) {
  TFLITE_DCHECK(desc0_out != nullptr);
   b8a52:	4614      	mov	r4, r2
   b8a54:	b90a      	cbnz	r2, b8a5a <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x12>
   b8a56:	f003 fd99 	bl	bc58c <abort>
  TFLITE_DCHECK(desc1_out != nullptr);
   b8a5a:	2b00      	cmp	r3, #0
   b8a5c:	d0fb      	beq.n	b8a56 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xe>
    return RuntimeShape(new_shape_size, shape, 1);
   b8a5e:	4602      	mov	r2, r0
   b8a60:	2301      	movs	r3, #1
   b8a62:	2104      	movs	r1, #4
   b8a64:	4668      	mov	r0, sp
   b8a66:	f7ff fe08 	bl	b867a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   b8a6a:	462a      	mov	r2, r5
   b8a6c:	2301      	movs	r3, #1
   b8a6e:	2104      	movs	r1, #4
   b8a70:	a806      	add	r0, sp, #24
   b8a72:	f7ff fe02 	bl	b867a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>

  auto extended_input0_shape = RuntimeShape::ExtendedShape(N, input0_shape);
  auto extended_input1_shape = RuntimeShape::ExtendedShape(N, input1_shape);

  // Copy dims to desc, calculating strides.
  CopyDimsToDesc<N>(extended_input0_shape, desc0_out);
   b8a76:	4621      	mov	r1, r4
   b8a78:	4668      	mov	r0, sp
   b8a7a:	f7ff ffcf 	bl	b8a1c <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
  CopyDimsToDesc<N>(extended_input1_shape, desc1_out);
   b8a7e:	4631      	mov	r1, r6
   b8a80:	a806      	add	r0, sp, #24
   b8a82:	f7ff ffcb 	bl	b8a1c <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>

  // Walk over each dimension. If the extents are equal do nothing.
  // Otherwise, set the desc with extent 1 to have extent equal to the other and
  // stride 0.
  for (int i = 0; i < N; ++i) {
   b8a86:	2500      	movs	r5, #0
   b8a88:	46a8      	mov	r8, r5
      if (extent0 == 1) {
        desc0_out->strides[i] = 0;
        desc0_out->extents[i] = extent1;
      } else {
        TFLITE_DCHECK_EQ(extent1, 1);
        desc1_out->strides[i] = 0;
   b8a8a:	f106 0910 	add.w	r9, r6, #16
    const int extent0 = extended_input0_shape.Dims(i);
   b8a8e:	4629      	mov	r1, r5
   b8a90:	4668      	mov	r0, sp
   b8a92:	f7ff fda8 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int extent1 = extended_input1_shape.Dims(i);
   b8a96:	4629      	mov	r1, r5
    const int extent0 = extended_input0_shape.Dims(i);
   b8a98:	4607      	mov	r7, r0
    const int extent1 = extended_input1_shape.Dims(i);
   b8a9a:	a806      	add	r0, sp, #24
   b8a9c:	f7ff fda3 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
    if (extent0 != extent1) {
   b8aa0:	4287      	cmp	r7, r0
   b8aa2:	d004      	beq.n	b8aae <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x66>
      if (extent0 == 1) {
   b8aa4:	2f01      	cmp	r7, #1
   b8aa6:	d110      	bne.n	b8aca <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x82>
        desc0_out->strides[i] = 0;
   b8aa8:	f8c4 8010 	str.w	r8, [r4, #16]
        desc0_out->extents[i] = extent1;
   b8aac:	6020      	str	r0, [r4, #0]
  for (int i = 0; i < N; ++i) {
   b8aae:	3501      	adds	r5, #1
   b8ab0:	2d04      	cmp	r5, #4
   b8ab2:	f104 0404 	add.w	r4, r4, #4
   b8ab6:	d1ea      	bne.n	b8a8e <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x46>
  auto extended_input1_shape = RuntimeShape::ExtendedShape(N, input1_shape);
   b8ab8:	a806      	add	r0, sp, #24
   b8aba:	f7ff fd89 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
  auto extended_input0_shape = RuntimeShape::ExtendedShape(N, input0_shape);
   b8abe:	4668      	mov	r0, sp
   b8ac0:	f7ff fd86 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
        desc1_out->extents[i] = extent0;
      }
    }
  }
}
   b8ac4:	b00d      	add	sp, #52	; 0x34
   b8ac6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        TFLITE_DCHECK_EQ(extent1, 1);
   b8aca:	2801      	cmp	r0, #1
   b8acc:	d1c3      	bne.n	b8a56 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xe>
        desc1_out->strides[i] = 0;
   b8ace:	f849 8025 	str.w	r8, [r9, r5, lsl #2]
        desc1_out->extents[i] = extent0;
   b8ad2:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
   b8ad6:	e7ea      	b.n	b8aae <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x66>

000b8ad8 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
   b8ad8:	b570      	push	{r4, r5, r6, lr}
   b8ada:	4604      	mov	r4, r0
  if (tensor == nullptr) {
   b8adc:	b911      	cbnz	r1, b8ae4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0xc>
  RuntimeShape() : size_(0) {}
   b8ade:	6001      	str	r1, [r0, #0]

  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
   b8ae0:	4620      	mov	r0, r4
   b8ae2:	bd70      	pop	{r4, r5, r6, pc}
  const int dims_size = dims->size;
   b8ae4:	688d      	ldr	r5, [r1, #8]
   b8ae6:	f855 3b04 	ldr.w	r3, [r5], #4
    size_ = dimensions_count;
   b8aea:	6003      	str	r3, [r0, #0]
    if (dimensions_count > kMaxSmallSize) {
   b8aec:	2b05      	cmp	r3, #5
      dims_pointer_ = new int32_t[dimensions_count];
   b8aee:	ea4f 0683 	mov.w	r6, r3, lsl #2
    if (dimensions_count > kMaxSmallSize) {
   b8af2:	dc05      	bgt.n	b8b00 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x28>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   b8af4:	1d20      	adds	r0, r4, #4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   b8af6:	4632      	mov	r2, r6
   b8af8:	4629      	mov	r1, r5
   b8afa:	f005 fe4e 	bl	be79a <memcpy>
  }
   b8afe:	e7ef      	b.n	b8ae0 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x8>
      dims_pointer_ = new int32_t[dimensions_count];
   b8b00:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   b8b04:	4293      	cmp	r3, r2
   b8b06:	bfb4      	ite	lt
   b8b08:	4630      	movlt	r0, r6
   b8b0a:	f04f 30ff 	movge.w	r0, #4294967295	; 0xffffffff
   b8b0e:	f7fb fac4 	bl	b409a <_Znaj>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   b8b12:	6823      	ldr	r3, [r4, #0]
      dims_pointer_ = new int32_t[dimensions_count];
   b8b14:	6060      	str	r0, [r4, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   b8b16:	2b05      	cmp	r3, #5
   b8b18:	dced      	bgt.n	b8af6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x1e>
   b8b1a:	e7eb      	b.n	b8af4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x1c>

000b8b1c <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:

  // Index to buffer for optimizations if applicable.
  int buffer_idx;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   b8b1c:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   b8b1e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   b8b20:	b90b      	cbnz	r3, b8b26 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xa>
   b8b22:	f003 fd33 	bl	bc58c <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
}
   b8b26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
   b8b2a:	2138      	movs	r1, #56	; 0x38
   b8b2c:	4718      	bx	r3
	...

000b8b30 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const DepthwiseParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
   b8b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8b34:	b0a3      	sub	sp, #140	; 0x8c
   b8b36:	461d      	mov	r5, r3
  // Get parameters.
  // TODO(b/141565753): Re-introduce ScopedProfilingLabel on Micro.
  const int stride_width = params.stride_width;
   b8b38:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b8b3c:	930f      	str	r3, [sp, #60]	; 0x3c
  const int stride_height = params.stride_height;
   b8b3e:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b8b42:	9310      	str	r3, [sp, #64]	; 0x40
  const int dilation_width_factor = params.dilation_width_factor;
   b8b44:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b8b48:	9311      	str	r3, [sp, #68]	; 0x44
  const int dilation_height_factor = params.dilation_height_factor;
   b8b4a:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
   b8b4e:	9312      	str	r3, [sp, #72]	; 0x48
  const int pad_width = params.padding_values.width;
   b8b50:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
   b8b54:	9313      	str	r3, [sp, #76]	; 0x4c
  const int pad_height = params.padding_values.height;
   b8b56:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   b8b5a:	9314      	str	r3, [sp, #80]	; 0x50
  const int depth_multiplier = params.depth_multiplier;
   b8b5c:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
   b8b60:	9309      	str	r3, [sp, #36]	; 0x24
  const int32_t input_offset = params.input_offset;
   b8b62:	6943      	ldr	r3, [r0, #20]
   b8b64:	9316      	str	r3, [sp, #88]	; 0x58
  const int32_t output_offset = params.output_offset;
   b8b66:	69c3      	ldr	r3, [r0, #28]
   b8b68:	9317      	str	r3, [sp, #92]	; 0x5c
  const int32_t output_activation_min = params.quantized_activation_min;
   b8b6a:	6a83      	ldr	r3, [r0, #40]	; 0x28
   b8b6c:	930c      	str	r3, [sp, #48]	; 0x30
  const int32_t output_activation_max = params.quantized_activation_max;
   b8b6e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b8b70:	930d      	str	r3, [sp, #52]	; 0x34

  // Check dimensions of the tensors.
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   b8b72:	682b      	ldr	r3, [r5, #0]
    int8_t* output_data) {
   b8b74:	f8dd 90b4 	ldr.w	r9, [sp, #180]	; 0xb4
   b8b78:	f8dd a0c4 	ldr.w	sl, [sp, #196]	; 0xc4
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   b8b7c:	2b04      	cmp	r3, #4
    int8_t* output_data) {
   b8b7e:	e9cd 1220 	strd	r1, r2, [sp, #128]	; 0x80
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   b8b82:	d001      	beq.n	b8b88 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x58>
   b8b84:	f003 fd02 	bl	bc58c <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   b8b88:	f8d9 3000 	ldr.w	r3, [r9]
   b8b8c:	2b04      	cmp	r3, #4
   b8b8e:	d1f9      	bne.n	b8b84 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x54>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   b8b90:	f8da 3000 	ldr.w	r3, [sl]
   b8b94:	2b04      	cmp	r3, #4
   b8b96:	d1f5      	bne.n	b8b84 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x54>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   b8b98:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
   b8b9c:	4293      	cmp	r3, r2
   b8b9e:	dcf1      	bgt.n	b8b84 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x54>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   b8ba0:	2300      	movs	r3, #0
   b8ba2:	4619      	mov	r1, r3
   b8ba4:	4652      	mov	r2, sl
   b8ba6:	4628      	mov	r0, r5
   b8ba8:	f7ff fef1 	bl	b898e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   b8bac:	2303      	movs	r3, #3
   b8bae:	4619      	mov	r1, r3
   b8bb0:	4652      	mov	r2, sl
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   b8bb2:	9018      	str	r0, [sp, #96]	; 0x60
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   b8bb4:	4648      	mov	r0, r9
   b8bb6:	f7ff feea 	bl	b898e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   b8bba:	2101      	movs	r1, #1
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   b8bbc:	4604      	mov	r4, r0
  const int input_height = input_shape.Dims(1);
   b8bbe:	4628      	mov	r0, r5
   b8bc0:	f7ff fd11 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   b8bc4:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   b8bc6:	9019      	str	r0, [sp, #100]	; 0x64
  const int input_width = input_shape.Dims(2);
   b8bc8:	4628      	mov	r0, r5
   b8bca:	f7ff fd0c 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_depth = input_shape.Dims(3);
   b8bce:	2103      	movs	r1, #3
  const int input_width = input_shape.Dims(2);
   b8bd0:	901a      	str	r0, [sp, #104]	; 0x68
  const int input_depth = input_shape.Dims(3);
   b8bd2:	4628      	mov	r0, r5
   b8bd4:	f7ff fd07 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
   b8bd8:	2101      	movs	r1, #1
  const int input_depth = input_shape.Dims(3);
   b8bda:	900e      	str	r0, [sp, #56]	; 0x38
  const int filter_height = filter_shape.Dims(1);
   b8bdc:	4648      	mov	r0, r9
   b8bde:	f7ff fd02 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
   b8be2:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
   b8be4:	901b      	str	r0, [sp, #108]	; 0x6c
  const int filter_width = filter_shape.Dims(2);
   b8be6:	4648      	mov	r0, r9
   b8be8:	f7ff fcfd 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   b8bec:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
   b8bee:	901c      	str	r0, [sp, #112]	; 0x70
  const int output_height = output_shape.Dims(1);
   b8bf0:	4650      	mov	r0, sl
   b8bf2:	f7ff fcf8 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   b8bf6:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   b8bf8:	901d      	str	r0, [sp, #116]	; 0x74
  const int output_width = output_shape.Dims(2);
   b8bfa:	4650      	mov	r0, sl
   b8bfc:	f7ff fcf3 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   b8c00:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b8c02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  const int output_width = output_shape.Dims(2);
   b8c04:	901e      	str	r0, [sp, #120]	; 0x78
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   b8c06:	fb02 f603 	mul.w	r6, r2, r3
   b8c0a:	42a6      	cmp	r6, r4
   b8c0c:	d1ba      	bne.n	b8b84 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x54>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   b8c0e:	982f      	ldr	r0, [sp, #188]	; 0xbc
   b8c10:	f7ff fd23 	bl	b865a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   b8c14:	42b0      	cmp	r0, r6
   b8c16:	d1b5      	bne.n	b8b84 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x54>

  for (int batch = 0; batch < batches; ++batch) {
   b8c18:	f04f 0b00 	mov.w	fp, #0
   b8c1c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b8c1e:	459b      	cmp	fp, r3
   b8c20:	f280 80e2 	bge.w	b8de8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2b8>
   b8c24:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b8c26:	425b      	negs	r3, r3
   b8c28:	930b      	str	r3, [sp, #44]	; 0x2c
    for (int out_y = 0; out_y < output_height; ++out_y) {
   b8c2a:	2300      	movs	r3, #0
   b8c2c:	9304      	str	r3, [sp, #16]
   b8c2e:	9b04      	ldr	r3, [sp, #16]
   b8c30:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   b8c32:	4293      	cmp	r3, r2
   b8c34:	f280 80d5 	bge.w	b8de2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2b2>
   b8c38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b8c3a:	425b      	negs	r3, r3
   b8c3c:	930a      	str	r3, [sp, #40]	; 0x28
      for (int out_x = 0; out_x < output_width; ++out_x) {
   b8c3e:	2300      	movs	r3, #0
   b8c40:	9305      	str	r3, [sp, #20]
   b8c42:	9b05      	ldr	r3, [sp, #20]
   b8c44:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   b8c46:	4293      	cmp	r3, r2
   b8c48:	f280 80c3 	bge.w	b8dd2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2a2>
   b8c4c:	2300      	movs	r3, #0
   b8c4e:	9303      	str	r3, [sp, #12]
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   b8c50:	9306      	str	r3, [sp, #24]
   b8c52:	9b06      	ldr	r3, [sp, #24]
   b8c54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b8c56:	4293      	cmp	r3, r2
   b8c58:	f280 80b3 	bge.w	b8dc2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x292>
   b8c5c:	9e03      	ldr	r6, [sp, #12]
          for (int m = 0; m < depth_multiplier; ++m) {
   b8c5e:	9b03      	ldr	r3, [sp, #12]
   b8c60:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b8c62:	1af3      	subs	r3, r6, r3
   b8c64:	429a      	cmp	r2, r3
   b8c66:	f340 80a4 	ble.w	b8db2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x282>
            const int output_channel = m + in_channel * depth_multiplier;
            const int in_x_origin = (out_x * stride_width) - pad_width;
            const int in_y_origin = (out_y * stride_height) - pad_height;
            int32_t acc = 0;
   b8c6a:	2400      	movs	r4, #0
            const int output_channel = m + in_channel * depth_multiplier;
   b8c6c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   b8c6e:	961f      	str	r6, [sp, #124]	; 0x7c
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   b8c70:	9407      	str	r4, [sp, #28]
   b8c72:	9b07      	ldr	r3, [sp, #28]
   b8c74:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   b8c76:	4293      	cmp	r3, r2
   b8c78:	da37      	bge.n	b8cea <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ba>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   b8c7a:	2300      	movs	r3, #0
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   b8c7c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   b8c80:	9308      	str	r3, [sp, #32]
   b8c82:	9b08      	ldr	r3, [sp, #32]
   b8c84:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   b8c86:	4293      	cmp	r3, r2
   b8c88:	da29      	bge.n	b8cde <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ae>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
                // Zero padding by omitting the areas outside the image.
                const bool is_point_inside_image =
                    (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   b8c8a:	f1b8 0f00 	cmp.w	r8, #0
   b8c8e:	db20      	blt.n	b8cd2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1a2>
   b8c90:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   b8c92:	4543      	cmp	r3, r8
   b8c94:	dd1d      	ble.n	b8cd2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1a2>
   b8c96:	2f00      	cmp	r7, #0
   b8c98:	db1b      	blt.n	b8cd2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1a2>
   b8c9a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b8c9c:	42bb      	cmp	r3, r7
   b8c9e:	dd18      	ble.n	b8cd2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1a2>
                    (in_y < input_height);
                if (is_point_inside_image) {
                  int32_t input_val = input_data[Offset(
   b8ca0:	9b06      	ldr	r3, [sp, #24]
   b8ca2:	9300      	str	r3, [sp, #0]
   b8ca4:	463a      	mov	r2, r7
   b8ca6:	4643      	mov	r3, r8
   b8ca8:	4659      	mov	r1, fp
   b8caa:	4628      	mov	r0, r5
   b8cac:	f7ff fe4d 	bl	b894a <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                      input_shape, batch, in_y, in_x, in_channel)];
                  int32_t filter_val = filter_data[Offset(
   b8cb0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
                  int32_t input_val = input_data[Offset(
   b8cb4:	9015      	str	r0, [sp, #84]	; 0x54
                  int32_t filter_val = filter_data[Offset(
   b8cb6:	9600      	str	r6, [sp, #0]
   b8cb8:	2100      	movs	r1, #0
   b8cba:	4648      	mov	r0, r9
   b8cbc:	f7ff fe45 	bl	b894a <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                      input_shape, batch, in_y, in_x, in_channel)];
   b8cc0:	9a15      	ldr	r2, [sp, #84]	; 0x54
   b8cc2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   b8cc4:	569b      	ldrsb	r3, [r3, r2]
                  // long as the filter size (filter_y * filter_x * in_channel)
                  // does not exceed 2^16, which is the case in all the models
                  // we have seen so far.
                  // TODO(b/174275578): Add a check to make sure the
                  // accumulator depth is smaller than 2^16.
                  acc += filter_val * (input_val + input_offset);
   b8cc6:	9a16      	ldr	r2, [sp, #88]	; 0x58
   b8cc8:	4413      	add	r3, r2
                      filter_shape, 0, filter_y, filter_x, output_channel)];
   b8cca:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
   b8ccc:	5612      	ldrsb	r2, [r2, r0]
                  acc += filter_val * (input_val + input_offset);
   b8cce:	fb02 4403 	mla	r4, r2, r3, r4
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   b8cd2:	9b08      	ldr	r3, [sp, #32]
   b8cd4:	3301      	adds	r3, #1
   b8cd6:	9308      	str	r3, [sp, #32]
   b8cd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   b8cda:	4498      	add	r8, r3
   b8cdc:	e7d1      	b.n	b8c82 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x152>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   b8cde:	9b07      	ldr	r3, [sp, #28]
   b8ce0:	3301      	adds	r3, #1
   b8ce2:	9307      	str	r3, [sp, #28]
   b8ce4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b8ce6:	441f      	add	r7, r3
   b8ce8:	e7c3      	b.n	b8c72 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x142>
                }
              }
            }
            if (bias_data) {
   b8cea:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   b8cec:	b113      	cbz	r3, b8cf4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1c4>
              acc += bias_data[output_channel];
   b8cee:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   b8cf2:	441c      	add	r4, r3
            }
            acc = MultiplyByQuantizedMultiplier(
   b8cf4:	9a21      	ldr	r2, [sp, #132]	; 0x84
   b8cf6:	9b20      	ldr	r3, [sp, #128]	; 0x80
   b8cf8:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
   b8cfc:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
  int left_shift = shift > 0 ? shift : 0;
   b8d00:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
   b8d04:	2f00      	cmp	r7, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
   b8d06:	fa04 f402 	lsl.w	r4, r4, r2
  int right_shift = shift > 0 ? 0 : -shift;
   b8d0a:	bfd4      	ite	le
   b8d0c:	427f      	negle	r7, r7
   b8d0e:	2700      	movgt	r7, #0
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   b8d10:	42a3      	cmp	r3, r4
   b8d12:	d124      	bne.n	b8d5e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x22e>
   b8d14:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
   b8d18:	4250      	negs	r0, r2
   b8d1a:	4150      	adcs	r0, r2
  std::int64_t ab_64 = a_64 * b_64;
   b8d1c:	fb84 4203 	smull	r4, r2, r4, r3
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   b8d20:	4b33      	ldr	r3, [pc, #204]	; (b8df0 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2c0>)
   b8d22:	2a00      	cmp	r2, #0
   b8d24:	bfac      	ite	ge
   b8d26:	f04f 4180 	movge.w	r1, #1073741824	; 0x40000000
   b8d2a:	4619      	movlt	r1, r3
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   b8d2c:	b9c8      	cbnz	r0, b8d62 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x232>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   b8d2e:	190b      	adds	r3, r1, r4
   b8d30:	eb42 74e1 	adc.w	r4, r2, r1, asr #31
   b8d34:	2c00      	cmp	r4, #0
   b8d36:	da04      	bge.n	b8d42 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x212>
   b8d38:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   b8d3c:	189b      	adds	r3, r3, r2
   b8d3e:	f144 0400 	adc.w	r4, r4, #0
   b8d42:	0fdb      	lsrs	r3, r3, #31
   b8d44:	ea43 0444 	orr.w	r4, r3, r4, lsl #1
  assert(exponent <= 31);
   b8d48:	2f1f      	cmp	r7, #31
   b8d4a:	f106 0601 	add.w	r6, r6, #1
   b8d4e:	dd0b      	ble.n	b8d68 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x238>
   b8d50:	4b28      	ldr	r3, [pc, #160]	; (b8df4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2c4>)
   b8d52:	4a29      	ldr	r2, [pc, #164]	; (b8df8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2c8>)
   b8d54:	4829      	ldr	r0, [pc, #164]	; (b8dfc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2cc>)
   b8d56:	f240 1167 	movw	r1, #359	; 0x167
   b8d5a:	f003 fc2f 	bl	bc5bc <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   b8d5e:	2000      	movs	r0, #0
   b8d60:	e7dc      	b.n	b8d1c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ec>
   b8d62:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   b8d66:	e7ef      	b.n	b8d48 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x218>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   b8d68:	f04f 0801 	mov.w	r8, #1
                acc, output_multiplier[output_channel],
                output_shift[output_channel]);
            acc += output_offset;
            acc = std::max(acc, output_activation_min);
            acc = std::min(acc, output_activation_max);
            output_data[Offset(output_shape, batch, out_y, out_x,
   b8d6c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   b8d6e:	9300      	str	r3, [sp, #0]
   b8d70:	fa08 f807 	lsl.w	r8, r8, r7
   b8d74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   b8d78:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b8d7c:	4659      	mov	r1, fp
   b8d7e:	4650      	mov	r0, sl
   b8d80:	f7ff fde3 	bl	b894a <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return a & b;
   b8d84:	ea08 0304 	and.w	r3, r8, r4
  return a >> offset;
   b8d88:	ea4f 0868 	mov.w	r8, r8, asr #1
  return a + b;
   b8d8c:	eb08 78d4 	add.w	r8, r8, r4, lsr #31
  return a >> offset;
   b8d90:	413c      	asrs	r4, r7
  return a + b;
   b8d92:	4543      	cmp	r3, r8
   b8d94:	bfc8      	it	gt
   b8d96:	3401      	addgt	r4, #1
            acc += output_offset;
   b8d98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b8d9a:	441c      	add	r4, r3
                               output_channel)] = static_cast<int8_t>(acc);
   b8d9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b8d9e:	429c      	cmp	r4, r3
   b8da0:	bfb8      	it	lt
   b8da2:	461c      	movlt	r4, r3
   b8da4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b8da6:	429c      	cmp	r4, r3
   b8da8:	bfa8      	it	ge
   b8daa:	461c      	movge	r4, r3
   b8dac:	9b32      	ldr	r3, [sp, #200]	; 0xc8
   b8dae:	541c      	strb	r4, [r3, r0]
          for (int m = 0; m < depth_multiplier; ++m) {
   b8db0:	e755      	b.n	b8c5e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x12e>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   b8db2:	9b06      	ldr	r3, [sp, #24]
   b8db4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b8db6:	3301      	adds	r3, #1
   b8db8:	9306      	str	r3, [sp, #24]
   b8dba:	9b03      	ldr	r3, [sp, #12]
   b8dbc:	4413      	add	r3, r2
   b8dbe:	9303      	str	r3, [sp, #12]
   b8dc0:	e747      	b.n	b8c52 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x122>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   b8dc2:	9b05      	ldr	r3, [sp, #20]
   b8dc4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   b8dc6:	3301      	adds	r3, #1
   b8dc8:	9305      	str	r3, [sp, #20]
   b8dca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b8dcc:	4413      	add	r3, r2
   b8dce:	930a      	str	r3, [sp, #40]	; 0x28
   b8dd0:	e737      	b.n	b8c42 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x112>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   b8dd2:	9b04      	ldr	r3, [sp, #16]
   b8dd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
   b8dd6:	3301      	adds	r3, #1
   b8dd8:	9304      	str	r3, [sp, #16]
   b8dda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8ddc:	4413      	add	r3, r2
   b8dde:	930b      	str	r3, [sp, #44]	; 0x2c
   b8de0:	e725      	b.n	b8c2e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xfe>
  for (int batch = 0; batch < batches; ++batch) {
   b8de2:	f10b 0b01 	add.w	fp, fp, #1
   b8de6:	e719      	b.n	b8c1c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xec>
          }
        }
      }
    }
  }
}
   b8de8:	b023      	add	sp, #140	; 0x8c
   b8dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8dee:	bf00      	nop
   b8df0:	c0000001 	.word	0xc0000001
   b8df4:	000cac99 	.word	0x000cac99
   b8df8:	000cab95 	.word	0x000cab95
   b8dfc:	000cabef 	.word	0x000cabef

000b8e00 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.constprop.0>:
    }
  }
  return kTfLiteOk;
}

void EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
   b8e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8e04:	4614      	mov	r4, r2
                             const OpData& data, const TfLiteEvalTensor* input,
                             const TfLiteEvalTensor* filter,
                             const TfLiteEvalTensor* bias,
                             TfLiteEvalTensor* output) {
  cmsis_nn_dw_conv_params dw_conv_params;
  dw_conv_params.dilation.h = params.dilation_height_factor;
   b8e06:	698a      	ldr	r2, [r1, #24]
void EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
   b8e08:	b0e5      	sub	sp, #404	; 0x194
   b8e0a:	461e      	mov	r6, r3
  dw_conv_params.dilation.w = params.dilation_width_factor;
  // Call to reference implementation can be removed when dilation is supported
  // in the optimized implementations.
  if (1 == dw_conv_params.dilation.h && 1 == dw_conv_params.dilation.w) {
   b8e0c:	2a01      	cmp	r2, #1
  dw_conv_params.dilation.w = params.dilation_width_factor;
   b8e0e:	694b      	ldr	r3, [r1, #20]
void EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
   b8e10:	9d70      	ldr	r5, [sp, #448]	; 0x1c0
  dw_conv_params.dilation.h = params.dilation_height_factor;
   b8e12:	9251      	str	r2, [sp, #324]	; 0x144
void EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
   b8e14:	e9dd 976e 	ldrd	r9, r7, [sp, #440]	; 0x1b8
   b8e18:	4683      	mov	fp, r0
  dw_conv_params.dilation.w = params.dilation_width_factor;
   b8e1a:	9350      	str	r3, [sp, #320]	; 0x140
  if (1 == dw_conv_params.dilation.h && 1 == dw_conv_params.dilation.w) {
   b8e1c:	f10d 08c4 	add.w	r8, sp, #196	; 0xc4
   b8e20:	f040 80b1 	bne.w	b8f86 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.constprop.0+0x186>
   b8e24:	2b01      	cmp	r3, #1
   b8e26:	f040 80ae 	bne.w	b8f86 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.constprop.0+0x186>
    dw_conv_params.input_offset = -data.reference_op_data.input_zero_point;
   b8e2a:	6923      	ldr	r3, [r4, #16]
   b8e2c:	425b      	negs	r3, r3
   b8e2e:	9349      	str	r3, [sp, #292]	; 0x124
    dw_conv_params.output_offset = data.reference_op_data.output_zero_point;
   b8e30:	69a3      	ldr	r3, [r4, #24]
   b8e32:	934a      	str	r3, [sp, #296]	; 0x128
    dw_conv_params.stride.h = params.stride_height;
   b8e34:	688b      	ldr	r3, [r1, #8]
   b8e36:	934d      	str	r3, [sp, #308]	; 0x134
    dw_conv_params.stride.w = params.stride_width;
   b8e38:	684b      	ldr	r3, [r1, #4]
   b8e3a:	934c      	str	r3, [sp, #304]	; 0x130
    dw_conv_params.padding.h = data.reference_op_data.padding.height;
   b8e3c:	6863      	ldr	r3, [r4, #4]
   b8e3e:	934f      	str	r3, [sp, #316]	; 0x13c
    dw_conv_params.padding.w = data.reference_op_data.padding.width;
   b8e40:	6823      	ldr	r3, [r4, #0]
   b8e42:	934e      	str	r3, [sp, #312]	; 0x138
    // TODO(b/130439627): Use calculated value for clamping.
    dw_conv_params.activation.min = std::numeric_limits<int8_t>::min();
    dw_conv_params.activation.max = std::numeric_limits<int8_t>::max();
   b8e44:	f06f 027f 	mvn.w	r2, #127	; 0x7f
   b8e48:	237f      	movs	r3, #127	; 0x7f
   b8e4a:	e9cd 2352 	strd	r2, r3, [sp, #328]	; 0x148
    dw_conv_params.ch_mult = params.depth_multiplier;
   b8e4e:	68cb      	ldr	r3, [r1, #12]
   b8e50:	934b      	str	r3, [sp, #300]	; 0x12c

    cmsis_nn_per_channel_quant_params quant_params;
    quant_params.multiplier =
   b8e52:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b8e54:	930b      	str	r3, [sp, #44]	; 0x2c
        data.reference_op_data.per_channel_output_multiplier;
    quant_params.shift = data.reference_op_data.per_channel_output_shift;

    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
   b8e56:	4649      	mov	r1, r9
    quant_params.shift = data.reference_op_data.per_channel_output_shift;
   b8e58:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b8e5a:	930c      	str	r3, [sp, #48]	; 0x30
    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
   b8e5c:	a81f      	add	r0, sp, #124	; 0x7c
   b8e5e:	f7ff fd4a 	bl	b88f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
   b8e62:	4631      	mov	r1, r6
   b8e64:	a825      	add	r0, sp, #148	; 0x94
   b8e66:	f7ff fd46 	bl	b88f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
   b8e6a:	4629      	mov	r1, r5
   b8e6c:	a82b      	add	r0, sp, #172	; 0xac
   b8e6e:	f7ff fd42 	bl	b88f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
   b8e72:	4639      	mov	r1, r7
   b8e74:	4640      	mov	r0, r8
   b8e76:	f7ff fd3e 	bl	b88f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

    TFLITE_DCHECK_LE(dw_conv_params.activation.min,
   b8e7a:	e9dd 2352 	ldrd	r2, r3, [sp, #328]	; 0x148
   b8e7e:	429a      	cmp	r2, r3
   b8e80:	dd01      	ble.n	b8e86 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.constprop.0+0x86>
   b8e82:	f003 fb83 	bl	bc58c <abort>
                     dw_conv_params.activation.max);

    const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
   b8e86:	2300      	movs	r3, #0
   b8e88:	4619      	mov	r1, r3
   b8e8a:	aa2b      	add	r2, sp, #172	; 0xac
   b8e8c:	a825      	add	r0, sp, #148	; 0x94
   b8e8e:	f7ff fd7e 	bl	b898e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   b8e92:	2303      	movs	r3, #3
    const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
   b8e94:	9009      	str	r0, [sp, #36]	; 0x24
    const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   b8e96:	aa2b      	add	r2, sp, #172	; 0xac
   b8e98:	4619      	mov	r1, r3
   b8e9a:	a81f      	add	r0, sp, #124	; 0x7c
   b8e9c:	f7ff fd77 	bl	b898e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
   b8ea0:	4682      	mov	sl, r0
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
  TFLITE_DCHECK(tensor != nullptr);
   b8ea2:	2f00      	cmp	r7, #0
   b8ea4:	d0ed      	beq.n	b8e82 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.constprop.0+0x82>

    if (tflite::micro::GetTensorData<int8_t>(bias)) {
   b8ea6:	683b      	ldr	r3, [r7, #0]
   b8ea8:	b123      	cbz	r3, b8eb4 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.constprop.0+0xb4>
      TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   b8eaa:	4640      	mov	r0, r8
   b8eac:	f7ff fbd5 	bl	b865a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   b8eb0:	4582      	cmp	sl, r0
   b8eb2:	d1e6      	bne.n	b8e82 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.constprop.0+0x82>
    }

    cmsis_nn_dims input_dims;
    input_dims.n = batch_size;
   b8eb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b8eb6:	930f      	str	r3, [sp, #60]	; 0x3c
    input_dims.h = input_shape.Dims(1);
   b8eb8:	2101      	movs	r1, #1
   b8eba:	a825      	add	r0, sp, #148	; 0x94
   b8ebc:	f7ff fb93 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
    input_dims.w = input_shape.Dims(2);
   b8ec0:	2102      	movs	r1, #2
    input_dims.h = input_shape.Dims(1);
   b8ec2:	9010      	str	r0, [sp, #64]	; 0x40
    input_dims.w = input_shape.Dims(2);
   b8ec4:	a825      	add	r0, sp, #148	; 0x94
   b8ec6:	f7ff fb8e 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
    input_dims.c = input_shape.Dims(3);
   b8eca:	2103      	movs	r1, #3
    input_dims.w = input_shape.Dims(2);
   b8ecc:	9011      	str	r0, [sp, #68]	; 0x44
    input_dims.c = input_shape.Dims(3);
   b8ece:	a825      	add	r0, sp, #148	; 0x94
   b8ed0:	f7ff fb89 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>

    cmsis_nn_dims filter_dims;
    filter_dims.n = filter_shape.Dims(0);
   b8ed4:	2100      	movs	r1, #0
    input_dims.c = input_shape.Dims(3);
   b8ed6:	9012      	str	r0, [sp, #72]	; 0x48
    filter_dims.n = filter_shape.Dims(0);
   b8ed8:	a81f      	add	r0, sp, #124	; 0x7c
   b8eda:	f7ff fb84 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
    filter_dims.h = filter_shape.Dims(1);
   b8ede:	2101      	movs	r1, #1
    filter_dims.n = filter_shape.Dims(0);
   b8ee0:	9013      	str	r0, [sp, #76]	; 0x4c
    filter_dims.h = filter_shape.Dims(1);
   b8ee2:	a81f      	add	r0, sp, #124	; 0x7c
   b8ee4:	f7ff fb7f 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
    filter_dims.w = filter_shape.Dims(2);
   b8ee8:	2102      	movs	r1, #2
    filter_dims.h = filter_shape.Dims(1);
   b8eea:	9014      	str	r0, [sp, #80]	; 0x50
    filter_dims.w = filter_shape.Dims(2);
   b8eec:	a81f      	add	r0, sp, #124	; 0x7c
   b8eee:	f7ff fb7a 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
    bias_dims.h = 1;
    bias_dims.w = 1;
    bias_dims.c = output_depth;

    cmsis_nn_dims output_dims;
    output_dims.n = batch_size;
   b8ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b8ef4:	931b      	str	r3, [sp, #108]	; 0x6c
    bias_dims.n = 1;
   b8ef6:	2101      	movs	r1, #1
    filter_dims.c = output_depth;
   b8ef8:	e9cd 0a15 	strd	r0, sl, [sp, #84]	; 0x54
    output_dims.h = output_shape.Dims(1);
   b8efc:	a82b      	add	r0, sp, #172	; 0xac
    bias_dims.h = 1;
   b8efe:	e9cd 1117 	strd	r1, r1, [sp, #92]	; 0x5c
    bias_dims.c = output_depth;
   b8f02:	e9cd 1a19 	strd	r1, sl, [sp, #100]	; 0x64
    output_dims.h = output_shape.Dims(1);
   b8f06:	f7ff fb6e 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
    output_dims.w = output_shape.Dims(2);
   b8f0a:	2102      	movs	r1, #2
    output_dims.h = output_shape.Dims(1);
   b8f0c:	901c      	str	r0, [sp, #112]	; 0x70
    output_dims.w = output_shape.Dims(2);
   b8f0e:	a82b      	add	r0, sp, #172	; 0xac
   b8f10:	f7ff fb69 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
    cmsis_nn_context ctx;
    ctx.buf = nullptr;
    /* 'size' is unused */
    ctx.size = 0;

    if (data.buffer_idx > -1) {
   b8f14:	6b61      	ldr	r1, [r4, #52]	; 0x34
    ctx.buf = nullptr;
   b8f16:	2300      	movs	r3, #0
    if (data.buffer_idx > -1) {
   b8f18:	4299      	cmp	r1, r3
    output_dims.c = output_depth;
   b8f1a:	e9cd 0a1d 	strd	r0, sl, [sp, #116]	; 0x74
    ctx.size = 0;
   b8f1e:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
    if (data.buffer_idx > -1) {
   b8f22:	db04      	blt.n	b8f2e <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.constprop.0+0x12e>
      ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
   b8f24:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
   b8f28:	4658      	mov	r0, fp
   b8f2a:	4798      	blx	r3
   b8f2c:	900d      	str	r0, [sp, #52]	; 0x34
   b8f2e:	2e00      	cmp	r6, #0
   b8f30:	d0a7      	beq.n	b8e82 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.constprop.0+0x82>
  return reinterpret_cast<const T*>(tensor->data.raw);
   b8f32:	6833      	ldr	r3, [r6, #0]
  TFLITE_DCHECK(tensor != nullptr);
   b8f34:	f1b9 0f00 	cmp.w	r9, #0
   b8f38:	d0a3      	beq.n	b8e82 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.constprop.0+0x82>
  return reinterpret_cast<const T*>(tensor->data.raw);
   b8f3a:	f8d9 2000 	ldr.w	r2, [r9]
   b8f3e:	6839      	ldr	r1, [r7, #0]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   b8f40:	b105      	cbz	r5, b8f44 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.constprop.0+0x144>
   b8f42:	682d      	ldr	r5, [r5, #0]
    }

    TFLITE_DCHECK_EQ(
   b8f44:	9506      	str	r5, [sp, #24]
   b8f46:	a81b      	add	r0, sp, #108	; 0x6c
   b8f48:	e9cd 1004 	strd	r1, r0, [sp, #16]
   b8f4c:	a917      	add	r1, sp, #92	; 0x5c
   b8f4e:	e9cd 2102 	strd	r2, r1, [sp, #8]
   b8f52:	aa13      	add	r2, sp, #76	; 0x4c
   b8f54:	e9cd 3200 	strd	r3, r2, [sp]
   b8f58:	a949      	add	r1, sp, #292	; 0x124
   b8f5a:	ab0f      	add	r3, sp, #60	; 0x3c
   b8f5c:	aa0b      	add	r2, sp, #44	; 0x2c
   b8f5e:	a80d      	add	r0, sp, #52	; 0x34
   b8f60:	f7fd f843 	bl	b5fea <arm_depthwise_conv_wrapper_s8>
   b8f64:	2800      	cmp	r0, #0
   b8f66:	d18c      	bne.n	b8e82 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.constprop.0+0x82>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
   b8f68:	4640      	mov	r0, r8
   b8f6a:	f7ff fb31 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
   b8f6e:	a82b      	add	r0, sp, #172	; 0xac
   b8f70:	f7ff fb2e 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
   b8f74:	a825      	add	r0, sp, #148	; 0x94
   b8f76:	f7ff fb2b 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
   b8f7a:	a81f      	add	r0, sp, #124	; 0x7c
  } else {
    reference_integer_ops::DepthwiseConvPerChannel(
        DepthwiseConvParamsQuantized(params, data.reference_op_data),
        data.reference_op_data.per_channel_output_multiplier,
        data.reference_op_data.per_channel_output_shift,
        tflite::micro::GetTensorShape(input),
   b8f7c:	f7ff fb28 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(bias),
        tflite::micro::GetTensorData<int32_t>(bias),
        tflite::micro::GetTensorShape(output),
        tflite::micro::GetTensorData<int8_t>(output));
  }
}
   b8f80:	b065      	add	sp, #404	; 0x194
   b8f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        DepthwiseConvParamsQuantized(params, data.reference_op_data),
   b8f86:	a854      	add	r0, sp, #336	; 0x150
   b8f88:	4622      	mov	r2, r4
   b8f8a:	f000 fa0f 	bl	b93ac <_ZN6tflite28DepthwiseConvParamsQuantizedERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>
        tflite::micro::GetTensorShape(input),
   b8f8e:	4631      	mov	r1, r6
   b8f90:	a843      	add	r0, sp, #268	; 0x10c
        data.reference_op_data.per_channel_output_shift,
   b8f92:	e9d4 ab09 	ldrd	sl, fp, [r4, #36]	; 0x24
        tflite::micro::GetTensorShape(input),
   b8f96:	f7ff fcae 	bl	b88f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   b8f9a:	2e00      	cmp	r6, #0
   b8f9c:	f43f af71 	beq.w	b8e82 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.constprop.0+0x82>
        tflite::micro::GetTensorShape(filter),
   b8fa0:	ac3d      	add	r4, sp, #244	; 0xf4
  return reinterpret_cast<const T*>(tensor->data.raw);
   b8fa2:	6833      	ldr	r3, [r6, #0]
   b8fa4:	9309      	str	r3, [sp, #36]	; 0x24
   b8fa6:	4649      	mov	r1, r9
   b8fa8:	4620      	mov	r0, r4
   b8faa:	f7ff fca4 	bl	b88f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   b8fae:	f1b9 0f00 	cmp.w	r9, #0
   b8fb2:	f43f af66 	beq.w	b8e82 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.constprop.0+0x82>
        tflite::micro::GetTensorShape(bias),
   b8fb6:	ae37      	add	r6, sp, #220	; 0xdc
   b8fb8:	4639      	mov	r1, r7
   b8fba:	4630      	mov	r0, r6
  return reinterpret_cast<const T*>(tensor->data.raw);
   b8fbc:	f8d9 9000 	ldr.w	r9, [r9]
   b8fc0:	f7ff fc99 	bl	b88f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   b8fc4:	2f00      	cmp	r7, #0
   b8fc6:	f43f af5c 	beq.w	b8e82 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.constprop.0+0x82>
        tflite::micro::GetTensorShape(output),
   b8fca:	4629      	mov	r1, r5
   b8fcc:	4640      	mov	r0, r8
  return reinterpret_cast<const T*>(tensor->data.raw);
   b8fce:	683f      	ldr	r7, [r7, #0]
   b8fd0:	f7ff fc91 	bl	b88f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   b8fd4:	b105      	cbz	r5, b8fd8 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.constprop.0+0x1d8>
   b8fd6:	682d      	ldr	r5, [r5, #0]
    reference_integer_ops::DepthwiseConvPerChannel(
   b8fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b8fda:	9300      	str	r3, [sp, #0]
   b8fdc:	465a      	mov	r2, fp
   b8fde:	ab43      	add	r3, sp, #268	; 0x10c
   b8fe0:	4651      	mov	r1, sl
   b8fe2:	a854      	add	r0, sp, #336	; 0x150
   b8fe4:	e9cd 8505 	strd	r8, r5, [sp, #20]
   b8fe8:	e9cd 6703 	strd	r6, r7, [sp, #12]
   b8fec:	e9cd 4901 	strd	r4, r9, [sp, #4]
   b8ff0:	f7ff fd9e 	bl	b8b30 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
        tflite::micro::GetTensorShape(output),
   b8ff4:	4640      	mov	r0, r8
   b8ff6:	f7ff faeb 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(bias),
   b8ffa:	4630      	mov	r0, r6
   b8ffc:	f7ff fae8 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(filter),
   b9000:	4620      	mov	r0, r4
   b9002:	f7ff fae5 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(input),
   b9006:	a843      	add	r0, sp, #268	; 0x10c
   b9008:	e7b8      	b.n	b8f7c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.constprop.0+0x17c>
	...

000b900c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   b900c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
   b9010:	690e      	ldr	r6, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   b9012:	b0bb      	sub	sp, #236	; 0xec
   b9014:	4604      	mov	r4, r0
   b9016:	4689      	mov	r9, r1
  TFLITE_DCHECK(node->user_data != nullptr);
   b9018:	b90e      	cbnz	r6, b901e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x12>
   b901a:	f003 fab7 	bl	bc58c <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
   b901e:	f8d1 b014 	ldr.w	fp, [r1, #20]
   b9022:	f1bb 0f00 	cmp.w	fp, #0
   b9026:	d0f8      	beq.n	b901a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xe>
      GetInput(context, node, kDepthwiseConvInputTensor);
   b9028:	4b93      	ldr	r3, [pc, #588]	; (b9278 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x26c>)
   b902a:	681a      	ldr	r2, [r3, #0]
   b902c:	f002 fdc0 	bl	bbbb0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
   b9030:	4680      	mov	r8, r0
   b9032:	b960      	cbnz	r0, b904e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x42>
   b9034:	4b91      	ldr	r3, [pc, #580]	; (b927c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x270>)
   b9036:	9300      	str	r3, [sp, #0]
   b9038:	6965      	ldr	r5, [r4, #20]
   b903a:	233e      	movs	r3, #62	; 0x3e
  TF_LITE_ENSURE(context, filter != nullptr);
   b903c:	4a90      	ldr	r2, [pc, #576]	; (b9280 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x274>)
   b903e:	4991      	ldr	r1, [pc, #580]	; (b9284 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x278>)
   b9040:	4620      	mov	r0, r4
   b9042:	47a8      	blx	r5
   b9044:	2501      	movs	r5, #1
}
   b9046:	4628      	mov	r0, r5
   b9048:	b03b      	add	sp, #236	; 0xec
   b904a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      GetInput(context, node, kDepthwiseConvWeightsTensor);
   b904e:	4b8e      	ldr	r3, [pc, #568]	; (b9288 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x27c>)
   b9050:	4649      	mov	r1, r9
   b9052:	681a      	ldr	r2, [r3, #0]
   b9054:	4620      	mov	r0, r4
   b9056:	f002 fdab 	bl	bbbb0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
   b905a:	4607      	mov	r7, r0
   b905c:	b920      	cbnz	r0, b9068 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x5c>
   b905e:	4b8b      	ldr	r3, [pc, #556]	; (b928c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x280>)
   b9060:	9300      	str	r3, [sp, #0]
   b9062:	6965      	ldr	r5, [r4, #20]
   b9064:	2341      	movs	r3, #65	; 0x41
   b9066:	e7e9      	b.n	b903c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x30>
  TfLiteTensor* output = GetOutput(context, node, kDepthwiseConvOutputTensor);
   b9068:	4b89      	ldr	r3, [pc, #548]	; (b9290 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x284>)
   b906a:	4649      	mov	r1, r9
   b906c:	681a      	ldr	r2, [r3, #0]
   b906e:	4620      	mov	r0, r4
   b9070:	f002 fda1 	bl	bbbb6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
   b9074:	4682      	mov	sl, r0
   b9076:	b920      	cbnz	r0, b9082 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x76>
   b9078:	4b86      	ldr	r3, [pc, #536]	; (b9294 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x288>)
   b907a:	9300      	str	r3, [sp, #0]
   b907c:	6965      	ldr	r5, [r4, #20]
   b907e:	2343      	movs	r3, #67	; 0x43
   b9080:	e7dc      	b.n	b903c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x30>
  const TfLiteType data_type = input->type;
   b9082:	f898 2000 	ldrb.w	r2, [r8]
                                  TfLiteTensor** tensor);
#endif  // TF_LITE_STATIC_MEMORY

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
inline int SizeOfDimension(const TfLiteTensor* t, int dim) {
  return t->dims->data[dim];
   b9086:	68bb      	ldr	r3, [r7, #8]
  if (input->type == kTfLiteInt8) {
   b9088:	2a09      	cmp	r2, #9
   b908a:	d14d      	bne.n	b9128 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x11c>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
   b908c:	f897 5030 	ldrb.w	r5, [r7, #48]	; 0x30
   b9090:	2d01      	cmp	r5, #1
   b9092:	d00d      	beq.n	b90b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xa4>
   b9094:	2601      	movs	r6, #1
   b9096:	e9cd 5602 	strd	r5, r6, [sp, #8]
   b909a:	4b7f      	ldr	r3, [pc, #508]	; (b9298 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x28c>)
   b909c:	9301      	str	r3, [sp, #4]
   b909e:	4b7f      	ldr	r3, [pc, #508]	; (b929c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x290>)
   b90a0:	9300      	str	r3, [sp, #0]
   b90a2:	6965      	ldr	r5, [r4, #20]
   b90a4:	4a76      	ldr	r2, [pc, #472]	; (b9280 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x274>)
   b90a6:	497e      	ldr	r1, [pc, #504]	; (b92a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x294>)
   b90a8:	234e      	movs	r3, #78	; 0x4e
   b90aa:	4620      	mov	r0, r4
   b90ac:	47a8      	blx	r5
   b90ae:	e7c9      	b.n	b9044 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x38>
    const auto* affine_quantization =
   b90b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
    TF_LITE_ENSURE(context, affine_quantization);
   b90b2:	b941      	cbnz	r1, b90c6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xba>
   b90b4:	4b7b      	ldr	r3, [pc, #492]	; (b92a4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x298>)
   b90b6:	9300      	str	r3, [sp, #0]
   b90b8:	6966      	ldr	r6, [r4, #20]
   b90ba:	2355      	movs	r3, #85	; 0x55
    TF_LITE_ENSURE(context, affine_quantization->scale);
   b90bc:	4a70      	ldr	r2, [pc, #448]	; (b9280 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x274>)
   b90be:	4971      	ldr	r1, [pc, #452]	; (b9284 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x278>)
   b90c0:	4620      	mov	r0, r4
   b90c2:	47b0      	blx	r6
   b90c4:	e7bf      	b.n	b9046 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3a>
   b90c6:	6808      	ldr	r0, [r1, #0]
   b90c8:	b920      	cbnz	r0, b90d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
   b90ca:	4b77      	ldr	r3, [pc, #476]	; (b92a8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x29c>)
   b90cc:	9300      	str	r3, [sp, #0]
   b90ce:	6966      	ldr	r6, [r4, #20]
   b90d0:	2356      	movs	r3, #86	; 0x56
   b90d2:	e7f3      	b.n	b90bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xb0>
    TF_LITE_ENSURE(context, affine_quantization->zero_point);
   b90d4:	f8d1 c004 	ldr.w	ip, [r1, #4]
   b90d8:	f1bc 0f00 	cmp.w	ip, #0
   b90dc:	d104      	bne.n	b90e8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xdc>
   b90de:	4b73      	ldr	r3, [pc, #460]	; (b92ac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2a0>)
   b90e0:	9300      	str	r3, [sp, #0]
   b90e2:	6966      	ldr	r6, [r4, #20]
   b90e4:	2357      	movs	r3, #87	; 0x57
   b90e6:	e7e9      	b.n	b90bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xb0>
    TF_LITE_ENSURE(
   b90e8:	6801      	ldr	r1, [r0, #0]
   b90ea:	2901      	cmp	r1, #1
   b90ec:	d00b      	beq.n	b9106 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xfa>
   b90ee:	4870      	ldr	r0, [pc, #448]	; (b92b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2a4>)
   b90f0:	6800      	ldr	r0, [r0, #0]
   b90f2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b90f6:	6840      	ldr	r0, [r0, #4]
   b90f8:	4281      	cmp	r1, r0
   b90fa:	d004      	beq.n	b9106 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xfa>
   b90fc:	4b6d      	ldr	r3, [pc, #436]	; (b92b4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2a8>)
   b90fe:	9300      	str	r3, [sp, #0]
   b9100:	6966      	ldr	r6, [r4, #20]
   b9102:	2358      	movs	r3, #88	; 0x58
   b9104:	e7da      	b.n	b90bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xb0>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
   b9106:	f8dc 0000 	ldr.w	r0, [ip]
   b910a:	4281      	cmp	r1, r0
   b910c:	d00c      	beq.n	b9128 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x11c>
   b910e:	e9cd 1002 	strd	r1, r0, [sp, #8]
   b9112:	4b69      	ldr	r3, [pc, #420]	; (b92b8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ac>)
   b9114:	9301      	str	r3, [sp, #4]
   b9116:	4b69      	ldr	r3, [pc, #420]	; (b92bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2b0>)
   b9118:	9300      	str	r3, [sp, #0]
   b911a:	6966      	ldr	r6, [r4, #20]
   b911c:	4a58      	ldr	r2, [pc, #352]	; (b9280 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x274>)
   b911e:	4960      	ldr	r1, [pc, #384]	; (b92a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x294>)
   b9120:	235c      	movs	r3, #92	; 0x5c
   b9122:	4620      	mov	r0, r4
   b9124:	47b0      	blx	r6
   b9126:	e78e      	b.n	b9046 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3a>
   b9128:	f8d8 1008 	ldr.w	r1, [r8, #8]
   b912c:	920f      	str	r2, [sp, #60]	; 0x3c
   b912e:	68ca      	ldr	r2, [r1, #12]
   b9130:	9208      	str	r2, [sp, #32]
   b9132:	688a      	ldr	r2, [r1, #8]
   b9134:	9209      	str	r2, [sp, #36]	; 0x24
   b9136:	f8da 1008 	ldr.w	r1, [sl, #8]
   b913a:	68da      	ldr	r2, [r3, #12]
   b913c:	920a      	str	r2, [sp, #40]	; 0x28
   b913e:	689a      	ldr	r2, [r3, #8]
   b9140:	920b      	str	r2, [sp, #44]	; 0x2c
   b9142:	68ca      	ldr	r2, [r1, #12]
   b9144:	920c      	str	r2, [sp, #48]	; 0x30
   b9146:	688a      	ldr	r2, [r1, #8]
  const int num_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
   b9148:	4959      	ldr	r1, [pc, #356]	; (b92b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2a4>)
   b914a:	920d      	str	r2, [sp, #52]	; 0x34
   b914c:	6809      	ldr	r1, [r1, #0]
   b914e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
      reinterpret_cast<int32_t*>(context->AllocatePersistentBuffer(
   b9152:	4620      	mov	r0, r4
   b9154:	6859      	ldr	r1, [r3, #4]
   b9156:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9158:	0089      	lsls	r1, r1, #2
   b915a:	910e      	str	r1, [sp, #56]	; 0x38
   b915c:	4798      	blx	r3
  data->reference_op_data.per_channel_output_multiplier =
   b915e:	6270      	str	r0, [r6, #36]	; 0x24
      reinterpret_cast<int32_t*>(context->AllocatePersistentBuffer(
   b9160:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9162:	990e      	ldr	r1, [sp, #56]	; 0x38
   b9164:	4620      	mov	r0, r4
   b9166:	4798      	blx	r3
  TF_LITE_ENSURE_STATUS(CalculateOpDataDepthwiseConv(
   b9168:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  data->reference_op_data.per_channel_output_shift =
   b916a:	62b0      	str	r0, [r6, #40]	; 0x28
  TF_LITE_ENSURE_STATUS(CalculateOpDataDepthwiseConv(
   b916c:	9304      	str	r3, [sp, #16]
   b916e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b9170:	9303      	str	r3, [sp, #12]
   b9172:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9174:	9302      	str	r3, [sp, #8]
   b9176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b9178:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   b917a:	9301      	str	r3, [sp, #4]
   b917c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b917e:	9205      	str	r2, [sp, #20]
   b9180:	9300      	str	r3, [sp, #0]
   b9182:	9606      	str	r6, [sp, #24]
   b9184:	9b08      	ldr	r3, [sp, #32]
   b9186:	465a      	mov	r2, fp
   b9188:	4649      	mov	r1, r9
   b918a:	4620      	mov	r0, r4
   b918c:	f000 f938 	bl	b9400 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
   b9190:	4605      	mov	r5, r0
   b9192:	2800      	cmp	r0, #0
   b9194:	f47f af57 	bne.w	b9046 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3a>
  if (input->type == kTfLiteInt8) {
   b9198:	f898 3000 	ldrb.w	r3, [r8]
   b919c:	2b09      	cmp	r3, #9
   b919e:	f47f af52 	bne.w	b9046 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3a>
    RuntimeShape input_shape = GetTensorShape(input);
   b91a2:	4641      	mov	r1, r8
   b91a4:	a81d      	add	r0, sp, #116	; 0x74
   b91a6:	f7ff fc97 	bl	b8ad8 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    RuntimeShape output_shape = GetTensorShape(output);
   b91aa:	4651      	mov	r1, sl
   b91ac:	a823      	add	r0, sp, #140	; 0x8c
   b91ae:	f7ff fc93 	bl	b8ad8 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    RuntimeShape filter_shape = GetTensorShape(filter);
   b91b2:	4639      	mov	r1, r7
   b91b4:	a829      	add	r0, sp, #164	; 0xa4
   b91b6:	f7ff fc8f 	bl	b8ad8 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   b91ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   b91bc:	2b04      	cmp	r3, #4
   b91be:	f47f af2c 	bne.w	b901a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xe>
    TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   b91c2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   b91c4:	2b04      	cmp	r3, #4
   b91c6:	f47f af28 	bne.w	b901a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xe>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   b91ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   b91cc:	2b04      	cmp	r3, #4
   b91ce:	f47f af24 	bne.w	b901a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xe>
    const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
   b91d2:	462b      	mov	r3, r5
   b91d4:	aa23      	add	r2, sp, #140	; 0x8c
   b91d6:	4629      	mov	r1, r5
   b91d8:	a81d      	add	r0, sp, #116	; 0x74
   b91da:	f7ff fbd8 	bl	b898e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    const int output_depth = MatchingDim(output_shape, 3, filter_shape, 3);
   b91de:	2303      	movs	r3, #3
    const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
   b91e0:	4607      	mov	r7, r0
    const int output_depth = MatchingDim(output_shape, 3, filter_shape, 3);
   b91e2:	aa29      	add	r2, sp, #164	; 0xa4
   b91e4:	4619      	mov	r1, r3
   b91e6:	a823      	add	r0, sp, #140	; 0x8c
   b91e8:	f7ff fbd1 	bl	b898e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    TFLITE_DCHECK_EQ(batch_size, 1); /* Only batch = 1 is supported */
   b91ec:	2f01      	cmp	r7, #1
    const int output_depth = MatchingDim(output_shape, 3, filter_shape, 3);
   b91ee:	4680      	mov	r8, r0
    TFLITE_DCHECK_EQ(batch_size, 1); /* Only batch = 1 is supported */
   b91f0:	f47f af13 	bne.w	b901a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xe>
    input_dims.h = input_height;
   b91f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b91f6:	9312      	str	r3, [sp, #72]	; 0x48
    input_dims.c = input_shape.Dims(3);
   b91f8:	2103      	movs	r1, #3
    input_dims.w = input_width;
   b91fa:	9b08      	ldr	r3, [sp, #32]
   b91fc:	9313      	str	r3, [sp, #76]	; 0x4c
    input_dims.c = input_shape.Dims(3);
   b91fe:	a81d      	add	r0, sp, #116	; 0x74
    input_dims.n = batch_size;
   b9200:	9711      	str	r7, [sp, #68]	; 0x44
    input_dims.c = input_shape.Dims(3);
   b9202:	f7ff f9f0 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
    filter_dims.h = filter_height;
   b9206:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9208:	9316      	str	r3, [sp, #88]	; 0x58
    filter_dims.w = filter_width;
   b920a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    output_dims.n = batch_size;
   b920c:	9719      	str	r7, [sp, #100]	; 0x64
    filter_dims.c = output_depth;
   b920e:	e9cd 3817 	strd	r3, r8, [sp, #92]	; 0x5c
    output_dims.h = output_height;
   b9212:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b9214:	931a      	str	r3, [sp, #104]	; 0x68
    output_dims.w = output_width;
   b9216:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    filter_dims.n = 1;
   b9218:	e9cd 0714 	strd	r0, r7, [sp, #80]	; 0x50
    output_dims.c = output_depth;
   b921c:	e9cd 381b 	strd	r3, r8, [sp, #108]	; 0x6c
    dw_conv_params.padding.h = data->reference_op_data.padding.height;
   b9220:	6873      	ldr	r3, [r6, #4]
   b9222:	9335      	str	r3, [sp, #212]	; 0xd4
    dw_conv_params.padding.w = data->reference_op_data.padding.width;
   b9224:	6833      	ldr	r3, [r6, #0]
   b9226:	9334      	str	r3, [sp, #208]	; 0xd0
    const int32_t buf_size = arm_depthwise_conv_wrapper_s8_get_buffer_size(
   b9228:	a911      	add	r1, sp, #68	; 0x44
   b922a:	ab19      	add	r3, sp, #100	; 0x64
   b922c:	aa15      	add	r2, sp, #84	; 0x54
   b922e:	a82f      	add	r0, sp, #188	; 0xbc
   b9230:	f7fc ff14 	bl	b605c <arm_depthwise_conv_wrapper_s8_get_buffer_size>
    if (buf_size > 0) {
   b9234:	1e01      	subs	r1, r0, #0
   b9236:	dd11      	ble.n	b925c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x250>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
   b9238:	6c23      	ldr	r3, [r4, #64]	; 0x40
   b923a:	4620      	mov	r0, r4
   b923c:	f106 0234 	add.w	r2, r6, #52	; 0x34
   b9240:	4798      	blx	r3
   b9242:	4604      	mov	r4, r0
   b9244:	b168      	cbz	r0, b9262 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x256>
   b9246:	a829      	add	r0, sp, #164	; 0xa4
   b9248:	f7ff f9c2 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
   b924c:	a823      	add	r0, sp, #140	; 0x8c
   b924e:	f7ff f9bf 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
   b9252:	a81d      	add	r0, sp, #116	; 0x74
   b9254:	f7ff f9bc 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
   b9258:	4625      	mov	r5, r4
   b925a:	e6f4      	b.n	b9046 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3a>
      data->buffer_idx = -1;
   b925c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9260:	6373      	str	r3, [r6, #52]	; 0x34
    RuntimeShape filter_shape = GetTensorShape(filter);
   b9262:	a829      	add	r0, sp, #164	; 0xa4
   b9264:	f7ff f9b4 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape output_shape = GetTensorShape(output);
   b9268:	a823      	add	r0, sp, #140	; 0x8c
   b926a:	f7ff f9b1 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape input_shape = GetTensorShape(input);
   b926e:	a81d      	add	r0, sp, #116	; 0x74
   b9270:	f7ff f9ae 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
   b9274:	e6e7      	b.n	b9046 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3a>
   b9276:	bf00      	nop
   b9278:	000cb038 	.word	0x000cb038
   b927c:	000cad6d 	.word	0x000cad6d
   b9280:	000caca8 	.word	0x000caca8
   b9284:	000cad56 	.word	0x000cad56
   b9288:	000cb040 	.word	0x000cb040
   b928c:	000cad7e 	.word	0x000cad7e
   b9290:	000cb03c 	.word	0x000cb03c
   b9294:	000cad90 	.word	0x000cad90
   b9298:	000cadbc 	.word	0x000cadbc
   b929c:	000cadd6 	.word	0x000cadd6
   b92a0:	000cada2 	.word	0x000cada2
   b92a4:	000cadf0 	.word	0x000cadf0
   b92a8:	000cae04 	.word	0x000cae04
   b92ac:	000cae1f 	.word	0x000cae1f
   b92b0:	000cb044 	.word	0x000cb044
   b92b4:	000cae3f 	.word	0x000cae3f
   b92b8:	000caec1 	.word	0x000caec1
   b92bc:	000caee7 	.word	0x000caee7

000b92c0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   b92c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
   b92c4:	f8d1 9010 	ldr.w	r9, [r1, #16]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   b92c8:	4604      	mov	r4, r0
   b92ca:	460d      	mov	r5, r1
  TFLITE_DCHECK(node->user_data != nullptr);
   b92cc:	f1b9 0f00 	cmp.w	r9, #0
   b92d0:	d101      	bne.n	b92d6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16>
   b92d2:	f003 f95b 	bl	bc58c <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
   b92d6:	f8d1 8014 	ldr.w	r8, [r1, #20]
   b92da:	f1b8 0f00 	cmp.w	r8, #0
   b92de:	d0f8      	beq.n	b92d2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x12>
  TFLITE_DCHECK(context != nullptr);
   b92e0:	2800      	cmp	r0, #0
   b92e2:	d0f6      	beq.n	b92d2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x12>
  return context->GetEvalTensor(context, node->outputs->data[index]);
   b92e4:	4a25      	ldr	r2, [pc, #148]	; (b937c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xbc>)
   b92e6:	684b      	ldr	r3, [r1, #4]
   b92e8:	6812      	ldr	r2, [r2, #0]
   b92ea:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   b92ee:	6d42      	ldr	r2, [r0, #84]	; 0x54
   b92f0:	6859      	ldr	r1, [r3, #4]
   b92f2:	4790      	blx	r2
  const OpData& data = *(static_cast<OpData*>(node->user_data));

  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kDepthwiseConvOutputTensor);
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvInputTensor);
   b92f4:	4b22      	ldr	r3, [pc, #136]	; (b9380 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc0>)
  return GetMutableEvalInput(context, node, index);
   b92f6:	4629      	mov	r1, r5
   b92f8:	681a      	ldr	r2, [r3, #0]
  return context->GetEvalTensor(context, node->outputs->data[index]);
   b92fa:	4607      	mov	r7, r0
  return GetMutableEvalInput(context, node, index);
   b92fc:	4620      	mov	r0, r4
   b92fe:	f7ff f935 	bl	b856c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvWeightsTensor);
   b9302:	4b20      	ldr	r3, [pc, #128]	; (b9384 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc4>)
   b9304:	4606      	mov	r6, r0
   b9306:	681a      	ldr	r2, [r3, #0]
   b9308:	4629      	mov	r1, r5
   b930a:	4620      	mov	r0, r4
   b930c:	f7ff f92e 	bl	b856c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
inline int NumDimensions(const TfLiteEvalTensor* t) { return t->dims->size; }
inline int SizeOfDimension(const TfLiteEvalTensor* t, int dim) {
  return t->dims->data[dim];
}

inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   b9310:	682b      	ldr	r3, [r5, #0]
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
          ? tflite::micro::GetEvalInput(context, node, kDepthwiseConvBiasTensor)
   b9312:	681b      	ldr	r3, [r3, #0]
   b9314:	2b03      	cmp	r3, #3
   b9316:	4682      	mov	sl, r0
   b9318:	d115      	bne.n	b9346 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x86>
   b931a:	4b1b      	ldr	r3, [pc, #108]	; (b9388 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc8>)
   b931c:	4629      	mov	r1, r5
   b931e:	681a      	ldr	r2, [r3, #0]
   b9320:	4620      	mov	r0, r4
   b9322:	f7ff f923 	bl	b856c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
          : nullptr;

  switch (input->type) {  // Already know in/out types are same.
   b9326:	7a35      	ldrb	r5, [r6, #8]
   b9328:	2d01      	cmp	r5, #1
   b932a:	d00e      	beq.n	b934a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8a>
   b932c:	2d09      	cmp	r5, #9
   b932e:	d019      	beq.n	b9364 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa4>

      EvalQuantizedPerChannel(context, node, params, data, input, filter, bias,
                              output);
      break;
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   b9330:	4628      	mov	r0, r5
   b9332:	6967      	ldr	r7, [r4, #20]
   b9334:	f7fa fee6 	bl	b4104 <TfLiteTypeGetName>
   b9338:	7a33      	ldrb	r3, [r6, #8]
   b933a:	4914      	ldr	r1, [pc, #80]	; (b938c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xcc>)
   b933c:	4602      	mov	r2, r0
   b933e:	4620      	mov	r0, r4
   b9340:	47b8      	blx	r7
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
   b9342:	2501      	movs	r5, #1
   b9344:	e00a      	b.n	b935c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9c>
          ? tflite::micro::GetEvalInput(context, node, kDepthwiseConvBiasTensor)
   b9346:	2000      	movs	r0, #0
   b9348:	e7ed      	b.n	b9326 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x66>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   b934a:	4628      	mov	r0, r5
   b934c:	6967      	ldr	r7, [r4, #20]
   b934e:	f7fa fed9 	bl	b4104 <TfLiteTypeGetName>
   b9352:	7a33      	ldrb	r3, [r6, #8]
   b9354:	490d      	ldr	r1, [pc, #52]	; (b938c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xcc>)
   b9356:	4602      	mov	r2, r0
   b9358:	4620      	mov	r0, r4
   b935a:	47b8      	blx	r7
  }
  return kTfLiteOk;
}
   b935c:	4628      	mov	r0, r5
   b935e:	b004      	add	sp, #16
   b9360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      EvalQuantizedPerChannel(context, node, params, data, input, filter, bias,
   b9364:	e9cd 0701 	strd	r0, r7, [sp, #4]
   b9368:	f8cd a000 	str.w	sl, [sp]
   b936c:	4633      	mov	r3, r6
   b936e:	464a      	mov	r2, r9
   b9370:	4641      	mov	r1, r8
   b9372:	4620      	mov	r0, r4
   b9374:	f7ff fd44 	bl	b8e00 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.constprop.0>
  return kTfLiteOk;
   b9378:	2500      	movs	r5, #0
   b937a:	e7ef      	b.n	b935c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9c>
   b937c:	000cb03c 	.word	0x000cb03c
   b9380:	000cb038 	.word	0x000cb038
   b9384:	000cb040 	.word	0x000cb040
   b9388:	000cb034 	.word	0x000cb034
   b938c:	000caf08 	.word	0x000caf08

000b9390 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>:

}  // namespace

TfLiteRegistration Register_DEPTHWISE_CONV_2D() {
   b9390:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   b9392:	4d05      	ldr	r5, [pc, #20]	; (b93a8 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv+0x18>)
TfLiteRegistration Register_DEPTHWISE_CONV_2D() {
   b9394:	4606      	mov	r6, r0
          /*version=*/0};
   b9396:	4604      	mov	r4, r0
   b9398:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b939a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b939c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   b93a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   b93a4:	4630      	mov	r0, r6
   b93a6:	bd70      	pop	{r4, r5, r6, pc}
   b93a8:	000caf24 	.word	0x000caf24

000b93ac <_ZN6tflite28DepthwiseConvParamsQuantizedERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>:
// Returns a DepthwiseParams struct with all the parameters needed for a
// quantized computation.
DepthwiseParams DepthwiseConvParamsQuantized(
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
  DepthwiseParams op_params;
  op_params.input_offset = -data.input_zero_point;
   b93ac:	6913      	ldr	r3, [r2, #16]
   b93ae:	425b      	negs	r3, r3
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
   b93b0:	b570      	push	{r4, r5, r6, lr}
  op_params.input_offset = -data.input_zero_point;
   b93b2:	6143      	str	r3, [r0, #20]
  op_params.weights_offset = -data.filter_zero_point;
   b93b4:	6953      	ldr	r3, [r2, #20]
   b93b6:	425b      	negs	r3, r3
   b93b8:	6183      	str	r3, [r0, #24]
  op_params.output_offset = data.output_zero_point;
   b93ba:	6993      	ldr	r3, [r2, #24]
   b93bc:	61c3      	str	r3, [r0, #28]
  op_params.output_multiplier = data.output_multiplier;
   b93be:	69d3      	ldr	r3, [r2, #28]
   b93c0:	6203      	str	r3, [r0, #32]
  op_params.output_shift = -data.output_shift;
   b93c2:	6a13      	ldr	r3, [r2, #32]
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
   b93c4:	4615      	mov	r5, r2
  op_params.output_shift = -data.output_shift;
   b93c6:	425b      	negs	r3, r3
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
   b93c8:	4604      	mov	r4, r0
  op_params.output_shift = -data.output_shift;
   b93ca:	6243      	str	r3, [r0, #36]	; 0x24
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
   b93cc:	7808      	ldrb	r0, [r1, #0]
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
   b93ce:	460e      	mov	r6, r1
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
   b93d0:	f7ff fab5 	bl	b893e <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
  op_params.padding_values.height = data.padding.height;
   b93d4:	686b      	ldr	r3, [r5, #4]
   b93d6:	80a3      	strh	r3, [r4, #4]
  op_params.padding_values.width = data.padding.width;
   b93d8:	682b      	ldr	r3, [r5, #0]
   b93da:	8063      	strh	r3, [r4, #2]
  op_params.stride_height = params.stride_height;
   b93dc:	68b3      	ldr	r3, [r6, #8]
   b93de:	81a3      	strh	r3, [r4, #12]
  op_params.stride_width = params.stride_width;
   b93e0:	6873      	ldr	r3, [r6, #4]
   b93e2:	8163      	strh	r3, [r4, #10]
  op_params.dilation_height_factor = params.dilation_height_factor;
   b93e4:	69b3      	ldr	r3, [r6, #24]
   b93e6:	8223      	strh	r3, [r4, #16]
  op_params.dilation_width_factor = params.dilation_width_factor;
   b93e8:	6973      	ldr	r3, [r6, #20]
   b93ea:	81e3      	strh	r3, [r4, #14]
  op_params.depth_multiplier = params.depth_multiplier;
   b93ec:	68f3      	ldr	r3, [r6, #12]
   b93ee:	8263      	strh	r3, [r4, #18]
  op_params.quantized_activation_min = data.output_activation_min;
   b93f0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   b93f2:	62a3      	str	r3, [r4, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
   b93f4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
   b93f6:	7020      	strb	r0, [r4, #0]
  op_params.quantized_activation_max = data.output_activation_max;
   b93f8:	62e3      	str	r3, [r4, #44]	; 0x2c
  return op_params;
}
   b93fa:	4620      	mov	r0, r4
   b93fc:	bd70      	pop	{r4, r5, r6, pc}
	...

000b9400 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:

TfLiteStatus CalculateOpDataDepthwiseConv(
    TfLiteContext* context, TfLiteNode* node,
    const TfLiteDepthwiseConvParams& params, int width, int height,
    int filter_width, int filter_height, int out_width, int out_height,
    const TfLiteType data_type, OpDataConv* data) {
   b9400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9404:	4699      	mov	r9, r3
  bool has_bias = node->inputs->size == 3;
   b9406:	680b      	ldr	r3, [r1, #0]
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
   b9408:	681b      	ldr	r3, [r3, #0]
    const TfLiteType data_type, OpDataConv* data) {
   b940a:	b08f      	sub	sp, #60	; 0x3c
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
   b940c:	3b02      	subs	r3, #2
   b940e:	2b01      	cmp	r3, #1
    const TfLiteType data_type, OpDataConv* data) {
   b9410:	9e1e      	ldr	r6, [sp, #120]	; 0x78
   b9412:	4605      	mov	r5, r0
   b9414:	4688      	mov	r8, r1
   b9416:	4617      	mov	r7, r2
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
   b9418:	d90b      	bls.n	b9432 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x32>
   b941a:	4b5f      	ldr	r3, [pc, #380]	; (b9598 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x198>)
   b941c:	9300      	str	r3, [sp, #0]
   b941e:	6944      	ldr	r4, [r0, #20]
   b9420:	4a5e      	ldr	r2, [pc, #376]	; (b959c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x19c>)
   b9422:	495f      	ldr	r1, [pc, #380]	; (b95a0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a0>)
   b9424:	2358      	movs	r3, #88	; 0x58
   b9426:	47a0      	blx	r4
   b9428:	2401      	movs	r4, #1
  data->input_zero_point = input->params.zero_point;
  data->filter_zero_point = filter->params.zero_point;
  data->output_zero_point = output->params.zero_point;

  return kTfLiteOk;
}
   b942a:	4620      	mov	r0, r4
   b942c:	b00f      	add	sp, #60	; 0x3c
   b942e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
   b9432:	684b      	ldr	r3, [r1, #4]
   b9434:	681c      	ldr	r4, [r3, #0]
   b9436:	2c01      	cmp	r4, #1
   b9438:	d00c      	beq.n	b9454 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x54>
   b943a:	2601      	movs	r6, #1
   b943c:	e9cd 4602 	strd	r4, r6, [sp, #8]
   b9440:	4b58      	ldr	r3, [pc, #352]	; (b95a4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a4>)
   b9442:	9301      	str	r3, [sp, #4]
   b9444:	4b58      	ldr	r3, [pc, #352]	; (b95a8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a8>)
   b9446:	9300      	str	r3, [sp, #0]
   b9448:	6944      	ldr	r4, [r0, #20]
   b944a:	4a54      	ldr	r2, [pc, #336]	; (b959c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x19c>)
   b944c:	4957      	ldr	r1, [pc, #348]	; (b95ac <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1ac>)
   b944e:	2359      	movs	r3, #89	; 0x59
   b9450:	47a0      	blx	r4
   b9452:	e7e9      	b.n	b9428 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x28>
      params.stride_height, params.stride_width, params.dilation_height_factor,
   b9454:	e9d2 3a01 	ldrd	r3, sl, [r2, #4]
  auto padding = params.padding;
   b9458:	f892 b000 	ldrb.w	fp, [r2]
      params.stride_height, params.stride_width, params.dilation_height_factor,
   b945c:	930a      	str	r3, [sp, #40]	; 0x28
   b945e:	6993      	ldr	r3, [r2, #24]
   b9460:	930b      	str	r3, [sp, #44]	; 0x2c
      params.dilation_width_factor, height, width, filter_height, filter_width,
   b9462:	6953      	ldr	r3, [r2, #20]
   b9464:	930c      	str	r3, [sp, #48]	; 0x30

inline TfLitePaddingValues ComputePaddingHeightWidth(
    int stride_height, int stride_width, int dilation_rate_height,
    int dilation_rate_width, int in_height, int in_width, int filter_height,
    int filter_width, TfLitePadding padding, int* out_height, int* out_width) {
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
   b9466:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b9468:	9300      	str	r3, [sp, #0]
   b946a:	4649      	mov	r1, r9
   b946c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b946e:	4658      	mov	r0, fp
   b9470:	f7ff fa9c 	bl	b89ac <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
                              dilation_rate_width);
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
   b9474:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9476:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   b9478:	9918      	ldr	r1, [sp, #96]	; 0x60
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
   b947a:	900d      	str	r0, [sp, #52]	; 0x34
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
   b947c:	9300      	str	r3, [sp, #0]
   b947e:	4658      	mov	r0, fp
   b9480:	4653      	mov	r3, sl
   b9482:	f7ff fa93 	bl	b89ac <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   b9486:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   b9488:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b948a:	3b01      	subs	r3, #1
   b948c:	4353      	muls	r3, r2
   b948e:	3301      	adds	r3, #1
      ((out_size - 1) * stride + effective_filter_size - in_size);
   b9490:	3801      	subs	r0, #1
   b9492:	fb0a 3a00 	mla	sl, sl, r0, r3
  int total_padding =
   b9496:	9b18      	ldr	r3, [sp, #96]	; 0x60
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   b9498:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  int total_padding =
   b949a:	ebaa 0a03 	sub.w	sl, sl, r3
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   b949e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b94a0:	3b01      	subs	r3, #1
   b94a2:	4353      	muls	r3, r2
      ((out_size - 1) * stride + effective_filter_size - in_size);
   b94a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b94a6:	1e50      	subs	r0, r2, #1
   b94a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   b94aa:	3301      	adds	r3, #1
      ((out_size - 1) * stride + effective_filter_size - in_size);
   b94ac:	fb02 3300 	mla	r3, r2, r0, r3
  int total_padding =
   b94b0:	eba3 0309 	sub.w	r3, r3, r9
  total_padding = total_padding > 0 ? total_padding : 0;
   b94b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b94b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
  return total_padding / 2;
   b94bc:	105a      	asrs	r2, r3, #1
  *offset = total_padding % 2;
   b94be:	f003 0301 	and.w	r3, r3, #1
      padding, &out_height, &out_width);
   b94c2:	60b3      	str	r3, [r6, #8]
   b94c4:	f00a 0301 	and.w	r3, sl, #1
   b94c8:	60f3      	str	r3, [r6, #12]
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
   b94ca:	4b39      	ldr	r3, [pc, #228]	; (b95b0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1b0>)
      padding, &out_height, &out_width);
   b94cc:	6032      	str	r2, [r6, #0]
  return total_padding / 2;
   b94ce:	ea4f 026a 	mov.w	r2, sl, asr #1
   b94d2:	6072      	str	r2, [r6, #4]
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
   b94d4:	4641      	mov	r1, r8
   b94d6:	681a      	ldr	r2, [r3, #0]
   b94d8:	4628      	mov	r0, r5
   b94da:	f002 fb69 	bl	bbbb0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
   b94de:	4682      	mov	sl, r0
   b94e0:	b940      	cbnz	r0, b94f4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xf4>
   b94e2:	4b34      	ldr	r3, [pc, #208]	; (b95b4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1b4>)
   b94e4:	696e      	ldr	r6, [r5, #20]
   b94e6:	9300      	str	r3, [sp, #0]
   b94e8:	2363      	movs	r3, #99	; 0x63
  TF_LITE_ENSURE(context, filter != nullptr);
   b94ea:	4a2c      	ldr	r2, [pc, #176]	; (b959c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x19c>)
   b94ec:	492c      	ldr	r1, [pc, #176]	; (b95a0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a0>)
   b94ee:	4628      	mov	r0, r5
   b94f0:	47b0      	blx	r6
   b94f2:	e79a      	b.n	b942a <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
   b94f4:	4b30      	ldr	r3, [pc, #192]	; (b95b8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1b8>)
   b94f6:	4641      	mov	r1, r8
   b94f8:	681a      	ldr	r2, [r3, #0]
   b94fa:	4628      	mov	r0, r5
   b94fc:	f002 fb58 	bl	bbbb0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
   b9500:	4681      	mov	r9, r0
   b9502:	b920      	cbnz	r0, b950e <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x10e>
   b9504:	4b2d      	ldr	r3, [pc, #180]	; (b95bc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1bc>)
   b9506:	9300      	str	r3, [sp, #0]
   b9508:	696e      	ldr	r6, [r5, #20]
   b950a:	2365      	movs	r3, #101	; 0x65
   b950c:	e7ed      	b.n	b94ea <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xea>
      GetOptionalInputTensor(context, node, kConvBiasTensor);
   b950e:	4b2c      	ldr	r3, [pc, #176]	; (b95c0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1c0>)
   b9510:	4641      	mov	r1, r8
   b9512:	681a      	ldr	r2, [r3, #0]
   b9514:	4628      	mov	r0, r5
   b9516:	f002 fb5d 	bl	bbbd4 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
   b951a:	4a2a      	ldr	r2, [pc, #168]	; (b95c4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1c4>)
      GetOptionalInputTensor(context, node, kConvBiasTensor);
   b951c:	900a      	str	r0, [sp, #40]	; 0x28
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
   b951e:	4641      	mov	r1, r8
   b9520:	6812      	ldr	r2, [r2, #0]
   b9522:	4628      	mov	r0, r5
   b9524:	f002 fb47 	bl	bbbb6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
   b9528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b952a:	4680      	mov	r8, r0
   b952c:	b920      	cbnz	r0, b9538 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x138>
   b952e:	4b26      	ldr	r3, [pc, #152]	; (b95c8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1c8>)
   b9530:	9300      	str	r3, [sp, #0]
   b9532:	696e      	ldr	r6, [r5, #20]
   b9534:	2369      	movs	r3, #105	; 0x69
   b9536:	e7d8      	b.n	b94ea <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xea>
  if (data_type != kTfLiteFloat32) {
   b9538:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
   b953c:	2a01      	cmp	r2, #1
   b953e:	d10a      	bne.n	b9556 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x156>
  data->input_zero_point = input->params.zero_point;
   b9540:	f8da 3010 	ldr.w	r3, [sl, #16]
   b9544:	6133      	str	r3, [r6, #16]
  data->filter_zero_point = filter->params.zero_point;
   b9546:	f8d9 3010 	ldr.w	r3, [r9, #16]
   b954a:	6173      	str	r3, [r6, #20]
  data->output_zero_point = output->params.zero_point;
   b954c:	f8d8 3010 	ldr.w	r3, [r8, #16]
   b9550:	61b3      	str	r3, [r6, #24]
  return kTfLiteOk;
   b9552:	2400      	movs	r4, #0
   b9554:	e769      	b.n	b942a <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
    int output_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
   b9556:	f8d9 2008 	ldr.w	r2, [r9, #8]
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
   b955a:	6912      	ldr	r2, [r2, #16]
   b955c:	9208      	str	r2, [sp, #32]
   b955e:	6ab2      	ldr	r2, [r6, #40]	; 0x28
   b9560:	9207      	str	r2, [sp, #28]
   b9562:	6a72      	ldr	r2, [r6, #36]	; 0x24
   b9564:	9206      	str	r2, [sp, #24]
   b9566:	f106 0230 	add.w	r2, r6, #48	; 0x30
   b956a:	9205      	str	r2, [sp, #20]
   b956c:	f106 022c 	add.w	r2, r6, #44	; 0x2c
   b9570:	9204      	str	r2, [sp, #16]
   b9572:	f106 0220 	add.w	r2, r6, #32
   b9576:	9203      	str	r2, [sp, #12]
   b9578:	3710      	adds	r7, #16
   b957a:	f106 021c 	add.w	r2, r6, #28
   b957e:	e9cd 0700 	strd	r0, r7, [sp]
   b9582:	9202      	str	r2, [sp, #8]
   b9584:	4651      	mov	r1, sl
   b9586:	464a      	mov	r2, r9
   b9588:	4628      	mov	r0, r5
   b958a:	f002 fc11 	bl	bbdb0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>
   b958e:	4604      	mov	r4, r0
   b9590:	2800      	cmp	r0, #0
   b9592:	d0d5      	beq.n	b9540 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x140>
   b9594:	e749      	b.n	b942a <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
   b9596:	bf00      	nop
   b9598:	000caff9 	.word	0x000caff9
   b959c:	000caf44 	.word	0x000caf44
   b95a0:	000cad56 	.word	0x000cad56
   b95a4:	000cb85a 	.word	0x000cb85a
   b95a8:	000cb01d 	.word	0x000cb01d
   b95ac:	000cada2 	.word	0x000cada2
   b95b0:	000cb774 	.word	0x000cb774
   b95b4:	000cad6d 	.word	0x000cad6d
   b95b8:	000cb77c 	.word	0x000cb77c
   b95bc:	000cad7e 	.word	0x000cad7e
   b95c0:	000cb770 	.word	0x000cb770
   b95c4:	000cb778 	.word	0x000cb778
   b95c8:	000cad90 	.word	0x000cad90

000b95cc <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:
  return flat_size;
}

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
   b95cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  inline int32_t DimensionsCount() const { return size_; }
   b95d0:	6807      	ldr	r7, [r0, #0]
                                   const RuntimeShape& check_shape_0) {
   b95d2:	4604      	mov	r4, r0
   b95d4:	460d      	mov	r5, r1
   b95d6:	4690      	mov	r8, r2
  const int dims_count = shape.DimensionsCount();
  for (int i = 0; i < dims_count; ++i) {
   b95d8:	2600      	movs	r6, #0
   b95da:	42be      	cmp	r6, r7
   b95dc:	da10      	bge.n	b9600 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x34>
    if (i != skip_dim) {
   b95de:	42ae      	cmp	r6, r5
   b95e0:	d00c      	beq.n	b95fc <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x30>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   b95e2:	4631      	mov	r1, r6
   b95e4:	4620      	mov	r0, r4
   b95e6:	f7fe fffe 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
   b95ea:	4631      	mov	r1, r6
   b95ec:	4681      	mov	r9, r0
   b95ee:	4640      	mov	r0, r8
   b95f0:	f7fe fff9 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
   b95f4:	4581      	cmp	r9, r0
   b95f6:	d001      	beq.n	b95fc <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x30>
   b95f8:	f002 ffc8 	bl	bc58c <abort>
  for (int i = 0; i < dims_count; ++i) {
   b95fc:	3601      	adds	r6, #1
   b95fe:	e7ec      	b.n	b95da <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0xe>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   b9600:	2d00      	cmp	r5, #0
   b9602:	dbf9      	blt.n	b95f8 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x2c>
   b9604:	42bd      	cmp	r5, r7
   b9606:	daf7      	bge.n	b95f8 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x2c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   b9608:	2f05      	cmp	r7, #5
   b960a:	bfcc      	ite	gt
   b960c:	6864      	ldrgt	r4, [r4, #4]
   b960e:	3404      	addle	r4, #4
  int flat_size = 1;
   b9610:	2001      	movs	r0, #1
  for (int i = 0; i < dims_count; ++i) {
   b9612:	2300      	movs	r3, #0
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   b9614:	429d      	cmp	r5, r3
   b9616:	bf18      	it	ne
   b9618:	f854 2023 	ldrne.w	r2, [r4, r3, lsl #2]
  for (int i = 0; i < dims_count; ++i) {
   b961c:	f103 0301 	add.w	r3, r3, #1
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   b9620:	bf08      	it	eq
   b9622:	2201      	moveq	r2, #1
  for (int i = 0; i < dims_count; ++i) {
   b9624:	429f      	cmp	r7, r3
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   b9626:	fb02 f000 	mul.w	r0, r2, r0
  for (int i = 0; i < dims_count; ++i) {
   b962a:	dcf3      	bgt.n	b9614 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x48>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
}
   b962c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b9630 <_ZN6tflite16Register_SOFTMAXEv>:
  }
}

}  // namespace

TfLiteRegistration Register_SOFTMAX() {
   b9630:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   b9632:	4d05      	ldr	r5, [pc, #20]	; (b9648 <_ZN6tflite16Register_SOFTMAXEv+0x18>)
TfLiteRegistration Register_SOFTMAX() {
   b9634:	4606      	mov	r6, r0
          /*version=*/0};
   b9636:	4604      	mov	r4, r0
   b9638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b963a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b963c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   b9640:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   b9644:	4630      	mov	r0, r6
   b9646:	bd70      	pop	{r4, r5, r6, pc}
   b9648:	000cb048 	.word	0x000cb048

000b964c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
   b964c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9650:	460e      	mov	r6, r1
   b9652:	b093      	sub	sp, #76	; 0x4c
  TFLITE_DCHECK(context != nullptr);
   b9654:	4604      	mov	r4, r0
   b9656:	b908      	cbnz	r0, b965c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x10>
   b9658:	f002 ff98 	bl	bc58c <abort>
  TFLITE_DCHECK(node != nullptr);
   b965c:	2900      	cmp	r1, #0
   b965e:	d0fb      	beq.n	b9658 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc>
  return context->GetEvalTensor(context, node->inputs->data[index]);
   b9660:	680a      	ldr	r2, [r1, #0]
   b9662:	6d43      	ldr	r3, [r0, #84]	; 0x54
   b9664:	6851      	ldr	r1, [r2, #4]
   b9666:	4798      	blx	r3
  return context->GetEvalTensor(context, node->outputs->data[index]);
   b9668:	6872      	ldr	r2, [r6, #4]
   b966a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b966c:	6851      	ldr	r1, [r2, #4]
  return context->GetEvalTensor(context, node->inputs->data[index]);
   b966e:	4605      	mov	r5, r0
  return context->GetEvalTensor(context, node->outputs->data[index]);
   b9670:	4620      	mov	r0, r4
   b9672:	4798      	blx	r3
  TFLITE_DCHECK(node->user_data != nullptr);
   b9674:	6933      	ldr	r3, [r6, #16]
   b9676:	4607      	mov	r7, r0
   b9678:	2b00      	cmp	r3, #0
   b967a:	d0ed      	beq.n	b9658 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc>
  switch (input->type) {
   b967c:	7a2e      	ldrb	r6, [r5, #8]
   b967e:	1e72      	subs	r2, r6, #1
   b9680:	2a08      	cmp	r2, #8
   b9682:	d852      	bhi.n	b972a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xde>
   b9684:	e8df f002 	tbb	[pc, r2]
   b9688:	51435105 	.word	0x51435105
   b968c:	514e5151 	.word	0x514e5151
   b9690:	12          	.byte	0x12
   b9691:	00          	.byte	0x00
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   b9692:	2001      	movs	r0, #1
   b9694:	6967      	ldr	r7, [r4, #20]
   b9696:	f7fa fd35 	bl	b4104 <TfLiteTypeGetName>
   b969a:	7a2b      	ldrb	r3, [r5, #8]
   b969c:	4928      	ldr	r1, [pc, #160]	; (b9740 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xf4>)
   b969e:	4602      	mov	r2, r0
   b96a0:	4620      	mov	r0, r4
   b96a2:	47b8      	blx	r7
}
   b96a4:	4630      	mov	r0, r6
   b96a6:	b013      	add	sp, #76	; 0x4c
   b96a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (output->type == kTfLiteInt16) {
   b96ac:	7a02      	ldrb	r2, [r0, #8]
   b96ae:	2a07      	cmp	r2, #7
   b96b0:	d02b      	beq.n	b970a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xbe>
      const auto input_shape = tflite::micro::GetTensorShape(input);
   b96b2:	4629      	mov	r1, r5
   b96b4:	a806      	add	r0, sp, #24
  const SoftmaxParams data =
   b96b6:	e9d3 6802 	ldrd	r6, r8, [r3, #8]
   b96ba:	f8d3 9018 	ldr.w	r9, [r3, #24]
      const auto input_shape = tflite::micro::GetTensorShape(input);
   b96be:	f7ff f91a 	bl	b88f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const auto output_shape = tflite::micro::GetTensorShape(output);
   b96c2:	4639      	mov	r1, r7
   b96c4:	a80c      	add	r0, sp, #48	; 0x30
   b96c6:	f7ff f916 	bl	b88f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const int trailing_dim = input_shape.DimensionsCount() - 1;
   b96ca:	9b06      	ldr	r3, [sp, #24]
   b96cc:	3b01      	subs	r3, #1
          MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   b96ce:	4619      	mov	r1, r3
   b96d0:	aa0c      	add	r2, sp, #48	; 0x30
   b96d2:	a806      	add	r0, sp, #24
   b96d4:	9305      	str	r3, [sp, #20]
   b96d6:	f7ff ff79 	bl	b95cc <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
          MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   b96da:	9b05      	ldr	r3, [sp, #20]
          MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   b96dc:	4604      	mov	r4, r0
          MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   b96de:	4619      	mov	r1, r3
   b96e0:	aa0c      	add	r2, sp, #48	; 0x30
   b96e2:	a806      	add	r0, sp, #24
   b96e4:	f7ff f953 	bl	b898e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
   b96e8:	683b      	ldr	r3, [r7, #0]
   b96ea:	f8cd 8000 	str.w	r8, [sp]
   b96ee:	e9cd 9301 	strd	r9, r3, [sp, #4]
          MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   b96f2:	4602      	mov	r2, r0
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
   b96f4:	4633      	mov	r3, r6
   b96f6:	6828      	ldr	r0, [r5, #0]
   b96f8:	4621      	mov	r1, r4
   b96fa:	f7fb fb25 	bl	b4d48 <arm_softmax_s8>
      const auto output_shape = tflite::micro::GetTensorShape(output);
   b96fe:	a80c      	add	r0, sp, #48	; 0x30
   b9700:	f7fe ff66 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
      const auto input_shape = tflite::micro::GetTensorShape(input);
   b9704:	a806      	add	r0, sp, #24
   b9706:	f7fe ff63 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
      return kTfLiteOk;
   b970a:	2600      	movs	r6, #0
   b970c:	e7ca      	b.n	b96a4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x58>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   b970e:	6966      	ldr	r6, [r4, #20]
   b9710:	2003      	movs	r0, #3
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   b9712:	f7fa fcf7 	bl	b4104 <TfLiteTypeGetName>
   b9716:	7a2b      	ldrb	r3, [r5, #8]
   b9718:	4909      	ldr	r1, [pc, #36]	; (b9740 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xf4>)
   b971a:	4602      	mov	r2, r0
   b971c:	4620      	mov	r0, r4
   b971e:	47b0      	blx	r6
      return kTfLiteError;
   b9720:	2601      	movs	r6, #1
   b9722:	e7bf      	b.n	b96a4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x58>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   b9724:	6966      	ldr	r6, [r4, #20]
   b9726:	2007      	movs	r0, #7
   b9728:	e7f3      	b.n	b9712 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc6>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   b972a:	4630      	mov	r0, r6
   b972c:	6967      	ldr	r7, [r4, #20]
   b972e:	f7fa fce9 	bl	b4104 <TfLiteTypeGetName>
   b9732:	7a2b      	ldrb	r3, [r5, #8]
   b9734:	4902      	ldr	r1, [pc, #8]	; (b9740 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xf4>)
   b9736:	4602      	mov	r2, r0
   b9738:	4620      	mov	r0, r4
   b973a:	47b8      	blx	r7
   b973c:	e7f0      	b.n	b9720 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xd4>
   b973e:	bf00      	nop
   b9740:	000caf08 	.word	0x000caf08

000b9744 <_ZN6tflite3ops5micro3pad4InitEP13TfLiteContextPKcj>:
  int32_t output_zero_point;
};

}  // namespace

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   b9744:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   b9746:	6b83      	ldr	r3, [r0, #56]	; 0x38
   b9748:	b90b      	cbnz	r3, b974e <_ZN6tflite3ops5micro3pad4InitEP13TfLiteContextPKcj+0xa>
   b974a:	f002 ff1f 	bl	bc58c <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
}
   b974e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
   b9752:	2130      	movs	r1, #48	; 0x30
   b9754:	4718      	bx	r3
	...

000b9758 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   b9758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b975c:	ed2d 8b02 	vpush	{d8}
  TFLITE_DCHECK(node->user_data != nullptr);
   b9760:	f8d1 b010 	ldr.w	fp, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   b9764:	b08f      	sub	sp, #60	; 0x3c
   b9766:	4604      	mov	r4, r0
   b9768:	460e      	mov	r6, r1
  TFLITE_DCHECK(node->user_data != nullptr);
   b976a:	f1bb 0f00 	cmp.w	fp, #0
   b976e:	d101      	bne.n	b9774 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x1c>
   b9770:	f002 ff0c 	bl	bc58c <abort>
   b9774:	680b      	ldr	r3, [r1, #0]
  OpData* data = static_cast<OpData*>(node->user_data);

  TF_LITE_ENSURE(context, NumInputs(node) == 2 || NumInputs(node) == 3);
   b9776:	681b      	ldr	r3, [r3, #0]
   b9778:	3b02      	subs	r3, #2
   b977a:	2b01      	cmp	r3, #1
   b977c:	d90d      	bls.n	b979a <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x42>
   b977e:	4ba5      	ldr	r3, [pc, #660]	; (b9a14 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2bc>)
   b9780:	9300      	str	r3, [sp, #0]
   b9782:	6944      	ldr	r4, [r0, #20]
   b9784:	4aa4      	ldr	r2, [pc, #656]	; (b9a18 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2c0>)
   b9786:	49a5      	ldr	r1, [pc, #660]	; (b9a1c <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2c4>)
   b9788:	2331      	movs	r3, #49	; 0x31
   b978a:	47a0      	blx	r4
   b978c:	2501      	movs	r5, #1
    }
    data->output_zero_point = output->params.zero_point;
  }

  return kTfLiteOk;
}
   b978e:	4628      	mov	r0, r5
   b9790:	b00f      	add	sp, #60	; 0x3c
   b9792:	ecbd 8b02 	vpop	{d8}
   b9796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   b979a:	684b      	ldr	r3, [r1, #4]
   b979c:	681d      	ldr	r5, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   b979e:	2d01      	cmp	r5, #1
   b97a0:	d00c      	beq.n	b97bc <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x64>
   b97a2:	2601      	movs	r6, #1
   b97a4:	e9cd 5602 	strd	r5, r6, [sp, #8]
   b97a8:	4b9d      	ldr	r3, [pc, #628]	; (b9a20 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
   b97aa:	9301      	str	r3, [sp, #4]
   b97ac:	4b9d      	ldr	r3, [pc, #628]	; (b9a24 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
   b97ae:	9300      	str	r3, [sp, #0]
   b97b0:	6944      	ldr	r4, [r0, #20]
   b97b2:	4a99      	ldr	r2, [pc, #612]	; (b9a18 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2c0>)
   b97b4:	499c      	ldr	r1, [pc, #624]	; (b9a28 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2d0>)
   b97b6:	2332      	movs	r3, #50	; 0x32
   b97b8:	47a0      	blx	r4
   b97ba:	e7e7      	b.n	b978c <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x34>
  const TfLiteTensor* input = GetInput(context, node, /*index=*/0);
   b97bc:	2200      	movs	r2, #0
   b97be:	f002 f9f7 	bl	bbbb0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
   b97c2:	4680      	mov	r8, r0
   b97c4:	b940      	cbnz	r0, b97d8 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
   b97c6:	4b99      	ldr	r3, [pc, #612]	; (b9a2c <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2d4>)
   b97c8:	9300      	str	r3, [sp, #0]
   b97ca:	6966      	ldr	r6, [r4, #20]
   b97cc:	2335      	movs	r3, #53	; 0x35
  TF_LITE_ENSURE(context, paddings != nullptr);
   b97ce:	4a92      	ldr	r2, [pc, #584]	; (b9a18 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2c0>)
   b97d0:	4992      	ldr	r1, [pc, #584]	; (b9a1c <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2c4>)
   b97d2:	4620      	mov	r0, r4
   b97d4:	47b0      	blx	r6
   b97d6:	e7da      	b.n	b978e <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x36>
  const TfLiteTensor* paddings = GetInput(context, node, /*index=*/1);
   b97d8:	462a      	mov	r2, r5
   b97da:	4631      	mov	r1, r6
   b97dc:	4620      	mov	r0, r4
   b97de:	f002 f9e7 	bl	bbbb0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, paddings != nullptr);
   b97e2:	4682      	mov	sl, r0
   b97e4:	b920      	cbnz	r0, b97f0 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x98>
   b97e6:	4b92      	ldr	r3, [pc, #584]	; (b9a30 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2d8>)
   b97e8:	9300      	str	r3, [sp, #0]
   b97ea:	6966      	ldr	r6, [r4, #20]
   b97ec:	2337      	movs	r3, #55	; 0x37
   b97ee:	e7ee      	b.n	b97ce <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x76>
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   b97f0:	6833      	ldr	r3, [r6, #0]
      NumInputs(node) == 3 ? GetInput(context, node, /*index=*/2) : nullptr;
   b97f2:	681b      	ldr	r3, [r3, #0]
   b97f4:	2b03      	cmp	r3, #3
   b97f6:	d115      	bne.n	b9824 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0xcc>
   b97f8:	2202      	movs	r2, #2
   b97fa:	4631      	mov	r1, r6
   b97fc:	4620      	mov	r0, r4
   b97fe:	f002 f9d7 	bl	bbbb0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
   b9802:	4607      	mov	r7, r0
  TfLiteTensor* output = GetOutput(context, node, /*index=*/0);
   b9804:	4631      	mov	r1, r6
   b9806:	2200      	movs	r2, #0
   b9808:	4620      	mov	r0, r4
   b980a:	f002 f9d4 	bl	bbbb6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
   b980e:	4606      	mov	r6, r0
   b9810:	b950      	cbnz	r0, b9828 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>
   b9812:	4b88      	ldr	r3, [pc, #544]	; (b9a34 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2dc>)
   b9814:	9300      	str	r3, [sp, #0]
   b9816:	6965      	ldr	r5, [r4, #20]
   b9818:	233b      	movs	r3, #59	; 0x3b
  TF_LITE_ENSURE(context, IsConstantTensor(paddings));
   b981a:	4a7f      	ldr	r2, [pc, #508]	; (b9a18 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2c0>)
   b981c:	497f      	ldr	r1, [pc, #508]	; (b9a1c <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2c4>)
   b981e:	4620      	mov	r0, r4
   b9820:	47a8      	blx	r5
   b9822:	e7b3      	b.n	b978c <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x34>
      NumInputs(node) == 3 ? GetInput(context, node, /*index=*/2) : nullptr;
   b9824:	2700      	movs	r7, #0
   b9826:	e7ed      	b.n	b9804 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0xac>
  TF_LITE_ENSURE_EQ(context, input->type, output->type);
   b9828:	f898 3000 	ldrb.w	r3, [r8]
   b982c:	7802      	ldrb	r2, [r0, #0]
   b982e:	4293      	cmp	r3, r2
   b9830:	d00c      	beq.n	b984c <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0xf4>
   b9832:	e9cd 3202 	strd	r3, r2, [sp, #8]
   b9836:	4b80      	ldr	r3, [pc, #512]	; (b9a38 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
   b9838:	9301      	str	r3, [sp, #4]
   b983a:	4b80      	ldr	r3, [pc, #512]	; (b9a3c <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2e4>)
   b983c:	9300      	str	r3, [sp, #0]
   b983e:	6965      	ldr	r5, [r4, #20]
   b9840:	233d      	movs	r3, #61	; 0x3d
    TF_LITE_ENSURE_EQ(context, input->type, constant_values->type);
   b9842:	4a75      	ldr	r2, [pc, #468]	; (b9a18 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2c0>)
   b9844:	4978      	ldr	r1, [pc, #480]	; (b9a28 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2d0>)
   b9846:	4620      	mov	r0, r4
   b9848:	47a8      	blx	r5
   b984a:	e79f      	b.n	b978c <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x34>
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   b984c:	f8d8 2008 	ldr.w	r2, [r8, #8]
  TF_LITE_ENSURE(context, NumDimensions(input) <=
   b9850:	6812      	ldr	r2, [r2, #0]
   b9852:	2a04      	cmp	r2, #4
   b9854:	dd04      	ble.n	b9860 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x108>
   b9856:	4b7a      	ldr	r3, [pc, #488]	; (b9a40 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
   b9858:	9300      	str	r3, [sp, #0]
   b985a:	6965      	ldr	r5, [r4, #20]
   b985c:	2340      	movs	r3, #64	; 0x40
   b985e:	e7dc      	b.n	b981a <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0xc2>
  if (constant_values != nullptr) {
   b9860:	2f00      	cmp	r7, #0
   b9862:	d031      	beq.n	b98c8 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x170>
    TF_LITE_ENSURE_EQ(context, input->type, constant_values->type);
   b9864:	783a      	ldrb	r2, [r7, #0]
   b9866:	4293      	cmp	r3, r2
   b9868:	d008      	beq.n	b987c <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x124>
   b986a:	e9cd 3202 	strd	r3, r2, [sp, #8]
   b986e:	4b75      	ldr	r3, [pc, #468]	; (b9a44 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
   b9870:	9301      	str	r3, [sp, #4]
   b9872:	4b72      	ldr	r3, [pc, #456]	; (b9a3c <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2e4>)
   b9874:	9300      	str	r3, [sp, #0]
   b9876:	6965      	ldr	r5, [r4, #20]
   b9878:	2344      	movs	r3, #68	; 0x44
   b987a:	e7e2      	b.n	b9842 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0xea>
}
#endif  // TF_LITE_STATIC_MEMORY

inline int64_t NumElements(const TfLiteIntArray* dims) {
  int64_t count = 1;
  for (int i = 0; i < dims->size; ++i) {
   b987c:	f8d7 c008 	ldr.w	ip, [r7, #8]
   b9880:	2000      	movs	r0, #0
   b9882:	f85c eb04 	ldr.w	lr, [ip], #4
  int64_t count = 1;
   b9886:	2201      	movs	r2, #1
   b9888:	4603      	mov	r3, r0
  for (int i = 0; i < dims->size; ++i) {
   b988a:	4586      	cmp	lr, r0
   b988c:	dd0a      	ble.n	b98a4 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x14c>
    count *= dims->data[i];
   b988e:	f85c 5b04 	ldr.w	r5, [ip], #4
   b9892:	17e9      	asrs	r1, r5, #31
   b9894:	4351      	muls	r1, r2
   b9896:	fb05 1103 	mla	r1, r5, r3, r1
   b989a:	fba2 2305 	umull	r2, r3, r2, r5
   b989e:	440b      	add	r3, r1
  for (int i = 0; i < dims->size; ++i) {
   b98a0:	3001      	adds	r0, #1
   b98a2:	e7f2      	b.n	b988a <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x132>
    TF_LITE_ENSURE_EQ(context, NumElements(constant_values), 1);
   b98a4:	1e51      	subs	r1, r2, #1
   b98a6:	4319      	orrs	r1, r3
   b98a8:	d00e      	beq.n	b98c8 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x170>
   b98aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b98ae:	4b5c      	ldr	r3, [pc, #368]	; (b9a20 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
   b98b0:	9301      	str	r3, [sp, #4]
   b98b2:	2501      	movs	r5, #1
   b98b4:	4b64      	ldr	r3, [pc, #400]	; (b9a48 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2f0>)
   b98b6:	9300      	str	r3, [sp, #0]
   b98b8:	9504      	str	r5, [sp, #16]
   b98ba:	6966      	ldr	r6, [r4, #20]
   b98bc:	4a56      	ldr	r2, [pc, #344]	; (b9a18 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2c0>)
   b98be:	495a      	ldr	r1, [pc, #360]	; (b9a28 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2d0>)
   b98c0:	2346      	movs	r3, #70	; 0x46
   b98c2:	4620      	mov	r0, r4
   b98c4:	47b0      	blx	r6
   b98c6:	e762      	b.n	b978e <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x36>
  TF_LITE_ENSURE_EQ(context, GetTensorShape(paddings).FlatSize(),
   b98c8:	4651      	mov	r1, sl
   b98ca:	a808      	add	r0, sp, #32
   b98cc:	f7ff f904 	bl	b8ad8 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   b98d0:	a808      	add	r0, sp, #32
   b98d2:	f7fe fec2 	bl	b865a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   b98d6:	68b3      	ldr	r3, [r6, #8]
   b98d8:	681d      	ldr	r5, [r3, #0]
   b98da:	4681      	mov	r9, r0
   b98dc:	006d      	lsls	r5, r5, #1
   b98de:	a808      	add	r0, sp, #32
   b98e0:	f7fe fe76 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
   b98e4:	45a9      	cmp	r9, r5
   b98e6:	d019      	beq.n	b991c <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x1c4>
   b98e8:	4651      	mov	r1, sl
   b98ea:	a808      	add	r0, sp, #32
   b98ec:	6965      	ldr	r5, [r4, #20]
   b98ee:	f7ff f8f3 	bl	b8ad8 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   b98f2:	a808      	add	r0, sp, #32
   b98f4:	f7fe feb1 	bl	b865a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   b98f8:	68b3      	ldr	r3, [r6, #8]
   b98fa:	4a47      	ldr	r2, [pc, #284]	; (b9a18 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2c0>)
   b98fc:	681b      	ldr	r3, [r3, #0]
   b98fe:	494a      	ldr	r1, [pc, #296]	; (b9a28 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2d0>)
   b9900:	005b      	lsls	r3, r3, #1
   b9902:	e9cd 0302 	strd	r0, r3, [sp, #8]
   b9906:	4b51      	ldr	r3, [pc, #324]	; (b9a4c <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2f4>)
   b9908:	9301      	str	r3, [sp, #4]
   b990a:	4b51      	ldr	r3, [pc, #324]	; (b9a50 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2f8>)
   b990c:	9300      	str	r3, [sp, #0]
   b990e:	4620      	mov	r0, r4
   b9910:	234a      	movs	r3, #74	; 0x4a
   b9912:	47a8      	blx	r5
   b9914:	a808      	add	r0, sp, #32
   b9916:	f7fe fe5b 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
   b991a:	e737      	b.n	b978c <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x34>
// TODO(b/138199592): Introduce new query which checks for constant OR
// persistent-read-only, which would be useful for most tensor kernels that
// are potentially dynamic based on the input tensor value availability at the
// time of prepare.
inline bool IsConstantTensor(const TfLiteTensor* tensor) {
  return tensor->allocation_type == kTfLiteMmapRo;
   b991c:	f89a 5014 	ldrb.w	r5, [sl, #20]
  TF_LITE_ENSURE(context, IsConstantTensor(paddings));
   b9920:	2d01      	cmp	r5, #1
   b9922:	d004      	beq.n	b992e <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x1d6>
   b9924:	4b4b      	ldr	r3, [pc, #300]	; (b9a54 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2fc>)
   b9926:	9300      	str	r3, [sp, #0]
   b9928:	6965      	ldr	r5, [r4, #20]
   b992a:	2350      	movs	r3, #80	; 0x50
   b992c:	e775      	b.n	b981a <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0xc2>
  for (int i = 0; i < output->dims->size; i++) {
   b992e:	68b1      	ldr	r1, [r6, #8]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   b9930:	f8da 9004 	ldr.w	r9, [sl, #4]
   b9934:	f851 3b04 	ldr.w	r3, [r1], #4
   b9938:	9307      	str	r3, [sp, #28]
        input->dims->data[i] + paddings_data[i * 2] + paddings_data[i * 2 + 1];
   b993a:	f109 0c04 	add.w	ip, r9, #4
  for (int i = 0; i < output->dims->size; i++) {
   b993e:	2300      	movs	r3, #0
   b9940:	9a07      	ldr	r2, [sp, #28]
   b9942:	429a      	cmp	r2, r3
   b9944:	dd1e      	ble.n	b9984 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
        input->dims->data[i] + paddings_data[i * 2] + paddings_data[i * 2 + 1];
   b9946:	f8d8 2008 	ldr.w	r2, [r8, #8]
    int output_dim = output->dims->data[i];
   b994a:	f851 0b04 	ldr.w	r0, [r1], #4
        input->dims->data[i] + paddings_data[i * 2] + paddings_data[i * 2 + 1];
   b994e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   b9952:	f8d2 e004 	ldr.w	lr, [r2, #4]
   b9956:	f859 2033 	ldr.w	r2, [r9, r3, lsl #3]
   b995a:	4496      	add	lr, r2
    int expected_dim =
   b995c:	f85c 2033 	ldr.w	r2, [ip, r3, lsl #3]
   b9960:	4472      	add	r2, lr
    TF_LITE_ENSURE_EQ(context, output_dim, expected_dim);
   b9962:	4290      	cmp	r0, r2
   b9964:	d00c      	beq.n	b9980 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x228>
   b9966:	4b3c      	ldr	r3, [pc, #240]	; (b9a58 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x300>)
   b9968:	9301      	str	r3, [sp, #4]
   b996a:	e9cd 0202 	strd	r0, r2, [sp, #8]
   b996e:	4b3b      	ldr	r3, [pc, #236]	; (b9a5c <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x304>)
   b9970:	9300      	str	r3, [sp, #0]
   b9972:	6966      	ldr	r6, [r4, #20]
   b9974:	2356      	movs	r3, #86	; 0x56
      TF_LITE_ENSURE_EQ(context, output->params.zero_point,
   b9976:	4a28      	ldr	r2, [pc, #160]	; (b9a18 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2c0>)
   b9978:	492b      	ldr	r1, [pc, #172]	; (b9a28 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2d0>)
   b997a:	4620      	mov	r0, r4
   b997c:	47b0      	blx	r6
   b997e:	e706      	b.n	b978e <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x36>
  for (int i = 0; i < output->dims->size; i++) {
   b9980:	3301      	adds	r3, #1
   b9982:	e7dd      	b.n	b9940 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x1e8>
  data->params.resizing_category = ResizingCategory::kGenericResize;
   b9984:	2302      	movs	r3, #2
  const int paddings_total = GetTensorShape(paddings).FlatSize();
   b9986:	4651      	mov	r1, sl
  data->params.resizing_category = ResizingCategory::kGenericResize;
   b9988:	f88b 3028 	strb.w	r3, [fp, #40]	; 0x28
  const int paddings_total = GetTensorShape(paddings).FlatSize();
   b998c:	a808      	add	r0, sp, #32
   b998e:	f7ff f8a3 	bl	b8ad8 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   b9992:	a808      	add	r0, sp, #32
   b9994:	f7fe fe61 	bl	b865a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   b9998:	4682      	mov	sl, r0
   b999a:	a808      	add	r0, sp, #32
   b999c:	f7fe fe18 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
  if (paddings_total == 8 && (paddings_data[0] == 0 && paddings_data[1] == 0) &&
   b99a0:	f1ba 0f08 	cmp.w	sl, #8
   b99a4:	d10e      	bne.n	b99c4 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x26c>
   b99a6:	f8d9 3000 	ldr.w	r3, [r9]
   b99aa:	b95b      	cbnz	r3, b99c4 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x26c>
   b99ac:	f8d9 3004 	ldr.w	r3, [r9, #4]
   b99b0:	b943      	cbnz	r3, b99c4 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x26c>
   b99b2:	f8d9 3018 	ldr.w	r3, [r9, #24]
   b99b6:	b92b      	cbnz	r3, b99c4 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x26c>
      (paddings_data[6] == 0 && paddings_data[7] == 0)) {
   b99b8:	f8d9 301c 	ldr.w	r3, [r9, #28]
   b99bc:	b913      	cbnz	r3, b99c4 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x26c>
    data->params.resizing_category = ResizingCategory::kImageStyle;
   b99be:	2301      	movs	r3, #1
   b99c0:	f88b 3028 	strb.w	r3, [fp, #40]	; 0x28
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   b99c4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b99c8:	681b      	ldr	r3, [r3, #0]
  data->params.left_padding_count = num_input_dimensions;
   b99ca:	b25a      	sxtb	r2, r3
  for (int idx = num_input_dimensions - 1; idx >= 0; --idx) {
   b99cc:	1e59      	subs	r1, r3, #1
  data->params.left_padding_count = num_input_dimensions;
   b99ce:	f88b 2000 	strb.w	r2, [fp]
  data->params.right_padding_count = num_input_dimensions;
   b99d2:	f88b 2014 	strb.w	r2, [fp, #20]
  for (int idx = num_input_dimensions - 1; idx >= 0; --idx) {
   b99d6:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
    data->params.right_padding[idx] = paddings_data[idx * 2 + 1];
   b99da:	f109 0004 	add.w	r0, r9, #4
  for (int idx = num_input_dimensions - 1; idx >= 0; --idx) {
   b99de:	2900      	cmp	r1, #0
   b99e0:	db08      	blt.n	b99f4 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x29c>
    data->params.left_padding[idx] = paddings_data[idx * 2];
   b99e2:	f859 2031 	ldr.w	r2, [r9, r1, lsl #3]
   b99e6:	f843 2904 	str.w	r2, [r3], #-4
    data->params.right_padding[idx] = paddings_data[idx * 2 + 1];
   b99ea:	f850 2031 	ldr.w	r2, [r0, r1, lsl #3]
   b99ee:	619a      	str	r2, [r3, #24]
  for (int idx = num_input_dimensions - 1; idx >= 0; --idx) {
   b99f0:	3901      	subs	r1, #1
   b99f2:	e7f4      	b.n	b99de <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x286>
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8) {
   b99f4:	f898 3000 	ldrb.w	r3, [r8]
   b99f8:	2b09      	cmp	r3, #9
   b99fa:	d075      	beq.n	b9ae8 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x390>
   b99fc:	2b03      	cmp	r3, #3
   b99fe:	d069      	beq.n	b9ad4 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x37c>
  return kTfLiteOk;
   b9a00:	2500      	movs	r5, #0
   b9a02:	e6c4      	b.n	b978e <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x36>
        TF_LITE_ENSURE(context, output->params.zero_point <=
   b9a04:	2bff      	cmp	r3, #255	; 0xff
   b9a06:	dd61      	ble.n	b9acc <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x374>
   b9a08:	4b15      	ldr	r3, [pc, #84]	; (b9a60 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x308>)
   b9a0a:	9300      	str	r3, [sp, #0]
   b9a0c:	6966      	ldr	r6, [r4, #20]
   b9a0e:	2371      	movs	r3, #113	; 0x71
   b9a10:	e6dd      	b.n	b97ce <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x76>
   b9a12:	bf00      	nop
   b9a14:	000cb10b 	.word	0x000cb10b
   b9a18:	000cb068 	.word	0x000cb068
   b9a1c:	000cad56 	.word	0x000cad56
   b9a20:	000cb85a 	.word	0x000cb85a
   b9a24:	000cb138 	.word	0x000cb138
   b9a28:	000cada2 	.word	0x000cada2
   b9a2c:	000cad6d 	.word	0x000cad6d
   b9a30:	000cb149 	.word	0x000cb149
   b9a34:	000cad90 	.word	0x000cad90
   b9a38:	000cb15d 	.word	0x000cb15d
   b9a3c:	000cb16a 	.word	0x000cb16a
   b9a40:	000cb176 	.word	0x000cb176
   b9a44:	000cb1ba 	.word	0x000cb1ba
   b9a48:	000cb1d0 	.word	0x000cb1d0
   b9a4c:	000cb1ed 	.word	0x000cb1ed
   b9a50:	000cb204 	.word	0x000cb204
   b9a54:	000cb228 	.word	0x000cb228
   b9a58:	000cb243 	.word	0x000cb243
   b9a5c:	000cb250 	.word	0x000cb250
   b9a60:	000cb29c 	.word	0x000cb29c
        TF_LITE_ENSURE(context, output->params.zero_point <=
   b9a64:	2b7f      	cmp	r3, #127	; 0x7f
   b9a66:	dd31      	ble.n	b9acc <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x374>
   b9a68:	4b25      	ldr	r3, [pc, #148]	; (b9b00 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x3a8>)
   b9a6a:	9300      	str	r3, [sp, #0]
   b9a6c:	6966      	ldr	r6, [r4, #20]
   b9a6e:	2376      	movs	r3, #118	; 0x76
   b9a70:	e6ad      	b.n	b97ce <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x76>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point,
   b9a72:	6933      	ldr	r3, [r6, #16]
   b9a74:	693a      	ldr	r2, [r7, #16]
   b9a76:	4293      	cmp	r3, r2
   b9a78:	d008      	beq.n	b9a8c <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x334>
   b9a7a:	e9cd 3202 	strd	r3, r2, [sp, #8]
   b9a7e:	4b21      	ldr	r3, [pc, #132]	; (b9b04 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x3ac>)
   b9a80:	9301      	str	r3, [sp, #4]
   b9a82:	4b21      	ldr	r3, [pc, #132]	; (b9b08 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x3b0>)
   b9a84:	9300      	str	r3, [sp, #0]
   b9a86:	6966      	ldr	r6, [r4, #20]
   b9a88:	237c      	movs	r3, #124	; 0x7c
   b9a8a:	e774      	b.n	b9976 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x21e>
      TF_LITE_ENSURE_EQ(context, static_cast<double>(output->params.scale),
   b9a8c:	ed96 8a03 	vldr	s16, [r6, #12]
   b9a90:	edd7 7a03 	vldr	s15, [r7, #12]
   b9a94:	eeb4 8a67 	vcmp.f32	s16, s15
   b9a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b9a9c:	d016      	beq.n	b9acc <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x374>
   b9a9e:	ee17 0a90 	vmov	r0, s15
   b9aa2:	f004 f8db 	bl	bdc5c <__aeabi_f2d>
   b9aa6:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b9aaa:	ee18 0a10 	vmov	r0, s16
   b9aae:	f004 f8d5 	bl	bdc5c <__aeabi_f2d>
   b9ab2:	4b16      	ldr	r3, [pc, #88]	; (b9b0c <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x3b4>)
   b9ab4:	9301      	str	r3, [sp, #4]
   b9ab6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b9aba:	4b15      	ldr	r3, [pc, #84]	; (b9b10 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x3b8>)
   b9abc:	9300      	str	r3, [sp, #0]
   b9abe:	6966      	ldr	r6, [r4, #20]
   b9ac0:	4a14      	ldr	r2, [pc, #80]	; (b9b14 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x3bc>)
   b9ac2:	4915      	ldr	r1, [pc, #84]	; (b9b18 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x3c0>)
   b9ac4:	237e      	movs	r3, #126	; 0x7e
   b9ac6:	4620      	mov	r0, r4
   b9ac8:	47b0      	blx	r6
   b9aca:	e660      	b.n	b978e <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x36>
    data->output_zero_point = output->params.zero_point;
   b9acc:	6933      	ldr	r3, [r6, #16]
   b9ace:	f8cb 302c 	str.w	r3, [fp, #44]	; 0x2c
   b9ad2:	e795      	b.n	b9a00 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2a8>
    if (constant_values == nullptr) {
   b9ad4:	2f00      	cmp	r7, #0
   b9ad6:	d1cc      	bne.n	b9a72 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x31a>
        TF_LITE_ENSURE(context, output->params.zero_point >=
   b9ad8:	6933      	ldr	r3, [r6, #16]
   b9ada:	2b00      	cmp	r3, #0
   b9adc:	da92      	bge.n	b9a04 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2ac>
   b9ade:	4b0f      	ldr	r3, [pc, #60]	; (b9b1c <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x3c4>)
   b9ae0:	9300      	str	r3, [sp, #0]
   b9ae2:	6966      	ldr	r6, [r4, #20]
   b9ae4:	236f      	movs	r3, #111	; 0x6f
   b9ae6:	e672      	b.n	b97ce <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x76>
    if (constant_values == nullptr) {
   b9ae8:	2f00      	cmp	r7, #0
   b9aea:	d1c2      	bne.n	b9a72 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x31a>
        TF_LITE_ENSURE(context, output->params.zero_point >=
   b9aec:	6933      	ldr	r3, [r6, #16]
        TF_LITE_ENSURE(context, output->params.zero_point >=
   b9aee:	f113 0f80 	cmn.w	r3, #128	; 0x80
   b9af2:	dab7      	bge.n	b9a64 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x30c>
   b9af4:	4b0a      	ldr	r3, [pc, #40]	; (b9b20 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x3c8>)
   b9af6:	9300      	str	r3, [sp, #0]
   b9af8:	6966      	ldr	r6, [r4, #20]
   b9afa:	2374      	movs	r3, #116	; 0x74
   b9afc:	e667      	b.n	b97ce <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x76>
   b9afe:	bf00      	nop
   b9b00:	000cb31d 	.word	0x000cb31d
   b9b04:	000cb35d 	.word	0x000cb35d
   b9b08:	000cb380 	.word	0x000cb380
   b9b0c:	000cb39a 	.word	0x000cb39a
   b9b10:	000cb3cd 	.word	0x000cb3cd
   b9b14:	000cb068 	.word	0x000cb068
   b9b18:	000cada2 	.word	0x000cada2
   b9b1c:	000cb25b 	.word	0x000cb25b
   b9b20:	000cb2dd 	.word	0x000cb2dd

000b9b24 <_ZN6tflite3ops5micro12Register_PADEv>:
  return kTfLiteOk;
}

}  // namespace pad

TfLiteRegistration Register_PAD() {
   b9b24:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/pad::Prepare,
          /*invoke=*/pad::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   b9b26:	4d05      	ldr	r5, [pc, #20]	; (b9b3c <_ZN6tflite3ops5micro12Register_PADEv+0x18>)
TfLiteRegistration Register_PAD() {
   b9b28:	4606      	mov	r6, r0
          /*version=*/0};
   b9b2a:	4604      	mov	r4, r0
   b9b2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9b2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9b30:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   b9b34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   b9b38:	4630      	mov	r0, r6
   b9b3a:	bd70      	pop	{r4, r5, r6, pc}
   b9b3c:	000cb420 	.word	0x000cb420

000b9b40 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>:
// value.
//
// Note that two typenames are required, so that T=P=int32_t is considered a
// specialization distinct from P=int32_t.
template <typename T, typename P>
inline void PadImpl(const tflite::PadParams& op_params,
   b9b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9b44:	b09f      	sub	sp, #124	; 0x7c
   b9b46:	4607      	mov	r7, r0
   b9b48:	4615      	mov	r5, r2
   b9b4a:	461c      	mov	r4, r3
    return RuntimeShape(new_shape_size, shape, 1);
   b9b4c:	460a      	mov	r2, r1
   b9b4e:	2301      	movs	r3, #1
   b9b50:	2104      	movs	r1, #4
   b9b52:	a812      	add	r0, sp, #72	; 0x48
   b9b54:	f7fe fd91 	bl	b867a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   b9b58:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   b9b5a:	2301      	movs	r3, #1
   b9b5c:	2104      	movs	r1, #4
   b9b5e:	a818      	add	r0, sp, #96	; 0x60
   b9b60:	f7fe fd8b 	bl	b867a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
                    T* output_data) {
  const RuntimeShape ext_input_shape =
      RuntimeShape::ExtendedShape(PadKernelMaxDimensionCount(), input_shape);
  const RuntimeShape ext_output_shape =
      RuntimeShape::ExtendedShape(PadKernelMaxDimensionCount(), output_shape);
  TFLITE_DCHECK_LE(op_params.left_padding_count, PadKernelMaxDimensionCount());
   b9b64:	f997 2000 	ldrsb.w	r2, [r7]
   b9b68:	2a04      	cmp	r2, #4
   b9b6a:	dd01      	ble.n	b9b70 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x30>
   b9b6c:	f002 fd0e 	bl	bc58c <abort>
  TFLITE_DCHECK_LE(op_params.right_padding_count, PadKernelMaxDimensionCount());
   b9b70:	f997 8014 	ldrsb.w	r8, [r7, #20]
   b9b74:	f1b8 0f04 	cmp.w	r8, #4
   b9b78:	dcf8      	bgt.n	b9b6c <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2c>
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
    left_padding_copy[i] = 0;
  }
  for (int i = 0; i < op_params.left_padding_count; ++i) {
    left_padding_copy[i + PadKernelMaxDimensionCount() -
                      op_params.left_padding_count] = op_params.left_padding[i];
   b9b7a:	ab0a      	add	r3, sp, #40	; 0x28
   b9b7c:	f1c2 0004 	rsb	r0, r2, #4
   b9b80:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    left_padding_copy[i] = 0;
   b9b84:	2600      	movs	r6, #0
                      op_params.left_padding_count] = op_params.left_padding[i];
   b9b86:	1d39      	adds	r1, r7, #4
   b9b88:	0092      	lsls	r2, r2, #2
   b9b8a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    left_padding_copy[i] = 0;
   b9b8e:	e9cd 660a 	strd	r6, r6, [sp, #40]	; 0x28
   b9b92:	e9cd 660c 	strd	r6, r6, [sp, #48]	; 0x30
                      op_params.left_padding_count] = op_params.left_padding[i];
   b9b96:	f004 fe00 	bl	be79a <memcpy>
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
    right_padding_copy[i] = 0;
  }
  for (int i = 0; i < op_params.right_padding_count; ++i) {
    right_padding_copy[i + PadKernelMaxDimensionCount() -
                       op_params.right_padding_count] =
   b9b9a:	ab0e      	add	r3, sp, #56	; 0x38
   b9b9c:	f1c8 0004 	rsb	r0, r8, #4
   b9ba0:	ea28 72e8 	bic.w	r2, r8, r8, asr #31
   b9ba4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b9ba8:	0092      	lsls	r2, r2, #2
   b9baa:	f107 0118 	add.w	r1, r7, #24
    right_padding_copy[i] = 0;
   b9bae:	e9cd 660e 	strd	r6, r6, [sp, #56]	; 0x38
   b9bb2:	e9cd 6610 	strd	r6, r6, [sp, #64]	; 0x40
                       op_params.right_padding_count] =
   b9bb6:	f004 fdf0 	bl	be79a <memcpy>
        op_params.right_padding[i];
  }

  const int output_batch = ext_output_shape.Dims(0);
   b9bba:	4631      	mov	r1, r6
   b9bbc:	a818      	add	r0, sp, #96	; 0x60
   b9bbe:	f7fe fd12 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = ext_output_shape.Dims(1);
   b9bc2:	2101      	movs	r1, #1
  const int output_batch = ext_output_shape.Dims(0);
   b9bc4:	4680      	mov	r8, r0
  const int output_height = ext_output_shape.Dims(1);
   b9bc6:	a818      	add	r0, sp, #96	; 0x60
   b9bc8:	f7fe fd0d 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = ext_output_shape.Dims(2);
   b9bcc:	2102      	movs	r1, #2
  const int output_height = ext_output_shape.Dims(1);
   b9bce:	4681      	mov	r9, r0
  const int output_width = ext_output_shape.Dims(2);
   b9bd0:	a818      	add	r0, sp, #96	; 0x60
   b9bd2:	f7fe fd08 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_depth = ext_output_shape.Dims(3);
   b9bd6:	2103      	movs	r1, #3
  const int output_width = ext_output_shape.Dims(2);
   b9bd8:	4682      	mov	sl, r0
  const int output_depth = ext_output_shape.Dims(3);
   b9bda:	a818      	add	r0, sp, #96	; 0x60
   b9bdc:	f7fe fd03 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>

  const int left_b_padding = left_padding_copy[0];
   b9be0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b9be2:	9301      	str	r3, [sp, #4]
  const int left_h_padding = left_padding_copy[1];
   b9be4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9be6:	9302      	str	r3, [sp, #8]
  const int left_w_padding = left_padding_copy[2];
   b9be8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b9bea:	9303      	str	r3, [sp, #12]
  const int left_d_padding = left_padding_copy[3];
   b9bec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b9bee:	9304      	str	r3, [sp, #16]

  const int right_b_padding = right_padding_copy[0];
  const int right_h_padding = right_padding_copy[1];
  const int right_w_padding = right_padding_copy[2];
   b9bf0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   b9bf2:	9305      	str	r3, [sp, #20]
  const int right_d_padding = right_padding_copy[3];
   b9bf4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   b9bf6:	9306      	str	r3, [sp, #24]
   b9bf8:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   b9bfc:	009b      	lsls	r3, r3, #2
   b9bfe:	9307      	str	r3, [sp, #28]
  for (int out_b = 0; out_b < output_batch; ++out_b) {
    for (int out_h = 0; out_h < output_height; ++out_h) {
      for (int out_w = 0; out_w < output_width; ++out_w) {
        for (int out_d = 0; out_d < output_depth; ++out_d) {
          if (out_b < left_b_padding ||
              out_b >= output_batch - right_b_padding ||
   b9c00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  const T pad_value = *pad_value_ptr;
   b9c02:	6824      	ldr	r4, [r4, #0]
              out_b >= output_batch - right_b_padding ||
   b9c04:	eba8 0303 	sub.w	r3, r8, r3
   b9c08:	9309      	str	r3, [sp, #36]	; 0x24
              out_h < left_h_padding ||
              out_h >= output_height - right_h_padding ||
   b9c0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  const int output_depth = ext_output_shape.Dims(3);
   b9c0c:	4607      	mov	r7, r0
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   b9c0e:	4631      	mov	r1, r6
              out_h >= output_height - right_h_padding ||
   b9c10:	eba9 0e03 	sub.w	lr, r9, r3
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   b9c14:	4541      	cmp	r1, r8
   b9c16:	da39      	bge.n	b9c8c <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x14c>
    for (int out_h = 0; out_h < output_height; ++out_h) {
   b9c18:	f04f 0c00 	mov.w	ip, #0
   b9c1c:	45cc      	cmp	ip, r9
   b9c1e:	da33      	bge.n	b9c88 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x148>
              out_w < left_w_padding ||
              out_w >= output_width - right_w_padding ||
   b9c20:	9b05      	ldr	r3, [sp, #20]
   b9c22:	ebaa 0b03 	sub.w	fp, sl, r3
              out_d < left_d_padding ||
              out_d >= output_depth - right_d_padding) {
   b9c26:	9b06      	ldr	r3, [sp, #24]
   b9c28:	1afb      	subs	r3, r7, r3
      for (int out_w = 0; out_w < output_width; ++out_w) {
   b9c2a:	2000      	movs	r0, #0
              out_d >= output_depth - right_d_padding) {
   b9c2c:	9308      	str	r3, [sp, #32]
      for (int out_w = 0; out_w < output_width; ++out_w) {
   b9c2e:	4550      	cmp	r0, sl
   b9c30:	da27      	bge.n	b9c82 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   b9c32:	2600      	movs	r6, #0
   b9c34:	42be      	cmp	r6, r7
   b9c36:	da1e      	bge.n	b9c76 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x136>
          if (out_b < left_b_padding ||
   b9c38:	9b01      	ldr	r3, [sp, #4]
   b9c3a:	4299      	cmp	r1, r3
   b9c3c:	db19      	blt.n	b9c72 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x132>
   b9c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b9c40:	428b      	cmp	r3, r1
   b9c42:	dd16      	ble.n	b9c72 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x132>
              out_b >= output_batch - right_b_padding ||
   b9c44:	9b02      	ldr	r3, [sp, #8]
   b9c46:	459c      	cmp	ip, r3
   b9c48:	db13      	blt.n	b9c72 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x132>
              out_h < left_h_padding ||
   b9c4a:	45e6      	cmp	lr, ip
   b9c4c:	dd11      	ble.n	b9c72 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x132>
              out_h >= output_height - right_h_padding ||
   b9c4e:	9b03      	ldr	r3, [sp, #12]
   b9c50:	4298      	cmp	r0, r3
   b9c52:	db0e      	blt.n	b9c72 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x132>
              out_w < left_w_padding ||
   b9c54:	4583      	cmp	fp, r0
   b9c56:	dd0c      	ble.n	b9c72 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x132>
              out_w >= output_width - right_w_padding ||
   b9c58:	9b04      	ldr	r3, [sp, #16]
   b9c5a:	429e      	cmp	r6, r3
   b9c5c:	db09      	blt.n	b9c72 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x132>
              out_d < left_d_padding ||
   b9c5e:	9b08      	ldr	r3, [sp, #32]
   b9c60:	42b3      	cmp	r3, r6
   b9c62:	dd06      	ble.n	b9c72 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x132>
            *out_ptr++ = pad_value;
          } else {
            *out_ptr++ = *in_ptr++;
   b9c64:	f855 3b04 	ldr.w	r3, [r5], #4
   b9c68:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   b9c6a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   b9c6e:	3601      	adds	r6, #1
   b9c70:	e7e0      	b.n	b9c34 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xf4>
            *out_ptr++ = pad_value;
   b9c72:	4623      	mov	r3, r4
   b9c74:	e7f8      	b.n	b9c68 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x128>
   b9c76:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   b9c78:	9a07      	ldr	r2, [sp, #28]
   b9c7a:	4413      	add	r3, r2
   b9c7c:	9329      	str	r3, [sp, #164]	; 0xa4
      for (int out_w = 0; out_w < output_width; ++out_w) {
   b9c7e:	3001      	adds	r0, #1
   b9c80:	e7d5      	b.n	b9c2e <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xee>
    for (int out_h = 0; out_h < output_height; ++out_h) {
   b9c82:	f10c 0c01 	add.w	ip, ip, #1
   b9c86:	e7c9      	b.n	b9c1c <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xdc>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   b9c88:	3101      	adds	r1, #1
   b9c8a:	e7c3      	b.n	b9c14 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xd4>
  const RuntimeShape ext_output_shape =
   b9c8c:	a818      	add	r0, sp, #96	; 0x60
   b9c8e:	f7fe fc9f 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape ext_input_shape =
   b9c92:	a812      	add	r0, sp, #72	; 0x48
   b9c94:	f7fe fc9c 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
          }
        }
      }
    }
  }
}
   b9c98:	b01f      	add	sp, #124	; 0x7c
   b9c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b9c9e <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>:
inline void PadImpl(const tflite::PadParams& op_params,
   b9c9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9ca2:	b09d      	sub	sp, #116	; 0x74
   b9ca4:	4605      	mov	r5, r0
   b9ca6:	4614      	mov	r4, r2
   b9ca8:	461f      	mov	r7, r3
   b9caa:	460a      	mov	r2, r1
   b9cac:	2301      	movs	r3, #1
   b9cae:	2104      	movs	r1, #4
   b9cb0:	a810      	add	r0, sp, #64	; 0x40
   b9cb2:	f7fe fce2 	bl	b867a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   b9cb6:	9a26      	ldr	r2, [sp, #152]	; 0x98
   b9cb8:	2301      	movs	r3, #1
   b9cba:	2104      	movs	r1, #4
   b9cbc:	a816      	add	r0, sp, #88	; 0x58
   b9cbe:	f7fe fcdc 	bl	b867a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  TFLITE_DCHECK_LE(op_params.left_padding_count, PadKernelMaxDimensionCount());
   b9cc2:	f995 2000 	ldrsb.w	r2, [r5]
   b9cc6:	2a04      	cmp	r2, #4
   b9cc8:	dd01      	ble.n	b9cce <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x30>
   b9cca:	f002 fc5f 	bl	bc58c <abort>
  TFLITE_DCHECK_LE(op_params.right_padding_count, PadKernelMaxDimensionCount());
   b9cce:	f995 8014 	ldrsb.w	r8, [r5, #20]
   b9cd2:	f1b8 0f04 	cmp.w	r8, #4
   b9cd6:	dcf8      	bgt.n	b9cca <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2c>
                      op_params.left_padding_count] = op_params.left_padding[i];
   b9cd8:	ab08      	add	r3, sp, #32
   b9cda:	f1c2 0004 	rsb	r0, r2, #4
   b9cde:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    left_padding_copy[i] = 0;
   b9ce2:	2600      	movs	r6, #0
                      op_params.left_padding_count] = op_params.left_padding[i];
   b9ce4:	1d29      	adds	r1, r5, #4
   b9ce6:	0092      	lsls	r2, r2, #2
   b9ce8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    left_padding_copy[i] = 0;
   b9cec:	e9cd 6608 	strd	r6, r6, [sp, #32]
   b9cf0:	e9cd 660a 	strd	r6, r6, [sp, #40]	; 0x28
                      op_params.left_padding_count] = op_params.left_padding[i];
   b9cf4:	f004 fd51 	bl	be79a <memcpy>
                       op_params.right_padding_count] =
   b9cf8:	ab0c      	add	r3, sp, #48	; 0x30
   b9cfa:	f1c8 0004 	rsb	r0, r8, #4
   b9cfe:	ea28 72e8 	bic.w	r2, r8, r8, asr #31
   b9d02:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b9d06:	0092      	lsls	r2, r2, #2
   b9d08:	f105 0118 	add.w	r1, r5, #24
    right_padding_copy[i] = 0;
   b9d0c:	e9cd 660c 	strd	r6, r6, [sp, #48]	; 0x30
   b9d10:	e9cd 660e 	strd	r6, r6, [sp, #56]	; 0x38
                       op_params.right_padding_count] =
   b9d14:	f004 fd41 	bl	be79a <memcpy>
  const int output_batch = ext_output_shape.Dims(0);
   b9d18:	4631      	mov	r1, r6
   b9d1a:	a816      	add	r0, sp, #88	; 0x58
   b9d1c:	f7fe fc63 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = ext_output_shape.Dims(1);
   b9d20:	2101      	movs	r1, #1
  const int output_batch = ext_output_shape.Dims(0);
   b9d22:	4680      	mov	r8, r0
  const int output_height = ext_output_shape.Dims(1);
   b9d24:	a816      	add	r0, sp, #88	; 0x58
   b9d26:	f7fe fc5e 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = ext_output_shape.Dims(2);
   b9d2a:	2102      	movs	r1, #2
  const int output_height = ext_output_shape.Dims(1);
   b9d2c:	4681      	mov	r9, r0
  const int output_width = ext_output_shape.Dims(2);
   b9d2e:	a816      	add	r0, sp, #88	; 0x58
   b9d30:	f7fe fc59 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_depth = ext_output_shape.Dims(3);
   b9d34:	2103      	movs	r1, #3
  const int output_width = ext_output_shape.Dims(2);
   b9d36:	4682      	mov	sl, r0
  const int output_depth = ext_output_shape.Dims(3);
   b9d38:	a816      	add	r0, sp, #88	; 0x58
   b9d3a:	f7fe fc54 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int left_b_padding = left_padding_copy[0];
   b9d3e:	9b08      	ldr	r3, [sp, #32]
   b9d40:	9300      	str	r3, [sp, #0]
  const int left_h_padding = left_padding_copy[1];
   b9d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b9d44:	9301      	str	r3, [sp, #4]
  const int left_w_padding = left_padding_copy[2];
   b9d46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b9d48:	9302      	str	r3, [sp, #8]
  const int left_d_padding = left_padding_copy[3];
   b9d4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9d4c:	9303      	str	r3, [sp, #12]
  const int right_w_padding = right_padding_copy[2];
   b9d4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b9d50:	9304      	str	r3, [sp, #16]
  const int right_d_padding = right_padding_copy[3];
   b9d52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   b9d54:	9305      	str	r3, [sp, #20]
   b9d56:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   b9d5a:	009b      	lsls	r3, r3, #2
  const int output_depth = ext_output_shape.Dims(3);
   b9d5c:	4605      	mov	r5, r0
   b9d5e:	9306      	str	r3, [sp, #24]
              out_b >= output_batch - right_b_padding ||
   b9d60:	980c      	ldr	r0, [sp, #48]	; 0x30
              out_h >= output_height - right_h_padding ||
   b9d62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  const T pad_value = *pad_value_ptr;
   b9d64:	ed97 7a00 	vldr	s14, [r7]
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   b9d68:	4631      	mov	r1, r6
              out_b >= output_batch - right_b_padding ||
   b9d6a:	eba8 0000 	sub.w	r0, r8, r0
              out_h >= output_height - right_h_padding ||
   b9d6e:	eba9 0c03 	sub.w	ip, r9, r3
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   b9d72:	4541      	cmp	r1, r8
   b9d74:	da38      	bge.n	b9de8 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x14a>
    for (int out_h = 0; out_h < output_height; ++out_h) {
   b9d76:	2300      	movs	r3, #0
   b9d78:	454b      	cmp	r3, r9
   b9d7a:	da33      	bge.n	b9de4 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x146>
              out_w >= output_width - right_w_padding ||
   b9d7c:	9a04      	ldr	r2, [sp, #16]
   b9d7e:	ebaa 0b02 	sub.w	fp, sl, r2
              out_d >= output_depth - right_d_padding) {
   b9d82:	9a05      	ldr	r2, [sp, #20]
   b9d84:	1aaa      	subs	r2, r5, r2
      for (int out_w = 0; out_w < output_width; ++out_w) {
   b9d86:	2600      	movs	r6, #0
              out_d >= output_depth - right_d_padding) {
   b9d88:	9207      	str	r2, [sp, #28]
      for (int out_w = 0; out_w < output_width; ++out_w) {
   b9d8a:	4556      	cmp	r6, sl
   b9d8c:	da28      	bge.n	b9de0 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
   b9d8e:	f8dd e09c 	ldr.w	lr, [sp, #156]	; 0x9c
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   b9d92:	2700      	movs	r7, #0
   b9d94:	42af      	cmp	r7, r5
   b9d96:	da1d      	bge.n	b9dd4 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x136>
          if (out_b < left_b_padding ||
   b9d98:	9a00      	ldr	r2, [sp, #0]
   b9d9a:	4291      	cmp	r1, r2
   b9d9c:	db17      	blt.n	b9dce <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x130>
   b9d9e:	4288      	cmp	r0, r1
   b9da0:	dd15      	ble.n	b9dce <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x130>
              out_b >= output_batch - right_b_padding ||
   b9da2:	9a01      	ldr	r2, [sp, #4]
   b9da4:	4293      	cmp	r3, r2
   b9da6:	db12      	blt.n	b9dce <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x130>
              out_h < left_h_padding ||
   b9da8:	459c      	cmp	ip, r3
   b9daa:	dd10      	ble.n	b9dce <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x130>
              out_h >= output_height - right_h_padding ||
   b9dac:	9a02      	ldr	r2, [sp, #8]
   b9dae:	4296      	cmp	r6, r2
   b9db0:	db0d      	blt.n	b9dce <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x130>
              out_w < left_w_padding ||
   b9db2:	45b3      	cmp	fp, r6
   b9db4:	dd0b      	ble.n	b9dce <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x130>
              out_w >= output_width - right_w_padding ||
   b9db6:	9a03      	ldr	r2, [sp, #12]
   b9db8:	4297      	cmp	r7, r2
   b9dba:	db08      	blt.n	b9dce <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x130>
              out_d < left_d_padding ||
   b9dbc:	9a07      	ldr	r2, [sp, #28]
   b9dbe:	42ba      	cmp	r2, r7
   b9dc0:	dd05      	ble.n	b9dce <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x130>
            *out_ptr++ = *in_ptr++;
   b9dc2:	ecf4 7a01 	vldmia	r4!, {s15}
   b9dc6:	ecee 7a01 	vstmia	lr!, {s15}
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   b9dca:	3701      	adds	r7, #1
   b9dcc:	e7e2      	b.n	b9d94 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xf6>
            *out_ptr++ = pad_value;
   b9dce:	eef0 7a47 	vmov.f32	s15, s14
   b9dd2:	e7f8      	b.n	b9dc6 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x128>
   b9dd4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   b9dd6:	9f06      	ldr	r7, [sp, #24]
   b9dd8:	443a      	add	r2, r7
   b9dda:	9227      	str	r2, [sp, #156]	; 0x9c
      for (int out_w = 0; out_w < output_width; ++out_w) {
   b9ddc:	3601      	adds	r6, #1
   b9dde:	e7d4      	b.n	b9d8a <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xec>
    for (int out_h = 0; out_h < output_height; ++out_h) {
   b9de0:	3301      	adds	r3, #1
   b9de2:	e7c9      	b.n	b9d78 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xda>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   b9de4:	3101      	adds	r1, #1
   b9de6:	e7c4      	b.n	b9d72 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xd4>
  const RuntimeShape ext_output_shape =
   b9de8:	a816      	add	r0, sp, #88	; 0x58
   b9dea:	f7fe fbf1 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape ext_input_shape =
   b9dee:	a810      	add	r0, sp, #64	; 0x40
   b9df0:	f7fe fbee 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
}
   b9df4:	b01d      	add	sp, #116	; 0x74
   b9df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b9dfa <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>:
inline void PadImpl(const tflite::PadParams& op_params,
   b9dfa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9dfe:	b09f      	sub	sp, #124	; 0x7c
   b9e00:	4607      	mov	r7, r0
   b9e02:	4615      	mov	r5, r2
   b9e04:	461c      	mov	r4, r3
   b9e06:	460a      	mov	r2, r1
   b9e08:	2301      	movs	r3, #1
   b9e0a:	2104      	movs	r1, #4
   b9e0c:	a812      	add	r0, sp, #72	; 0x48
   b9e0e:	f7fe fc34 	bl	b867a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   b9e12:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   b9e14:	2301      	movs	r3, #1
   b9e16:	2104      	movs	r1, #4
   b9e18:	a818      	add	r0, sp, #96	; 0x60
   b9e1a:	f7fe fc2e 	bl	b867a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  TFLITE_DCHECK_LE(op_params.left_padding_count, PadKernelMaxDimensionCount());
   b9e1e:	f997 2000 	ldrsb.w	r2, [r7]
   b9e22:	2a04      	cmp	r2, #4
   b9e24:	dd01      	ble.n	b9e2a <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x30>
   b9e26:	f002 fbb1 	bl	bc58c <abort>
  TFLITE_DCHECK_LE(op_params.right_padding_count, PadKernelMaxDimensionCount());
   b9e2a:	f997 8014 	ldrsb.w	r8, [r7, #20]
   b9e2e:	f1b8 0f04 	cmp.w	r8, #4
   b9e32:	dcf8      	bgt.n	b9e26 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2c>
                      op_params.left_padding_count] = op_params.left_padding[i];
   b9e34:	ab0a      	add	r3, sp, #40	; 0x28
   b9e36:	f1c2 0004 	rsb	r0, r2, #4
   b9e3a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    left_padding_copy[i] = 0;
   b9e3e:	2600      	movs	r6, #0
                      op_params.left_padding_count] = op_params.left_padding[i];
   b9e40:	1d39      	adds	r1, r7, #4
   b9e42:	0092      	lsls	r2, r2, #2
   b9e44:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    left_padding_copy[i] = 0;
   b9e48:	e9cd 660a 	strd	r6, r6, [sp, #40]	; 0x28
   b9e4c:	e9cd 660c 	strd	r6, r6, [sp, #48]	; 0x30
                      op_params.left_padding_count] = op_params.left_padding[i];
   b9e50:	f004 fca3 	bl	be79a <memcpy>
                       op_params.right_padding_count] =
   b9e54:	ab0e      	add	r3, sp, #56	; 0x38
   b9e56:	f1c8 0004 	rsb	r0, r8, #4
   b9e5a:	ea28 72e8 	bic.w	r2, r8, r8, asr #31
   b9e5e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b9e62:	0092      	lsls	r2, r2, #2
   b9e64:	f107 0118 	add.w	r1, r7, #24
    right_padding_copy[i] = 0;
   b9e68:	e9cd 660e 	strd	r6, r6, [sp, #56]	; 0x38
   b9e6c:	e9cd 6610 	strd	r6, r6, [sp, #64]	; 0x40
                       op_params.right_padding_count] =
   b9e70:	f004 fc93 	bl	be79a <memcpy>
  const int output_batch = ext_output_shape.Dims(0);
   b9e74:	4631      	mov	r1, r6
   b9e76:	a818      	add	r0, sp, #96	; 0x60
   b9e78:	f7fe fbb5 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = ext_output_shape.Dims(1);
   b9e7c:	2101      	movs	r1, #1
  const int output_batch = ext_output_shape.Dims(0);
   b9e7e:	4680      	mov	r8, r0
  const int output_height = ext_output_shape.Dims(1);
   b9e80:	a818      	add	r0, sp, #96	; 0x60
   b9e82:	f7fe fbb0 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = ext_output_shape.Dims(2);
   b9e86:	2102      	movs	r1, #2
  const int output_height = ext_output_shape.Dims(1);
   b9e88:	4681      	mov	r9, r0
  const int output_width = ext_output_shape.Dims(2);
   b9e8a:	a818      	add	r0, sp, #96	; 0x60
   b9e8c:	f7fe fbab 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_depth = ext_output_shape.Dims(3);
   b9e90:	2103      	movs	r1, #3
  const int output_width = ext_output_shape.Dims(2);
   b9e92:	4682      	mov	sl, r0
  const int output_depth = ext_output_shape.Dims(3);
   b9e94:	a818      	add	r0, sp, #96	; 0x60
   b9e96:	f7fe fba6 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int left_b_padding = left_padding_copy[0];
   b9e9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b9e9c:	9300      	str	r3, [sp, #0]
  const int left_h_padding = left_padding_copy[1];
   b9e9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9ea0:	9301      	str	r3, [sp, #4]
  const int left_w_padding = left_padding_copy[2];
   b9ea2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b9ea4:	9302      	str	r3, [sp, #8]
  const int left_d_padding = left_padding_copy[3];
   b9ea6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b9ea8:	9303      	str	r3, [sp, #12]
  const int right_h_padding = right_padding_copy[1];
   b9eaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   b9eac:	9304      	str	r3, [sp, #16]
  const int right_w_padding = right_padding_copy[2];
   b9eae:	9b10      	ldr	r3, [sp, #64]	; 0x40
   b9eb0:	9305      	str	r3, [sp, #20]
  const int right_d_padding = right_padding_copy[3];
   b9eb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   b9eb4:	9306      	str	r3, [sp, #24]
              out_b >= output_batch - right_b_padding ||
   b9eb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  const T pad_value = *pad_value_ptr;
   b9eb8:	7824      	ldrb	r4, [r4, #0]
              out_b >= output_batch - right_b_padding ||
   b9eba:	eba8 0303 	sub.w	r3, r8, r3
   b9ebe:	9308      	str	r3, [sp, #32]
   b9ec0:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
  const int output_depth = ext_output_shape.Dims(3);
   b9ec4:	4607      	mov	r7, r0
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   b9ec6:	4631      	mov	r1, r6
   b9ec8:	9309      	str	r3, [sp, #36]	; 0x24
   b9eca:	4541      	cmp	r1, r8
   b9ecc:	da3b      	bge.n	b9f46 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x14c>
              out_h >= output_height - right_h_padding ||
   b9ece:	9b04      	ldr	r3, [sp, #16]
    for (int out_h = 0; out_h < output_height; ++out_h) {
   b9ed0:	f04f 0c00 	mov.w	ip, #0
              out_h >= output_height - right_h_padding ||
   b9ed4:	eba9 0e03 	sub.w	lr, r9, r3
    for (int out_h = 0; out_h < output_height; ++out_h) {
   b9ed8:	45cc      	cmp	ip, r9
   b9eda:	da32      	bge.n	b9f42 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x148>
              out_w >= output_width - right_w_padding ||
   b9edc:	9b05      	ldr	r3, [sp, #20]
      for (int out_w = 0; out_w < output_width; ++out_w) {
   b9ede:	2000      	movs	r0, #0
              out_w >= output_width - right_w_padding ||
   b9ee0:	ebaa 0b03 	sub.w	fp, sl, r3
      for (int out_w = 0; out_w < output_width; ++out_w) {
   b9ee4:	4550      	cmp	r0, sl
   b9ee6:	da29      	bge.n	b9f3c <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_d >= output_depth - right_d_padding) {
   b9ee8:	9b06      	ldr	r3, [sp, #24]
   b9eea:	1afb      	subs	r3, r7, r3
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   b9eec:	2600      	movs	r6, #0
              out_d >= output_depth - right_d_padding) {
   b9eee:	9307      	str	r3, [sp, #28]
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   b9ef0:	42be      	cmp	r6, r7
   b9ef2:	da1d      	bge.n	b9f30 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x136>
          if (out_b < left_b_padding ||
   b9ef4:	9b00      	ldr	r3, [sp, #0]
   b9ef6:	4299      	cmp	r1, r3
   b9ef8:	db18      	blt.n	b9f2c <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x132>
   b9efa:	9b08      	ldr	r3, [sp, #32]
   b9efc:	428b      	cmp	r3, r1
   b9efe:	dd15      	ble.n	b9f2c <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x132>
              out_b >= output_batch - right_b_padding ||
   b9f00:	9b01      	ldr	r3, [sp, #4]
   b9f02:	459c      	cmp	ip, r3
   b9f04:	db12      	blt.n	b9f2c <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x132>
              out_h < left_h_padding ||
   b9f06:	45e6      	cmp	lr, ip
   b9f08:	dd10      	ble.n	b9f2c <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x132>
              out_h >= output_height - right_h_padding ||
   b9f0a:	9b02      	ldr	r3, [sp, #8]
   b9f0c:	4298      	cmp	r0, r3
   b9f0e:	db0d      	blt.n	b9f2c <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x132>
              out_w < left_w_padding ||
   b9f10:	4583      	cmp	fp, r0
   b9f12:	dd0b      	ble.n	b9f2c <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x132>
              out_w >= output_width - right_w_padding ||
   b9f14:	9b03      	ldr	r3, [sp, #12]
   b9f16:	429e      	cmp	r6, r3
   b9f18:	db08      	blt.n	b9f2c <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x132>
              out_d < left_d_padding ||
   b9f1a:	9b07      	ldr	r3, [sp, #28]
   b9f1c:	42b3      	cmp	r3, r6
   b9f1e:	dd05      	ble.n	b9f2c <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x132>
            *out_ptr++ = *in_ptr++;
   b9f20:	f815 3b01 	ldrb.w	r3, [r5], #1
   b9f24:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   b9f26:	5593      	strb	r3, [r2, r6]
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   b9f28:	3601      	adds	r6, #1
   b9f2a:	e7e1      	b.n	b9ef0 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xf6>
            *out_ptr++ = pad_value;
   b9f2c:	4623      	mov	r3, r4
   b9f2e:	e7f9      	b.n	b9f24 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x12a>
   b9f30:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   b9f32:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b9f34:	4413      	add	r3, r2
   b9f36:	9329      	str	r3, [sp, #164]	; 0xa4
      for (int out_w = 0; out_w < output_width; ++out_w) {
   b9f38:	3001      	adds	r0, #1
   b9f3a:	e7d3      	b.n	b9ee4 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xea>
    for (int out_h = 0; out_h < output_height; ++out_h) {
   b9f3c:	f10c 0c01 	add.w	ip, ip, #1
   b9f40:	e7ca      	b.n	b9ed8 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xde>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   b9f42:	3101      	adds	r1, #1
   b9f44:	e7c1      	b.n	b9eca <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xd0>
  const RuntimeShape ext_output_shape =
   b9f46:	a818      	add	r0, sp, #96	; 0x60
   b9f48:	f7fe fb42 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape ext_input_shape =
   b9f4c:	a812      	add	r0, sp, #72	; 0x48
   b9f4e:	f7fe fb3f 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
}
   b9f52:	b01f      	add	sp, #124	; 0x7c
   b9f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b9f58 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>:
inline void PadImpl(const tflite::PadParams& op_params,
   b9f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9f5c:	b09f      	sub	sp, #124	; 0x7c
   b9f5e:	4607      	mov	r7, r0
   b9f60:	4615      	mov	r5, r2
   b9f62:	461c      	mov	r4, r3
   b9f64:	460a      	mov	r2, r1
   b9f66:	2301      	movs	r3, #1
   b9f68:	2104      	movs	r1, #4
   b9f6a:	a812      	add	r0, sp, #72	; 0x48
   b9f6c:	f7fe fb85 	bl	b867a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   b9f70:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   b9f72:	2301      	movs	r3, #1
   b9f74:	2104      	movs	r1, #4
   b9f76:	a818      	add	r0, sp, #96	; 0x60
   b9f78:	f7fe fb7f 	bl	b867a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  TFLITE_DCHECK_LE(op_params.left_padding_count, PadKernelMaxDimensionCount());
   b9f7c:	f997 2000 	ldrsb.w	r2, [r7]
   b9f80:	2a04      	cmp	r2, #4
   b9f82:	dd01      	ble.n	b9f88 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x30>
   b9f84:	f002 fb02 	bl	bc58c <abort>
  TFLITE_DCHECK_LE(op_params.right_padding_count, PadKernelMaxDimensionCount());
   b9f88:	f997 8014 	ldrsb.w	r8, [r7, #20]
   b9f8c:	f1b8 0f04 	cmp.w	r8, #4
   b9f90:	dcf8      	bgt.n	b9f84 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2c>
                      op_params.left_padding_count] = op_params.left_padding[i];
   b9f92:	ab0a      	add	r3, sp, #40	; 0x28
   b9f94:	f1c2 0004 	rsb	r0, r2, #4
   b9f98:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    left_padding_copy[i] = 0;
   b9f9c:	2600      	movs	r6, #0
                      op_params.left_padding_count] = op_params.left_padding[i];
   b9f9e:	1d39      	adds	r1, r7, #4
   b9fa0:	0092      	lsls	r2, r2, #2
   b9fa2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    left_padding_copy[i] = 0;
   b9fa6:	e9cd 660a 	strd	r6, r6, [sp, #40]	; 0x28
   b9faa:	e9cd 660c 	strd	r6, r6, [sp, #48]	; 0x30
                      op_params.left_padding_count] = op_params.left_padding[i];
   b9fae:	f004 fbf4 	bl	be79a <memcpy>
                       op_params.right_padding_count] =
   b9fb2:	ab0e      	add	r3, sp, #56	; 0x38
   b9fb4:	f1c8 0004 	rsb	r0, r8, #4
   b9fb8:	ea28 72e8 	bic.w	r2, r8, r8, asr #31
   b9fbc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b9fc0:	0092      	lsls	r2, r2, #2
   b9fc2:	f107 0118 	add.w	r1, r7, #24
    right_padding_copy[i] = 0;
   b9fc6:	e9cd 660e 	strd	r6, r6, [sp, #56]	; 0x38
   b9fca:	e9cd 6610 	strd	r6, r6, [sp, #64]	; 0x40
                       op_params.right_padding_count] =
   b9fce:	f004 fbe4 	bl	be79a <memcpy>
  const int output_batch = ext_output_shape.Dims(0);
   b9fd2:	4631      	mov	r1, r6
   b9fd4:	a818      	add	r0, sp, #96	; 0x60
   b9fd6:	f7fe fb06 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = ext_output_shape.Dims(1);
   b9fda:	2101      	movs	r1, #1
  const int output_batch = ext_output_shape.Dims(0);
   b9fdc:	4680      	mov	r8, r0
  const int output_height = ext_output_shape.Dims(1);
   b9fde:	a818      	add	r0, sp, #96	; 0x60
   b9fe0:	f7fe fb01 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = ext_output_shape.Dims(2);
   b9fe4:	2102      	movs	r1, #2
  const int output_height = ext_output_shape.Dims(1);
   b9fe6:	4681      	mov	r9, r0
  const int output_width = ext_output_shape.Dims(2);
   b9fe8:	a818      	add	r0, sp, #96	; 0x60
   b9fea:	f7fe fafc 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_depth = ext_output_shape.Dims(3);
   b9fee:	2103      	movs	r1, #3
  const int output_width = ext_output_shape.Dims(2);
   b9ff0:	4682      	mov	sl, r0
  const int output_depth = ext_output_shape.Dims(3);
   b9ff2:	a818      	add	r0, sp, #96	; 0x60
   b9ff4:	f7fe faf7 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int left_b_padding = left_padding_copy[0];
   b9ff8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b9ffa:	9300      	str	r3, [sp, #0]
  const int left_h_padding = left_padding_copy[1];
   b9ffc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9ffe:	9301      	str	r3, [sp, #4]
  const int left_w_padding = left_padding_copy[2];
   ba000:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   ba002:	9302      	str	r3, [sp, #8]
  const int left_d_padding = left_padding_copy[3];
   ba004:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   ba006:	9303      	str	r3, [sp, #12]
  const int right_h_padding = right_padding_copy[1];
   ba008:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   ba00a:	9304      	str	r3, [sp, #16]
  const int right_w_padding = right_padding_copy[2];
   ba00c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   ba00e:	9305      	str	r3, [sp, #20]
  const int right_d_padding = right_padding_copy[3];
   ba010:	9b11      	ldr	r3, [sp, #68]	; 0x44
   ba012:	9306      	str	r3, [sp, #24]
              out_b >= output_batch - right_b_padding ||
   ba014:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  const T pad_value = *pad_value_ptr;
   ba016:	f994 4000 	ldrsb.w	r4, [r4]
              out_b >= output_batch - right_b_padding ||
   ba01a:	eba8 0303 	sub.w	r3, r8, r3
   ba01e:	9308      	str	r3, [sp, #32]
   ba020:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
  const int output_depth = ext_output_shape.Dims(3);
   ba024:	4607      	mov	r7, r0
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   ba026:	4631      	mov	r1, r6
   ba028:	9309      	str	r3, [sp, #36]	; 0x24
   ba02a:	4541      	cmp	r1, r8
   ba02c:	da3b      	bge.n	ba0a6 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x14e>
              out_h >= output_height - right_h_padding ||
   ba02e:	9b04      	ldr	r3, [sp, #16]
    for (int out_h = 0; out_h < output_height; ++out_h) {
   ba030:	f04f 0c00 	mov.w	ip, #0
              out_h >= output_height - right_h_padding ||
   ba034:	eba9 0e03 	sub.w	lr, r9, r3
    for (int out_h = 0; out_h < output_height; ++out_h) {
   ba038:	45cc      	cmp	ip, r9
   ba03a:	da32      	bge.n	ba0a2 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x14a>
              out_w >= output_width - right_w_padding ||
   ba03c:	9b05      	ldr	r3, [sp, #20]
      for (int out_w = 0; out_w < output_width; ++out_w) {
   ba03e:	2000      	movs	r0, #0
              out_w >= output_width - right_w_padding ||
   ba040:	ebaa 0b03 	sub.w	fp, sl, r3
      for (int out_w = 0; out_w < output_width; ++out_w) {
   ba044:	4550      	cmp	r0, sl
   ba046:	da29      	bge.n	ba09c <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x144>
              out_d >= output_depth - right_d_padding) {
   ba048:	9b06      	ldr	r3, [sp, #24]
   ba04a:	1afb      	subs	r3, r7, r3
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   ba04c:	2600      	movs	r6, #0
              out_d >= output_depth - right_d_padding) {
   ba04e:	9307      	str	r3, [sp, #28]
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   ba050:	42be      	cmp	r6, r7
   ba052:	da1d      	bge.n	ba090 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x138>
          if (out_b < left_b_padding ||
   ba054:	9b00      	ldr	r3, [sp, #0]
   ba056:	4299      	cmp	r1, r3
   ba058:	db18      	blt.n	ba08c <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x134>
   ba05a:	9b08      	ldr	r3, [sp, #32]
   ba05c:	428b      	cmp	r3, r1
   ba05e:	dd15      	ble.n	ba08c <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x134>
              out_b >= output_batch - right_b_padding ||
   ba060:	9b01      	ldr	r3, [sp, #4]
   ba062:	459c      	cmp	ip, r3
   ba064:	db12      	blt.n	ba08c <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x134>
              out_h < left_h_padding ||
   ba066:	45e6      	cmp	lr, ip
   ba068:	dd10      	ble.n	ba08c <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x134>
              out_h >= output_height - right_h_padding ||
   ba06a:	9b02      	ldr	r3, [sp, #8]
   ba06c:	4298      	cmp	r0, r3
   ba06e:	db0d      	blt.n	ba08c <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x134>
              out_w < left_w_padding ||
   ba070:	4583      	cmp	fp, r0
   ba072:	dd0b      	ble.n	ba08c <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x134>
              out_w >= output_width - right_w_padding ||
   ba074:	9b03      	ldr	r3, [sp, #12]
   ba076:	429e      	cmp	r6, r3
   ba078:	db08      	blt.n	ba08c <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x134>
              out_d < left_d_padding ||
   ba07a:	9b07      	ldr	r3, [sp, #28]
   ba07c:	42b3      	cmp	r3, r6
   ba07e:	dd05      	ble.n	ba08c <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x134>
            *out_ptr++ = *in_ptr++;
   ba080:	f915 3b01 	ldrsb.w	r3, [r5], #1
   ba084:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   ba086:	5593      	strb	r3, [r2, r6]
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   ba088:	3601      	adds	r6, #1
   ba08a:	e7e1      	b.n	ba050 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xf8>
            *out_ptr++ = pad_value;
   ba08c:	4623      	mov	r3, r4
   ba08e:	e7f9      	b.n	ba084 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x12c>
   ba090:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   ba092:	9a09      	ldr	r2, [sp, #36]	; 0x24
   ba094:	4413      	add	r3, r2
   ba096:	9329      	str	r3, [sp, #164]	; 0xa4
      for (int out_w = 0; out_w < output_width; ++out_w) {
   ba098:	3001      	adds	r0, #1
   ba09a:	e7d3      	b.n	ba044 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xec>
    for (int out_h = 0; out_h < output_height; ++out_h) {
   ba09c:	f10c 0c01 	add.w	ip, ip, #1
   ba0a0:	e7ca      	b.n	ba038 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xe0>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   ba0a2:	3101      	adds	r1, #1
   ba0a4:	e7c1      	b.n	ba02a <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xd2>
  const RuntimeShape ext_output_shape =
   ba0a6:	a818      	add	r0, sp, #96	; 0x60
   ba0a8:	f7fe fa92 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape ext_input_shape =
   ba0ac:	a812      	add	r0, sp, #72	; 0x48
   ba0ae:	f7fe fa8f 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
}
   ba0b2:	b01f      	add	sp, #124	; 0x7c
   ba0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000ba0b8 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   ba0b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
   ba0bc:	690f      	ldr	r7, [r1, #16]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   ba0be:	b092      	sub	sp, #72	; 0x48
   ba0c0:	4680      	mov	r8, r0
   ba0c2:	460c      	mov	r4, r1
  TFLITE_DCHECK(node->user_data != nullptr);
   ba0c4:	b90f      	cbnz	r7, ba0ca <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x12>
   ba0c6:	f002 fa61 	bl	bc58c <abort>
  return GetMutableEvalInput(context, node, index);
   ba0ca:	2200      	movs	r2, #0
   ba0cc:	f7fe fa4e 	bl	b856c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   ba0d0:	6823      	ldr	r3, [r4, #0]
          ? tflite::micro::GetEvalInput(context, node, /*index=*/2)
   ba0d2:	681b      	ldr	r3, [r3, #0]
   ba0d4:	2b03      	cmp	r3, #3
   ba0d6:	4605      	mov	r5, r0
   ba0d8:	f040 80a3 	bne.w	ba222 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x16a>
   ba0dc:	2202      	movs	r2, #2
   ba0de:	4621      	mov	r1, r4
   ba0e0:	4640      	mov	r0, r8
   ba0e2:	f7fe fa43 	bl	b856c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
   ba0e6:	4606      	mov	r6, r0
  TFLITE_DCHECK(context != nullptr);
   ba0e8:	f1b8 0f00 	cmp.w	r8, #0
   ba0ec:	d0eb      	beq.n	ba0c6 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0xe>
  return context->GetEvalTensor(context, node->outputs->data[index]);
   ba0ee:	6862      	ldr	r2, [r4, #4]
   ba0f0:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
   ba0f4:	6851      	ldr	r1, [r2, #4]
   ba0f6:	4640      	mov	r0, r8
   ba0f8:	4798      	blx	r3
   ba0fa:	4604      	mov	r4, r0
  switch (input->type) {
   ba0fc:	7a28      	ldrb	r0, [r5, #8]
   ba0fe:	1e43      	subs	r3, r0, #1
   ba100:	2b08      	cmp	r3, #8
   ba102:	f200 8084 	bhi.w	ba20e <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x156>
   ba106:	e8df f003 	tbb	[pc, r3]
   ba10a:	6705      	.short	0x6705
   ba10c:	8282822a 	.word	0x8282822a
   ba110:	8282      	.short	0x8282
   ba112:	48          	.byte	0x48
   ba113:	00          	.byte	0x00
              ? 0.f
   ba114:	b30e      	cbz	r6, ba15a <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0xa2>
   ba116:	6833      	ldr	r3, [r6, #0]
   ba118:	681b      	ldr	r3, [r3, #0]
              : *tflite::micro::GetTensorData<float>(constant_values);
   ba11a:	9305      	str	r3, [sp, #20]
            data->params, tflite::micro::GetTensorShape(input),
   ba11c:	4629      	mov	r1, r5
   ba11e:	a806      	add	r0, sp, #24
        reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),
   ba120:	f7fe fbe9 	bl	b88f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
   ba124:	682a      	ldr	r2, [r5, #0]
   ba126:	9203      	str	r2, [sp, #12]
                           &pad_value, tflite::micro::GetTensorShape(output),
   ba128:	4621      	mov	r1, r4
   ba12a:	a80c      	add	r0, sp, #48	; 0x30
   ba12c:	f7fe fbe3 	bl	b88f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   ba130:	9a03      	ldr	r2, [sp, #12]
   ba132:	b104      	cbz	r4, ba136 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x7e>
   ba134:	6824      	ldr	r4, [r4, #0]
template <typename T, typename P>
inline void Pad(const tflite::PadParams& op_params,
                const RuntimeShape& input_shape, const T* input_data,
                const P* pad_value_ptr, const RuntimeShape& output_shape,
                T* output_data) {
  PadImpl(op_params, input_shape, input_data, pad_value_ptr, output_shape,
   ba136:	9401      	str	r4, [sp, #4]
   ba138:	ab0c      	add	r3, sp, #48	; 0x30
   ba13a:	9300      	str	r3, [sp, #0]
   ba13c:	a906      	add	r1, sp, #24
   ba13e:	ab05      	add	r3, sp, #20
   ba140:	4638      	mov	r0, r7
   ba142:	f7ff fdac 	bl	b9c9e <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>
                           &pad_value, tflite::micro::GetTensorShape(output),
   ba146:	a80c      	add	r0, sp, #48	; 0x30
   ba148:	f7fe fa42 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
        reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),
   ba14c:	a806      	add	r0, sp, #24
   ba14e:	f7fe fa3f 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   ba152:	2000      	movs	r0, #0
}
   ba154:	b012      	add	sp, #72	; 0x48
   ba156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
              ? 0.f
   ba15a:	2300      	movs	r3, #0
   ba15c:	e7dd      	b.n	ba11a <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x62>
      if (constant_values == nullptr) {
   ba15e:	b9ce      	cbnz	r6, ba194 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0xdc>
        pad_value = static_cast<uint8_t>(data->output_zero_point);
   ba160:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   ba164:	f88d 3014 	strb.w	r3, [sp, #20]
            data->params, tflite::micro::GetTensorShape(input),
   ba168:	4629      	mov	r1, r5
   ba16a:	a806      	add	r0, sp, #24
        reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),
   ba16c:	f7fe fbc3 	bl	b88f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
   ba170:	682a      	ldr	r2, [r5, #0]
   ba172:	9203      	str	r2, [sp, #12]
                           &pad_value, tflite::micro::GetTensorShape(output),
   ba174:	4621      	mov	r1, r4
   ba176:	a80c      	add	r0, sp, #48	; 0x30
   ba178:	f7fe fbbd 	bl	b88f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   ba17c:	9a03      	ldr	r2, [sp, #12]
   ba17e:	b104      	cbz	r4, ba182 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0xca>
   ba180:	6824      	ldr	r4, [r4, #0]
   ba182:	9401      	str	r4, [sp, #4]
   ba184:	ab0c      	add	r3, sp, #48	; 0x30
   ba186:	9300      	str	r3, [sp, #0]
   ba188:	a906      	add	r1, sp, #24
   ba18a:	ab05      	add	r3, sp, #20
   ba18c:	4638      	mov	r0, r7
   ba18e:	f7ff fe34 	bl	b9dfa <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>
   ba192:	e7d8      	b.n	ba146 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x8e>
        pad_value = *tflite::micro::GetTensorData<uint8_t>(constant_values);
   ba194:	6833      	ldr	r3, [r6, #0]
   ba196:	781b      	ldrb	r3, [r3, #0]
   ba198:	e7e4      	b.n	ba164 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0xac>
      if (constant_values == nullptr) {
   ba19a:	b9ce      	cbnz	r6, ba1d0 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x118>
        pad_value = static_cast<uint8_t>(data->output_zero_point);
   ba19c:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
   ba1a0:	f88d 3014 	strb.w	r3, [sp, #20]
            data->params, tflite::micro::GetTensorShape(input),
   ba1a4:	4629      	mov	r1, r5
   ba1a6:	a806      	add	r0, sp, #24
        reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),
   ba1a8:	f7fe fba5 	bl	b88f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
   ba1ac:	682a      	ldr	r2, [r5, #0]
   ba1ae:	9203      	str	r2, [sp, #12]
                           &pad_value, tflite::micro::GetTensorShape(output),
   ba1b0:	4621      	mov	r1, r4
   ba1b2:	a80c      	add	r0, sp, #48	; 0x30
   ba1b4:	f7fe fb9f 	bl	b88f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   ba1b8:	9a03      	ldr	r2, [sp, #12]
   ba1ba:	b104      	cbz	r4, ba1be <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x106>
   ba1bc:	6824      	ldr	r4, [r4, #0]
   ba1be:	9401      	str	r4, [sp, #4]
   ba1c0:	ab0c      	add	r3, sp, #48	; 0x30
   ba1c2:	9300      	str	r3, [sp, #0]
   ba1c4:	a906      	add	r1, sp, #24
   ba1c6:	ab05      	add	r3, sp, #20
   ba1c8:	4638      	mov	r0, r7
   ba1ca:	f7ff fec5 	bl	b9f58 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>
   ba1ce:	e7ba      	b.n	ba146 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x8e>
        pad_value = *tflite::micro::GetTensorData<int8_t>(constant_values);
   ba1d0:	6833      	ldr	r3, [r6, #0]
   ba1d2:	f993 3000 	ldrsb.w	r3, [r3]
   ba1d6:	e7e3      	b.n	ba1a0 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0xe8>
              ? 0
   ba1d8:	b10e      	cbz	r6, ba1de <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x126>
   ba1da:	6833      	ldr	r3, [r6, #0]
   ba1dc:	681e      	ldr	r6, [r3, #0]
              : *tflite::micro::GetTensorData<int32_t>(constant_values);
   ba1de:	9605      	str	r6, [sp, #20]
      reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),
   ba1e0:	4629      	mov	r1, r5
   ba1e2:	a806      	add	r0, sp, #24
   ba1e4:	f7fe fb87 	bl	b88f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
   ba1e8:	682a      	ldr	r2, [r5, #0]
   ba1ea:	9203      	str	r2, [sp, #12]
                         &pad_value, tflite::micro::GetTensorShape(output),
   ba1ec:	ad0c      	add	r5, sp, #48	; 0x30
   ba1ee:	4621      	mov	r1, r4
   ba1f0:	4628      	mov	r0, r5
   ba1f2:	f7fe fb80 	bl	b88f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   ba1f6:	9a03      	ldr	r2, [sp, #12]
   ba1f8:	b104      	cbz	r4, ba1fc <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x144>
   ba1fa:	6824      	ldr	r4, [r4, #0]
template <>
inline void Pad(const tflite::PadParams& op_params,
                const RuntimeShape& input_shape, const int32_t* input_data,
                const int32_t* pad_value_ptr, const RuntimeShape& output_shape,
                int32_t* output_data) {
  PadImpl(op_params, input_shape, input_data, pad_value_ptr, output_shape,
   ba1fc:	4638      	mov	r0, r7
   ba1fe:	e9cd 5400 	strd	r5, r4, [sp]
   ba202:	ab05      	add	r3, sp, #20
   ba204:	a906      	add	r1, sp, #24
   ba206:	f7ff fc9b 	bl	b9b40 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>
   ba20a:	4628      	mov	r0, r5
   ba20c:	e79c      	b.n	ba148 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x90>
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported by Pad.",
   ba20e:	f8d8 4014 	ldr.w	r4, [r8, #20]
   ba212:	f7f9 ff77 	bl	b4104 <TfLiteTypeGetName>
   ba216:	4904      	ldr	r1, [pc, #16]	; (ba228 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x170>)
   ba218:	4602      	mov	r2, r0
   ba21a:	4640      	mov	r0, r8
   ba21c:	47a0      	blx	r4
      return kTfLiteError;
   ba21e:	2001      	movs	r0, #1
   ba220:	e798      	b.n	ba154 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x9c>
          ? tflite::micro::GetEvalInput(context, node, /*index=*/2)
   ba222:	2600      	movs	r6, #0
   ba224:	e760      	b.n	ba0e8 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x30>
   ba226:	bf00      	nop
   ba228:	000cb3f7 	.word	0x000cb3f7

000ba22c <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:

  // Index to buffer for optimizations if applicable.
  int buffer_idx;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   ba22c:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   ba22e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   ba230:	b90b      	cbnz	r3, ba236 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xa>
   ba232:	f002 f9ab 	bl	bc58c <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
}
   ba236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
   ba23a:	2138      	movs	r1, #56	; 0x38
   ba23c:	4718      	bx	r3
	...

000ba240 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const ConvParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
   ba240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba244:	b0a1      	sub	sp, #132	; 0x84
   ba246:	4698      	mov	r8, r3
  // Get parameters.
  const int32_t input_offset = params.input_offset;  // r = s(q - Z)
   ba248:	6943      	ldr	r3, [r0, #20]
   ba24a:	9312      	str	r3, [sp, #72]	; 0x48
  const int stride_width = params.stride_width;
   ba24c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   ba250:	930d      	str	r3, [sp, #52]	; 0x34
  const int stride_height = params.stride_height;
   ba252:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   ba256:	930e      	str	r3, [sp, #56]	; 0x38
  const int dilation_width_factor = params.dilation_width_factor;
   ba258:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   ba25c:	930f      	str	r3, [sp, #60]	; 0x3c
  const int dilation_height_factor = params.dilation_height_factor;
   ba25e:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
   ba262:	9310      	str	r3, [sp, #64]	; 0x40
  const int pad_width = params.padding_values.width;
   ba264:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
   ba268:	9313      	str	r3, [sp, #76]	; 0x4c
  const int pad_height = params.padding_values.height;
   ba26a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   ba26e:	9314      	str	r3, [sp, #80]	; 0x50
  const int32_t output_offset = params.output_offset;
   ba270:	69c3      	ldr	r3, [r0, #28]
   ba272:	9315      	str	r3, [sp, #84]	; 0x54

  // Set min and max value of the output.
  const int32_t output_activation_min = params.quantized_activation_min;
   ba274:	6a83      	ldr	r3, [r0, #40]	; 0x28
   ba276:	930a      	str	r3, [sp, #40]	; 0x28
  const int32_t output_activation_max = params.quantized_activation_max;
   ba278:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   ba27a:	930b      	str	r3, [sp, #44]	; 0x2c
    int8_t* output_data) {
   ba27c:	e9cd 121e 	strd	r1, r2, [sp, #120]	; 0x78

  // Consistency check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   ba280:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
   ba284:	4293      	cmp	r3, r2
    int8_t* output_data) {
   ba286:	f8dd 90ac 	ldr.w	r9, [sp, #172]	; 0xac
   ba28a:	f8dd a0bc 	ldr.w	sl, [sp, #188]	; 0xbc
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   ba28e:	dd01      	ble.n	ba294 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x54>
   ba290:	f002 f97c 	bl	bc58c <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   ba294:	f8d8 3000 	ldr.w	r3, [r8]
   ba298:	2b04      	cmp	r3, #4
   ba29a:	d1f9      	bne.n	ba290 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x50>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   ba29c:	f8d9 3000 	ldr.w	r3, [r9]
   ba2a0:	2b04      	cmp	r3, #4
   ba2a2:	d1f5      	bne.n	ba290 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x50>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   ba2a4:	f8da 3000 	ldr.w	r3, [sl]
   ba2a8:	2b04      	cmp	r3, #4
   ba2aa:	d1f1      	bne.n	ba290 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x50>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   ba2ac:	2300      	movs	r3, #0
   ba2ae:	4619      	mov	r1, r3
   ba2b0:	4652      	mov	r2, sl
   ba2b2:	4640      	mov	r0, r8
   ba2b4:	f7fe fb6b 	bl	b898e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   ba2b8:	2303      	movs	r3, #3
   ba2ba:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   ba2bc:	9016      	str	r0, [sp, #88]	; 0x58
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   ba2be:	464a      	mov	r2, r9
   ba2c0:	4640      	mov	r0, r8
   ba2c2:	f7fe fb64 	bl	b898e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   ba2c6:	2303      	movs	r3, #3
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   ba2c8:	9017      	str	r0, [sp, #92]	; 0x5c
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   ba2ca:	4652      	mov	r2, sl
   ba2cc:	2100      	movs	r1, #0
   ba2ce:	4648      	mov	r0, r9
   ba2d0:	f7fe fb5d 	bl	b898e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  if (bias_data) {
   ba2d4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   ba2d6:	900c      	str	r0, [sp, #48]	; 0x30
  if (bias_data) {
   ba2d8:	b12b      	cbz	r3, ba2e6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xa6>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   ba2da:	982d      	ldr	r0, [sp, #180]	; 0xb4
   ba2dc:	f7fe f9bd 	bl	b865a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   ba2e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   ba2e2:	4298      	cmp	r0, r3
   ba2e4:	d1d4      	bne.n	ba290 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x50>
  }

  // Check dimensions of the tensors.
  const int input_height = input_shape.Dims(1);
   ba2e6:	2101      	movs	r1, #1
   ba2e8:	4640      	mov	r0, r8
   ba2ea:	f7fe f97c 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   ba2ee:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   ba2f0:	9018      	str	r0, [sp, #96]	; 0x60
  const int input_width = input_shape.Dims(2);
   ba2f2:	4640      	mov	r0, r8
   ba2f4:	f7fe f977 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
   ba2f8:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   ba2fa:	9019      	str	r0, [sp, #100]	; 0x64
  const int filter_height = filter_shape.Dims(1);
   ba2fc:	4648      	mov	r0, r9
   ba2fe:	f7fe f972 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
   ba302:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
   ba304:	901a      	str	r0, [sp, #104]	; 0x68
  const int filter_width = filter_shape.Dims(2);
   ba306:	4648      	mov	r0, r9
   ba308:	f7fe f96d 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   ba30c:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
   ba30e:	901b      	str	r0, [sp, #108]	; 0x6c
  const int output_height = output_shape.Dims(1);
   ba310:	4650      	mov	r0, sl
   ba312:	f7fe f968 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   ba316:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   ba318:	901c      	str	r0, [sp, #112]	; 0x70
  const int output_width = output_shape.Dims(2);
   ba31a:	4650      	mov	r0, sl
   ba31c:	f7fe f963 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int batch = 0; batch < batches; ++batch) {
   ba320:	f04f 0b00 	mov.w	fp, #0
  const int output_width = output_shape.Dims(2);
   ba324:	901d      	str	r0, [sp, #116]	; 0x74
  for (int batch = 0; batch < batches; ++batch) {
   ba326:	9b16      	ldr	r3, [sp, #88]	; 0x58
   ba328:	459b      	cmp	fp, r3
   ba32a:	f280 80d0 	bge.w	ba4ce <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x28e>
   ba32e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   ba330:	425b      	negs	r3, r3
   ba332:	9309      	str	r3, [sp, #36]	; 0x24
    for (int out_y = 0; out_y < output_height; ++out_y) {
   ba334:	2300      	movs	r3, #0
   ba336:	9304      	str	r3, [sp, #16]
   ba338:	9b04      	ldr	r3, [sp, #16]
   ba33a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   ba33c:	4293      	cmp	r3, r2
   ba33e:	f280 80c3 	bge.w	ba4c8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x288>
      const int in_y_origin = (out_y * stride_height) - pad_height;
      for (int out_x = 0; out_x < output_width; ++out_x) {
   ba342:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   ba344:	425b      	negs	r3, r3
   ba346:	9308      	str	r3, [sp, #32]
   ba348:	2300      	movs	r3, #0
   ba34a:	9305      	str	r3, [sp, #20]
   ba34c:	9b05      	ldr	r3, [sp, #20]
   ba34e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   ba350:	4293      	cmp	r3, r2
   ba352:	f280 80b1 	bge.w	ba4b8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x278>
        const int in_x_origin = (out_x * stride_width) - pad_width;
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   ba356:	2500      	movs	r5, #0
   ba358:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   ba35a:	429d      	cmp	r5, r3
   ba35c:	f280 80a4 	bge.w	ba4a8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x268>
          int32_t acc = 0;
   ba360:	2400      	movs	r4, #0
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   ba362:	9e09      	ldr	r6, [sp, #36]	; 0x24
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   ba364:	9406      	str	r4, [sp, #24]
   ba366:	9b06      	ldr	r3, [sp, #24]
   ba368:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   ba36a:	4293      	cmp	r3, r2
   ba36c:	da3e      	bge.n	ba3ec <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ac>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   ba36e:	2300      	movs	r3, #0
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
   ba370:	9f08      	ldr	r7, [sp, #32]
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   ba372:	9307      	str	r3, [sp, #28]
   ba374:	9b07      	ldr	r3, [sp, #28]
   ba376:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   ba378:	4293      	cmp	r3, r2
   ba37a:	da31      	bge.n	ba3e0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1a0>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   ba37c:	2f00      	cmp	r7, #0
   ba37e:	db29      	blt.n	ba3d4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x194>
   ba380:	9b19      	ldr	r3, [sp, #100]	; 0x64
   ba382:	42bb      	cmp	r3, r7
   ba384:	dd26      	ble.n	ba3d4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x194>
   ba386:	2e00      	cmp	r6, #0
   ba388:	db24      	blt.n	ba3d4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x194>
   ba38a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   ba38c:	42b3      	cmp	r3, r6
   ba38e:	dd21      	ble.n	ba3d4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x194>
   ba390:	2300      	movs	r3, #0
   ba392:	9303      	str	r3, [sp, #12]

              if (!is_point_inside_image) {
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   ba394:	9b03      	ldr	r3, [sp, #12]
   ba396:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba398:	4293      	cmp	r3, r2
   ba39a:	da1b      	bge.n	ba3d4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x194>
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
   ba39c:	9300      	str	r3, [sp, #0]
   ba39e:	4632      	mov	r2, r6
   ba3a0:	463b      	mov	r3, r7
   ba3a2:	4659      	mov	r1, fp
   ba3a4:	4640      	mov	r0, r8
   ba3a6:	f7fe fad0 	bl	b894a <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
                int32_t filter_val = filter_data[Offset(
   ba3aa:	9b03      	ldr	r3, [sp, #12]
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
   ba3ac:	9011      	str	r0, [sp, #68]	; 0x44
                int32_t filter_val = filter_data[Offset(
   ba3ae:	9300      	str	r3, [sp, #0]
   ba3b0:	4629      	mov	r1, r5
   ba3b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   ba3b6:	4648      	mov	r0, r9
   ba3b8:	f7fe fac7 	bl	b894a <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
   ba3bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
   ba3be:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   ba3c0:	569b      	ldrsb	r3, [r3, r2]
                // long as the filter size (filter_y * filter_x * in_channel)
                // does not exceed 2^16, which is the case in all the models
                // we have seen so far.
                // TODO(b/174275578): Add a check to make sure the
                // accumulator depth is smaller than 2^16.
                acc += filter_val * (input_val + input_offset);
   ba3c2:	9a12      	ldr	r2, [sp, #72]	; 0x48
   ba3c4:	4413      	add	r3, r2
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
   ba3c6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   ba3c8:	5612      	ldrsb	r2, [r2, r0]
                acc += filter_val * (input_val + input_offset);
   ba3ca:	fb02 4403 	mla	r4, r2, r3, r4
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   ba3ce:	9b03      	ldr	r3, [sp, #12]
   ba3d0:	3301      	adds	r3, #1
   ba3d2:	e7de      	b.n	ba392 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x152>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   ba3d4:	9b07      	ldr	r3, [sp, #28]
   ba3d6:	3301      	adds	r3, #1
   ba3d8:	9307      	str	r3, [sp, #28]
   ba3da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   ba3dc:	441f      	add	r7, r3
   ba3de:	e7c9      	b.n	ba374 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x134>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   ba3e0:	9b06      	ldr	r3, [sp, #24]
   ba3e2:	3301      	adds	r3, #1
   ba3e4:	9306      	str	r3, [sp, #24]
   ba3e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   ba3e8:	441e      	add	r6, r3
   ba3ea:	e7bc      	b.n	ba366 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x126>
              }
            }
          }

          if (bias_data) {
   ba3ec:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   ba3ee:	b113      	cbz	r3, ba3f6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b6>
            acc += bias_data[out_channel];
   ba3f0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   ba3f4:	441c      	add	r4, r3
          }
          acc = MultiplyByQuantizedMultiplier(
   ba3f6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   ba3f8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   ba3fa:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
   ba3fe:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
  int left_shift = shift > 0 ? shift : 0;
   ba402:	ea26 72e6 	bic.w	r2, r6, r6, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
   ba406:	2e00      	cmp	r6, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
   ba408:	fa04 f402 	lsl.w	r4, r4, r2
  int right_shift = shift > 0 ? 0 : -shift;
   ba40c:	bfd4      	ite	le
   ba40e:	4276      	negle	r6, r6
   ba410:	2600      	movgt	r6, #0
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   ba412:	42a3      	cmp	r3, r4
   ba414:	d122      	bne.n	ba45c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x21c>
   ba416:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
   ba41a:	4250      	negs	r0, r2
   ba41c:	4150      	adcs	r0, r2
  std::int64_t ab_64 = a_64 * b_64;
   ba41e:	fb84 4203 	smull	r4, r2, r4, r3
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   ba422:	4b2c      	ldr	r3, [pc, #176]	; (ba4d4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x294>)
   ba424:	2a00      	cmp	r2, #0
   ba426:	bfac      	ite	ge
   ba428:	f04f 4180 	movge.w	r1, #1073741824	; 0x40000000
   ba42c:	4619      	movlt	r1, r3
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   ba42e:	b9b8      	cbnz	r0, ba460 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x220>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   ba430:	190b      	adds	r3, r1, r4
   ba432:	eb42 74e1 	adc.w	r4, r2, r1, asr #31
   ba436:	2c00      	cmp	r4, #0
   ba438:	da04      	bge.n	ba444 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x204>
   ba43a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   ba43e:	189b      	adds	r3, r3, r2
   ba440:	f144 0400 	adc.w	r4, r4, #0
   ba444:	0fdb      	lsrs	r3, r3, #31
   ba446:	ea43 0444 	orr.w	r4, r3, r4, lsl #1
  assert(exponent <= 31);
   ba44a:	2e1f      	cmp	r6, #31
   ba44c:	dd0b      	ble.n	ba466 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x226>
   ba44e:	4b22      	ldr	r3, [pc, #136]	; (ba4d8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x298>)
   ba450:	4a22      	ldr	r2, [pc, #136]	; (ba4dc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x29c>)
   ba452:	4823      	ldr	r0, [pc, #140]	; (ba4e0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2a0>)
   ba454:	f240 1167 	movw	r1, #359	; 0x167
   ba458:	f002 f8b0 	bl	bc5bc <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   ba45c:	2000      	movs	r0, #0
   ba45e:	e7de      	b.n	ba41e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1de>
   ba460:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   ba464:	e7f1      	b.n	ba44a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x20a>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   ba466:	2701      	movs	r7, #1
   ba468:	40b7      	lsls	r7, r6
              acc, output_multiplier[out_channel], output_shift[out_channel]);
          acc += output_offset;
          acc = std::max(acc, output_activation_min);
          acc = std::min(acc, output_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   ba46a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   ba46e:	3f01      	subs	r7, #1
   ba470:	9500      	str	r5, [sp, #0]
   ba472:	4659      	mov	r1, fp
   ba474:	4650      	mov	r0, sl
   ba476:	f7fe fa68 	bl	b894a <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return a & b;
   ba47a:	ea07 0304 	and.w	r3, r7, r4
  return a >> offset;
   ba47e:	107f      	asrs	r7, r7, #1
  return a + b;
   ba480:	eb07 77d4 	add.w	r7, r7, r4, lsr #31
  return a >> offset;
   ba484:	4134      	asrs	r4, r6
  return a + b;
   ba486:	42bb      	cmp	r3, r7
   ba488:	bfc8      	it	gt
   ba48a:	3401      	addgt	r4, #1
          acc += output_offset;
   ba48c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba48e:	441c      	add	r4, r3
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   ba490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   ba492:	429c      	cmp	r4, r3
   ba494:	bfb8      	it	lt
   ba496:	461c      	movlt	r4, r3
   ba498:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   ba49a:	429c      	cmp	r4, r3
   ba49c:	bfa8      	it	ge
   ba49e:	461c      	movge	r4, r3
   ba4a0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   ba4a2:	3501      	adds	r5, #1
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   ba4a4:	541c      	strb	r4, [r3, r0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   ba4a6:	e757      	b.n	ba358 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x118>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   ba4a8:	9b05      	ldr	r3, [sp, #20]
   ba4aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   ba4ac:	3301      	adds	r3, #1
   ba4ae:	9305      	str	r3, [sp, #20]
   ba4b0:	9b08      	ldr	r3, [sp, #32]
   ba4b2:	4413      	add	r3, r2
   ba4b4:	9308      	str	r3, [sp, #32]
   ba4b6:	e749      	b.n	ba34c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x10c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   ba4b8:	9b04      	ldr	r3, [sp, #16]
   ba4ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   ba4bc:	3301      	adds	r3, #1
   ba4be:	9304      	str	r3, [sp, #16]
   ba4c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   ba4c2:	4413      	add	r3, r2
   ba4c4:	9309      	str	r3, [sp, #36]	; 0x24
   ba4c6:	e737      	b.n	ba338 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xf8>
  for (int batch = 0; batch < batches; ++batch) {
   ba4c8:	f10b 0b01 	add.w	fp, fp, #1
   ba4cc:	e72b      	b.n	ba326 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe6>
              static_cast<int8_t>(acc);
        }
      }
    }
  }
}
   ba4ce:	b021      	add	sp, #132	; 0x84
   ba4d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba4d4:	c0000001 	.word	0xc0000001
   ba4d8:	000cac99 	.word	0x000cac99
   ba4dc:	000cab95 	.word	0x000cab95
   ba4e0:	000cabef 	.word	0x000cabef

000ba4e4 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0>:
    data->buffer_idx = -1;
  }
  return kTfLiteOk;
}

TfLiteStatus EvalQuantizedPerChannel(
   ba4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba4e8:	4617      	mov	r7, r2
    TfLiteContext* context, TfLiteNode* node, const TfLiteConvParams& params,
    const OpData& data, const TfLiteEvalTensor* input,
    const TfLiteEvalTensor* filter, const TfLiteEvalTensor* bias,
    TfLiteEvalTensor* output, TfLiteEvalTensor* im2col) {
  cmsis_nn_conv_params conv_params;
  conv_params.dilation.h = params.dilation_height_factor;
   ba4ea:	694a      	ldr	r2, [r1, #20]
TfLiteStatus EvalQuantizedPerChannel(
   ba4ec:	b0e1      	sub	sp, #388	; 0x184
   ba4ee:	469b      	mov	fp, r3
  conv_params.dilation.w = params.dilation_width_factor;
  // TODO(#43557) Remove checks for dilation and call to reference
  // implementation when dilation is supported in the optimized implementation
  // by CMSIS-NN.
  if (conv_params.dilation.h == 1 && conv_params.dilation.w == 1) {
   ba4f0:	2a01      	cmp	r2, #1
  conv_params.dilation.w = params.dilation_width_factor;
   ba4f2:	690b      	ldr	r3, [r1, #16]
TfLiteStatus EvalQuantizedPerChannel(
   ba4f4:	9c6c      	ldr	r4, [sp, #432]	; 0x1b0
  conv_params.dilation.h = params.dilation_height_factor;
   ba4f6:	924f      	str	r2, [sp, #316]	; 0x13c
TfLiteStatus EvalQuantizedPerChannel(
   ba4f8:	e9dd 856a 	ldrd	r8, r5, [sp, #424]	; 0x1a8
   ba4fc:	4682      	mov	sl, r0
  conv_params.dilation.w = params.dilation_width_factor;
   ba4fe:	934e      	str	r3, [sp, #312]	; 0x138
  if (conv_params.dilation.h == 1 && conv_params.dilation.w == 1) {
   ba500:	ae30      	add	r6, sp, #192	; 0xc0
   ba502:	f040 80bd 	bne.w	ba680 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x19c>
   ba506:	2b01      	cmp	r3, #1
   ba508:	f040 80ba 	bne.w	ba680 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x19c>
    // Initialize cmsis_nn convolution parameters
    conv_params.input_offset = -data.reference_op_data.input_zero_point;
   ba50c:	693b      	ldr	r3, [r7, #16]
   ba50e:	425b      	negs	r3, r3
   ba510:	9348      	str	r3, [sp, #288]	; 0x120
    conv_params.output_offset = data.reference_op_data.output_zero_point;
   ba512:	69bb      	ldr	r3, [r7, #24]
   ba514:	9349      	str	r3, [sp, #292]	; 0x124
    conv_params.stride.h = params.stride_height;
   ba516:	688b      	ldr	r3, [r1, #8]
   ba518:	934b      	str	r3, [sp, #300]	; 0x12c
    conv_params.stride.w = params.stride_width;
   ba51a:	684b      	ldr	r3, [r1, #4]
   ba51c:	934a      	str	r3, [sp, #296]	; 0x128
    conv_params.padding.h = data.reference_op_data.padding.height;
   ba51e:	687b      	ldr	r3, [r7, #4]
   ba520:	934d      	str	r3, [sp, #308]	; 0x134
    conv_params.padding.w = data.reference_op_data.padding.width;
   ba522:	683b      	ldr	r3, [r7, #0]
   ba524:	934c      	str	r3, [sp, #304]	; 0x130
    conv_params.activation.min = data.reference_op_data.output_activation_min;
   ba526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   ba528:	9350      	str	r3, [sp, #320]	; 0x140
    conv_params.activation.max = data.reference_op_data.output_activation_max;
   ba52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   ba52c:	9351      	str	r3, [sp, #324]	; 0x144

    // Initialize cmsis_nn per channel quantization parameters
    cmsis_nn_per_channel_quant_params quant_params;
    quant_params.multiplier = const_cast<int32_t*>(
   ba52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   ba530:	930a      	str	r3, [sp, #40]	; 0x28
        data.reference_op_data.per_channel_output_multiplier);
    quant_params.shift =
        const_cast<int32_t*>(data.reference_op_data.per_channel_output_shift);

    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
   ba532:	4641      	mov	r1, r8
    quant_params.shift =
   ba534:	6abb      	ldr	r3, [r7, #40]	; 0x28
   ba536:	930b      	str	r3, [sp, #44]	; 0x2c
    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
   ba538:	a81e      	add	r0, sp, #120	; 0x78
   ba53a:	f7fe f9dc 	bl	b88f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
   ba53e:	4659      	mov	r1, fp
   ba540:	a824      	add	r0, sp, #144	; 0x90
   ba542:	f7fe f9d8 	bl	b88f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
   ba546:	4621      	mov	r1, r4
   ba548:	a82a      	add	r0, sp, #168	; 0xa8
   ba54a:	f7fe f9d4 	bl	b88f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
   ba54e:	4629      	mov	r1, r5
   ba550:	4630      	mov	r0, r6
   ba552:	f7fe f9d0 	bl	b88f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

    // Consistency check.
    TFLITE_DCHECK_LE(conv_params.activation.min, conv_params.activation.max);
   ba556:	e9dd 2350 	ldrd	r2, r3, [sp, #320]	; 0x140
   ba55a:	429a      	cmp	r2, r3
   ba55c:	dd01      	ble.n	ba562 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7e>
   ba55e:	f002 f815 	bl	bc58c <abort>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   ba562:	9b24      	ldr	r3, [sp, #144]	; 0x90
   ba564:	2b04      	cmp	r3, #4
   ba566:	d1fa      	bne.n	ba55e <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7a>
    TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   ba568:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   ba56a:	2b04      	cmp	r3, #4
   ba56c:	d1f7      	bne.n	ba55e <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7a>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   ba56e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   ba570:	2b04      	cmp	r3, #4
   ba572:	d1f4      	bne.n	ba55e <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7a>
    const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
   ba574:	2300      	movs	r3, #0
   ba576:	4619      	mov	r1, r3
   ba578:	aa2a      	add	r2, sp, #168	; 0xa8
   ba57a:	a824      	add	r0, sp, #144	; 0x90
   ba57c:	f7fe fa07 	bl	b898e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   ba580:	2303      	movs	r3, #3
   ba582:	4619      	mov	r1, r3
    const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
   ba584:	9008      	str	r0, [sp, #32]
    const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   ba586:	aa1e      	add	r2, sp, #120	; 0x78
   ba588:	a824      	add	r0, sp, #144	; 0x90
   ba58a:	f7fe fa00 	bl	b898e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   ba58e:	2303      	movs	r3, #3
    const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   ba590:	9009      	str	r0, [sp, #36]	; 0x24
    const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   ba592:	aa2a      	add	r2, sp, #168	; 0xa8
   ba594:	2100      	movs	r1, #0
   ba596:	a81e      	add	r0, sp, #120	; 0x78
   ba598:	f7fe f9f9 	bl	b898e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
   ba59c:	4681      	mov	r9, r0
  TFLITE_DCHECK(tensor != nullptr);
   ba59e:	2d00      	cmp	r5, #0
   ba5a0:	d0dd      	beq.n	ba55e <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7a>
    if (tflite::micro::GetTensorData<int8_t>(bias)) {
   ba5a2:	682b      	ldr	r3, [r5, #0]
   ba5a4:	b123      	cbz	r3, ba5b0 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0xcc>
      TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   ba5a6:	4630      	mov	r0, r6
   ba5a8:	f7fe f857 	bl	b865a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   ba5ac:	4581      	cmp	r9, r0
   ba5ae:	d1d6      	bne.n	ba55e <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7a>
    }

    // Initialize cmsis_nn dimensions
    // Input
    cmsis_nn_dims input_dims;
    input_dims.n = batch_size;
   ba5b0:	9b08      	ldr	r3, [sp, #32]
   ba5b2:	930e      	str	r3, [sp, #56]	; 0x38
    input_dims.h = input_shape.Dims(1);
   ba5b4:	2101      	movs	r1, #1
   ba5b6:	a824      	add	r0, sp, #144	; 0x90
   ba5b8:	f7fe f815 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
    input_dims.w = input_shape.Dims(2);
   ba5bc:	2102      	movs	r1, #2
    input_dims.h = input_shape.Dims(1);
   ba5be:	900f      	str	r0, [sp, #60]	; 0x3c
    input_dims.w = input_shape.Dims(2);
   ba5c0:	a824      	add	r0, sp, #144	; 0x90
   ba5c2:	f7fe f810 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
    input_dims.c = input_depth;
   ba5c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    input_dims.w = input_shape.Dims(2);
   ba5c8:	9010      	str	r0, [sp, #64]	; 0x40

    // Filter
    cmsis_nn_dims filter_dims;
    filter_dims.n = output_depth;
    filter_dims.h = filter_shape.Dims(1);
   ba5ca:	2101      	movs	r1, #1
   ba5cc:	a81e      	add	r0, sp, #120	; 0x78
    input_dims.c = input_depth;
   ba5ce:	9311      	str	r3, [sp, #68]	; 0x44
    filter_dims.n = output_depth;
   ba5d0:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
    filter_dims.h = filter_shape.Dims(1);
   ba5d4:	f7fe f807 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
    filter_dims.w = filter_shape.Dims(2);
   ba5d8:	2102      	movs	r1, #2
    filter_dims.h = filter_shape.Dims(1);
   ba5da:	9013      	str	r0, [sp, #76]	; 0x4c
    filter_dims.w = filter_shape.Dims(2);
   ba5dc:	a81e      	add	r0, sp, #120	; 0x78
   ba5de:	f7fe f802 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
    filter_dims.c = input_depth;
   ba5e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    filter_dims.w = filter_shape.Dims(2);
   ba5e4:	9014      	str	r0, [sp, #80]	; 0x50

    // Bias
    cmsis_nn_dims bias_dims;
    bias_dims.n = 1;
   ba5e6:	2101      	movs	r1, #1
    filter_dims.c = input_depth;
   ba5e8:	9315      	str	r3, [sp, #84]	; 0x54
    bias_dims.c = output_depth;

    // Output
    cmsis_nn_dims output_dims;
    output_dims.n = batch_size;
    output_dims.h = output_shape.Dims(1);
   ba5ea:	a82a      	add	r0, sp, #168	; 0xa8
    output_dims.n = batch_size;
   ba5ec:	9b08      	ldr	r3, [sp, #32]
   ba5ee:	931a      	str	r3, [sp, #104]	; 0x68
    bias_dims.h = 1;
   ba5f0:	e9cd 1116 	strd	r1, r1, [sp, #88]	; 0x58
    bias_dims.c = output_depth;
   ba5f4:	e9cd 1918 	strd	r1, r9, [sp, #96]	; 0x60
    output_dims.h = output_shape.Dims(1);
   ba5f8:	f7fd fff5 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
    output_dims.w = output_shape.Dims(2);
   ba5fc:	2102      	movs	r1, #2
    output_dims.h = output_shape.Dims(1);
   ba5fe:	901b      	str	r0, [sp, #108]	; 0x6c
    output_dims.w = output_shape.Dims(2);
   ba600:	a82a      	add	r0, sp, #168	; 0xa8
   ba602:	f7fd fff0 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
    // Initialize cmsis_nn context
    cmsis_nn_context ctx;
    ctx.buf = nullptr;
    ctx.size = 0;

    if (data.buffer_idx > -1) {
   ba606:	6b79      	ldr	r1, [r7, #52]	; 0x34
    ctx.buf = nullptr;
   ba608:	2300      	movs	r3, #0
    if (data.buffer_idx > -1) {
   ba60a:	4299      	cmp	r1, r3
    filter_dims.n = output_depth;
   ba60c:	ae12      	add	r6, sp, #72	; 0x48
    output_dims.c = output_depth;
   ba60e:	e9cd 091c 	strd	r0, r9, [sp, #112]	; 0x70
    ctx.size = 0;
   ba612:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    if (data.buffer_idx > -1) {
   ba616:	db04      	blt.n	ba622 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x13e>
      ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
   ba618:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
   ba61c:	4650      	mov	r0, sl
   ba61e:	4798      	blx	r3
   ba620:	900c      	str	r0, [sp, #48]	; 0x30
   ba622:	f1bb 0f00 	cmp.w	fp, #0
   ba626:	d09a      	beq.n	ba55e <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7a>
  return reinterpret_cast<const T*>(tensor->data.raw);
   ba628:	f8db 3000 	ldr.w	r3, [fp]
  TFLITE_DCHECK(tensor != nullptr);
   ba62c:	f1b8 0f00 	cmp.w	r8, #0
   ba630:	d095      	beq.n	ba55e <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7a>
  return reinterpret_cast<const T*>(tensor->data.raw);
   ba632:	f8d8 2000 	ldr.w	r2, [r8]
   ba636:	6829      	ldr	r1, [r5, #0]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   ba638:	b104      	cbz	r4, ba63c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x158>
   ba63a:	6824      	ldr	r4, [r4, #0]
      // arm_convolve_wrapper_s8_get_buffer_size
    }

    // arm_convolve_wrapper_s8 dispatches the optimized kernel accordingly with
    // the parameters passed
    TFLITE_DCHECK_EQ(
   ba63c:	9406      	str	r4, [sp, #24]
   ba63e:	a81a      	add	r0, sp, #104	; 0x68
   ba640:	e9cd 1004 	strd	r1, r0, [sp, #16]
   ba644:	a916      	add	r1, sp, #88	; 0x58
   ba646:	e9cd 2102 	strd	r2, r1, [sp, #8]
   ba64a:	e9cd 3600 	strd	r3, r6, [sp]
   ba64e:	aa0a      	add	r2, sp, #40	; 0x28
   ba650:	ab0e      	add	r3, sp, #56	; 0x38
   ba652:	a948      	add	r1, sp, #288	; 0x120
   ba654:	a80c      	add	r0, sp, #48	; 0x30
   ba656:	f7fc faf6 	bl	b6c46 <arm_convolve_wrapper_s8>
   ba65a:	2800      	cmp	r0, #0
   ba65c:	f47f af7f 	bne.w	ba55e <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7a>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
   ba660:	a830      	add	r0, sp, #192	; 0xc0
   ba662:	f7fd ffb5 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
   ba666:	a82a      	add	r0, sp, #168	; 0xa8
   ba668:	f7fd ffb2 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
   ba66c:	a824      	add	r0, sp, #144	; 0x90
   ba66e:	f7fd ffaf 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
   ba672:	a81e      	add	r0, sp, #120	; 0x78
  } else {
    reference_integer_ops::ConvPerChannel(
        ConvParamsQuantized(params, data.reference_op_data),
        data.reference_op_data.per_channel_output_multiplier,
        data.reference_op_data.per_channel_output_shift,
        tflite::micro::GetTensorShape(input),
   ba674:	f7fd ffac 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorData<int32_t>(bias),
        tflite::micro::GetTensorShape(output),
        tflite::micro::GetTensorData<int8_t>(output));
  }
  return kTfLiteOk;
}
   ba678:	2000      	movs	r0, #0
   ba67a:	b061      	add	sp, #388	; 0x184
   ba67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ConvParamsQuantized(params, data.reference_op_data),
   ba680:	a852      	add	r0, sp, #328	; 0x148
   ba682:	463a      	mov	r2, r7
   ba684:	f000 fe6e 	bl	bb364 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
        tflite::micro::GetTensorShape(input),
   ba688:	4659      	mov	r1, fp
   ba68a:	a842      	add	r0, sp, #264	; 0x108
        data.reference_op_data.per_channel_output_shift,
   ba68c:	e9d7 9a09 	ldrd	r9, sl, [r7, #36]	; 0x24
        tflite::micro::GetTensorShape(input),
   ba690:	f7fe f931 	bl	b88f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   ba694:	f1bb 0f00 	cmp.w	fp, #0
   ba698:	f43f af61 	beq.w	ba55e <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7a>
        tflite::micro::GetTensorShape(filter),
   ba69c:	af3c      	add	r7, sp, #240	; 0xf0
  return reinterpret_cast<const T*>(tensor->data.raw);
   ba69e:	f8db 3000 	ldr.w	r3, [fp]
   ba6a2:	9308      	str	r3, [sp, #32]
   ba6a4:	4641      	mov	r1, r8
   ba6a6:	4638      	mov	r0, r7
   ba6a8:	f7fe f925 	bl	b88f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   ba6ac:	f1b8 0f00 	cmp.w	r8, #0
   ba6b0:	f43f af55 	beq.w	ba55e <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7a>
  return reinterpret_cast<const T*>(tensor->data.raw);
   ba6b4:	f8d8 b000 	ldr.w	fp, [r8]
        tflite::micro::GetTensorShape(bias),
   ba6b8:	f10d 08d8 	add.w	r8, sp, #216	; 0xd8
   ba6bc:	4629      	mov	r1, r5
   ba6be:	4640      	mov	r0, r8
   ba6c0:	f7fe f919 	bl	b88f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   ba6c4:	2d00      	cmp	r5, #0
   ba6c6:	f43f af4a 	beq.w	ba55e <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7a>
        tflite::micro::GetTensorShape(output),
   ba6ca:	4621      	mov	r1, r4
   ba6cc:	4630      	mov	r0, r6
  return reinterpret_cast<const T*>(tensor->data.raw);
   ba6ce:	682d      	ldr	r5, [r5, #0]
   ba6d0:	f7fe f911 	bl	b88f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   ba6d4:	b104      	cbz	r4, ba6d8 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x1f4>
   ba6d6:	6824      	ldr	r4, [r4, #0]
    reference_integer_ops::ConvPerChannel(
   ba6d8:	9b08      	ldr	r3, [sp, #32]
   ba6da:	9300      	str	r3, [sp, #0]
   ba6dc:	4652      	mov	r2, sl
   ba6de:	ab42      	add	r3, sp, #264	; 0x108
   ba6e0:	4649      	mov	r1, r9
   ba6e2:	a852      	add	r0, sp, #328	; 0x148
   ba6e4:	e9cd 6405 	strd	r6, r4, [sp, #20]
   ba6e8:	e9cd 8503 	strd	r8, r5, [sp, #12]
   ba6ec:	e9cd 7b01 	strd	r7, fp, [sp, #4]
   ba6f0:	f7ff fda6 	bl	ba240 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
        tflite::micro::GetTensorShape(output),
   ba6f4:	4630      	mov	r0, r6
   ba6f6:	f7fd ff6b 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(bias),
   ba6fa:	4640      	mov	r0, r8
   ba6fc:	f7fd ff68 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(filter),
   ba700:	4638      	mov	r0, r7
   ba702:	f7fd ff65 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(input),
   ba706:	a842      	add	r0, sp, #264	; 0x108
   ba708:	e7b4      	b.n	ba674 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x190>
	...

000ba70c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   ba70c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
   ba710:	690e      	ldr	r6, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   ba712:	b0ad      	sub	sp, #180	; 0xb4
   ba714:	4604      	mov	r4, r0
   ba716:	460d      	mov	r5, r1
  TFLITE_DCHECK(node->user_data != nullptr);
   ba718:	b90e      	cbnz	r6, ba71e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x12>
   ba71a:	f001 ff37 	bl	bc58c <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
   ba71e:	f8d1 8014 	ldr.w	r8, [r1, #20]
   ba722:	f1b8 0f00 	cmp.w	r8, #0
   ba726:	d0f8      	beq.n	ba71a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xe>
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
   ba728:	4b5f      	ldr	r3, [pc, #380]	; (ba8a8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x19c>)
   ba72a:	681a      	ldr	r2, [r3, #0]
   ba72c:	f001 fa40 	bl	bbbb0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
   ba730:	4607      	mov	r7, r0
   ba732:	b960      	cbnz	r0, ba74e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x42>
   ba734:	4b5d      	ldr	r3, [pc, #372]	; (ba8ac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a0>)
   ba736:	6965      	ldr	r5, [r4, #20]
   ba738:	9300      	str	r3, [sp, #0]
   ba73a:	233d      	movs	r3, #61	; 0x3d
  TF_LITE_ENSURE(context, filter != nullptr);
   ba73c:	4a5c      	ldr	r2, [pc, #368]	; (ba8b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a4>)
   ba73e:	495d      	ldr	r1, [pc, #372]	; (ba8b4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a8>)
   ba740:	4620      	mov	r0, r4
   ba742:	47a8      	blx	r5
   ba744:	2501      	movs	r5, #1
}
   ba746:	4628      	mov	r0, r5
   ba748:	b02d      	add	sp, #180	; 0xb4
   ba74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
   ba74e:	4b5a      	ldr	r3, [pc, #360]	; (ba8b8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1ac>)
   ba750:	4629      	mov	r1, r5
   ba752:	681a      	ldr	r2, [r3, #0]
   ba754:	4620      	mov	r0, r4
   ba756:	f001 fa2b 	bl	bbbb0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
   ba75a:	4682      	mov	sl, r0
   ba75c:	b920      	cbnz	r0, ba768 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x5c>
   ba75e:	4b57      	ldr	r3, [pc, #348]	; (ba8bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1b0>)
   ba760:	9300      	str	r3, [sp, #0]
   ba762:	6965      	ldr	r5, [r4, #20]
   ba764:	233f      	movs	r3, #63	; 0x3f
   ba766:	e7e9      	b.n	ba73c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x30>
  const TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
   ba768:	4b55      	ldr	r3, [pc, #340]	; (ba8c0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1b4>)
   ba76a:	4629      	mov	r1, r5
   ba76c:	681a      	ldr	r2, [r3, #0]
   ba76e:	4620      	mov	r0, r4
   ba770:	f001 fa21 	bl	bbbb6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
   ba774:	4681      	mov	r9, r0
   ba776:	b920      	cbnz	r0, ba782 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x76>
   ba778:	4b52      	ldr	r3, [pc, #328]	; (ba8c4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1b8>)
   ba77a:	9300      	str	r3, [sp, #0]
   ba77c:	6965      	ldr	r5, [r4, #20]
   ba77e:	2341      	movs	r3, #65	; 0x41
   ba780:	e7dc      	b.n	ba73c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x30>
  RuntimeShape input_shape = GetTensorShape(input);
   ba782:	4639      	mov	r1, r7
   ba784:	a816      	add	r0, sp, #88	; 0x58
   ba786:	f7fe f9a7 	bl	b8ad8 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  RuntimeShape output_shape = GetTensorShape(output);
   ba78a:	4649      	mov	r1, r9
   ba78c:	a81c      	add	r0, sp, #112	; 0x70
   ba78e:	f7fe f9a3 	bl	b8ad8 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
   ba792:	2300      	movs	r3, #0
   ba794:	4619      	mov	r1, r3
   ba796:	aa1c      	add	r2, sp, #112	; 0x70
   ba798:	a816      	add	r0, sp, #88	; 0x58
   ba79a:	f7fe f8f8 	bl	b898e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  input_dims.h = input->dims->data[1];
   ba79e:	68bb      	ldr	r3, [r7, #8]
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
   ba7a0:	900a      	str	r0, [sp, #40]	; 0x28
  input_dims.h = input->dims->data[1];
   ba7a2:	689a      	ldr	r2, [r3, #8]
  input_dims.w = input->dims->data[2];
   ba7a4:	68db      	ldr	r3, [r3, #12]
  input_dims.h = input->dims->data[1];
   ba7a6:	920b      	str	r2, [sp, #44]	; 0x2c
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
   ba7a8:	4683      	mov	fp, r0
  input_dims.c = input_shape.Dims(3);
   ba7aa:	2103      	movs	r1, #3
   ba7ac:	a816      	add	r0, sp, #88	; 0x58
  input_dims.w = input->dims->data[2];
   ba7ae:	930c      	str	r3, [sp, #48]	; 0x30
  input_dims.c = input_shape.Dims(3);
   ba7b0:	f7fd ff19 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
  filter_dims.n = output_shape.Dims(3);
   ba7b4:	2103      	movs	r1, #3
  input_dims.c = input_shape.Dims(3);
   ba7b6:	900d      	str	r0, [sp, #52]	; 0x34
   ba7b8:	9009      	str	r0, [sp, #36]	; 0x24
  filter_dims.n = output_shape.Dims(3);
   ba7ba:	a81c      	add	r0, sp, #112	; 0x70
   ba7bc:	f7fd ff13 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
  filter_dims.h = filter->dims->data[1];
   ba7c0:	f8da 2008 	ldr.w	r2, [sl, #8]
  filter_dims.c = input_dims.c;
   ba7c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  filter_dims.h = filter->dims->data[1];
   ba7c6:	6891      	ldr	r1, [r2, #8]
  filter_dims.w = filter->dims->data[2];
   ba7c8:	68d2      	ldr	r2, [r2, #12]
   ba7ca:	9210      	str	r2, [sp, #64]	; 0x40
  output_dims.n = input_dims.n;
   ba7cc:	e9cd 3b11 	strd	r3, fp, [sp, #68]	; 0x44
  output_dims.h = output->dims->data[1];
   ba7d0:	f8d9 3008 	ldr.w	r3, [r9, #8]
  filter_dims.n = output_shape.Dims(3);
   ba7d4:	900e      	str	r0, [sp, #56]	; 0x38
  output_dims.h = output->dims->data[1];
   ba7d6:	689a      	ldr	r2, [r3, #8]
  filter_dims.h = filter->dims->data[1];
   ba7d8:	910f      	str	r1, [sp, #60]	; 0x3c
  output_dims.w = output->dims->data[2];
   ba7da:	68db      	ldr	r3, [r3, #12]
  output_dims.h = output->dims->data[1];
   ba7dc:	9213      	str	r2, [sp, #76]	; 0x4c
  output_dims.c = output_shape.Dims(3);
   ba7de:	2103      	movs	r1, #3
   ba7e0:	a81c      	add	r0, sp, #112	; 0x70
  output_dims.w = output->dims->data[2];
   ba7e2:	9314      	str	r3, [sp, #80]	; 0x50
  output_dims.c = output_shape.Dims(3);
   ba7e4:	f7fd feff 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int num_channels = filter->dims->data[kConvQuantizedDimension];
   ba7e8:	4a37      	ldr	r2, [pc, #220]	; (ba8c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1bc>)
  output_dims.c = output_shape.Dims(3);
   ba7ea:	9015      	str	r0, [sp, #84]	; 0x54
  const int num_channels = filter->dims->data[kConvQuantizedDimension];
   ba7ec:	6812      	ldr	r2, [r2, #0]
   ba7ee:	f8da 3008 	ldr.w	r3, [sl, #8]
   ba7f2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
   ba7f6:	4620      	mov	r0, r4
   ba7f8:	6859      	ldr	r1, [r3, #4]
   ba7fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba7fc:	0089      	lsls	r1, r1, #2
   ba7fe:	9109      	str	r1, [sp, #36]	; 0x24
   ba800:	4798      	blx	r3
  data->reference_op_data.per_channel_output_multiplier =
   ba802:	6270      	str	r0, [r6, #36]	; 0x24
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
   ba804:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba806:	9909      	ldr	r1, [sp, #36]	; 0x24
   ba808:	4620      	mov	r0, r4
   ba80a:	4798      	blx	r3
  data->reference_op_data.per_channel_output_shift =
   ba80c:	62b0      	str	r0, [r6, #40]	; 0x28
  TF_LITE_ENSURE_STATUS(CalculateOpDataConv(
   ba80e:	9606      	str	r6, [sp, #24]
   ba810:	783b      	ldrb	r3, [r7, #0]
   ba812:	9305      	str	r3, [sp, #20]
   ba814:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   ba816:	9304      	str	r3, [sp, #16]
   ba818:	9b14      	ldr	r3, [sp, #80]	; 0x50
   ba81a:	9303      	str	r3, [sp, #12]
   ba81c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   ba81e:	9302      	str	r3, [sp, #8]
   ba820:	9b10      	ldr	r3, [sp, #64]	; 0x40
   ba822:	9301      	str	r3, [sp, #4]
   ba824:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   ba826:	9300      	str	r3, [sp, #0]
   ba828:	4629      	mov	r1, r5
   ba82a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   ba82c:	4642      	mov	r2, r8
   ba82e:	4620      	mov	r0, r4
   ba830:	f000 fdc0 	bl	bb3b4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
   ba834:	4605      	mov	r5, r0
   ba836:	2800      	cmp	r0, #0
   ba838:	d12a      	bne.n	ba890 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x184>
  if (input->type == kTfLiteInt8) {
   ba83a:	783b      	ldrb	r3, [r7, #0]
   ba83c:	2b09      	cmp	r3, #9
   ba83e:	d12e      	bne.n	ba89e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x192>
    conv_params.input_offset = -input->params.zero_point;
   ba840:	693b      	ldr	r3, [r7, #16]
   ba842:	425b      	negs	r3, r3
   ba844:	9322      	str	r3, [sp, #136]	; 0x88
    conv_params.output_offset = output->params.zero_point;
   ba846:	f8d9 3010 	ldr.w	r3, [r9, #16]
   ba84a:	9323      	str	r3, [sp, #140]	; 0x8c
    conv_params.stride.h = params.stride_height;
   ba84c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   ba850:	9325      	str	r3, [sp, #148]	; 0x94
    conv_params.stride.w = params.stride_width;
   ba852:	f8d8 3004 	ldr.w	r3, [r8, #4]
   ba856:	9324      	str	r3, [sp, #144]	; 0x90
    conv_params.dilation.h = params.dilation_height_factor;
   ba858:	f8d8 3014 	ldr.w	r3, [r8, #20]
   ba85c:	9329      	str	r3, [sp, #164]	; 0xa4
    conv_params.dilation.w = params.dilation_width_factor;
   ba85e:	f8d8 3010 	ldr.w	r3, [r8, #16]
   ba862:	9328      	str	r3, [sp, #160]	; 0xa0
    conv_params.padding.h = data->reference_op_data.padding.height;
   ba864:	6873      	ldr	r3, [r6, #4]
   ba866:	9327      	str	r3, [sp, #156]	; 0x9c
    conv_params.padding.w = data->reference_op_data.padding.width;
   ba868:	6833      	ldr	r3, [r6, #0]
   ba86a:	9326      	str	r3, [sp, #152]	; 0x98
    conv_params.activation.min = data->reference_op_data.output_activation_min;
   ba86c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   ba86e:	932a      	str	r3, [sp, #168]	; 0xa8
    conv_params.activation.max = data->reference_op_data.output_activation_max;
   ba870:	6b33      	ldr	r3, [r6, #48]	; 0x30
   ba872:	932b      	str	r3, [sp, #172]	; 0xac
    buf_size = arm_convolve_wrapper_s8_get_buffer_size(
   ba874:	a90a      	add	r1, sp, #40	; 0x28
   ba876:	ab12      	add	r3, sp, #72	; 0x48
   ba878:	aa0e      	add	r2, sp, #56	; 0x38
   ba87a:	a822      	add	r0, sp, #136	; 0x88
   ba87c:	f7fc fa3f 	bl	b6cfe <arm_convolve_wrapper_s8_get_buffer_size>
  if (buf_size > 0) {
   ba880:	1e01      	subs	r1, r0, #0
   ba882:	dd0c      	ble.n	ba89e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x192>
    TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
   ba884:	6c23      	ldr	r3, [r4, #64]	; 0x40
   ba886:	f106 0234 	add.w	r2, r6, #52	; 0x34
   ba88a:	4620      	mov	r0, r4
   ba88c:	4798      	blx	r3
   ba88e:	4605      	mov	r5, r0
  RuntimeShape output_shape = GetTensorShape(output);
   ba890:	a81c      	add	r0, sp, #112	; 0x70
   ba892:	f7fd fe9d 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape input_shape = GetTensorShape(input);
   ba896:	a816      	add	r0, sp, #88	; 0x58
   ba898:	f7fd fe9a 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
   ba89c:	e753      	b.n	ba746 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3a>
    data->buffer_idx = -1;
   ba89e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   ba8a2:	6373      	str	r3, [r6, #52]	; 0x34
   ba8a4:	e7f4      	b.n	ba890 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x184>
   ba8a6:	bf00      	nop
   ba8a8:	000cb774 	.word	0x000cb774
   ba8ac:	000cad6d 	.word	0x000cad6d
   ba8b0:	000cb440 	.word	0x000cb440
   ba8b4:	000cad56 	.word	0x000cad56
   ba8b8:	000cb77c 	.word	0x000cb77c
   ba8bc:	000cad7e 	.word	0x000cad7e
   ba8c0:	000cb778 	.word	0x000cb778
   ba8c4:	000cad90 	.word	0x000cad90
   ba8c8:	000cb780 	.word	0x000cb780

000ba8cc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   ba8cc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
   ba8d0:	4b36      	ldr	r3, [pc, #216]	; (ba9ac <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe0>)
  return GetMutableEvalInput(context, node, index);
   ba8d2:	681a      	ldr	r2, [r3, #0]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   ba8d4:	460d      	mov	r5, r1
   ba8d6:	4604      	mov	r4, r0
   ba8d8:	f7fd fe48 	bl	b856c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kConvWeightsTensor);
   ba8dc:	4b34      	ldr	r3, [pc, #208]	; (ba9b0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe4>)
   ba8de:	4606      	mov	r6, r0
   ba8e0:	681a      	ldr	r2, [r3, #0]
   ba8e2:	4629      	mov	r1, r5
   ba8e4:	4620      	mov	r0, r4
   ba8e6:	f7fd fe41 	bl	b856c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
   ba8ea:	682b      	ldr	r3, [r5, #0]
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
   ba8ec:	681b      	ldr	r3, [r3, #0]
   ba8ee:	2b03      	cmp	r3, #3
   ba8f0:	4607      	mov	r7, r0
   ba8f2:	d109      	bne.n	ba908 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3c>
   ba8f4:	4b2f      	ldr	r3, [pc, #188]	; (ba9b4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe8>)
   ba8f6:	4629      	mov	r1, r5
   ba8f8:	681a      	ldr	r2, [r3, #0]
   ba8fa:	4620      	mov	r0, r4
   ba8fc:	f7fd fe36 	bl	b856c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
   ba900:	4680      	mov	r8, r0
  TFLITE_DCHECK(context != nullptr);
   ba902:	b924      	cbnz	r4, ba90e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x42>
   ba904:	f001 fe42 	bl	bc58c <abort>
   ba908:	f04f 0800 	mov.w	r8, #0
   ba90c:	e7f9      	b.n	ba902 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x36>
  return context->GetEvalTensor(context, node->outputs->data[index]);
   ba90e:	4a2a      	ldr	r2, [pc, #168]	; (ba9b8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xec>)
   ba910:	686b      	ldr	r3, [r5, #4]
   ba912:	6812      	ldr	r2, [r2, #0]
   ba914:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   ba918:	4620      	mov	r0, r4
   ba91a:	6859      	ldr	r1, [r3, #4]
   ba91c:	6d62      	ldr	r2, [r4, #84]	; 0x54
   ba91e:	4790      	blx	r2
          : nullptr;
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kConvOutputTensor);

  TFLITE_DCHECK(node->builtin_data != nullptr);
   ba920:	6969      	ldr	r1, [r5, #20]
   ba922:	2900      	cmp	r1, #0
   ba924:	d0ee      	beq.n	ba904 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x38>
  const auto& params =
      *(reinterpret_cast<TfLiteConvParams*>(node->builtin_data));
  TFLITE_DCHECK(node->user_data != nullptr);
   ba926:	692a      	ldr	r2, [r5, #16]
   ba928:	2a00      	cmp	r2, #0
   ba92a:	d0eb      	beq.n	ba904 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x38>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  TF_LITE_ENSURE_EQ(context, input->type, output->type);
   ba92c:	7a35      	ldrb	r5, [r6, #8]
   ba92e:	7a03      	ldrb	r3, [r0, #8]
   ba930:	429d      	cmp	r5, r3
   ba932:	d00e      	beq.n	ba952 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x86>
   ba934:	e9cd 5302 	strd	r5, r3, [sp, #8]
   ba938:	4b20      	ldr	r3, [pc, #128]	; (ba9bc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf0>)
   ba93a:	9301      	str	r3, [sp, #4]
   ba93c:	4b20      	ldr	r3, [pc, #128]	; (ba9c0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf4>)
   ba93e:	9300      	str	r3, [sp, #0]
   ba940:	6965      	ldr	r5, [r4, #20]
   ba942:	4a20      	ldr	r2, [pc, #128]	; (ba9c4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf8>)
   ba944:	4920      	ldr	r1, [pc, #128]	; (ba9c8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfc>)
   ba946:	f44f 7386 	mov.w	r3, #268	; 0x10c
   ba94a:	4620      	mov	r0, r4
   ba94c:	47a8      	blx	r5
                                     bias, output, nullptr);
      break;
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
   ba94e:	2501      	movs	r5, #1
   ba950:	e01e      	b.n	ba990 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc4>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
   ba952:	7a3b      	ldrb	r3, [r7, #8]
   ba954:	42ab      	cmp	r3, r5
   ba956:	d004      	beq.n	ba962 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x96>
   ba958:	6963      	ldr	r3, [r4, #20]
   ba95a:	491c      	ldr	r1, [pc, #112]	; (ba9cc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x100>)
   ba95c:	4620      	mov	r0, r4
   ba95e:	4798      	blx	r3
   ba960:	e7f5      	b.n	ba94e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x82>
  switch (input->type) {  // Already know in/out types are same.
   ba962:	2d01      	cmp	r5, #1
   ba964:	d00b      	beq.n	ba97e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb2>
   ba966:	2d09      	cmp	r5, #9
   ba968:	d016      	beq.n	ba998 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xcc>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   ba96a:	4628      	mov	r0, r5
   ba96c:	6967      	ldr	r7, [r4, #20]
   ba96e:	f7f9 fbc9 	bl	b4104 <TfLiteTypeGetName>
   ba972:	7a33      	ldrb	r3, [r6, #8]
   ba974:	4916      	ldr	r1, [pc, #88]	; (ba9d0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x104>)
   ba976:	4602      	mov	r2, r0
   ba978:	4620      	mov	r0, r4
   ba97a:	47b8      	blx	r7
   ba97c:	e7e7      	b.n	ba94e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x82>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   ba97e:	4628      	mov	r0, r5
   ba980:	6967      	ldr	r7, [r4, #20]
   ba982:	f7f9 fbbf 	bl	b4104 <TfLiteTypeGetName>
   ba986:	7a33      	ldrb	r3, [r6, #8]
   ba988:	4911      	ldr	r1, [pc, #68]	; (ba9d0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x104>)
   ba98a:	4602      	mov	r2, r0
   ba98c:	4620      	mov	r0, r4
   ba98e:	47b8      	blx	r7
  }
  return kTfLiteOk;
}
   ba990:	4628      	mov	r0, r5
   ba992:	b004      	add	sp, #16
   ba994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return EvalQuantizedPerChannel(context, node, params, data, input, filter,
   ba998:	e9cd 8001 	strd	r8, r0, [sp, #4]
   ba99c:	9700      	str	r7, [sp, #0]
   ba99e:	4633      	mov	r3, r6
   ba9a0:	4620      	mov	r0, r4
   ba9a2:	f7ff fd9f 	bl	ba4e4 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0>
   ba9a6:	4605      	mov	r5, r0
                                     bias, output, nullptr);
   ba9a8:	e7f2      	b.n	ba990 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc4>
   ba9aa:	bf00      	nop
   ba9ac:	000cb774 	.word	0x000cb774
   ba9b0:	000cb77c 	.word	0x000cb77c
   ba9b4:	000cb770 	.word	0x000cb770
   ba9b8:	000cb778 	.word	0x000cb778
   ba9bc:	000cb15d 	.word	0x000cb15d
   ba9c0:	000cb16a 	.word	0x000cb16a
   ba9c4:	000cb440 	.word	0x000cb440
   ba9c8:	000cada2 	.word	0x000cada2
   ba9cc:	000cb4e4 	.word	0x000cb4e4
   ba9d0:	000caf08 	.word	0x000caf08

000ba9d4 <_ZN6tflite16Register_CONV_2DEv>:

}  // namespace

TfLiteRegistration Register_CONV_2D() {
   ba9d4:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   ba9d6:	4d05      	ldr	r5, [pc, #20]	; (ba9ec <_ZN6tflite16Register_CONV_2DEv+0x18>)
TfLiteRegistration Register_CONV_2D() {
   ba9d8:	4606      	mov	r6, r0
          /*version=*/0};
   ba9da:	4604      	mov	r4, r0
   ba9dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba9de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba9e0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   ba9e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   ba9e8:	4630      	mov	r0, r6
   ba9ea:	bd70      	pop	{r4, r5, r6, pc}
   ba9ec:	000cb5bc 	.word	0x000cb5bc

000ba9f0 <_ZN6tflite3ops5micro3add4InitEP13TfLiteContextPKcj>:
  }

  return kTfLiteOk;
}

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   ba9f0:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   ba9f2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   ba9f4:	b90b      	cbnz	r3, ba9fa <_ZN6tflite3ops5micro3add4InitEP13TfLiteContextPKcj+0xa>
   ba9f6:	f001 fdc9 	bl	bc58c <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
}
   ba9fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
   ba9fe:	213c      	movs	r1, #60	; 0x3c
   baa00:	4718      	bx	r3

000baa02 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>:
}

inline void Add(const ArithmeticParams& params,
                const RuntimeShape& input1_shape, const uint8_t* input1_data,
                const RuntimeShape& input2_shape, const uint8_t* input2_data,
                const RuntimeShape& output_shape, uint8_t* output_data) {
   baa02:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   baa06:	4604      	mov	r4, r0
   baa08:	4690      	mov	r8, r2
   baa0a:	4608      	mov	r0, r1
   baa0c:	4619      	mov	r1, r3
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   baa0e:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	; 0x2c
   baa12:	429a      	cmp	r2, r3
                const RuntimeShape& output_shape, uint8_t* output_data) {
   baa14:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   baa16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   baa18:	dd01      	ble.n	baa1e <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x1c>
   baa1a:	f001 fdb7 	bl	bc58c <abort>
                   params.quantized_activation_max);
  const int flat_size =
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
   baa1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   baa20:	f7fd fe58 	bl	b86d4 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>

  TFLITE_DCHECK_GT(params.input1_offset, -256);
   baa24:	6863      	ldr	r3, [r4, #4]
   baa26:	f113 0fff 	cmn.w	r3, #255	; 0xff
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
   baa2a:	4681      	mov	r9, r0
  TFLITE_DCHECK_GT(params.input1_offset, -256);
   baa2c:	dbf5      	blt.n	baa1a <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x18>
  TFLITE_DCHECK_GT(params.input2_offset, -256);
  TFLITE_DCHECK_LT(params.input1_offset, 256);
   baa2e:	2bff      	cmp	r3, #255	; 0xff
  TFLITE_DCHECK_GT(params.input2_offset, -256);
   baa30:	68a2      	ldr	r2, [r4, #8]
  TFLITE_DCHECK_LT(params.input1_offset, 256);
   baa32:	dcf2      	bgt.n	baa1a <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x18>
  TFLITE_DCHECK_LT(params.input2_offset, 256);
   baa34:	2aff      	cmp	r2, #255	; 0xff
   baa36:	dcf0      	bgt.n	baa1a <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x18>
  TFLITE_DCHECK_GT(params.input1_offset, -std::numeric_limits<T>::max());
   baa38:	f113 0fff 	cmn.w	r3, #255	; 0xff
   baa3c:	d0ed      	beq.n	baa1a <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x18>
  TFLITE_DCHECK_GT(params.input2_offset, -std::numeric_limits<T>::max());
   baa3e:	f112 0ffe 	cmn.w	r2, #254	; 0xfe
   baa42:	dbea      	blt.n	baa1a <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x18>
  TFLITE_DCHECK_LT(params.input1_offset, std::numeric_limits<T>::max());
   baa44:	2bff      	cmp	r3, #255	; 0xff
   baa46:	d0e8      	beq.n	baa1a <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x18>
  TFLITE_DCHECK_LT(params.input2_offset, std::numeric_limits<T>::max());
   baa48:	2aff      	cmp	r2, #255	; 0xff
   baa4a:	d0e6      	beq.n	baa1a <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x18>
  for (int i = 0; i < size; ++i) {
   baa4c:	2700      	movs	r7, #0
   baa4e:	45b9      	cmp	r9, r7
   baa50:	dd28      	ble.n	baaa4 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0xa2>
    const int32_t input2_val = params.input2_offset + input2_data[i];
   baa52:	f816 a007 	ldrb.w	sl, [r6, r7]
   baa56:	68a3      	ldr	r3, [r4, #8]
    const int32_t input1_val = params.input1_offset + input1_data[i];
   baa58:	6862      	ldr	r2, [r4, #4]
    const int32_t shifted_input1_val = input1_val * (1 << params.left_shift);
   baa5a:	69a0      	ldr	r0, [r4, #24]
    const int32_t input2_val = params.input2_offset + input2_data[i];
   baa5c:	449a      	add	sl, r3
    const int32_t input1_val = params.input1_offset + input1_data[i];
   baa5e:	f818 3007 	ldrb.w	r3, [r8, r7]
   baa62:	4413      	add	r3, r2
    const int32_t shifted_input2_val = input2_val * (1 << params.left_shift);
   baa64:	fa0a fa00 	lsl.w	sl, sl, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   baa68:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
   baa6c:	fa03 f000 	lsl.w	r0, r3, r0
   baa70:	f7fd fe44 	bl	b86fc <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   baa74:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   baa78:	4683      	mov	fp, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   baa7a:	4650      	mov	r0, sl
   baa7c:	f7fd fe3e 	bl	b86fc <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   baa80:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   baa84:	4458      	add	r0, fp
   baa86:	f7fd fe39 	bl	b86fc <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
            raw_sum, params.output_multiplier, params.output_shift) +
   baa8a:	68e3      	ldr	r3, [r4, #12]
   baa8c:	4403      	add	r3, r0
    output_data[i] = static_cast<T>(clamped_output);
   baa8e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   baa90:	4283      	cmp	r3, r0
   baa92:	bfb8      	it	lt
   baa94:	4603      	movlt	r3, r0
   baa96:	6b20      	ldr	r0, [r4, #48]	; 0x30
   baa98:	4283      	cmp	r3, r0
   baa9a:	bfa8      	it	ge
   baa9c:	4603      	movge	r3, r0
   baa9e:	55eb      	strb	r3, [r5, r7]
  for (int i = 0; i < size; ++i) {
   baaa0:	3701      	adds	r7, #1
   baaa2:	e7d4      	b.n	baa4e <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x4c>
  AddElementwise(flat_size, params, input1_data, input2_data, output_data);
}
   baaa4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000baaa8 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE>:
                             OpData* data) {
   baaa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   baaac:	ed2d 8b06 	vpush	{d8-d10}
   baab0:	4682      	mov	sl, r0
   baab2:	b081      	sub	sp, #4
   baab4:	4688      	mov	r8, r1
  data->requires_broadcast = !HaveSameShapes(input1, input2);
   baab6:	4610      	mov	r0, r2
   baab8:	4619      	mov	r1, r3
                             OpData* data) {
   baaba:	e9dd 9410 	ldrd	r9, r4, [sp, #64]	; 0x40
   baabe:	461d      	mov	r5, r3
   baac0:	4616      	mov	r6, r2
  data->requires_broadcast = !HaveSameShapes(input1, input2);
   baac2:	f001 faa3 	bl	bc00c <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
   baac6:	f080 0001 	eor.w	r0, r0, #1
   baaca:	7020      	strb	r0, [r4, #0]
  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
   baacc:	f899 3000 	ldrb.w	r3, [r9]
   baad0:	2b03      	cmp	r3, #3
   baad2:	d001      	beq.n	baad8 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x30>
   baad4:	2b09      	cmp	r3, #9
   baad6:	d16f      	bne.n	babb8 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x110>
    data->input1_offset = -input1->params.zero_point;
   baad8:	6933      	ldr	r3, [r6, #16]
   baada:	425b      	negs	r3, r3
   baadc:	62a3      	str	r3, [r4, #40]	; 0x28
    data->input2_offset = -input2->params.zero_point;
   baade:	692b      	ldr	r3, [r5, #16]
   baae0:	425b      	negs	r3, r3
   baae2:	62e3      	str	r3, [r4, #44]	; 0x2c
    data->output_offset = output->params.zero_point;
   baae4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   baae8:	6323      	str	r3, [r4, #48]	; 0x30
    data->left_shift = 20;
   baaea:	2314      	movs	r3, #20
   baaec:	6263      	str	r3, [r4, #36]	; 0x24
      if (__a < __b)
   baaee:	ed96 aa03 	vldr	s20, [r6, #12]
   baaf2:	ed95 8a03 	vldr	s16, [r5, #12]
                std::max(input1->params.scale, input2->params.scale));
   baaf6:	eeb4 aac8 	vcmpe.f32	s20, s16
   baafa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        2 * static_cast<double>(
   baafe:	bf54      	ite	pl
   bab00:	ee1a 0a10 	vmovpl	r0, s20
   bab04:	ee18 0a10 	vmovmi	r0, s16
   bab08:	f003 f8a8 	bl	bdc5c <__aeabi_f2d>
   bab0c:	4602      	mov	r2, r0
   bab0e:	460b      	mov	r3, r1
                std::max(input1->params.scale, input2->params.scale));
   bab10:	f002 ff46 	bl	bd9a0 <__adddf3>
   bab14:	4606      	mov	r6, r0
   bab16:	460f      	mov	r7, r1
        static_cast<double>(input2->params.scale) / twice_max_input_scale;
   bab18:	ee18 0a10 	vmov	r0, s16
   bab1c:	f003 f89e 	bl	bdc5c <__aeabi_f2d>
    const double real_input2_multiplier =
   bab20:	4632      	mov	r2, r6
   bab22:	463b      	mov	r3, r7
   bab24:	f003 fa1c 	bl	bdf60 <__aeabi_ddiv>
   bab28:	ec41 0b19 	vmov	d9, r0, r1
        ((1 << data->left_shift) * static_cast<double>(output->params.scale));
   bab2c:	f8d9 000c 	ldr.w	r0, [r9, #12]
   bab30:	f003 f894 	bl	bdc5c <__aeabi_f2d>
   bab34:	4b30      	ldr	r3, [pc, #192]	; (babf8 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x150>)
   bab36:	2200      	movs	r2, #0
   bab38:	f003 f8e8 	bl	bdd0c <__aeabi_dmul>
   bab3c:	4602      	mov	r2, r0
   bab3e:	460b      	mov	r3, r1
    const double real_output_multiplier =
   bab40:	4630      	mov	r0, r6
   bab42:	4639      	mov	r1, r7
   bab44:	f003 fa0c 	bl	bdf60 <__aeabi_ddiv>
   bab48:	ec41 0b18 	vmov	d8, r0, r1
        static_cast<double>(input1->params.scale) / twice_max_input_scale;
   bab4c:	ee1a 0a10 	vmov	r0, s20
   bab50:	f003 f884 	bl	bdc5c <__aeabi_f2d>
    const double real_input1_multiplier =
   bab54:	4632      	mov	r2, r6
   bab56:	463b      	mov	r3, r7
   bab58:	f003 fa02 	bl	bdf60 <__aeabi_ddiv>
    QuantizeMultiplierSmallerThanOneExp(
   bab5c:	f104 0b04 	add.w	fp, r4, #4
   bab60:	f104 0514 	add.w	r5, r4, #20
    const double real_input1_multiplier =
   bab64:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplierSmallerThanOneExp(
   bab68:	4659      	mov	r1, fp
   bab6a:	4628      	mov	r0, r5
   bab6c:	f001 fab6 	bl	bc0dc <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
    QuantizeMultiplierSmallerThanOneExp(
   bab70:	eeb0 0a49 	vmov.f32	s0, s18
   bab74:	eef0 0a69 	vmov.f32	s1, s19
   bab78:	f104 0108 	add.w	r1, r4, #8
   bab7c:	f104 0018 	add.w	r0, r4, #24
   bab80:	f001 faac 	bl	bc0dc <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
    QuantizeMultiplierSmallerThanOneExp(
   bab84:	eeb0 0a48 	vmov.f32	s0, s16
   bab88:	eef0 0a68 	vmov.f32	s1, s17
   bab8c:	f104 0120 	add.w	r1, r4, #32
   bab90:	f104 001c 	add.w	r0, r4, #28
   bab94:	f001 faa2 	bl	bc0dc <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
   bab98:	f104 0310 	add.w	r3, r4, #16
   bab9c:	f898 1000 	ldrb.w	r1, [r8]
   baba0:	9310      	str	r3, [sp, #64]	; 0x40
   baba2:	464a      	mov	r2, r9
   baba4:	f104 030c 	add.w	r3, r4, #12
   baba8:	4650      	mov	r0, sl
}
   babaa:	b001      	add	sp, #4
   babac:	ecbd 8b06 	vpop	{d8-d10}
   babb0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
   babb4:	f001 b89a 	b.w	bbcec <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
  } else if (output->type == kTfLiteFloat32) {
   babb8:	2b01      	cmp	r3, #1
   babba:	d10d      	bne.n	babd8 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x130>
    CalculateActivationRange(params->activation,
   babbc:	f898 3000 	ldrb.w	r3, [r8]
// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
   babc0:	2b01      	cmp	r3, #1
   babc2:	d103      	bne.n	babcc <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x124>
    *activation_min = 0;
   babc4:	2300      	movs	r3, #0
    *activation_max = 6;
  } else if (activation == kTfLiteActReluN1To1) {
    *activation_min = -1;
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
   babc6:	6363      	str	r3, [r4, #52]	; 0x34
    *activation_max = std::numeric_limits<T>::max();
   babc8:	4b0c      	ldr	r3, [pc, #48]	; (babfc <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x154>)
   babca:	e004      	b.n	babd6 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x12e>
  } else if (activation == kTfLiteActRelu6) {
   babcc:	2b03      	cmp	r3, #3
   babce:	d109      	bne.n	babe4 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x13c>
    *activation_min = 0;
   babd0:	2300      	movs	r3, #0
   babd2:	6363      	str	r3, [r4, #52]	; 0x34
    *activation_max = 6;
   babd4:	4b0a      	ldr	r3, [pc, #40]	; (bac00 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x158>)
    *activation_max = std::numeric_limits<T>::max();
   babd6:	63a3      	str	r3, [r4, #56]	; 0x38
}
   babd8:	2000      	movs	r0, #0
   babda:	b001      	add	sp, #4
   babdc:	ecbd 8b06 	vpop	{d8-d10}
   babe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (activation == kTfLiteActReluN1To1) {
   babe4:	2b02      	cmp	r3, #2
   babe6:	d104      	bne.n	babf2 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x14a>
    *activation_min = -1;
   babe8:	4b06      	ldr	r3, [pc, #24]	; (bac04 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x15c>)
   babea:	6363      	str	r3, [r4, #52]	; 0x34
    *activation_max = 1;
   babec:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   babf0:	e7f1      	b.n	babd6 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x12e>
    *activation_min = std::numeric_limits<T>::lowest();
   babf2:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
   babf6:	e7e6      	b.n	babc6 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x11e>
   babf8:	41300000 	.word	0x41300000
   babfc:	7f7fffff 	.word	0x7f7fffff
   bac00:	40c00000 	.word	0x40c00000
   bac04:	bf800000 	.word	0xbf800000

000bac08 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   bac08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
   bac0a:	690b      	ldr	r3, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   bac0c:	4604      	mov	r4, r0
   bac0e:	460d      	mov	r5, r1
  TFLITE_DCHECK(node->user_data != nullptr);
   bac10:	b90b      	cbnz	r3, bac16 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0xe>
   bac12:	f001 fcbb 	bl	bc58c <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
   bac16:	694b      	ldr	r3, [r1, #20]
   bac18:	2b00      	cmp	r3, #0
   bac1a:	d0fa      	beq.n	bac12 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0xa>

  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);
   bac1c:	2200      	movs	r2, #0
   bac1e:	f000 ffc7 	bl	bbbb0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input1 != nullptr);
   bac22:	4606      	mov	r6, r0
   bac24:	b950      	cbnz	r0, bac3c <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x34>
   bac26:	4b16      	ldr	r3, [pc, #88]	; (bac80 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x78>)
   bac28:	6965      	ldr	r5, [r4, #20]
   bac2a:	9300      	str	r3, [sp, #0]
   bac2c:	23cb      	movs	r3, #203	; 0xcb
  const TfLiteTensor* input2 = GetInput(context, node, kInputTensor2);
  TF_LITE_ENSURE(context, input2 != nullptr);
   bac2e:	4620      	mov	r0, r4
   bac30:	4a14      	ldr	r2, [pc, #80]	; (bac84 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
   bac32:	4915      	ldr	r1, [pc, #84]	; (bac88 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x80>)
   bac34:	47a8      	blx	r5
   bac36:	2001      	movs	r0, #1

  TF_LITE_ENSURE_STATUS(
      CalculateOpData(context, params, input1, input2, output, data));

  return kTfLiteOk;
}
   bac38:	b003      	add	sp, #12
   bac3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  const TfLiteTensor* input2 = GetInput(context, node, kInputTensor2);
   bac3c:	2201      	movs	r2, #1
   bac3e:	4629      	mov	r1, r5
   bac40:	4620      	mov	r0, r4
   bac42:	f000 ffb5 	bl	bbbb0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input2 != nullptr);
   bac46:	4607      	mov	r7, r0
   bac48:	b920      	cbnz	r0, bac54 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x4c>
   bac4a:	4b10      	ldr	r3, [pc, #64]	; (bac8c <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x84>)
   bac4c:	9300      	str	r3, [sp, #0]
   bac4e:	6965      	ldr	r5, [r4, #20]
   bac50:	23cd      	movs	r3, #205	; 0xcd
   bac52:	e7ec      	b.n	bac2e <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
   bac54:	2200      	movs	r2, #0
   bac56:	4629      	mov	r1, r5
   bac58:	4620      	mov	r0, r4
   bac5a:	f000 ffac 	bl	bbbb6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
   bac5e:	b920      	cbnz	r0, bac6a <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x62>
   bac60:	4b0b      	ldr	r3, [pc, #44]	; (bac90 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x88>)
   bac62:	9300      	str	r3, [sp, #0]
   bac64:	6965      	ldr	r5, [r4, #20]
   bac66:	23cf      	movs	r3, #207	; 0xcf
   bac68:	e7e1      	b.n	bac2e <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
  TF_LITE_ENSURE_STATUS(
   bac6a:	692b      	ldr	r3, [r5, #16]
   bac6c:	e9cd 0300 	strd	r0, r3, [sp]
   bac70:	4632      	mov	r2, r6
   bac72:	6969      	ldr	r1, [r5, #20]
   bac74:	463b      	mov	r3, r7
   bac76:	4620      	mov	r0, r4
   bac78:	f7ff ff16 	bl	baaa8 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE>
   bac7c:	e7dc      	b.n	bac38 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x30>
   bac7e:	bf00      	nop
   bac80:	000cb67f 	.word	0x000cb67f
   bac84:	000cb5dc 	.word	0x000cb5dc
   bac88:	000cad56 	.word	0x000cad56
   bac8c:	000cb691 	.word	0x000cb691
   bac90:	000cad90 	.word	0x000cad90

000bac94 <_ZN6tflite3ops5micro12Register_ADDEv>:
  return kTfLiteOk;
}

}  // namespace add

TfLiteRegistration Register_ADD() {
   bac94:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/add::Prepare,
          /*invoke=*/add::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   bac96:	4d05      	ldr	r5, [pc, #20]	; (bacac <_ZN6tflite3ops5micro12Register_ADDEv+0x18>)
TfLiteRegistration Register_ADD() {
   bac98:	4606      	mov	r6, r0
          /*version=*/0};
   bac9a:	4604      	mov	r4, r0
   bac9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bac9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   baca0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   baca4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   baca8:	4630      	mov	r0, r6
   bacaa:	bd70      	pop	{r4, r5, r6, pc}
   bacac:	000cb6a4 	.word	0x000cb6a4

000bacb0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf>:
                               const RuntimeShape& input1_shape,
                               const float* input1_data,
                               const RuntimeShape& input2_shape,
                               const float* input2_data,
                               const RuntimeShape& output_shape,
                               float* output_data) {
   bacb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bacb4:	ed2d 8b02 	vpush	{d8}
   bacb8:	b099      	sub	sp, #100	; 0x64
   bacba:	4683      	mov	fp, r0
   bacbc:	4616      	mov	r6, r2
   bacbe:	4608      	mov	r0, r1
  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   bacc0:	aa08      	add	r2, sp, #32
                               float* output_data) {
   bacc2:	4619      	mov	r1, r3
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   bacc4:	ab10      	add	r3, sp, #64	; 0x40
   bacc6:	f7fd febf 	bl	b8a48 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
   bacca:	9a25      	ldr	r2, [sp, #148]	; 0x94
   baccc:	2301      	movs	r3, #1
   bacce:	2104      	movs	r1, #4
   bacd0:	a802      	add	r0, sp, #8
   bacd2:	f7fd fcd2 	bl	b867a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   bacd6:	2400      	movs	r4, #0
   bacd8:	2100      	movs	r1, #0
   bacda:	a802      	add	r0, sp, #8
   bacdc:	f7fd fc83 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
   bace0:	42a0      	cmp	r0, r4
   bace2:	dd5b      	ble.n	bad9c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0xec>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   bace4:	2500      	movs	r5, #0
   bace6:	f10d 0808 	add.w	r8, sp, #8
   bacea:	2101      	movs	r1, #1
   bacec:	4640      	mov	r0, r8
   bacee:	f7fd fc7a 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
   bacf2:	42a8      	cmp	r0, r5
   bacf4:	dd50      	ble.n	bad98 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0xe8>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   bacf6:	2700      	movs	r7, #0
   bacf8:	2102      	movs	r1, #2
   bacfa:	4640      	mov	r0, r8
   bacfc:	f7fd fc73 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
   bad00:	42b8      	cmp	r0, r7
   bad02:	dd47      	ble.n	bad94 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0xe4>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   bad04:	f04f 0900 	mov.w	r9, #0
   bad08:	2103      	movs	r1, #3
   bad0a:	4640      	mov	r0, r8
   bad0c:	f7fd fc6b 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
   bad10:	4548      	cmp	r0, r9
   bad12:	dd3d      	ble.n	bad90 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0xe0>
          output_data[Offset(extended_output_shape, b, y, x, c)] =
              ActivationFunctionWithMinMax(
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] +
   bad14:	f8cd 9000 	str.w	r9, [sp]
   bad18:	463b      	mov	r3, r7
   bad1a:	462a      	mov	r2, r5
   bad1c:	4621      	mov	r1, r4
   bad1e:	a808      	add	r0, sp, #32
   bad20:	f7fd fe58 	bl	b89d4 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                      input2_data[SubscriptToIndex(desc2, b, y, x, c)],
   bad24:	f8cd 9000 	str.w	r9, [sp]
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] +
   bad28:	4682      	mov	sl, r0
                      input2_data[SubscriptToIndex(desc2, b, y, x, c)],
   bad2a:	463b      	mov	r3, r7
   bad2c:	462a      	mov	r2, r5
   bad2e:	4621      	mov	r1, r4
   bad30:	a810      	add	r0, sp, #64	; 0x40
   bad32:	f7fd fe4f 	bl	b89d4 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   bad36:	9b24      	ldr	r3, [sp, #144]	; 0x90
                  params.float_activation_min, params.float_activation_max);
   bad38:	ed9b 8a0d 	vldr	s16, [fp, #52]	; 0x34
                      input2_data[SubscriptToIndex(desc2, b, y, x, c)],
   bad3c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] +
   bad40:	eb06 0a8a 	add.w	sl, r6, sl, lsl #2
              ActivationFunctionWithMinMax(
   bad44:	ed90 7a00 	vldr	s14, [r0]
   bad48:	edda 7a00 	vldr	s15, [sl]
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   bad4c:	f8cd 9000 	str.w	r9, [sp]
              ActivationFunctionWithMinMax(
   bad50:	ee77 7a87 	vadd.f32	s15, s15, s14
                  params.float_activation_min, params.float_activation_max);
   bad54:	ed9b 7a0e 	vldr	s14, [fp, #56]	; 0x38
      return __a;
   bad58:	eef4 7ac8 	vcmpe.f32	s15, s16
   bad5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bad60:	bf58      	it	pl
   bad62:	eeb0 8a67 	vmovpl.f32	s16, s15
	return __b;
   bad66:	eeb4 7a48 	vcmp.f32	s14, s16
   bad6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   bad6e:	463b      	mov	r3, r7
   bad70:	462a      	mov	r2, r5
   bad72:	4621      	mov	r1, r4
   bad74:	4640      	mov	r0, r8
   bad76:	bf48      	it	mi
   bad78:	eeb0 8a47 	vmovmi.f32	s16, s14
   bad7c:	f7fd fde5 	bl	b894a <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   bad80:	9b26      	ldr	r3, [sp, #152]	; 0x98
   bad82:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bad86:	ed80 8a00 	vstr	s16, [r0]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   bad8a:	f109 0901 	add.w	r9, r9, #1
   bad8e:	e7bb      	b.n	bad08 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x58>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   bad90:	3701      	adds	r7, #1
   bad92:	e7b1      	b.n	bacf8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x48>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   bad94:	3501      	adds	r5, #1
   bad96:	e7a6      	b.n	bace6 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x36>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   bad98:	3401      	adds	r4, #1
   bad9a:	e79d      	b.n	bacd8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x28>
      RuntimeShape::ExtendedShape(4, output_shape);
   bad9c:	a802      	add	r0, sp, #8
   bad9e:	f7fd fc17 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
        }
      }
    }
  }
}
   bada2:	b019      	add	sp, #100	; 0x64
   bada4:	ecbd 8b02 	vpop	{d8}
   bada8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000badac <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_>:
             const TfLiteEvalTensor* input2, TfLiteEvalTensor* output) {
   badac:	b5f0      	push	{r4, r5, r6, r7, lr}
   badae:	b0bd      	sub	sp, #244	; 0xf4
   badb0:	e9dd 7642 	ldrd	r7, r6, [sp, #264]	; 0x108
  int32_t output_shift_identity;
};

template <typename P>
inline void SetActivationParams(float min, float max, P* params) {
  params->float_activation_min = min;
   badb4:	6b59      	ldr	r1, [r3, #52]	; 0x34
                      data->output_activation_max_f32, &op_params);
   badb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  if (data->requires_broadcast) {
   badb8:	781b      	ldrb	r3, [r3, #0]
   badba:	912f      	str	r1, [sp, #188]	; 0xbc
             const TfLiteEvalTensor* input2, TfLiteEvalTensor* output) {
   badbc:	9c44      	ldr	r4, [sp, #272]	; 0x110
  params->float_activation_max = max;
   badbe:	9230      	str	r2, [sp, #192]	; 0xc0
  if (data->requires_broadcast) {
   badc0:	ad1c      	add	r5, sp, #112	; 0x70
    TF_LITE_ADD(BroadcastAdd4DSlow);
   badc2:	4639      	mov	r1, r7
  if (data->requires_broadcast) {
   badc4:	b33b      	cbz	r3, bae16 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x6a>
    TF_LITE_ADD(BroadcastAdd4DSlow);
   badc6:	a804      	add	r0, sp, #16
   badc8:	f7fd fd95 	bl	b88f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   badcc:	b90f      	cbnz	r7, badd2 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x26>
   badce:	f001 fbdd 	bl	bc58c <abort>
   badd2:	4631      	mov	r1, r6
   badd4:	a80a      	add	r0, sp, #40	; 0x28
  return reinterpret_cast<const T*>(tensor->data.raw);
   badd6:	683f      	ldr	r7, [r7, #0]
   badd8:	f7fd fd8d 	bl	b88f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   baddc:	2e00      	cmp	r6, #0
   badde:	d0f6      	beq.n	badce <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x22>
   bade0:	4621      	mov	r1, r4
   bade2:	4628      	mov	r0, r5
  return reinterpret_cast<const T*>(tensor->data.raw);
   bade4:	6836      	ldr	r6, [r6, #0]
   bade6:	f7fd fd86 	bl	b88f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   badea:	b104      	cbz	r4, badee <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x42>
   badec:	6824      	ldr	r4, [r4, #0]
   badee:	9600      	str	r6, [sp, #0]
   badf0:	ab0a      	add	r3, sp, #40	; 0x28
   badf2:	463a      	mov	r2, r7
   badf4:	a904      	add	r1, sp, #16
   badf6:	a822      	add	r0, sp, #136	; 0x88
   badf8:	e9cd 5401 	strd	r5, r4, [sp, #4]
   badfc:	f7ff ff58 	bl	bacb0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf>
   bae00:	4628      	mov	r0, r5
   bae02:	f7fd fbe5 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
   bae06:	a80a      	add	r0, sp, #40	; 0x28
   bae08:	f7fd fbe2 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
   bae0c:	a804      	add	r0, sp, #16
    TF_LITE_ADD(Add);
   bae0e:	f7fd fbdf 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
}
   bae12:	b03d      	add	sp, #244	; 0xf4
   bae14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TF_LITE_ADD(Add);
   bae16:	a810      	add	r0, sp, #64	; 0x40
   bae18:	f7fd fd6d 	bl	b88f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   bae1c:	2f00      	cmp	r7, #0
   bae1e:	d0d6      	beq.n	badce <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x22>
   bae20:	4631      	mov	r1, r6
   bae22:	a816      	add	r0, sp, #88	; 0x58
  return reinterpret_cast<const T*>(tensor->data.raw);
   bae24:	683f      	ldr	r7, [r7, #0]
   bae26:	f7fd fd66 	bl	b88f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   bae2a:	2e00      	cmp	r6, #0
   bae2c:	d0cf      	beq.n	badce <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x22>
   bae2e:	4621      	mov	r1, r4
   bae30:	4628      	mov	r0, r5
  return reinterpret_cast<const T*>(tensor->data.raw);
   bae32:	6836      	ldr	r6, [r6, #0]
   bae34:	f7fd fd5f 	bl	b88f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bae38:	b104      	cbz	r4, bae3c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x90>
   bae3a:	6824      	ldr	r4, [r4, #0]
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
   bae3c:	462a      	mov	r2, r5
   bae3e:	a916      	add	r1, sp, #88	; 0x58
   bae40:	a810      	add	r0, sp, #64	; 0x40
   bae42:	f7fd fc47 	bl	b86d4 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
  for (int i = 0; i < flat_size; i++) {
   bae46:	463a      	mov	r2, r7
   bae48:	4633      	mov	r3, r6
   bae4a:	2100      	movs	r1, #0
   bae4c:	4288      	cmp	r0, r1
   bae4e:	dd1b      	ble.n	bae88 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xdc>
    auto x = input1_data[i] + input2_data[i];
   bae50:	ecf3 7a01 	vldmia	r3!, {s15}
   bae54:	ecb2 7a01 	vldmia	r2!, {s14}
        x, params.float_activation_min, params.float_activation_max);
   bae58:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
    auto x = input1_data[i] + input2_data[i];
   bae5c:	ee37 7a27 	vadd.f32	s14, s14, s15
        x, params.float_activation_min, params.float_activation_max);
   bae60:	eddd 7a2f 	vldr	s15, [sp, #188]	; 0xbc
      return __a;
   bae64:	eeb4 7ae7 	vcmpe.f32	s14, s15
   bae68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bae6c:	bf58      	it	pl
   bae6e:	eef0 7a47 	vmovpl.f32	s15, s14
	return __b;
   bae72:	eef4 6a67 	vcmp.f32	s13, s15
   bae76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bae7a:	bf48      	it	mi
   bae7c:	eef0 7a66 	vmovmi.f32	s15, s13
    output_data[i] = ActivationFunctionWithMinMax(
   bae80:	ece4 7a01 	vstmia	r4!, {s15}
  for (int i = 0; i < flat_size; i++) {
   bae84:	3101      	adds	r1, #1
   bae86:	e7e1      	b.n	bae4c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa0>
   bae88:	4628      	mov	r0, r5
   bae8a:	f7fd fba1 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
   bae8e:	a816      	add	r0, sp, #88	; 0x58
   bae90:	f7fd fb9e 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
   bae94:	a810      	add	r0, sp, #64	; 0x40
   bae96:	e7ba      	b.n	bae0e <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x62>

000bae98 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIhEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_>:

// This function is used for 8-bit as well as for 16-bit, but the accumulator
// is 32-bit for both cases. The overflow does not happen due to the
// choice of the shift (20 or 15, accordingly - see add.cc for more comments).
template <typename T>
inline void BroadcastAdd4DSlow(
   bae98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bae9c:	b09b      	sub	sp, #108	; 0x6c
   bae9e:	4604      	mov	r4, r0
   baea0:	4693      	mov	fp, r2
   baea2:	4608      	mov	r0, r1
    const ArithmeticParams& params, const RuntimeShape& input1_shape,
    const T* input1_data, const RuntimeShape& input2_shape,
    const T* input2_data, const RuntimeShape& output_shape, T* output_data) {
  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   baea4:	aa0a      	add	r2, sp, #40	; 0x28
inline void BroadcastAdd4DSlow(
   baea6:	4619      	mov	r1, r3
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   baea8:	ab12      	add	r3, sp, #72	; 0x48
   baeaa:	f7fd fdcd 	bl	b8a48 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
    return RuntimeShape(new_shape_size, shape, 1);
   baeae:	9a25      	ldr	r2, [sp, #148]	; 0x94
   baeb0:	2301      	movs	r3, #1
   baeb2:	2104      	movs	r1, #4
   baeb4:	a804      	add	r0, sp, #16
   baeb6:	f7fd fbe0 	bl	b867a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   baeba:	2600      	movs	r6, #0
   baebc:	2100      	movs	r1, #0
   baebe:	a804      	add	r0, sp, #16
   baec0:	f7fd fb91 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
   baec4:	42b0      	cmp	r0, r6
   baec6:	dd66      	ble.n	baf96 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIhEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xfe>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   baec8:	2700      	movs	r7, #0
   baeca:	f10d 0910 	add.w	r9, sp, #16
   baece:	2101      	movs	r1, #1
   baed0:	4648      	mov	r0, r9
   baed2:	f7fd fb88 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
   baed6:	42b8      	cmp	r0, r7
   baed8:	dd5b      	ble.n	baf92 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIhEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xfa>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   baeda:	f04f 0800 	mov.w	r8, #0
   baede:	2102      	movs	r1, #2
   baee0:	4648      	mov	r0, r9
   baee2:	f7fd fb80 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
   baee6:	4540      	cmp	r0, r8
   baee8:	dd51      	ble.n	baf8e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIhEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xf6>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   baeea:	f04f 0a00 	mov.w	sl, #0
   baeee:	2103      	movs	r1, #3
   baef0:	4648      	mov	r0, r9
   baef2:	f7fd fb78 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
   baef6:	4550      	cmp	r0, sl
   baef8:	dd46      	ble.n	baf88 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIhEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xf0>
          const int32_t input1_val =
              params.input1_offset +
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   baefa:	f8cd a000 	str.w	sl, [sp]
   baefe:	4643      	mov	r3, r8
   baf00:	463a      	mov	r2, r7
   baf02:	4631      	mov	r1, r6
   baf04:	a80a      	add	r0, sp, #40	; 0x28
   baf06:	f7fd fd65 	bl	b89d4 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          const int32_t input1_val =
   baf0a:	6863      	ldr	r3, [r4, #4]
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   baf0c:	f81b 5000 	ldrb.w	r5, [fp, r0]
          const int32_t input2_val =
              params.input2_offset +
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   baf10:	f8cd a000 	str.w	sl, [sp]
          const int32_t input1_val =
   baf14:	441d      	add	r5, r3
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   baf16:	463a      	mov	r2, r7
   baf18:	4643      	mov	r3, r8
   baf1a:	4631      	mov	r1, r6
   baf1c:	a812      	add	r0, sp, #72	; 0x48
   baf1e:	f7fd fd59 	bl	b89d4 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   baf22:	9b24      	ldr	r3, [sp, #144]	; 0x90
          const int32_t input2_val =
   baf24:	68a2      	ldr	r2, [r4, #8]
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   baf26:	5c1b      	ldrb	r3, [r3, r0]
          const int32_t shifted_input1_val =
              input1_val * (1 << params.left_shift);
   baf28:	f8d4 c018 	ldr.w	ip, [r4, #24]
          const int32_t input2_val =
   baf2c:	4413      	add	r3, r2
          const int32_t shifted_input2_val =
   baf2e:	fa03 f30c 	lsl.w	r3, r3, ip
              input2_val * (1 << params.left_shift);
          const int32_t scaled_input1_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   baf32:	fa05 f00c 	lsl.w	r0, r5, ip
   baf36:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
          const int32_t shifted_input2_val =
   baf3a:	9303      	str	r3, [sp, #12]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   baf3c:	f7fd fbde 	bl	b86fc <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
                  shifted_input1_val, params.input1_multiplier,
                  params.input1_shift);
          const int32_t scaled_input2_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   baf40:	9b03      	ldr	r3, [sp, #12]
   baf42:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   baf46:	4605      	mov	r5, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   baf48:	4618      	mov	r0, r3
   baf4a:	f7fd fbd7 	bl	b86fc <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
                  shifted_input2_val, params.input2_multiplier,
                  params.input2_shift);
          const int32_t raw_sum = scaled_input1_val + scaled_input2_val;
          const int32_t raw_output =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   baf4e:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   baf52:	4428      	add	r0, r5
   baf54:	f7fd fbd2 	bl	b86fc <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
                  raw_sum, params.output_multiplier, params.output_shift) +
              params.output_offset;
          const int32_t clamped_output =
              std::min(params.quantized_activation_max,
                       std::max(params.quantized_activation_min, raw_output));
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   baf58:	f8cd a000 	str.w	sl, [sp]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   baf5c:	4605      	mov	r5, r0
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   baf5e:	4643      	mov	r3, r8
   baf60:	463a      	mov	r2, r7
   baf62:	4631      	mov	r1, r6
   baf64:	4648      	mov	r0, r9
   baf66:	f7fd fcf0 	bl	b894a <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                  raw_sum, params.output_multiplier, params.output_shift) +
   baf6a:	68e3      	ldr	r3, [r4, #12]
   baf6c:	441d      	add	r5, r3
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   baf6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   baf70:	429d      	cmp	r5, r3
   baf72:	bfb8      	it	lt
   baf74:	461d      	movlt	r5, r3
   baf76:	6b23      	ldr	r3, [r4, #48]	; 0x30
   baf78:	429d      	cmp	r5, r3
   baf7a:	bfa8      	it	ge
   baf7c:	461d      	movge	r5, r3
   baf7e:	9b26      	ldr	r3, [sp, #152]	; 0x98
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   baf80:	f10a 0a01 	add.w	sl, sl, #1
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   baf84:	541d      	strb	r5, [r3, r0]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   baf86:	e7b2      	b.n	baeee <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIhEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x56>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   baf88:	f108 0801 	add.w	r8, r8, #1
   baf8c:	e7a7      	b.n	baede <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIhEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x46>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   baf8e:	3701      	adds	r7, #1
   baf90:	e79b      	b.n	baeca <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIhEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x32>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   baf92:	3601      	adds	r6, #1
   baf94:	e792      	b.n	baebc <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIhEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x24>
  const RuntimeShape extended_output_shape =
   baf96:	a804      	add	r0, sp, #16
   baf98:	f7fd fb1a 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
              static_cast<T>(clamped_output);
        }
      }
    }
  }
}
   baf9c:	b01b      	add	sp, #108	; 0x6c
   baf9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bafa2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_.part.0>:
TfLiteStatus EvalAddQuantized(TfLiteContext* context, TfLiteNode* node,
   bafa2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bafa6:	ed2d 8b02 	vpush	{d8}
   bafaa:	b0db      	sub	sp, #364	; 0x16c
   bafac:	4699      	mov	r9, r3
    op_params.left_shift = data->left_shift;
   bafae:	6a43      	ldr	r3, [r0, #36]	; 0x24
   bafb0:	9346      	str	r3, [sp, #280]	; 0x118
    op_params.input1_offset = data->input1_offset;
   bafb2:	6a83      	ldr	r3, [r0, #40]	; 0x28
   bafb4:	9341      	str	r3, [sp, #260]	; 0x104
    op_params.input1_multiplier = data->input1_multiplier;
   bafb6:	6943      	ldr	r3, [r0, #20]
   bafb8:	9347      	str	r3, [sp, #284]	; 0x11c
    op_params.input1_shift = data->input1_shift;
   bafba:	6843      	ldr	r3, [r0, #4]
   bafbc:	9348      	str	r3, [sp, #288]	; 0x120
    op_params.input2_offset = data->input2_offset;
   bafbe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   bafc0:	9342      	str	r3, [sp, #264]	; 0x108
    op_params.input2_multiplier = data->input2_multiplier;
   bafc2:	6983      	ldr	r3, [r0, #24]
   bafc4:	9349      	str	r3, [sp, #292]	; 0x124
    op_params.input2_shift = data->input2_shift;
   bafc6:	6883      	ldr	r3, [r0, #8]
   bafc8:	934a      	str	r3, [sp, #296]	; 0x128
    op_params.output_offset = data->output_offset;
   bafca:	6b03      	ldr	r3, [r0, #48]	; 0x30
   bafcc:	9343      	str	r3, [sp, #268]	; 0x10c
    op_params.output_multiplier = data->output_multiplier;
   bafce:	69c3      	ldr	r3, [r0, #28]
   bafd0:	9344      	str	r3, [sp, #272]	; 0x110
    op_params.output_shift = data->output_shift;
   bafd2:	6a03      	ldr	r3, [r0, #32]
   bafd4:	9345      	str	r3, [sp, #276]	; 0x114
TfLiteStatus EvalAddQuantized(TfLiteContext* context, TfLiteNode* node,
   bafd6:	4616      	mov	r6, r2
}

template <typename P>
inline void SetActivationParams(int32_t min, int32_t max, P* params) {
  params->quantized_activation_min = min;
   bafd8:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
        tflite::micro::GetTensorShape(input1),
   bafdc:	ac38      	add	r4, sp, #224	; 0xe0
        tflite::micro::GetTensorShape(input2), &op_params);
   bafde:	ad30      	add	r5, sp, #192	; 0xc0
        tflite::micro::GetTensorShape(input1),
   bafe0:	4620      	mov	r0, r4
  params->quantized_activation_max = max;
   bafe2:	e9cd 234b 	strd	r2, r3, [sp, #300]	; 0x12c
TfLiteStatus EvalAddQuantized(TfLiteContext* context, TfLiteNode* node,
   bafe6:	460f      	mov	r7, r1
        tflite::micro::GetTensorShape(input1),
   bafe8:	f7fd fc85 	bl	b88f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        tflite::micro::GetTensorShape(input2), &op_params);
   bafec:	4631      	mov	r1, r6
   bafee:	4628      	mov	r0, r5
   baff0:	f7fd fc81 	bl	b88f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    bool need_broadcast = reference_ops::ProcessBroadcastShapes(
   baff4:	aa40      	add	r2, sp, #256	; 0x100
   baff6:	4629      	mov	r1, r5
   baff8:	4620      	mov	r0, r4
   baffa:	f7fd fbab 	bl	b8754 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>
   baffe:	4682      	mov	sl, r0
        tflite::micro::GetTensorShape(input2), &op_params);
   bb000:	4628      	mov	r0, r5
   bb002:	f7fd fae5 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(input1),
   bb006:	4620      	mov	r0, r4
   bb008:	f7fd fae2 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
    if (output->type == kTfLiteInt8) {
   bb00c:	f899 3008 	ldrb.w	r3, [r9, #8]
   bb010:	2b09      	cmp	r3, #9
   bb012:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
   bb016:	f040 8107 	bne.w	bb228 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_.part.0+0x286>
      if (need_broadcast) {
   bb01a:	f1ba 0f00 	cmp.w	sl, #0
   bb01e:	f000 80a6 	beq.w	bb16e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_.part.0+0x1cc>
        TF_LITE_ADD(reference_integer_ops, BroadcastAdd4DSlow, int8_t);
   bb022:	4639      	mov	r1, r7
   bb024:	a824      	add	r0, sp, #144	; 0x90
   bb026:	f7fd fc66 	bl	b88f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   bb02a:	b90f      	cbnz	r7, bb030 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_.part.0+0x8e>
   bb02c:	f001 faae 	bl	bc58c <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
   bb030:	683b      	ldr	r3, [r7, #0]
   bb032:	930e      	str	r3, [sp, #56]	; 0x38
   bb034:	4631      	mov	r1, r6
   bb036:	a81e      	add	r0, sp, #120	; 0x78
   bb038:	f7fd fc5d 	bl	b88f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   bb03c:	2e00      	cmp	r6, #0
   bb03e:	d0f5      	beq.n	bb02c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_.part.0+0x8a>
  return reinterpret_cast<const T*>(tensor->data.raw);
   bb040:	6833      	ldr	r3, [r6, #0]
   bb042:	930d      	str	r3, [sp, #52]	; 0x34
   bb044:	4649      	mov	r1, r9
   bb046:	a818      	add	r0, sp, #96	; 0x60
   bb048:	f7fd fc55 	bl	b88f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bb04c:	f8d9 3000 	ldr.w	r3, [r9]
   bb050:	930c      	str	r3, [sp, #48]	; 0x30
    int8_t* output_data,
    void (*check_arithmetic_params)(const ArithmeticParams&),
    int8_t (*binary_func)(int8_t, int8_t, const ArithmeticParams&)) {
  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   bb052:	462a      	mov	r2, r5
   bb054:	4623      	mov	r3, r4
   bb056:	a91e      	add	r1, sp, #120	; 0x78
   bb058:	a824      	add	r0, sp, #144	; 0x90
   bb05a:	f7fd fcf5 	bl	b8a48 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
    return RuntimeShape(new_shape_size, shape, 1);
   bb05e:	2301      	movs	r3, #1
   bb060:	aa18      	add	r2, sp, #96	; 0x60
   bb062:	2104      	movs	r1, #4
   bb064:	4640      	mov	r0, r8
   bb066:	f7fd fb08 	bl	b867a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   bb06a:	2700      	movs	r7, #0
   bb06c:	2100      	movs	r1, #0
   bb06e:	a82a      	add	r0, sp, #168	; 0xa8
   bb070:	f7fd fab9 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
   bb074:	42b8      	cmp	r0, r7
   bb076:	dd69      	ble.n	bb14c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_.part.0+0x1aa>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   bb078:	f04f 0800 	mov.w	r8, #0
   bb07c:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
   bb080:	2101      	movs	r1, #1
   bb082:	4650      	mov	r0, sl
   bb084:	f7fd faaf 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
   bb088:	4540      	cmp	r0, r8
   bb08a:	dd5d      	ble.n	bb148 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_.part.0+0x1a6>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   bb08c:	f04f 0900 	mov.w	r9, #0
   bb090:	2102      	movs	r1, #2
   bb092:	4650      	mov	r0, sl
   bb094:	f7fd faa7 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
   bb098:	4548      	cmp	r0, r9
   bb09a:	dd52      	ble.n	bb142 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_.part.0+0x1a0>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   bb09c:	f04f 0b00 	mov.w	fp, #0
   bb0a0:	2103      	movs	r1, #3
   bb0a2:	4650      	mov	r0, sl
   bb0a4:	f7fd fa9f 	bl	b85e6 <_ZNK6tflite12RuntimeShape4DimsEi>
   bb0a8:	4558      	cmp	r0, fp
   bb0aa:	dd47      	ble.n	bb13c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_.part.0+0x19a>
          output_data[Offset(extended_output_shape, b, y, x, c)] = binary_func(
              input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bb0ac:	f8cd b000 	str.w	fp, [sp]
   bb0b0:	464b      	mov	r3, r9
   bb0b2:	4642      	mov	r2, r8
   bb0b4:	4639      	mov	r1, r7
   bb0b6:	4628      	mov	r0, r5
   bb0b8:	f7fd fc8c 	bl	b89d4 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
              input2_data[SubscriptToIndex(desc2, b, y, x, c)], params);
   bb0bc:	f8cd b000 	str.w	fp, [sp]
              input1_data[SubscriptToIndex(desc1, b, y, x, c)],
   bb0c0:	4606      	mov	r6, r0
              input2_data[SubscriptToIndex(desc2, b, y, x, c)], params);
   bb0c2:	464b      	mov	r3, r9
   bb0c4:	4642      	mov	r2, r8
   bb0c6:	4639      	mov	r1, r7
   bb0c8:	4620      	mov	r0, r4
   bb0ca:	f7fd fc83 	bl	b89d4 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
  }
}

inline int8_t AddFunc(int8_t x, int8_t y, const ArithmeticParams& params) {
  const int32_t input1_val = params.input1_offset + x;
  const int32_t input2_val = params.input2_offset + y;
   bb0ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bb0d0:	9a42      	ldr	r2, [sp, #264]	; 0x108
   bb0d2:	561b      	ldrsb	r3, [r3, r0]
  const int32_t shifted_input1_val = input1_val * (1 << params.left_shift);
   bb0d4:	f8dd c118 	ldr.w	ip, [sp, #280]	; 0x118
  const int32_t input1_val = params.input1_offset + x;
   bb0d8:	9841      	ldr	r0, [sp, #260]	; 0x104
  const int32_t input2_val = params.input2_offset + y;
   bb0da:	4413      	add	r3, r2
  const int32_t shifted_input2_val = input2_val * (1 << params.left_shift);
   bb0dc:	fa03 f30c 	lsl.w	r3, r3, ip
   bb0e0:	930f      	str	r3, [sp, #60]	; 0x3c
  const int32_t input1_val = params.input1_offset + x;
   bb0e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   bb0e4:	579a      	ldrsb	r2, [r3, r6]
   bb0e6:	4410      	add	r0, r2
  const int32_t scaled_input1_val =
      MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bb0e8:	fa00 f00c 	lsl.w	r0, r0, ip
   bb0ec:	e9dd 1247 	ldrd	r1, r2, [sp, #284]	; 0x11c
   bb0f0:	f7fd fb04 	bl	b86fc <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
          shifted_input1_val, params.input1_multiplier, params.input1_shift);
  const int32_t scaled_input2_val =
      MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bb0f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   bb0f6:	e9dd 1249 	ldrd	r1, r2, [sp, #292]	; 0x124
      MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bb0fa:	4606      	mov	r6, r0
      MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bb0fc:	4618      	mov	r0, r3
   bb0fe:	f7fd fafd 	bl	b86fc <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
          shifted_input2_val, params.input2_multiplier, params.input2_shift);
  const int32_t raw_sum = scaled_input1_val + scaled_input2_val;
  const int32_t raw_output =
      MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bb102:	e9dd 1244 	ldrd	r1, r2, [sp, #272]	; 0x110
   bb106:	4430      	add	r0, r6
   bb108:	f7fd faf8 	bl	b86fc <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
          output_data[Offset(extended_output_shape, b, y, x, c)] = binary_func(
   bb10c:	f8cd b000 	str.w	fp, [sp]
      MultiplyByQuantizedMultiplierSmallerThanOneExp(
   bb110:	4606      	mov	r6, r0
          output_data[Offset(extended_output_shape, b, y, x, c)] = binary_func(
   bb112:	464b      	mov	r3, r9
   bb114:	4642      	mov	r2, r8
   bb116:	4639      	mov	r1, r7
   bb118:	4650      	mov	r0, sl
   bb11a:	f7fd fc16 	bl	b894a <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
          raw_sum, params.output_multiplier, params.output_shift) +
   bb11e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   bb120:	441e      	add	r6, r3
      params.output_offset;
  const int32_t clamped_output =
      std::min(params.quantized_activation_max,
               std::max(params.quantized_activation_min, raw_output));
  return static_cast<int8_t>(clamped_output);
   bb122:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
   bb124:	429e      	cmp	r6, r3
   bb126:	bfb8      	it	lt
   bb128:	461e      	movlt	r6, r3
   bb12a:	9b4c      	ldr	r3, [sp, #304]	; 0x130
   bb12c:	429e      	cmp	r6, r3
   bb12e:	bfa8      	it	ge
   bb130:	461e      	movge	r6, r3
   bb132:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   bb134:	f10b 0b01 	add.w	fp, fp, #1
  return static_cast<int8_t>(clamped_output);
   bb138:	541e      	strb	r6, [r3, r0]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   bb13a:	e7b1      	b.n	bb0a0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_.part.0+0xfe>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   bb13c:	f109 0901 	add.w	r9, r9, #1
   bb140:	e7a6      	b.n	bb090 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_.part.0+0xee>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   bb142:	f108 0801 	add.w	r8, r8, #1
   bb146:	e799      	b.n	bb07c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_.part.0+0xda>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   bb148:	3701      	adds	r7, #1
   bb14a:	e78f      	b.n	bb06c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_.part.0+0xca>
      RuntimeShape::ExtendedShape(4, output_shape);
   bb14c:	a82a      	add	r0, sp, #168	; 0xa8
   bb14e:	f7fd fa3f 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
   bb152:	a818      	add	r0, sp, #96	; 0x60
   bb154:	f7fd fa3c 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
   bb158:	a81e      	add	r0, sp, #120	; 0x78
   bb15a:	f7fd fa39 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
   bb15e:	a824      	add	r0, sp, #144	; 0x90
        TF_LITE_ADD(reference_ops, Add, uint8_t);
   bb160:	f7fd fa36 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
}
   bb164:	b05b      	add	sp, #364	; 0x16c
   bb166:	ecbd 8b02 	vpop	{d8}
   bb16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TFLITE_DCHECK(tensor != nullptr);
   bb16e:	2f00      	cmp	r7, #0
   bb170:	f43f af5c 	beq.w	bb02c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_.part.0+0x8a>
  return reinterpret_cast<const T*>(tensor->data.raw);
   bb174:	683b      	ldr	r3, [r7, #0]
   bb176:	ee08 3a10 	vmov	s16, r3
  TFLITE_DCHECK(tensor != nullptr);
   bb17a:	2e00      	cmp	r6, #0
   bb17c:	f43f af56 	beq.w	bb02c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_.part.0+0x8a>
        arm_elementwise_add_s8(
   bb180:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   bb182:	9317      	str	r3, [sp, #92]	; 0x5c
            op_params.input1_shift, op_params.input2_offset,
   bb184:	9b48      	ldr	r3, [sp, #288]	; 0x120
   bb186:	930c      	str	r3, [sp, #48]	; 0x30
        arm_elementwise_add_s8(
   bb188:	9b42      	ldr	r3, [sp, #264]	; 0x108
   bb18a:	930d      	str	r3, [sp, #52]	; 0x34
   bb18c:	9b49      	ldr	r3, [sp, #292]	; 0x124
   bb18e:	930e      	str	r3, [sp, #56]	; 0x38
            op_params.input2_multiplier, op_params.input2_shift,
   bb190:	9b4a      	ldr	r3, [sp, #296]	; 0x128
   bb192:	930f      	str	r3, [sp, #60]	; 0x3c
            op_params.left_shift, tflite::micro::GetTensorData<int8_t>(output),
   bb194:	9b46      	ldr	r3, [sp, #280]	; 0x118
   bb196:	9310      	str	r3, [sp, #64]	; 0x40
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   bb198:	f8d9 3000 	ldr.w	r3, [r9]
   bb19c:	9311      	str	r3, [sp, #68]	; 0x44
        arm_elementwise_add_s8(
   bb19e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   bb1a0:	9312      	str	r3, [sp, #72]	; 0x48
   bb1a2:	9b44      	ldr	r3, [sp, #272]	; 0x110
   bb1a4:	9313      	str	r3, [sp, #76]	; 0x4c
            op_params.output_shift, op_params.quantized_activation_min,
   bb1a6:	9b45      	ldr	r3, [sp, #276]	; 0x114
   bb1a8:	9314      	str	r3, [sp, #80]	; 0x50
        arm_elementwise_add_s8(
   bb1aa:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
   bb1ac:	9315      	str	r3, [sp, #84]	; 0x54
            MatchingElementsSize(tflite::micro::GetTensorShape(input1),
   bb1ae:	4639      	mov	r1, r7
        arm_elementwise_add_s8(
   bb1b0:	9b4c      	ldr	r3, [sp, #304]	; 0x130
   bb1b2:	9316      	str	r3, [sp, #88]	; 0x58
            MatchingElementsSize(tflite::micro::GetTensorShape(input1),
   bb1b4:	4620      	mov	r0, r4
  return reinterpret_cast<const T*>(tensor->data.raw);
   bb1b6:	f8d6 a000 	ldr.w	sl, [r6]
        arm_elementwise_add_s8(
   bb1ba:	f8dd b104 	ldr.w	fp, [sp, #260]	; 0x104
            MatchingElementsSize(tflite::micro::GetTensorShape(input1),
   bb1be:	f7fd fb9a 	bl	b88f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                                 tflite::micro::GetTensorShape(input2),
   bb1c2:	4631      	mov	r1, r6
   bb1c4:	4628      	mov	r0, r5
   bb1c6:	f7fd fb96 	bl	b88f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                                 tflite::micro::GetTensorShape(output)));
   bb1ca:	4649      	mov	r1, r9
   bb1cc:	4640      	mov	r0, r8
   bb1ce:	f7fd fb92 	bl	b88f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
            MatchingElementsSize(tflite::micro::GetTensorShape(input1),
   bb1d2:	4642      	mov	r2, r8
   bb1d4:	4629      	mov	r1, r5
   bb1d6:	4620      	mov	r0, r4
   bb1d8:	f7fd fa7c 	bl	b86d4 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
        arm_elementwise_add_s8(
   bb1dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
   bb1de:	930a      	str	r3, [sp, #40]	; 0x28
   bb1e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb1e2:	9309      	str	r3, [sp, #36]	; 0x24
   bb1e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bb1e6:	9308      	str	r3, [sp, #32]
   bb1e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bb1ea:	9307      	str	r3, [sp, #28]
   bb1ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
   bb1ee:	9306      	str	r3, [sp, #24]
   bb1f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   bb1f2:	9305      	str	r3, [sp, #20]
   bb1f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   bb1f6:	9304      	str	r3, [sp, #16]
   bb1f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   bb1fa:	9303      	str	r3, [sp, #12]
   bb1fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   bb1fe:	9302      	str	r3, [sp, #8]
   bb200:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bb202:	9301      	str	r3, [sp, #4]
   bb204:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bb206:	900b      	str	r0, [sp, #44]	; 0x2c
   bb208:	9300      	str	r3, [sp, #0]
   bb20a:	ee18 0a10 	vmov	r0, s16
   bb20e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb210:	465a      	mov	r2, fp
   bb212:	4651      	mov	r1, sl
   bb214:	f7f9 fb32 	bl	b487c <arm_elementwise_add_s8>
        TF_LITE_ADD(reference_ops, BroadcastAdd4DSlow, uint8_t);
   bb218:	4640      	mov	r0, r8
   bb21a:	f7fd f9d9 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
   bb21e:	4628      	mov	r0, r5
   bb220:	f7fd f9d6 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
   bb224:	4620      	mov	r0, r4
   bb226:	e79b      	b.n	bb160 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_.part.0+0x1be>
   bb228:	4639      	mov	r1, r7
      if (need_broadcast) {
   bb22a:	f1ba 0f00 	cmp.w	sl, #0
   bb22e:	d01e      	beq.n	bb26e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_.part.0+0x2cc>
        TF_LITE_ADD(reference_ops, BroadcastAdd4DSlow, uint8_t);
   bb230:	4620      	mov	r0, r4
   bb232:	f7fd fb60 	bl	b88f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   bb236:	2f00      	cmp	r7, #0
   bb238:	f43f aef8 	beq.w	bb02c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_.part.0+0x8a>
   bb23c:	4631      	mov	r1, r6
   bb23e:	4628      	mov	r0, r5
  return reinterpret_cast<const T*>(tensor->data.raw);
   bb240:	683f      	ldr	r7, [r7, #0]
   bb242:	f7fd fb58 	bl	b88f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   bb246:	2e00      	cmp	r6, #0
   bb248:	f43f aef0 	beq.w	bb02c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_.part.0+0x8a>
   bb24c:	4649      	mov	r1, r9
   bb24e:	4640      	mov	r0, r8
  return reinterpret_cast<const T*>(tensor->data.raw);
   bb250:	6836      	ldr	r6, [r6, #0]
   bb252:	f7fd fb50 	bl	b88f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
   bb256:	f8d9 3000 	ldr.w	r3, [r9]
   bb25a:	9600      	str	r6, [sp, #0]
   bb25c:	e9cd 8301 	strd	r8, r3, [sp, #4]
   bb260:	463a      	mov	r2, r7
   bb262:	462b      	mov	r3, r5
   bb264:	4621      	mov	r1, r4
   bb266:	a840      	add	r0, sp, #256	; 0x100
   bb268:	f7ff fe16 	bl	bae98 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIhEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_>
   bb26c:	e7d4      	b.n	bb218 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_.part.0+0x276>
        TF_LITE_ADD(reference_ops, Add, uint8_t);
   bb26e:	4640      	mov	r0, r8
   bb270:	f7fd fb41 	bl	b88f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   bb274:	2f00      	cmp	r7, #0
   bb276:	f43f aed9 	beq.w	bb02c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_.part.0+0x8a>
   bb27a:	4631      	mov	r1, r6
   bb27c:	a818      	add	r0, sp, #96	; 0x60
  return reinterpret_cast<const T*>(tensor->data.raw);
   bb27e:	683d      	ldr	r5, [r7, #0]
   bb280:	f7fd fb39 	bl	b88f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   bb284:	2e00      	cmp	r6, #0
   bb286:	f43f aed1 	beq.w	bb02c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_.part.0+0x8a>
   bb28a:	4649      	mov	r1, r9
   bb28c:	4620      	mov	r0, r4
  return reinterpret_cast<const T*>(tensor->data.raw);
   bb28e:	6836      	ldr	r6, [r6, #0]
   bb290:	f7fd fb31 	bl	b88f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
   bb294:	f8d9 3000 	ldr.w	r3, [r9]
   bb298:	9600      	str	r6, [sp, #0]
   bb29a:	462a      	mov	r2, r5
   bb29c:	4641      	mov	r1, r8
   bb29e:	e9cd 4301 	strd	r4, r3, [sp, #4]
   bb2a2:	a840      	add	r0, sp, #256	; 0x100
   bb2a4:	ab18      	add	r3, sp, #96	; 0x60
   bb2a6:	f7ff fbac 	bl	baa02 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>
   bb2aa:	4620      	mov	r0, r4
   bb2ac:	f7fd f990 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
   bb2b0:	a818      	add	r0, sp, #96	; 0x60
   bb2b2:	f7fd f98d 	bl	b85d0 <_ZN6tflite12RuntimeShapeD1Ev>
   bb2b6:	4640      	mov	r0, r8
   bb2b8:	e752      	b.n	bb160 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_.part.0+0x1be>

000bb2ba <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_>:
                              TfLiteEvalTensor* output) {
   bb2ba:	b508      	push	{r3, lr}
   bb2bc:	4618      	mov	r0, r3
   bb2be:	9b04      	ldr	r3, [sp, #16]
  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
   bb2c0:	7a1a      	ldrb	r2, [r3, #8]
   bb2c2:	2a03      	cmp	r2, #3
   bb2c4:	d001      	beq.n	bb2ca <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x10>
   bb2c6:	2a09      	cmp	r2, #9
   bb2c8:	d103      	bne.n	bb2d2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x18>
   bb2ca:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   bb2ce:	f7ff fe68 	bl	bafa2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_.part.0>
}
   bb2d2:	2000      	movs	r0, #0
   bb2d4:	bd08      	pop	{r3, pc}
	...

000bb2d8 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   bb2d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  return GetMutableEvalInput(context, node, index);
   bb2dc:	2200      	movs	r2, #0
   bb2de:	b085      	sub	sp, #20
  auto* params = reinterpret_cast<TfLiteAddParams*>(node->builtin_data);
   bb2e0:	f8d1 9014 	ldr.w	r9, [r1, #20]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   bb2e4:	4604      	mov	r4, r0
   bb2e6:	460d      	mov	r5, r1
   bb2e8:	f7fd f940 	bl	b856c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
   bb2ec:	2201      	movs	r2, #1
   bb2ee:	4607      	mov	r7, r0
   bb2f0:	4629      	mov	r1, r5
   bb2f2:	4620      	mov	r0, r4
   bb2f4:	f7fd f93a 	bl	b856c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
   bb2f8:	4680      	mov	r8, r0
  TFLITE_DCHECK(context != nullptr);
   bb2fa:	b90c      	cbnz	r4, bb300 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x28>
   bb2fc:	f001 f946 	bl	bc58c <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
   bb300:	686a      	ldr	r2, [r5, #4]
   bb302:	6d63      	ldr	r3, [r4, #84]	; 0x54
   bb304:	6851      	ldr	r1, [r2, #4]
   bb306:	4620      	mov	r0, r4
   bb308:	4798      	blx	r3
  TFLITE_DCHECK(node->user_data != nullptr);
   bb30a:	692b      	ldr	r3, [r5, #16]
   bb30c:	4606      	mov	r6, r0
   bb30e:	2b00      	cmp	r3, #0
   bb310:	d0f4      	beq.n	bb2fc <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x24>
  if (output->type == kTfLiteFloat32) {
   bb312:	7a00      	ldrb	r0, [r0, #8]
   bb314:	2801      	cmp	r0, #1
   bb316:	d10b      	bne.n	bb330 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x58>
    EvalAdd(context, node, params, data, input1, input2, output);
   bb318:	4620      	mov	r0, r4
   bb31a:	e9cd 8601 	strd	r8, r6, [sp, #4]
   bb31e:	9700      	str	r7, [sp, #0]
   bb320:	464a      	mov	r2, r9
   bb322:	4629      	mov	r1, r5
   bb324:	f7ff fd42 	bl	badac <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_>
  return kTfLiteOk;
   bb328:	2000      	movs	r0, #0
}
   bb32a:	b005      	add	sp, #20
   bb32c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  } else if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
   bb330:	2803      	cmp	r0, #3
   bb332:	d001      	beq.n	bb338 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x60>
   bb334:	2809      	cmp	r0, #9
   bb336:	d108      	bne.n	bb34a <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x72>
    TF_LITE_ENSURE_OK(context, EvalAddQuantized(context, node, params, data,
   bb338:	e9cd 8601 	strd	r8, r6, [sp, #4]
   bb33c:	9700      	str	r7, [sp, #0]
   bb33e:	464a      	mov	r2, r9
   bb340:	4629      	mov	r1, r5
   bb342:	4620      	mov	r0, r4
   bb344:	f7ff ffb9 	bl	bb2ba <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_>
   bb348:	e7ef      	b.n	bb32a <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x52>
    TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   bb34a:	6965      	ldr	r5, [r4, #20]
   bb34c:	f7f8 feda 	bl	b4104 <TfLiteTypeGetName>
   bb350:	7a33      	ldrb	r3, [r6, #8]
   bb352:	4903      	ldr	r1, [pc, #12]	; (bb360 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x88>)
   bb354:	4602      	mov	r2, r0
   bb356:	4620      	mov	r0, r4
   bb358:	47a8      	blx	r5
    return kTfLiteError;
   bb35a:	2001      	movs	r0, #1
   bb35c:	e7e5      	b.n	bb32a <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x52>
   bb35e:	bf00      	nop
   bb360:	000caf08 	.word	0x000caf08

000bb364 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>:
// Returns a ConvParams struct with all the parameters needed for a
// quantized computation.
ConvParams ConvParamsQuantized(const TfLiteConvParams& params,
                               const OpDataConv& data) {
  ConvParams op_params;
  op_params.input_offset = -data.input_zero_point;
   bb364:	6913      	ldr	r3, [r2, #16]
   bb366:	425b      	negs	r3, r3
                               const OpDataConv& data) {
   bb368:	b570      	push	{r4, r5, r6, lr}
  op_params.input_offset = -data.input_zero_point;
   bb36a:	6143      	str	r3, [r0, #20]
  op_params.weights_offset = -data.filter_zero_point;
   bb36c:	6953      	ldr	r3, [r2, #20]
   bb36e:	425b      	negs	r3, r3
   bb370:	6183      	str	r3, [r0, #24]
  op_params.output_offset = data.output_zero_point;
   bb372:	6993      	ldr	r3, [r2, #24]
   bb374:	61c3      	str	r3, [r0, #28]
  op_params.output_multiplier = data.output_multiplier;
   bb376:	69d3      	ldr	r3, [r2, #28]
   bb378:	6203      	str	r3, [r0, #32]
  op_params.output_shift = -data.output_shift;
   bb37a:	6a13      	ldr	r3, [r2, #32]
                               const OpDataConv& data) {
   bb37c:	4615      	mov	r5, r2
  op_params.output_shift = -data.output_shift;
   bb37e:	425b      	negs	r3, r3
                               const OpDataConv& data) {
   bb380:	4604      	mov	r4, r0
  op_params.output_shift = -data.output_shift;
   bb382:	6243      	str	r3, [r0, #36]	; 0x24
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
   bb384:	7808      	ldrb	r0, [r1, #0]
                               const OpDataConv& data) {
   bb386:	460e      	mov	r6, r1
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
   bb388:	f7fd fad9 	bl	b893e <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
  op_params.padding_values.height = data.padding.height;
   bb38c:	686b      	ldr	r3, [r5, #4]
   bb38e:	80a3      	strh	r3, [r4, #4]
  op_params.padding_values.width = data.padding.width;
   bb390:	682b      	ldr	r3, [r5, #0]
   bb392:	8063      	strh	r3, [r4, #2]
  op_params.stride_height = params.stride_height;
   bb394:	68b3      	ldr	r3, [r6, #8]
   bb396:	81a3      	strh	r3, [r4, #12]
  op_params.stride_width = params.stride_width;
   bb398:	6873      	ldr	r3, [r6, #4]
   bb39a:	8163      	strh	r3, [r4, #10]
  op_params.dilation_height_factor = params.dilation_height_factor;
   bb39c:	6973      	ldr	r3, [r6, #20]
   bb39e:	8223      	strh	r3, [r4, #16]
  op_params.dilation_width_factor = params.dilation_width_factor;
   bb3a0:	6933      	ldr	r3, [r6, #16]
   bb3a2:	81e3      	strh	r3, [r4, #14]
  op_params.quantized_activation_min = data.output_activation_min;
   bb3a4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   bb3a6:	62a3      	str	r3, [r4, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
   bb3a8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
   bb3aa:	7020      	strb	r0, [r4, #0]
  op_params.quantized_activation_max = data.output_activation_max;
   bb3ac:	62e3      	str	r3, [r4, #44]	; 0x2c
  return op_params;
}
   bb3ae:	4620      	mov	r0, r4
   bb3b0:	bd70      	pop	{r4, r5, r6, pc}
	...

000bb3b4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:
TfLiteStatus CalculateOpDataConv(TfLiteContext* context, TfLiteNode* node,
                                 const TfLiteConvParams& params, int width,
                                 int height, int filter_width,
                                 int filter_height, int out_width,
                                 int out_height, const TfLiteType data_type,
                                 OpDataConv* data) {
   bb3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb3b8:	4699      	mov	r9, r3
  bool has_bias = node->inputs->size == 3;
   bb3ba:	680b      	ldr	r3, [r1, #0]
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
   bb3bc:	681b      	ldr	r3, [r3, #0]
                                 OpDataConv* data) {
   bb3be:	b08f      	sub	sp, #60	; 0x3c
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
   bb3c0:	3b02      	subs	r3, #2
   bb3c2:	2b01      	cmp	r3, #1
                                 OpDataConv* data) {
   bb3c4:	9e1e      	ldr	r6, [sp, #120]	; 0x78
   bb3c6:	4605      	mov	r5, r0
   bb3c8:	4688      	mov	r8, r1
   bb3ca:	4617      	mov	r7, r2
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
   bb3cc:	d90b      	bls.n	bb3e6 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x32>
   bb3ce:	4b5d      	ldr	r3, [pc, #372]	; (bb544 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x190>)
   bb3d0:	9300      	str	r3, [sp, #0]
   bb3d2:	6944      	ldr	r4, [r0, #20]
   bb3d4:	4a5c      	ldr	r2, [pc, #368]	; (bb548 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x194>)
   bb3d6:	495d      	ldr	r1, [pc, #372]	; (bb54c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x198>)
   bb3d8:	2356      	movs	r3, #86	; 0x56
   bb3da:	47a0      	blx	r4
   bb3dc:	2401      	movs	r4, #1
  data->input_zero_point = input->params.zero_point;
  data->filter_zero_point = filter->params.zero_point;
  data->output_zero_point = output->params.zero_point;

  return kTfLiteOk;
}
   bb3de:	4620      	mov	r0, r4
   bb3e0:	b00f      	add	sp, #60	; 0x3c
   bb3e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
   bb3e6:	684b      	ldr	r3, [r1, #4]
   bb3e8:	681c      	ldr	r4, [r3, #0]
   bb3ea:	2c01      	cmp	r4, #1
   bb3ec:	d00c      	beq.n	bb408 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x54>
   bb3ee:	2601      	movs	r6, #1
   bb3f0:	e9cd 4602 	strd	r4, r6, [sp, #8]
   bb3f4:	4b56      	ldr	r3, [pc, #344]	; (bb550 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x19c>)
   bb3f6:	9301      	str	r3, [sp, #4]
   bb3f8:	4b56      	ldr	r3, [pc, #344]	; (bb554 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a0>)
   bb3fa:	9300      	str	r3, [sp, #0]
   bb3fc:	6944      	ldr	r4, [r0, #20]
   bb3fe:	4a52      	ldr	r2, [pc, #328]	; (bb548 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x194>)
   bb400:	4955      	ldr	r1, [pc, #340]	; (bb558 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a4>)
   bb402:	2357      	movs	r3, #87	; 0x57
   bb404:	47a0      	blx	r4
   bb406:	e7e9      	b.n	bb3dc <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x28>
      params.stride_height, params.stride_width, params.dilation_height_factor,
   bb408:	e9d2 3a01 	ldrd	r3, sl, [r2, #4]
  auto padding = params.padding;
   bb40c:	f892 b000 	ldrb.w	fp, [r2]
      params.stride_height, params.stride_width, params.dilation_height_factor,
   bb410:	930a      	str	r3, [sp, #40]	; 0x28
   bb412:	6953      	ldr	r3, [r2, #20]
   bb414:	930b      	str	r3, [sp, #44]	; 0x2c
      params.dilation_width_factor, height, width, filter_height, filter_width,
   bb416:	6913      	ldr	r3, [r2, #16]
   bb418:	930c      	str	r3, [sp, #48]	; 0x30
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
   bb41a:	9a19      	ldr	r2, [sp, #100]	; 0x64
   bb41c:	9300      	str	r3, [sp, #0]
   bb41e:	4649      	mov	r1, r9
   bb420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bb422:	4658      	mov	r0, fp
   bb424:	f7fd fac2 	bl	b89ac <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
   bb428:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb42a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bb42c:	9918      	ldr	r1, [sp, #96]	; 0x60
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
   bb42e:	900d      	str	r0, [sp, #52]	; 0x34
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
   bb430:	9300      	str	r3, [sp, #0]
   bb432:	4658      	mov	r0, fp
   bb434:	4653      	mov	r3, sl
   bb436:	f7fd fab9 	bl	b89ac <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   bb43a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   bb43c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bb43e:	3b01      	subs	r3, #1
   bb440:	4353      	muls	r3, r2
   bb442:	3301      	adds	r3, #1
      ((out_size - 1) * stride + effective_filter_size - in_size);
   bb444:	3801      	subs	r0, #1
   bb446:	fb0a 3a00 	mla	sl, sl, r0, r3
  int total_padding =
   bb44a:	9b18      	ldr	r3, [sp, #96]	; 0x60
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   bb44c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  int total_padding =
   bb44e:	ebaa 0a03 	sub.w	sl, sl, r3
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   bb452:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bb454:	3b01      	subs	r3, #1
   bb456:	4353      	muls	r3, r2
      ((out_size - 1) * stride + effective_filter_size - in_size);
   bb458:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bb45a:	1e50      	subs	r0, r2, #1
   bb45c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   bb45e:	3301      	adds	r3, #1
      ((out_size - 1) * stride + effective_filter_size - in_size);
   bb460:	fb02 3300 	mla	r3, r2, r0, r3
  int total_padding =
   bb464:	eba3 0309 	sub.w	r3, r3, r9
  total_padding = total_padding > 0 ? total_padding : 0;
   bb468:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   bb46c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
  return total_padding / 2;
   bb470:	105a      	asrs	r2, r3, #1
  *offset = total_padding % 2;
   bb472:	f003 0301 	and.w	r3, r3, #1
      padding, &out_height, &out_width);
   bb476:	6032      	str	r2, [r6, #0]
   bb478:	60b3      	str	r3, [r6, #8]
  return total_padding / 2;
   bb47a:	ea4f 026a 	mov.w	r2, sl, asr #1
  *offset = total_padding % 2;
   bb47e:	f00a 0301 	and.w	r3, sl, #1
   bb482:	6072      	str	r2, [r6, #4]
   bb484:	60f3      	str	r3, [r6, #12]
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
   bb486:	2200      	movs	r2, #0
   bb488:	4641      	mov	r1, r8
   bb48a:	4628      	mov	r0, r5
   bb48c:	f000 fb90 	bl	bbbb0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
   bb490:	4682      	mov	sl, r0
   bb492:	b940      	cbnz	r0, bb4a6 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xf2>
   bb494:	4b31      	ldr	r3, [pc, #196]	; (bb55c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a8>)
   bb496:	696e      	ldr	r6, [r5, #20]
   bb498:	9300      	str	r3, [sp, #0]
   bb49a:	2361      	movs	r3, #97	; 0x61
  TF_LITE_ENSURE(context, filter != nullptr);
   bb49c:	4a2a      	ldr	r2, [pc, #168]	; (bb548 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x194>)
   bb49e:	492b      	ldr	r1, [pc, #172]	; (bb54c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x198>)
   bb4a0:	4628      	mov	r0, r5
   bb4a2:	47b0      	blx	r6
   bb4a4:	e79b      	b.n	bb3de <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
   bb4a6:	4622      	mov	r2, r4
   bb4a8:	4641      	mov	r1, r8
   bb4aa:	4628      	mov	r0, r5
   bb4ac:	f000 fb80 	bl	bbbb0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
   bb4b0:	4681      	mov	r9, r0
   bb4b2:	b920      	cbnz	r0, bb4be <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x10a>
   bb4b4:	4b2a      	ldr	r3, [pc, #168]	; (bb560 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1ac>)
   bb4b6:	9300      	str	r3, [sp, #0]
   bb4b8:	696e      	ldr	r6, [r5, #20]
   bb4ba:	2363      	movs	r3, #99	; 0x63
   bb4bc:	e7ee      	b.n	bb49c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe8>
      GetOptionalInputTensor(context, node, kConvBiasTensor);
   bb4be:	4641      	mov	r1, r8
   bb4c0:	2202      	movs	r2, #2
   bb4c2:	4628      	mov	r0, r5
   bb4c4:	f000 fb86 	bl	bbbd4 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
   bb4c8:	4641      	mov	r1, r8
      GetOptionalInputTensor(context, node, kConvBiasTensor);
   bb4ca:	900a      	str	r0, [sp, #40]	; 0x28
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
   bb4cc:	2200      	movs	r2, #0
   bb4ce:	4628      	mov	r0, r5
   bb4d0:	f000 fb71 	bl	bbbb6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
   bb4d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bb4d6:	4680      	mov	r8, r0
   bb4d8:	b920      	cbnz	r0, bb4e4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x130>
   bb4da:	4b22      	ldr	r3, [pc, #136]	; (bb564 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1b0>)
   bb4dc:	9300      	str	r3, [sp, #0]
   bb4de:	696e      	ldr	r6, [r5, #20]
   bb4e0:	2367      	movs	r3, #103	; 0x67
   bb4e2:	e7db      	b.n	bb49c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe8>
  if (data_type != kTfLiteFloat32) {
   bb4e4:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
   bb4e8:	2a01      	cmp	r2, #1
   bb4ea:	d10a      	bne.n	bb502 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x14e>
  data->input_zero_point = input->params.zero_point;
   bb4ec:	f8da 3010 	ldr.w	r3, [sl, #16]
   bb4f0:	6133      	str	r3, [r6, #16]
  data->filter_zero_point = filter->params.zero_point;
   bb4f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bb4f6:	6173      	str	r3, [r6, #20]
  data->output_zero_point = output->params.zero_point;
   bb4f8:	f8d8 3010 	ldr.w	r3, [r8, #16]
   bb4fc:	61b3      	str	r3, [r6, #24]
  return kTfLiteOk;
   bb4fe:	2400      	movs	r4, #0
   bb500:	e76d      	b.n	bb3de <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
    int output_channels = filter->dims->data[kConvQuantizedDimension];
   bb502:	f8d9 2008 	ldr.w	r2, [r9, #8]
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
   bb506:	6852      	ldr	r2, [r2, #4]
   bb508:	9208      	str	r2, [sp, #32]
   bb50a:	6ab2      	ldr	r2, [r6, #40]	; 0x28
   bb50c:	9207      	str	r2, [sp, #28]
   bb50e:	6a72      	ldr	r2, [r6, #36]	; 0x24
   bb510:	9206      	str	r2, [sp, #24]
   bb512:	f106 0230 	add.w	r2, r6, #48	; 0x30
   bb516:	9205      	str	r2, [sp, #20]
   bb518:	f106 022c 	add.w	r2, r6, #44	; 0x2c
   bb51c:	9204      	str	r2, [sp, #16]
   bb51e:	f106 0220 	add.w	r2, r6, #32
   bb522:	9203      	str	r2, [sp, #12]
   bb524:	370c      	adds	r7, #12
   bb526:	f106 021c 	add.w	r2, r6, #28
   bb52a:	e9cd 0700 	strd	r0, r7, [sp]
   bb52e:	9202      	str	r2, [sp, #8]
   bb530:	4651      	mov	r1, sl
   bb532:	464a      	mov	r2, r9
   bb534:	4628      	mov	r0, r5
   bb536:	f000 fc3b 	bl	bbdb0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>
   bb53a:	4604      	mov	r4, r0
   bb53c:	2800      	cmp	r0, #0
   bb53e:	d0d5      	beq.n	bb4ec <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x138>
   bb540:	e74d      	b.n	bb3de <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
   bb542:	bf00      	nop
   bb544:	000caff9 	.word	0x000caff9
   bb548:	000cb6c4 	.word	0x000cb6c4
   bb54c:	000cad56 	.word	0x000cad56
   bb550:	000cb85a 	.word	0x000cb85a
   bb554:	000cb01d 	.word	0x000cb01d
   bb558:	000cada2 	.word	0x000cada2
   bb55c:	000cad6d 	.word	0x000cad6d
   bb560:	000cad7e 	.word	0x000cad7e
   bb564:	000cad90 	.word	0x000cad90

000bb568 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>:
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    // exp LUT only used on negative values
    // we consider exp(-10.0) is insignificant to accumulation
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
            op_data->exp_lut, kInt16LUTArraySize);
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
   bb568:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   bb56c:	ee30 0a27 	vadd.f32	s0, s0, s15
   bb570:	ee87 0a80 	vdiv.f32	s0, s15, s0
   bb574:	4770      	bx	lr

000bb576 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
  { return __builtin_expf(__x); }
   bb576:	f002 b8c3 	b.w	bd700 <expf>
	...

000bb57c <_ZN6tflite7gen_lutEPFffEffPsi>:
                    const int num) {
   bb57c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  float step = (max - min) / (num - 1);
   bb580:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   bb584:	ee07 9a90 	vmov	s15, r9
   bb588:	ee30 7ac0 	vsub.f32	s14, s1, s0
   bb58c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                    const int num) {
   bb590:	ed2d 8b0c 	vpush	{d8-d13}
  float step = (max - min) / (num - 1);
   bb594:	eec7 ca27 	vdiv.f32	s25, s14, s15
                    const int num) {
   bb598:	b085      	sub	sp, #20
   bb59a:	4604      	mov	r4, r0
   bb59c:	460f      	mov	r7, r1
   bb59e:	4615      	mov	r5, r2
   bb5a0:	f1a1 0802 	sub.w	r8, r1, #2
  for (int i = 0; i < num - 1; i++) {
   bb5a4:	2600      	movs	r6, #0
  float half_step = step / 2.0f;
   bb5a6:	eef6 ba00 	vmov.f32	s23, #96	; 0x3f000000  0.5
   bb5aa:	ee2c caab 	vmul.f32	s24, s25, s23
  for (int i = 0; i < num - 1; i++) {
   bb5ae:	eddf 8a48 	vldr	s17, [pc, #288]	; bb6d0 <_ZN6tflite7gen_lutEPFffEffPsi+0x154>
   bb5b2:	eddf aa48 	vldr	s21, [pc, #288]	; bb6d4 <_ZN6tflite7gen_lutEPFffEffPsi+0x158>
   bb5b6:	ed9f aa48 	vldr	s20, [pc, #288]	; bb6d8 <_ZN6tflite7gen_lutEPFffEffPsi+0x15c>
                    const int num) {
   bb5ba:	eeb0 9a40 	vmov.f32	s18, s0
   bb5be:	eeb0 ba60 	vmov.f32	s22, s1
  for (int i = 0; i < num - 1; i++) {
   bb5c2:	45b1      	cmp	r9, r6
   bb5c4:	dd58      	ble.n	bb678 <_ZN6tflite7gen_lutEPFffEffPsi+0xfc>
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
   bb5c6:	ee07 6a90 	vmov	s15, r6
   bb5ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bb5ce:	eeb0 da49 	vmov.f32	s26, s18
   bb5d2:	eea7 daac 	vfma.f32	s26, s15, s25
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
   bb5d6:	3601      	adds	r6, #1
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
   bb5d8:	eeb0 0a4d 	vmov.f32	s0, s26
   bb5dc:	47a0      	blx	r4
  { return __builtin_roundf(__x); }
   bb5de:	ee20 0a28 	vmul.f32	s0, s0, s17
   bb5e2:	f002 f867 	bl	bd6b4 <roundf>
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
   bb5e6:	ee07 6a90 	vmov	s15, r6
   bb5ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bb5ee:	eeb0 8a40 	vmov.f32	s16, s0
   bb5f2:	eeb0 0a49 	vmov.f32	s0, s18
   bb5f6:	eea7 0aac 	vfma.f32	s0, s15, s25
   bb5fa:	47a0      	blx	r4
   bb5fc:	eef0 9a40 	vmov.f32	s19, s0
                     TfLiteRound(func(min + i * step) * 32768.0f)) /
   bb600:	eeb0 0a4d 	vmov.f32	s0, s26
   bb604:	47a0      	blx	r4
   bb606:	ee20 0a28 	vmul.f32	s0, s0, s17
   bb60a:	f002 f853 	bl	bd6b4 <roundf>
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
   bb60e:	eea9 0aa8 	vfma.f32	s0, s19, s17
   bb612:	ee20 0a2b 	vmul.f32	s0, s0, s23
   bb616:	f002 f84d 	bl	bd6b4 <roundf>
   bb61a:	eef0 9a40 	vmov.f32	s19, s0
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
   bb61e:	ee3d 0a0c 	vadd.f32	s0, s26, s24
   bb622:	47a0      	blx	r4
   bb624:	ee20 0a28 	vmul.f32	s0, s0, s17
   bb628:	f002 f844 	bl	bd6b4 <roundf>
    float midpoint_err = midpoint_interp_val - midpoint_val;
   bb62c:	ee39 0ac0 	vsub.f32	s0, s19, s0
   bb630:	ee20 0a2b 	vmul.f32	s0, s0, s23
   bb634:	f002 f83e 	bl	bd6b4 <roundf>
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
   bb638:	ee78 7a40 	vsub.f32	s15, s16, s0
   bb63c:	edcd aa02 	vstr	s21, [sp, #8]
      if (__a < __b)
   bb640:	eef4 7aea 	vcmpe.f32	s15, s21
   bb644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	return __b;
   bb648:	bf4c      	ite	mi
   bb64a:	ab02      	addmi	r3, sp, #8
      return __a;
   bb64c:	ab01      	addpl	r3, sp, #4
   bb64e:	edcd 7a01 	vstr	s15, [sp, #4]
      if (__b < __a)
   bb652:	edd3 7a00 	vldr	s15, [r3]
                               32767.0f);
   bb656:	ed8d aa03 	vstr	s20, [sp, #12]
   bb65a:	eef4 7aca 	vcmpe.f32	s15, s20
   bb65e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	return __b;
   bb662:	bfc8      	it	gt
   bb664:	ab03      	addgt	r3, sp, #12
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
   bb666:	edd3 7a00 	vldr	s15, [r3]
   bb66a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   bb66e:	ee17 3a90 	vmov	r3, s15
   bb672:	f828 3f02 	strh.w	r3, [r8, #2]!
  for (int i = 0; i < num - 1; i++) {
   bb676:	e7a4      	b.n	bb5c2 <_ZN6tflite7gen_lutEPFffEffPsi+0x46>
      std::max<float>(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
   bb678:	eeb0 0a4b 	vmov.f32	s0, s22
   bb67c:	47a0      	blx	r4
   bb67e:	ee20 0a28 	vmul.f32	s0, s0, s17
   bb682:	f002 f817 	bl	bd6b4 <roundf>
      if (__a < __b)
   bb686:	eeb4 0aea 	vcmpe.f32	s0, s21
   bb68a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	return __b;
   bb68e:	bf4c      	ite	mi
   bb690:	ab02      	addmi	r3, sp, #8
      return __a;
   bb692:	ab01      	addpl	r3, sp, #4
   bb694:	ed8d 0a01 	vstr	s0, [sp, #4]
   bb698:	edcd aa02 	vstr	s21, [sp, #8]
      if (__b < __a)
   bb69c:	edd3 7a00 	vldr	s15, [r3]
   bb6a0:	ed8d aa03 	vstr	s20, [sp, #12]
   bb6a4:	eef4 7aca 	vcmpe.f32	s15, s20
   bb6a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	return __b;
   bb6ac:	bfc8      	it	gt
   bb6ae:	ab03      	addgt	r3, sp, #12
  table[num - 1] = std::min<float>(
   bb6b0:	edd3 7a00 	vldr	s15, [r3]
   bb6b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   bb6b8:	f105 4200 	add.w	r2, r5, #2147483648	; 0x80000000
   bb6bc:	ee17 3a90 	vmov	r3, s15
   bb6c0:	3a01      	subs	r2, #1
   bb6c2:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
}
   bb6c6:	b005      	add	sp, #20
   bb6c8:	ecbd 8b0c 	vpop	{d8-d13}
   bb6cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bb6d0:	47000000 	.word	0x47000000
   bb6d4:	c7000000 	.word	0xc7000000
   bb6d8:	46fffe00 	.word	0x46fffe00

000bb6dc <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj>:
void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
   bb6dc:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   bb6de:	6b83      	ldr	r3, [r0, #56]	; 0x38
   bb6e0:	b90b      	cbnz	r3, bb6e6 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj+0xa>
   bb6e2:	f000 ff53 	bl	bc58c <abort>
}
   bb6e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
   bb6ea:	2138      	movs	r1, #56	; 0x38
   bb6ec:	4718      	bx	r3
	...

000bb6f0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
   bb6f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb6f4:	ed2d 8b02 	vpush	{d8}
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   bb6f8:	680b      	ldr	r3, [r1, #0]
   bb6fa:	681e      	ldr	r6, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   bb6fc:	2e01      	cmp	r6, #1
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
   bb6fe:	b089      	sub	sp, #36	; 0x24
   bb700:	4604      	mov	r4, r0
   bb702:	4689      	mov	r9, r1
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   bb704:	d011      	beq.n	bb72a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x3a>
   bb706:	2501      	movs	r5, #1
   bb708:	4b9c      	ldr	r3, [pc, #624]	; (bb97c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x28c>)
   bb70a:	9301      	str	r3, [sp, #4]
   bb70c:	e9cd 6502 	strd	r6, r5, [sp, #8]
   bb710:	4b9b      	ldr	r3, [pc, #620]	; (bb980 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x290>)
   bb712:	9300      	str	r3, [sp, #0]
   bb714:	6944      	ldr	r4, [r0, #20]
   bb716:	4a9b      	ldr	r2, [pc, #620]	; (bb984 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
   bb718:	499b      	ldr	r1, [pc, #620]	; (bb988 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x298>)
   bb71a:	235d      	movs	r3, #93	; 0x5d
   bb71c:	47a0      	blx	r4
    op_data->scale = output->params.scale;
  }

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
  return CalculateSoftmaxParams(context, input, output, params, op_data);
}
   bb71e:	4628      	mov	r0, r5
   bb720:	b009      	add	sp, #36	; 0x24
   bb722:	ecbd 8b02 	vpop	{d8}
   bb726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   bb72a:	684b      	ldr	r3, [r1, #4]
   bb72c:	681d      	ldr	r5, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   bb72e:	2d01      	cmp	r5, #1
   bb730:	d00c      	beq.n	bb74c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x5c>
   bb732:	4b92      	ldr	r3, [pc, #584]	; (bb97c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x28c>)
   bb734:	9301      	str	r3, [sp, #4]
   bb736:	e9cd 5602 	strd	r5, r6, [sp, #8]
   bb73a:	4b94      	ldr	r3, [pc, #592]	; (bb98c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x29c>)
   bb73c:	9300      	str	r3, [sp, #0]
   bb73e:	6944      	ldr	r4, [r0, #20]
   bb740:	4a90      	ldr	r2, [pc, #576]	; (bb984 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
   bb742:	4991      	ldr	r1, [pc, #580]	; (bb988 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x298>)
   bb744:	235e      	movs	r3, #94	; 0x5e
   bb746:	47a0      	blx	r4
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
   bb748:	2501      	movs	r5, #1
   bb74a:	e7e8      	b.n	bb71e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
  const TfLiteTensor* input = GetInput(context, node, 0);
   bb74c:	2200      	movs	r2, #0
   bb74e:	f000 fa2f 	bl	bbbb0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
   bb752:	4680      	mov	r8, r0
   bb754:	b940      	cbnz	r0, bb768 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x78>
   bb756:	4b8e      	ldr	r3, [pc, #568]	; (bb990 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a0>)
   bb758:	9300      	str	r3, [sp, #0]
   bb75a:	6966      	ldr	r6, [r4, #20]
   bb75c:	2360      	movs	r3, #96	; 0x60
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
   bb75e:	4a89      	ldr	r2, [pc, #548]	; (bb984 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
   bb760:	498c      	ldr	r1, [pc, #560]	; (bb994 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a4>)
   bb762:	4620      	mov	r0, r4
   bb764:	47b0      	blx	r6
   bb766:	e7da      	b.n	bb71e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   bb768:	6883      	ldr	r3, [r0, #8]
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
   bb76a:	681b      	ldr	r3, [r3, #0]
   bb76c:	2b00      	cmp	r3, #0
   bb76e:	dc04      	bgt.n	bb77a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x8a>
   bb770:	4b89      	ldr	r3, [pc, #548]	; (bb998 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a8>)
   bb772:	9300      	str	r3, [sp, #0]
   bb774:	6966      	ldr	r6, [r4, #20]
   bb776:	2361      	movs	r3, #97	; 0x61
   bb778:	e7f1      	b.n	bb75e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x6e>
  TfLiteTensor* output = GetOutput(context, node, 0);
   bb77a:	2200      	movs	r2, #0
   bb77c:	4649      	mov	r1, r9
   bb77e:	4620      	mov	r0, r4
   bb780:	f000 fa19 	bl	bbbb6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
   bb784:	4606      	mov	r6, r0
   bb786:	b920      	cbnz	r0, bb792 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xa2>
   bb788:	4b84      	ldr	r3, [pc, #528]	; (bb99c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2ac>)
   bb78a:	9300      	str	r3, [sp, #0]
   bb78c:	6966      	ldr	r6, [r4, #20]
   bb78e:	2363      	movs	r3, #99	; 0x63
   bb790:	e7e5      	b.n	bb75e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x6e>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
   bb792:	f8d9 7010 	ldr.w	r7, [r9, #16]
   bb796:	b927      	cbnz	r7, bb7a2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xb2>
   bb798:	4b81      	ldr	r3, [pc, #516]	; (bb9a0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2b0>)
   bb79a:	9300      	str	r3, [sp, #0]
   bb79c:	6966      	ldr	r6, [r4, #20]
   bb79e:	2365      	movs	r3, #101	; 0x65
   bb7a0:	e7dd      	b.n	bb75e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x6e>
  if (input->type == kTfLiteInt16) {
   bb7a2:	f898 3000 	ldrb.w	r3, [r8]
   bb7a6:	2b07      	cmp	r3, #7
   bb7a8:	d117      	bne.n	bb7da <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xea>
    void* raw_exp_lut = context->AllocatePersistentBuffer(
   bb7aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   bb7ac:	f240 4102 	movw	r1, #1026	; 0x402
   bb7b0:	4620      	mov	r0, r4
   bb7b2:	4798      	blx	r3
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
   bb7b4:	b920      	cbnz	r0, bb7c0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd0>
   bb7b6:	4b7b      	ldr	r3, [pc, #492]	; (bb9a4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2b4>)
   bb7b8:	9300      	str	r3, [sp, #0]
   bb7ba:	6966      	ldr	r6, [r4, #20]
   bb7bc:	236b      	movs	r3, #107	; 0x6b
   bb7be:	e7ce      	b.n	bb75e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x6e>
    op_data->exp_lut = reinterpret_cast<int16_t*>(raw_exp_lut);
   bb7c0:	62b8      	str	r0, [r7, #40]	; 0x28
    void* one_over_one_plus_x_lut = context->AllocatePersistentBuffer(
   bb7c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   bb7c4:	f240 4102 	movw	r1, #1026	; 0x402
   bb7c8:	4620      	mov	r0, r4
   bb7ca:	4798      	blx	r3
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
   bb7cc:	b920      	cbnz	r0, bb7d8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xe8>
   bb7ce:	4b76      	ldr	r3, [pc, #472]	; (bb9a8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2b8>)
   bb7d0:	9300      	str	r3, [sp, #0]
   bb7d2:	6966      	ldr	r6, [r4, #20]
   bb7d4:	236f      	movs	r3, #111	; 0x6f
   bb7d6:	e7c2      	b.n	bb75e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x6e>
    op_data->one_over_one_plus_x_lut =
   bb7d8:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (output->type == kTfLiteInt16) {
   bb7da:	7832      	ldrb	r2, [r6, #0]
    TF_LITE_ENSURE(context,
   bb7dc:	f898 3000 	ldrb.w	r3, [r8]
  if (output->type == kTfLiteInt16) {
   bb7e0:	2a07      	cmp	r2, #7
   bb7e2:	d10c      	bne.n	bb7fe <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x10e>
    TF_LITE_ENSURE(context,
   bb7e4:	2b09      	cmp	r3, #9
   bb7e6:	d03d      	beq.n	bb864 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x174>
   bb7e8:	2b07      	cmp	r3, #7
   bb7ea:	d017      	beq.n	bb81c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x12c>
   bb7ec:	4b6f      	ldr	r3, [pc, #444]	; (bb9ac <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2bc>)
   bb7ee:	9300      	str	r3, [sp, #0]
   bb7f0:	6965      	ldr	r5, [r4, #20]
   bb7f2:	2375      	movs	r3, #117	; 0x75
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
   bb7f4:	4a63      	ldr	r2, [pc, #396]	; (bb984 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
   bb7f6:	4967      	ldr	r1, [pc, #412]	; (bb994 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a4>)
   bb7f8:	4620      	mov	r0, r4
   bb7fa:	47a8      	blx	r5
   bb7fc:	e7a4      	b.n	bb748 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x58>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
   bb7fe:	429a      	cmp	r2, r3
   bb800:	d030      	beq.n	bb864 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x174>
   bb802:	e9cd 3202 	strd	r3, r2, [sp, #8]
   bb806:	4b6a      	ldr	r3, [pc, #424]	; (bb9b0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c0>)
   bb808:	9301      	str	r3, [sp, #4]
   bb80a:	4b6a      	ldr	r3, [pc, #424]	; (bb9b4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c4>)
   bb80c:	9300      	str	r3, [sp, #0]
   bb80e:	6965      	ldr	r5, [r4, #20]
   bb810:	2378      	movs	r3, #120	; 0x78
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
   bb812:	4a5c      	ldr	r2, [pc, #368]	; (bb984 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
   bb814:	495c      	ldr	r1, [pc, #368]	; (bb988 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x298>)
   bb816:	4620      	mov	r0, r4
   bb818:	47a8      	blx	r5
   bb81a:	e795      	b.n	bb748 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x58>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
   bb81c:	6933      	ldr	r3, [r6, #16]
   bb81e:	b14b      	cbz	r3, bb834 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x144>
   bb820:	2200      	movs	r2, #0
   bb822:	e9cd 3202 	strd	r3, r2, [sp, #8]
   bb826:	4b64      	ldr	r3, [pc, #400]	; (bb9b8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
   bb828:	9301      	str	r3, [sp, #4]
   bb82a:	4b64      	ldr	r3, [pc, #400]	; (bb9bc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
   bb82c:	9300      	str	r3, [sp, #0]
   bb82e:	6965      	ldr	r5, [r4, #20]
   bb830:	237d      	movs	r3, #125	; 0x7d
   bb832:	e7ee      	b.n	bb812 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x122>
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
   bb834:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   bb836:	eddf 0a62 	vldr	s1, [pc, #392]	; bb9c0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d0>
   bb83a:	4862      	ldr	r0, [pc, #392]	; (bb9c4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d4>)
   bb83c:	f240 2201 	movw	r2, #513	; 0x201
   bb840:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
   bb844:	f7ff fe9a 	bl	bb57c <_ZN6tflite7gen_lutEPFffEffPsi>
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
   bb848:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   bb84a:	ed9f 0a5d 	vldr	s0, [pc, #372]	; bb9c0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d0>
   bb84e:	485e      	ldr	r0, [pc, #376]	; (bb9c8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d8>)
   bb850:	f240 2201 	movw	r2, #513	; 0x201
   bb854:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   bb858:	f7ff fe90 	bl	bb57c <_ZN6tflite7gen_lutEPFffEffPsi>
    op_data->zero_point = output->params.zero_point;
   bb85c:	6933      	ldr	r3, [r6, #16]
   bb85e:	61fb      	str	r3, [r7, #28]
    op_data->scale = output->params.scale;
   bb860:	68f3      	ldr	r3, [r6, #12]
   bb862:	623b      	str	r3, [r7, #32]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
   bb864:	f898 5000 	ldrb.w	r5, [r8]
  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
   bb868:	f8d9 9014 	ldr.w	r9, [r9, #20]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
   bb86c:	2d09      	cmp	r5, #9
   bb86e:	d039      	beq.n	bb8e4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f4>
   bb870:	2d07      	cmp	r5, #7
   bb872:	f040 8129 	bne.w	bbac8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x3d8>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
   bb876:	6933      	ldr	r3, [r6, #16]
   bb878:	b14b      	cbz	r3, bb88e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x19e>
   bb87a:	2200      	movs	r2, #0
   bb87c:	e9cd 3202 	strd	r3, r2, [sp, #8]
   bb880:	4b4d      	ldr	r3, [pc, #308]	; (bb9b8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
   bb882:	9301      	str	r3, [sp, #4]
   bb884:	4b4d      	ldr	r3, [pc, #308]	; (bb9bc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
   bb886:	9300      	str	r3, [sp, #0]
   bb888:	6965      	ldr	r5, [r4, #20]
   bb88a:	2325      	movs	r3, #37	; 0x25
   bb88c:	e7c1      	b.n	bb812 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x122>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
   bb88e:	eddf 7a4f 	vldr	s15, [pc, #316]	; bb9cc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2dc>
   bb892:	ed96 7a03 	vldr	s14, [r6, #12]
   bb896:	eddf 6a4e 	vldr	s13, [pc, #312]	; bb9d0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>
   bb89a:	eeb4 7ae7 	vcmpe.f32	s14, s15
   bb89e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb8a2:	bfcc      	ite	gt
   bb8a4:	ee77 7a67 	vsubgt.f32	s15, s14, s15
   bb8a8:	ee77 7ac7 	vsuble.f32	s15, s15, s14
   bb8ac:	eef4 7ae6 	vcmpe.f32	s15, s13
   bb8b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb8b4:	f340 80c1 	ble.w	bba3a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x34a>
   bb8b8:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
   bb8bc:	2200      	movs	r2, #0
   bb8be:	ee17 0a10 	vmov	r0, s14
   bb8c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
   bb8c6:	f002 f9c9 	bl	bdc5c <__aeabi_f2d>
   bb8ca:	4b42      	ldr	r3, [pc, #264]	; (bb9d4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e4>)
   bb8cc:	9301      	str	r3, [sp, #4]
   bb8ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
   bb8d2:	4b41      	ldr	r3, [pc, #260]	; (bb9d8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
   bb8d4:	9300      	str	r3, [sp, #0]
   bb8d6:	6965      	ldr	r5, [r4, #20]
   bb8d8:	2326      	movs	r3, #38	; 0x26
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
   bb8da:	4a2a      	ldr	r2, [pc, #168]	; (bb984 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
   bb8dc:	493f      	ldr	r1, [pc, #252]	; (bb9dc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
   bb8de:	4620      	mov	r0, r4
   bb8e0:	47a8      	blx	r5
   bb8e2:	e731      	b.n	bb748 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x58>
      if (output->type == kTfLiteInt16) {
   bb8e4:	7830      	ldrb	r0, [r6, #0]
   bb8e6:	2807      	cmp	r0, #7
   bb8e8:	d133      	bne.n	bb952 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x262>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
   bb8ea:	6933      	ldr	r3, [r6, #16]
   bb8ec:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
   bb8f0:	d009      	beq.n	bb906 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x216>
   bb8f2:	4a3b      	ldr	r2, [pc, #236]	; (bb9e0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2f0>)
   bb8f4:	e9cd 3202 	strd	r3, r2, [sp, #8]
   bb8f8:	4b3a      	ldr	r3, [pc, #232]	; (bb9e4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2f4>)
   bb8fa:	9301      	str	r3, [sp, #4]
   bb8fc:	4b2f      	ldr	r3, [pc, #188]	; (bb9bc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
   bb8fe:	9300      	str	r3, [sp, #0]
   bb900:	6965      	ldr	r5, [r4, #20]
   bb902:	232b      	movs	r3, #43	; 0x2b
   bb904:	e785      	b.n	bb812 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x122>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
   bb906:	eddf 7a38 	vldr	s15, [pc, #224]	; bb9e8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2f8>
   bb90a:	ed96 7a03 	vldr	s14, [r6, #12]
   bb90e:	eddf 6a37 	vldr	s13, [pc, #220]	; bb9ec <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2fc>
   bb912:	eeb4 7ae7 	vcmpe.f32	s14, s15
   bb916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb91a:	bfcc      	ite	gt
   bb91c:	ee77 7a67 	vsubgt.f32	s15, s14, s15
   bb920:	ee77 7ac7 	vsuble.f32	s15, s15, s14
   bb924:	eef4 7ae6 	vcmpe.f32	s15, s13
   bb928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb92c:	f340 80a6 	ble.w	bba7c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x38c>
   bb930:	4b2f      	ldr	r3, [pc, #188]	; (bb9f0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x300>)
   bb932:	2200      	movs	r2, #0
   bb934:	ee17 0a10 	vmov	r0, s14
   bb938:	e9cd 2304 	strd	r2, r3, [sp, #16]
   bb93c:	f002 f98e 	bl	bdc5c <__aeabi_f2d>
   bb940:	4b2c      	ldr	r3, [pc, #176]	; (bb9f4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x304>)
   bb942:	9301      	str	r3, [sp, #4]
   bb944:	e9cd 0102 	strd	r0, r1, [sp, #8]
   bb948:	4b23      	ldr	r3, [pc, #140]	; (bb9d8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
   bb94a:	9300      	str	r3, [sp, #0]
   bb94c:	6965      	ldr	r5, [r4, #20]
   bb94e:	232c      	movs	r3, #44	; 0x2c
   bb950:	e7c3      	b.n	bb8da <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1ea>
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
   bb952:	2809      	cmp	r0, #9
   bb954:	d054      	beq.n	bba00 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x310>
   bb956:	6967      	ldr	r7, [r4, #20]
   bb958:	f7f8 fbd4 	bl	b4104 <TfLiteTypeGetName>
   bb95c:	4606      	mov	r6, r0
   bb95e:	4628      	mov	r0, r5
   bb960:	f7f8 fbd0 	bl	b4104 <TfLiteTypeGetName>
   bb964:	4b24      	ldr	r3, [pc, #144]	; (bb9f8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x308>)
   bb966:	9301      	str	r3, [sp, #4]
   bb968:	4b11      	ldr	r3, [pc, #68]	; (bb9b0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c0>)
   bb96a:	9300      	str	r3, [sp, #0]
   bb96c:	e9cd 6002 	strd	r6, r0, [sp, #8]
   bb970:	4a04      	ldr	r2, [pc, #16]	; (bb984 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
   bb972:	4922      	ldr	r1, [pc, #136]	; (bb9fc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x30c>)
   bb974:	232f      	movs	r3, #47	; 0x2f
   bb976:	4620      	mov	r0, r4
   bb978:	47b8      	blx	r7
   bb97a:	e6e5      	b.n	bb748 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x58>
   bb97c:	000cb85a 	.word	0x000cb85a
   bb980:	000cb832 	.word	0x000cb832
   bb984:	000cb784 	.word	0x000cb784
   bb988:	000cada2 	.word	0x000cada2
   bb98c:	000cb138 	.word	0x000cb138
   bb990:	000cad6d 	.word	0x000cad6d
   bb994:	000cad56 	.word	0x000cad56
   bb998:	000cb842 	.word	0x000cb842
   bb99c:	000cad90 	.word	0x000cad90
   bb9a0:	000cb85c 	.word	0x000cb85c
   bb9a4:	000cb877 	.word	0x000cb877
   bb9a8:	000cb88e 	.word	0x000cb88e
   bb9ac:	000cb8b1 	.word	0x000cb8b1
   bb9b0:	000cb15d 	.word	0x000cb15d
   bb9b4:	000cb16a 	.word	0x000cb16a
   bb9b8:	000c08c4 	.word	0x000c08c4
   bb9bc:	000cb380 	.word	0x000cb380
   bb9c0:	00000000 	.word	0x00000000
   bb9c4:	000bb577 	.word	0x000bb577
   bb9c8:	000bb569 	.word	0x000bb569
   bb9cc:	38000000 	.word	0x38000000
   bb9d0:	3303126f 	.word	0x3303126f
   bb9d4:	000cb90b 	.word	0x000cb90b
   bb9d8:	000cb917 	.word	0x000cb917
   bb9dc:	000cb8eb 	.word	0x000cb8eb
   bb9e0:	ffff8000 	.word	0xffff8000
   bb9e4:	000cb92c 	.word	0x000cb92c
   bb9e8:	37800000 	.word	0x37800000
   bb9ec:	3283126f 	.word	0x3283126f
   bb9f0:	3ef00000 	.word	0x3ef00000
   bb9f4:	000cb933 	.word	0x000cb933
   bb9f8:	000cb959 	.word	0x000cb959
   bb9fc:	000cb93f 	.word	0x000cb93f
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
   bba00:	6933      	ldr	r3, [r6, #16]
   bba02:	f113 0f80 	cmn.w	r3, #128	; 0x80
   bba06:	d00a      	beq.n	bba1e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x32e>
   bba08:	f06f 027f 	mvn.w	r2, #127	; 0x7f
   bba0c:	e9cd 3202 	strd	r3, r2, [sp, #8]
   bba10:	4b49      	ldr	r3, [pc, #292]	; (bbb38 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x448>)
   bba12:	9301      	str	r3, [sp, #4]
   bba14:	4b49      	ldr	r3, [pc, #292]	; (bbb3c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x44c>)
   bba16:	9300      	str	r3, [sp, #0]
   bba18:	6965      	ldr	r5, [r4, #20]
   bba1a:	2330      	movs	r3, #48	; 0x30
   bba1c:	e6f9      	b.n	bb812 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x122>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
   bba1e:	ed96 7a03 	vldr	s14, [r6, #12]
   bba22:	eddf 7a47 	vldr	s15, [pc, #284]	; bbb40 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x450>
   bba26:	eeb4 7a67 	vcmp.f32	s14, s15
   bba2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bba2e:	d025      	beq.n	bba7c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x38c>
   bba30:	4b44      	ldr	r3, [pc, #272]	; (bbb44 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x454>)
   bba32:	9300      	str	r3, [sp, #0]
   bba34:	6965      	ldr	r5, [r4, #20]
   bba36:	2331      	movs	r3, #49	; 0x31
   bba38:	e6dc      	b.n	bb7f4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x104>
          static_cast<double>(input->params.scale) *
   bba3a:	f8d8 000c 	ldr.w	r0, [r8, #12]
   bba3e:	f002 f90d 	bl	bdc5c <__aeabi_f2d>
   bba42:	4604      	mov	r4, r0
          static_cast<double>(params->beta) /
   bba44:	f8d9 0000 	ldr.w	r0, [r9]
          static_cast<double>(input->params.scale) *
   bba48:	460d      	mov	r5, r1
          static_cast<double>(params->beta) /
   bba4a:	f002 f907 	bl	bdc5c <__aeabi_f2d>
   bba4e:	4602      	mov	r2, r0
   bba50:	460b      	mov	r3, r1
          static_cast<double>(input->params.scale) *
   bba52:	4620      	mov	r0, r4
   bba54:	4629      	mov	r1, r5
   bba56:	f002 f959 	bl	bdd0c <__aeabi_dmul>
      double input_scale_beta_rescale =
   bba5a:	a335      	add	r3, pc, #212	; (adr r3, bbb30 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x440>)
   bba5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   bba60:	f002 fa7e 	bl	bdf60 <__aeabi_ddiv>
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
   bba64:	f107 0608 	add.w	r6, r7, #8
      double input_scale_beta_rescale =
   bba68:	ec41 0b10 	vmov	d0, r0, r1
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
   bba6c:	a907      	add	r1, sp, #28
   bba6e:	4630      	mov	r0, r6
   bba70:	f000 fad6 	bl	bc020 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      op_data->input_left_shift = input_left_shift;
   bba74:	9b07      	ldr	r3, [sp, #28]
   bba76:	60fb      	str	r3, [r7, #12]
  return kTfLiteOk;
   bba78:	2500      	movs	r5, #0
   bba7a:	e650      	b.n	bb71e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
      tflite::PreprocessSoftmaxScaling(
   bba7c:	f8d8 000c 	ldr.w	r0, [r8, #12]
   bba80:	f002 f8ec 	bl	bdc5c <__aeabi_f2d>
   bba84:	ec41 0b18 	vmov	d8, r0, r1
   bba88:	f8d9 0000 	ldr.w	r0, [r9]
   bba8c:	f002 f8e6 	bl	bdc5c <__aeabi_f2d>
   bba90:	eeb0 1a48 	vmov.f32	s2, s16
   bba94:	eef0 1a68 	vmov.f32	s3, s17
   bba98:	f107 0408 	add.w	r4, r7, #8
   bba9c:	ec41 0b10 	vmov	d0, r0, r1
   bbaa0:	aa07      	add	r2, sp, #28
   bbaa2:	4621      	mov	r1, r4
   bbaa4:	2005      	movs	r0, #5
   bbaa6:	f000 fb3f 	bl	bc128 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
      op_data->input_left_shift = input_left_shift;
   bbaaa:	9907      	ldr	r1, [sp, #28]
   bbaac:	60f9      	str	r1, [r7, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
   bbaae:	221f      	movs	r2, #31
   bbab0:	2005      	movs	r0, #5
   bbab2:	f000 fb75 	bl	bc1a0 <_ZN6tflite20CalculateInputRadiusEiii>
   bbab6:	f002 f8bf 	bl	bdc38 <__aeabi_i2d>
   bbaba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
      op_data->diff_min =
   bbabe:	4619      	mov	r1, r3
   bbac0:	f002 fbbe 	bl	be240 <__aeabi_d2iz>
   bbac4:	61b8      	str	r0, [r7, #24]
   bbac6:	e7d7      	b.n	bba78 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x388>
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
   bbac8:	2d01      	cmp	r5, #1
   bbaca:	d013      	beq.n	bbaf4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x404>
   bbacc:	4628      	mov	r0, r5
   bbace:	6966      	ldr	r6, [r4, #20]
   bbad0:	f7f8 fb18 	bl	b4104 <TfLiteTypeGetName>
   bbad4:	4605      	mov	r5, r0
   bbad6:	2001      	movs	r0, #1
   bbad8:	f7f8 fb14 	bl	b4104 <TfLiteTypeGetName>
   bbadc:	4b1a      	ldr	r3, [pc, #104]	; (bbb48 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x458>)
   bbade:	9301      	str	r3, [sp, #4]
   bbae0:	4b1a      	ldr	r3, [pc, #104]	; (bbb4c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x45c>)
   bbae2:	9300      	str	r3, [sp, #0]
   bbae4:	e9cd 5002 	strd	r5, r0, [sp, #8]
   bbae8:	4a19      	ldr	r2, [pc, #100]	; (bbb50 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x460>)
   bbaea:	491a      	ldr	r1, [pc, #104]	; (bbb54 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x464>)
   bbaec:	234e      	movs	r3, #78	; 0x4e
   bbaee:	4620      	mov	r0, r4
   bbaf0:	47b0      	blx	r6
   bbaf2:	e629      	b.n	bb748 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x58>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
   bbaf4:	7830      	ldrb	r0, [r6, #0]
   bbaf6:	2801      	cmp	r0, #1
   bbaf8:	d012      	beq.n	bbb20 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x430>
   bbafa:	6967      	ldr	r7, [r4, #20]
   bbafc:	f7f8 fb02 	bl	b4104 <TfLiteTypeGetName>
   bbb00:	4606      	mov	r6, r0
   bbb02:	4628      	mov	r0, r5
   bbb04:	f7f8 fafe 	bl	b4104 <TfLiteTypeGetName>
   bbb08:	4b0f      	ldr	r3, [pc, #60]	; (bbb48 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x458>)
   bbb0a:	9301      	str	r3, [sp, #4]
   bbb0c:	4b12      	ldr	r3, [pc, #72]	; (bbb58 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x468>)
   bbb0e:	9300      	str	r3, [sp, #0]
   bbb10:	e9cd 6002 	strd	r6, r0, [sp, #8]
   bbb14:	4a0e      	ldr	r2, [pc, #56]	; (bbb50 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x460>)
   bbb16:	490f      	ldr	r1, [pc, #60]	; (bbb54 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x464>)
   bbb18:	234f      	movs	r3, #79	; 0x4f
   bbb1a:	4620      	mov	r0, r4
   bbb1c:	47b8      	blx	r7
   bbb1e:	e5fe      	b.n	bb71e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
    op_data->beta = static_cast<double>(params->beta);
   bbb20:	f8d9 0000 	ldr.w	r0, [r9]
   bbb24:	f002 f89a 	bl	bdc5c <__aeabi_f2d>
   bbb28:	e9c7 0100 	strd	r0, r1, [r7]
   bbb2c:	e7a4      	b.n	bba78 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x388>
   bbb2e:	bf00      	nop
   bbb30:	00140014 	.word	0x00140014
   bbb34:	3f240014 	.word	0x3f240014
   bbb38:	000cb965 	.word	0x000cb965
   bbb3c:	000cb380 	.word	0x000cb380
   bbb40:	3b800000 	.word	0x3b800000
   bbb44:	000cb96a 	.word	0x000cb96a
   bbb48:	000cb98c 	.word	0x000cb98c
   bbb4c:	000cb16a 	.word	0x000cb16a
   bbb50:	000cb784 	.word	0x000cb784
   bbb54:	000cb93f 	.word	0x000cb93f
   bbb58:	000cb15d 	.word	0x000cb15d

000bbb5c <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>:
                                           TfLiteTensor* output,
                                           int32_t* act_min, int32_t* act_max) {
  const auto scale = output->params.scale;
  const auto zero_point = output->params.zero_point;

  auto quantize = [scale, zero_point](float f) {
   bbb5c:	b510      	push	{r4, lr}
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
   bbb5e:	edd0 7a00 	vldr	s15, [r0]
   bbb62:	ee80 0a27 	vdiv.f32	s0, s0, s15
  auto quantize = [scale, zero_point](float f) {
   bbb66:	4604      	mov	r4, r0
   bbb68:	f001 fda4 	bl	bd6b4 <roundf>
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
   bbb6c:	6860      	ldr	r0, [r4, #4]
   bbb6e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
  };
   bbb72:	ee10 3a10 	vmov	r3, s0
   bbb76:	4403      	add	r3, r0
   bbb78:	4618      	mov	r0, r3
   bbb7a:	bd10      	pop	{r4, pc}

000bbb7c <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>:
                                      int tensor_index) {
   bbb7c:	b410      	push	{r4}
  if (context->tensors != nullptr) {
   bbb7e:	6883      	ldr	r3, [r0, #8]
   bbb80:	b91b      	cbnz	r3, bbb8a <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0xe>
    return context->GetTensor(context, tensor_index);
   bbb82:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
   bbb84:	f85d 4b04 	ldr.w	r4, [sp], #4
    return context->GetTensor(context, tensor_index);
   bbb88:	4718      	bx	r3
    return &context->tensors[tensor_index];
   bbb8a:	eb03 1081 	add.w	r0, r3, r1, lsl #6
}
   bbb8e:	f85d 4b04 	ldr.w	r4, [sp], #4
   bbb92:	4770      	bx	lr

000bbb94 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0>:
  if (index >= 0 && index < max_size) {
   bbb94:	2a00      	cmp	r2, #0
  const int tensor_index = ValidateTensorIndexing(
   bbb96:	f851 3b04 	ldr.w	r3, [r1], #4
  if (index >= 0 && index < max_size) {
   bbb9a:	db07      	blt.n	bbbac <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0+0x18>
   bbb9c:	4293      	cmp	r3, r2
   bbb9e:	dd05      	ble.n	bbbac <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0+0x18>
    const int tensor_index = tensor_indices[index];
   bbba0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  if (tensor_index < 0) {
   bbba4:	2900      	cmp	r1, #0
   bbba6:	db01      	blt.n	bbbac <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0+0x18>
  return GetTensorAtIndex(context, tensor_index);
   bbba8:	f7ff bfe8 	b.w	bbb7c <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
}
   bbbac:	2000      	movs	r0, #0
   bbbae:	4770      	bx	lr

000bbbb0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
  return GetMutableInput(context, node, index);
   bbbb0:	6809      	ldr	r1, [r1, #0]
   bbbb2:	f7ff bfef 	b.w	bbb94 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0>

000bbbb6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  const int tensor_index = ValidateTensorIndexing(
   bbbb6:	684b      	ldr	r3, [r1, #4]
  if (index >= 0 && index < max_size) {
   bbbb8:	2a00      	cmp	r2, #0
  const int tensor_index = ValidateTensorIndexing(
   bbbba:	f853 1b04 	ldr.w	r1, [r3], #4
  if (index >= 0 && index < max_size) {
   bbbbe:	db07      	blt.n	bbbd0 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x1a>
   bbbc0:	4291      	cmp	r1, r2
   bbbc2:	dd05      	ble.n	bbbd0 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x1a>
    const int tensor_index = tensor_indices[index];
   bbbc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  if (tensor_index < 0) {
   bbbc8:	2900      	cmp	r1, #0
   bbbca:	db01      	blt.n	bbbd0 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x1a>
  return GetTensorAtIndex(context, tensor_index);
   bbbcc:	f7ff bfd6 	b.w	bbb7c <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
}
   bbbd0:	2000      	movs	r0, #0
   bbbd2:	4770      	bx	lr

000bbbd4 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
   bbbd4:	6809      	ldr	r1, [r1, #0]
   bbbd6:	f7ff bfdd 	b.w	bbb94 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0>
	...

000bbbdc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:
                                              double* multiplier) {
   bbbdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
      static_cast<double>(input->params.scale * filter->params.scale);
   bbbde:	edd1 7a03 	vldr	s15, [r1, #12]
   bbbe2:	ed92 7a03 	vldr	s14, [r2, #12]
   bbbe6:	ee67 7a87 	vmul.f32	s15, s15, s14
                                              double* multiplier) {
   bbbea:	461e      	mov	r6, r3
  TF_LITE_ENSURE(context, input_product_scale >= 0);
   bbbec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   bbbf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bbbf4:	da0a      	bge.n	bbc0c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x30>
   bbbf6:	4b0f      	ldr	r3, [pc, #60]	; (bbc34 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x58>)
   bbbf8:	9300      	str	r3, [sp, #0]
   bbbfa:	6944      	ldr	r4, [r0, #20]
   bbbfc:	4a0e      	ldr	r2, [pc, #56]	; (bbc38 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x5c>)
   bbbfe:	490f      	ldr	r1, [pc, #60]	; (bbc3c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x60>)
   bbc00:	f240 1351 	movw	r3, #337	; 0x151
   bbc04:	47a0      	blx	r4
   bbc06:	2001      	movs	r0, #1
}
   bbc08:	b002      	add	sp, #8
   bbc0a:	bd70      	pop	{r4, r5, r6, pc}
  const double input_product_scale =
   bbc0c:	ee17 0a90 	vmov	r0, s15
   bbc10:	f002 f824 	bl	bdc5c <__aeabi_f2d>
   bbc14:	4604      	mov	r4, r0
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
   bbc16:	68f0      	ldr	r0, [r6, #12]
  const double input_product_scale =
   bbc18:	460d      	mov	r5, r1
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
   bbc1a:	f002 f81f 	bl	bdc5c <__aeabi_f2d>
   bbc1e:	460b      	mov	r3, r1
   bbc20:	4602      	mov	r2, r0
   bbc22:	4629      	mov	r1, r5
   bbc24:	4620      	mov	r0, r4
   bbc26:	f002 f99b 	bl	bdf60 <__aeabi_ddiv>
   bbc2a:	9b06      	ldr	r3, [sp, #24]
   bbc2c:	e9c3 0100 	strd	r0, r1, [r3]
  return kTfLiteOk;
   bbc30:	2000      	movs	r0, #0
   bbc32:	e7e9      	b.n	bbc08 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x2c>
   bbc34:	000cba45 	.word	0x000cba45
   bbc38:	000cb99b 	.word	0x000cb99b
   bbc3c:	000cad56 	.word	0x000cad56

000bbc40 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
                                              double* multiplier) {
   bbc40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbc44:	4604      	mov	r4, r0
  const double input_product_scale = static_cast<double>(input->params.scale) *
   bbc46:	68c8      	ldr	r0, [r1, #12]
                                              double* multiplier) {
   bbc48:	4615      	mov	r5, r2
   bbc4a:	461e      	mov	r6, r3
   bbc4c:	468a      	mov	sl, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
   bbc4e:	f002 f805 	bl	bdc5c <__aeabi_f2d>
   bbc52:	4680      	mov	r8, r0
                                     static_cast<double>(filter->params.scale);
   bbc54:	68e8      	ldr	r0, [r5, #12]
  const double input_product_scale = static_cast<double>(input->params.scale) *
   bbc56:	4689      	mov	r9, r1
                                     static_cast<double>(filter->params.scale);
   bbc58:	f002 f800 	bl	bdc5c <__aeabi_f2d>
   bbc5c:	4602      	mov	r2, r0
   bbc5e:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
   bbc60:	4640      	mov	r0, r8
   bbc62:	4649      	mov	r1, r9
   bbc64:	f002 f852 	bl	bdd0c <__aeabi_dmul>
                                              double* multiplier) {
   bbc68:	e9dd 7b0c 	ldrd	r7, fp, [sp, #48]	; 0x30
  const double input_product_scale = static_cast<double>(input->params.scale) *
   bbc6c:	4680      	mov	r8, r0
   bbc6e:	4689      	mov	r9, r1
  if (bias) {
   bbc70:	b1d6      	cbz	r6, bbca8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x68>
    const double bias_scale = static_cast<double>(bias->params.scale);
   bbc72:	68f0      	ldr	r0, [r6, #12]
   bbc74:	f001 fff2 	bl	bdc5c <__aeabi_f2d>
   bbc78:	4602      	mov	r2, r0
   bbc7a:	460b      	mov	r3, r1
    const double scale_diff = std::abs(input_product_scale - bias_scale);
   bbc7c:	4640      	mov	r0, r8
   bbc7e:	4649      	mov	r1, r9
   bbc80:	f001 fe8c 	bl	bd99c <__aeabi_dsub>
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
   bbc84:	4680      	mov	r8, r0
    const double output_scale = static_cast<double>(output->params.scale);
   bbc86:	68f8      	ldr	r0, [r7, #12]
   bbc88:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
   bbc8c:	f001 ffe6 	bl	bdc5c <__aeabi_f2d>
   bbc90:	4602      	mov	r2, r0
   bbc92:	460b      	mov	r3, r1
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
   bbc94:	4640      	mov	r0, r8
   bbc96:	4649      	mov	r1, r9
   bbc98:	f002 f962 	bl	bdf60 <__aeabi_ddiv>
   bbc9c:	a311      	add	r3, pc, #68	; (adr r3, bbce4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa4>)
   bbc9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbca2:	f002 faaf 	bl	be204 <__aeabi_dcmple>
   bbca6:	b150      	cbz	r0, bbcbe <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x7e>
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
   bbca8:	463b      	mov	r3, r7
   bbcaa:	462a      	mov	r2, r5
   bbcac:	4651      	mov	r1, sl
   bbcae:	4620      	mov	r0, r4
   bbcb0:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
}
   bbcb4:	b003      	add	sp, #12
   bbcb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
   bbcba:	f7ff bf8f 	b.w	bbbdc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
   bbcbe:	4b06      	ldr	r3, [pc, #24]	; (bbcd8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x98>)
   bbcc0:	9300      	str	r3, [sp, #0]
   bbcc2:	4620      	mov	r0, r4
   bbcc4:	6965      	ldr	r5, [r4, #20]
   bbcc6:	4a05      	ldr	r2, [pc, #20]	; (bbcdc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x9c>)
   bbcc8:	4905      	ldr	r1, [pc, #20]	; (bbce0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa0>)
   bbcca:	f44f 73a2 	mov.w	r3, #324	; 0x144
   bbcce:	47a8      	blx	r5
}
   bbcd0:	2001      	movs	r0, #1
   bbcd2:	b003      	add	sp, #12
   bbcd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bbcd8:	000cba5e 	.word	0x000cba5e
   bbcdc:	000cb99b 	.word	0x000cb99b
   bbce0:	000cad56 	.word	0x000cad56
   bbce4:	47ae147b 	.word	0x47ae147b
   bbce8:	3f947ae1 	.word	0x3f947ae1

000bbcec <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
   bbcec:	b5f0      	push	{r4, r5, r6, r7, lr}
   bbcee:	461d      	mov	r5, r3
  int32_t qmin = 0;
  int32_t qmax = 0;
  if (output->type == kTfLiteUInt8) {
   bbcf0:	7813      	ldrb	r3, [r2, #0]
                                               int32_t* act_max) {
   bbcf2:	b085      	sub	sp, #20
  if (output->type == kTfLiteUInt8) {
   bbcf4:	2b03      	cmp	r3, #3
                                               int32_t* act_max) {
   bbcf6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (output->type == kTfLiteUInt8) {
   bbcf8:	d00e      	beq.n	bbd18 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x2c>
    qmin = std::numeric_limits<uint8_t>::min();
    qmax = std::numeric_limits<uint8_t>::max();
  } else if (output->type == kTfLiteInt8) {
   bbcfa:	2b09      	cmp	r3, #9
   bbcfc:	d01f      	beq.n	bbd3e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x52>
    qmin = std::numeric_limits<int8_t>::min();
    qmax = std::numeric_limits<int8_t>::max();
  } else if (output->type == kTfLiteInt16) {
   bbcfe:	2b07      	cmp	r3, #7
   bbd00:	d021      	beq.n	bbd46 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x5a>
    qmin = std::numeric_limits<int16_t>::min();
    qmax = std::numeric_limits<int16_t>::max();
  } else {
    TF_LITE_ENSURE(context, false);
   bbd02:	4b26      	ldr	r3, [pc, #152]	; (bbd9c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xb0>)
   bbd04:	9300      	str	r3, [sp, #0]
   bbd06:	6944      	ldr	r4, [r0, #20]
   bbd08:	4a25      	ldr	r2, [pc, #148]	; (bbda0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xb4>)
   bbd0a:	4926      	ldr	r1, [pc, #152]	; (bbda4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xb8>)
   bbd0c:	f44f 73c2 	mov.w	r3, #388	; 0x184
   bbd10:	47a0      	blx	r4
   bbd12:	2001      	movs	r0, #1
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
                                        act_max);
  return kTfLiteOk;
}
   bbd14:	b005      	add	sp, #20
   bbd16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    qmax = std::numeric_limits<uint8_t>::max();
   bbd18:	24ff      	movs	r4, #255	; 0xff
    qmin = std::numeric_limits<uint8_t>::min();
   bbd1a:	2600      	movs	r6, #0
  const auto zero_point = output->params.zero_point;
   bbd1c:	6913      	ldr	r3, [r2, #16]
  };
   bbd1e:	68d2      	ldr	r2, [r2, #12]
   bbd20:	9202      	str	r2, [sp, #8]
  if (activation == kTfLiteActRelu) {
   bbd22:	2901      	cmp	r1, #1
  };
   bbd24:	9303      	str	r3, [sp, #12]
  if (activation == kTfLiteActRelu) {
   bbd26:	d112      	bne.n	bbd4e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x62>
    *act_min = std::max(qmin, quantize(0.0));
   bbd28:	ed9f 0a1f 	vldr	s0, [pc, #124]	; bbda8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xbc>
   bbd2c:	a802      	add	r0, sp, #8
   bbd2e:	f7ff ff15 	bl	bbb5c <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
   bbd32:	4286      	cmp	r6, r0
   bbd34:	bfac      	ite	ge
   bbd36:	602e      	strge	r6, [r5, #0]
   bbd38:	6028      	strlt	r0, [r5, #0]
    *act_max = qmax;
   bbd3a:	603c      	str	r4, [r7, #0]
   bbd3c:	e01b      	b.n	bbd76 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x8a>
    qmax = std::numeric_limits<int8_t>::max();
   bbd3e:	247f      	movs	r4, #127	; 0x7f
    qmin = std::numeric_limits<int8_t>::min();
   bbd40:	f06f 067f 	mvn.w	r6, #127	; 0x7f
   bbd44:	e7ea      	b.n	bbd1c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x30>
    qmin = std::numeric_limits<int16_t>::min();
   bbd46:	4e19      	ldr	r6, [pc, #100]	; (bbdac <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xc0>)
    qmax = std::numeric_limits<int16_t>::max();
   bbd48:	f647 74ff 	movw	r4, #32767	; 0x7fff
   bbd4c:	e7e6      	b.n	bbd1c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x30>
  } else if (activation == kTfLiteActRelu6) {
   bbd4e:	2903      	cmp	r1, #3
   bbd50:	d113      	bne.n	bbd7a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x8e>
    *act_min = std::max(qmin, quantize(0.0));
   bbd52:	ed9f 0a15 	vldr	s0, [pc, #84]	; bbda8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xbc>
   bbd56:	a802      	add	r0, sp, #8
   bbd58:	f7ff ff00 	bl	bbb5c <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
    *act_max = std::min(qmax, quantize(6.0));
   bbd5c:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
    *act_min = std::max(qmin, quantize(0.0));
   bbd60:	4286      	cmp	r6, r0
   bbd62:	bfac      	ite	ge
   bbd64:	602e      	strge	r6, [r5, #0]
   bbd66:	6028      	strlt	r0, [r5, #0]
    *act_max = std::min(qmax, quantize(1.0));
   bbd68:	a802      	add	r0, sp, #8
   bbd6a:	f7ff fef7 	bl	bbb5c <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
   bbd6e:	4284      	cmp	r4, r0
   bbd70:	bfd4      	ite	le
   bbd72:	603c      	strle	r4, [r7, #0]
   bbd74:	6038      	strgt	r0, [r7, #0]
  return kTfLiteOk;
   bbd76:	2000      	movs	r0, #0
   bbd78:	e7cc      	b.n	bbd14 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x28>
  } else if (activation == kTfLiteActReluN1To1) {
   bbd7a:	2902      	cmp	r1, #2
   bbd7c:	d10b      	bne.n	bbd96 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xaa>
    *act_min = std::max(qmin, quantize(-1.0));
   bbd7e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   bbd82:	a802      	add	r0, sp, #8
   bbd84:	f7ff feea 	bl	bbb5c <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
    *act_max = std::min(qmax, quantize(1.0));
   bbd88:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    *act_min = std::max(qmin, quantize(-1.0));
   bbd8c:	4286      	cmp	r6, r0
   bbd8e:	bfac      	ite	ge
   bbd90:	602e      	strge	r6, [r5, #0]
   bbd92:	6028      	strlt	r0, [r5, #0]
    *act_max = std::min(qmax, quantize(1.0));
   bbd94:	e7e8      	b.n	bbd68 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7c>
    *act_min = qmin;
   bbd96:	602e      	str	r6, [r5, #0]
   bbd98:	e7cf      	b.n	bbd3a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4e>
   bbd9a:	bf00      	nop
   bbd9c:	000cba80 	.word	0x000cba80
   bbda0:	000cb99b 	.word	0x000cb99b
   bbda4:	000cad56 	.word	0x000cad56
   bbda8:	00000000 	.word	0x00000000
   bbdac:	ffff8000 	.word	0xffff8000

000bbdb0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>:
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
   bbdb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbdb4:	ed2d 8b06 	vpush	{d8-d10}
   bbdb8:	b093      	sub	sp, #76	; 0x4c
   bbdba:	ee09 3a10 	vmov	s18, r3
   bbdbe:	9b22      	ldr	r3, [sp, #136]	; 0x88
   bbdc0:	9306      	str	r3, [sp, #24]
   bbdc2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   bbdc4:	9308      	str	r3, [sp, #32]
   bbdc6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
   bbdc8:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
   bbdcc:	ee09 3a90 	vmov	s19, r3
   bbdd0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   bbdd2:	9309      	str	r3, [sp, #36]	; 0x24
   bbdd4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   bbdd6:	ee0a 3a10 	vmov	s20, r3
   bbdda:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   bbddc:	930a      	str	r3, [sp, #40]	; 0x28
   bbdde:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   bbde0:	930b      	str	r3, [sp, #44]	; 0x2c
   bbde2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   bbde4:	930c      	str	r3, [sp, #48]	; 0x30
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
   bbde6:	2d01      	cmp	r5, #1
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
   bbde8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   bbdea:	9307      	str	r3, [sp, #28]
   bbdec:	4604      	mov	r4, r0
   bbdee:	468b      	mov	fp, r1
   bbdf0:	4692      	mov	sl, r2
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
   bbdf2:	d011      	beq.n	bbe18 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x68>
   bbdf4:	2601      	movs	r6, #1
   bbdf6:	4b77      	ldr	r3, [pc, #476]	; (bbfd4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x224>)
   bbdf8:	9301      	str	r3, [sp, #4]
   bbdfa:	e9cd 5602 	strd	r5, r6, [sp, #8]
   bbdfe:	4b76      	ldr	r3, [pc, #472]	; (bbfd8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x228>)
   bbe00:	9300      	str	r3, [sp, #0]
   bbe02:	6944      	ldr	r4, [r0, #20]
   bbe04:	4a75      	ldr	r2, [pc, #468]	; (bbfdc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x22c>)
   bbe06:	4976      	ldr	r1, [pc, #472]	; (bbfe0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x230>)
   bbe08:	23e0      	movs	r3, #224	; 0xe0
   bbe0a:	47a0      	blx	r4
}
   bbe0c:	4630      	mov	r0, r6
   bbe0e:	b013      	add	sp, #76	; 0x4c
   bbe10:	ecbd 8b06 	vpop	{d8-d10}
   bbe14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
   bbe18:	f892 6030 	ldrb.w	r6, [r2, #48]	; 0x30
   bbe1c:	2e01      	cmp	r6, #1
   bbe1e:	d00c      	beq.n	bbe3a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x8a>
   bbe20:	e9cd 6502 	strd	r6, r5, [sp, #8]
   bbe24:	4b6b      	ldr	r3, [pc, #428]	; (bbfd4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x224>)
   bbe26:	9301      	str	r3, [sp, #4]
   bbe28:	4b6e      	ldr	r3, [pc, #440]	; (bbfe4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x234>)
   bbe2a:	9300      	str	r3, [sp, #0]
   bbe2c:	6944      	ldr	r4, [r0, #20]
   bbe2e:	4a6b      	ldr	r2, [pc, #428]	; (bbfdc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x22c>)
   bbe30:	496b      	ldr	r1, [pc, #428]	; (bbfe0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x230>)
   bbe32:	23e2      	movs	r3, #226	; 0xe2
   bbe34:	47a0      	blx	r4
   bbe36:	462e      	mov	r6, r5
   bbe38:	e7e8      	b.n	bbe0c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x5c>
  const auto* affine_quantization =
   bbe3a:	6b52      	ldr	r2, [r2, #52]	; 0x34
  TF_LITE_ENSURE(context, affine_quantization);
   bbe3c:	b93a      	cbnz	r2, bbe4e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x9e>
   bbe3e:	4b6a      	ldr	r3, [pc, #424]	; (bbfe8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x238>)
   bbe40:	9300      	str	r3, [sp, #0]
   bbe42:	6944      	ldr	r4, [r0, #20]
   bbe44:	23ed      	movs	r3, #237	; 0xed
  TF_LITE_ENSURE(context, affine_quantization->scale);
   bbe46:	4a65      	ldr	r2, [pc, #404]	; (bbfdc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x22c>)
   bbe48:	4968      	ldr	r1, [pc, #416]	; (bbfec <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x23c>)
   bbe4a:	47a0      	blx	r4
   bbe4c:	e7de      	b.n	bbe0c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x5c>
   bbe4e:	6817      	ldr	r7, [r2, #0]
   bbe50:	b927      	cbnz	r7, bbe5c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xac>
   bbe52:	4b67      	ldr	r3, [pc, #412]	; (bbff0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x240>)
   bbe54:	9300      	str	r3, [sp, #0]
   bbe56:	6944      	ldr	r4, [r0, #20]
   bbe58:	23ee      	movs	r3, #238	; 0xee
   bbe5a:	e7f4      	b.n	bbe46 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x96>
  const bool is_per_channel = affine_quantization->scale->size > 1;
   bbe5c:	683d      	ldr	r5, [r7, #0]
  if (is_per_channel) {
   bbe5e:	2d01      	cmp	r5, #1
   bbe60:	dd38      	ble.n	bbed4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x124>
    TF_LITE_ENSURE(context,
   bbe62:	780b      	ldrb	r3, [r1, #0]
   bbe64:	2b09      	cmp	r3, #9
   bbe66:	d006      	beq.n	bbe76 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xc6>
   bbe68:	2b07      	cmp	r3, #7
   bbe6a:	d004      	beq.n	bbe76 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xc6>
   bbe6c:	4b61      	ldr	r3, [pc, #388]	; (bbff4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x244>)
   bbe6e:	9300      	str	r3, [sp, #0]
   bbe70:	6944      	ldr	r4, [r0, #20]
   bbe72:	23f2      	movs	r3, #242	; 0xf2
   bbe74:	e7e7      	b.n	bbe46 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x96>
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
   bbe76:	f89a 3000 	ldrb.w	r3, [sl]
   bbe7a:	2b09      	cmp	r3, #9
   bbe7c:	d00d      	beq.n	bbe9a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xea>
   bbe7e:	2209      	movs	r2, #9
   bbe80:	e9cd 3202 	strd	r3, r2, [sp, #8]
   bbe84:	4b5c      	ldr	r3, [pc, #368]	; (bbff8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x248>)
   bbe86:	9301      	str	r3, [sp, #4]
   bbe88:	4b5c      	ldr	r3, [pc, #368]	; (bbffc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x24c>)
   bbe8a:	9300      	str	r3, [sp, #0]
   bbe8c:	6965      	ldr	r5, [r4, #20]
   bbe8e:	23f4      	movs	r3, #244	; 0xf4
    TF_LITE_ENSURE_EQ(
   bbe90:	4a52      	ldr	r2, [pc, #328]	; (bbfdc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x22c>)
   bbe92:	4953      	ldr	r1, [pc, #332]	; (bbfe0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x230>)
   bbe94:	4620      	mov	r0, r4
   bbe96:	47a8      	blx	r5
   bbe98:	e7b8      	b.n	bbe0c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x5c>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
   bbe9a:	9b07      	ldr	r3, [sp, #28]
   bbe9c:	429d      	cmp	r5, r3
   bbe9e:	d008      	beq.n	bbeb2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x102>
   bbea0:	e9cd 5302 	strd	r5, r3, [sp, #8]
   bbea4:	4b56      	ldr	r3, [pc, #344]	; (bc000 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x250>)
   bbea6:	9301      	str	r3, [sp, #4]
   bbea8:	4b56      	ldr	r3, [pc, #344]	; (bc004 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x254>)
   bbeaa:	9300      	str	r3, [sp, #0]
   bbeac:	6965      	ldr	r5, [r4, #20]
   bbeae:	23f5      	movs	r3, #245	; 0xf5
   bbeb0:	e7ee      	b.n	bbe90 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xe0>
    TF_LITE_ENSURE_EQ(
   bbeb2:	f8da 3008 	ldr.w	r3, [sl, #8]
   bbeb6:	6892      	ldr	r2, [r2, #8]
   bbeb8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   bbebc:	685b      	ldr	r3, [r3, #4]
   bbebe:	42ab      	cmp	r3, r5
   bbec0:	d008      	beq.n	bbed4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x124>
   bbec2:	e9cd 5302 	strd	r5, r3, [sp, #8]
   bbec6:	4b50      	ldr	r3, [pc, #320]	; (bc008 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x258>)
   bbec8:	9301      	str	r3, [sp, #4]
   bbeca:	4b4d      	ldr	r3, [pc, #308]	; (bc000 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x250>)
   bbecc:	9300      	str	r3, [sp, #0]
   bbece:	6965      	ldr	r5, [r4, #20]
   bbed0:	23f6      	movs	r3, #246	; 0xf6
   bbed2:	e7dd      	b.n	bbe90 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xe0>
  const float input_scale = input->params.scale;
   bbed4:	eddb 7a03 	vldr	s15, [fp, #12]
  const float output_scale = output->params.scale;
   bbed8:	9b06      	ldr	r3, [sp, #24]
  const float input_scale = input->params.scale;
   bbeda:	eeb0 8a67 	vmov.f32	s16, s15
  const float output_scale = output->params.scale;
   bbede:	edd3 7a03 	vldr	s15, [r3, #12]
   bbee2:	1d3b      	adds	r3, r7, #4
   bbee4:	eef0 8a67 	vmov.f32	s17, s15
  for (int i = 0; i < num_channels; ++i) {
   bbee8:	9305      	str	r3, [sp, #20]
   bbeea:	2600      	movs	r6, #0
   bbeec:	9b07      	ldr	r3, [sp, #28]
   bbeee:	429e      	cmp	r6, r3
   bbef0:	da34      	bge.n	bbf5c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1ac>
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
   bbef2:	2d01      	cmp	r5, #1
   bbef4:	bfca      	itet	gt
   bbef6:	9b05      	ldrgt	r3, [sp, #20]
   bbef8:	687b      	ldrle	r3, [r7, #4]
   bbefa:	681b      	ldrgt	r3, [r3, #0]
   bbefc:	930d      	str	r3, [sp, #52]	; 0x34
    const double effective_output_scale = static_cast<double>(input_scale) *
   bbefe:	ee18 0a10 	vmov	r0, s16
   bbf02:	f001 feab 	bl	bdc5c <__aeabi_f2d>
    const double filter_scale = static_cast<double>(scale);
   bbf06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    const double effective_output_scale = static_cast<double>(input_scale) *
   bbf08:	4680      	mov	r8, r0
    const double filter_scale = static_cast<double>(scale);
   bbf0a:	4618      	mov	r0, r3
    const double effective_output_scale = static_cast<double>(input_scale) *
   bbf0c:	4689      	mov	r9, r1
    const double filter_scale = static_cast<double>(scale);
   bbf0e:	f001 fea5 	bl	bdc5c <__aeabi_f2d>
   bbf12:	4602      	mov	r2, r0
   bbf14:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
   bbf16:	4640      	mov	r0, r8
   bbf18:	4649      	mov	r1, r9
   bbf1a:	f001 fef7 	bl	bdd0c <__aeabi_dmul>
   bbf1e:	4680      	mov	r8, r0
                                          static_cast<double>(output_scale);
   bbf20:	ee18 0a90 	vmov	r0, s17
    const double effective_output_scale = static_cast<double>(input_scale) *
   bbf24:	4689      	mov	r9, r1
                                          static_cast<double>(output_scale);
   bbf26:	f001 fe99 	bl	bdc5c <__aeabi_f2d>
   bbf2a:	4602      	mov	r2, r0
   bbf2c:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
   bbf2e:	4640      	mov	r0, r8
   bbf30:	4649      	mov	r1, r9
   bbf32:	f002 f815 	bl	bdf60 <__aeabi_ddiv>
   bbf36:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
   bbf3a:	a910      	add	r1, sp, #64	; 0x40
   bbf3c:	a80f      	add	r0, sp, #60	; 0x3c
   bbf3e:	f000 f86f 	bl	bc020 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    per_channel_multiplier[i] = significand;
   bbf42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bbf44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   bbf46:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
    per_channel_shift[i] = channel_shift;
   bbf4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   bbf4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   bbf4e:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
  for (int i = 0; i < num_channels; ++i) {
   bbf52:	9b05      	ldr	r3, [sp, #20]
   bbf54:	3304      	adds	r3, #4
   bbf56:	3601      	adds	r6, #1
   bbf58:	9305      	str	r3, [sp, #20]
   bbf5a:	e7c7      	b.n	bbeec <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x13c>
  if (input->type == kTfLiteUInt8) {
   bbf5c:	f89b 3000 	ldrb.w	r3, [fp]
   bbf60:	2b03      	cmp	r3, #3
   bbf62:	d11d      	bne.n	bbfa0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1f0>
    double real_multiplier = 0.0;
   bbf64:	2200      	movs	r2, #0
   bbf66:	2300      	movs	r3, #0
   bbf68:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
   bbf6c:	ab10      	add	r3, sp, #64	; 0x40
   bbf6e:	9301      	str	r3, [sp, #4]
   bbf70:	9b06      	ldr	r3, [sp, #24]
   bbf72:	9300      	str	r3, [sp, #0]
   bbf74:	4652      	mov	r2, sl
   bbf76:	ee19 3a10 	vmov	r3, s18
   bbf7a:	4659      	mov	r1, fp
   bbf7c:	4620      	mov	r0, r4
   bbf7e:	f7ff fe5f 	bl	bbc40 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
   bbf82:	4606      	mov	r6, r0
   bbf84:	2800      	cmp	r0, #0
   bbf86:	f47f af41 	bne.w	bbe0c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x5c>
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
   bbf8a:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
   bbf8e:	ee19 0a90 	vmov	r0, s19
   bbf92:	a90f      	add	r1, sp, #60	; 0x3c
   bbf94:	f000 f844 	bl	bc020 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    *shift = -exponent;
   bbf98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   bbf9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   bbf9c:	425b      	negs	r3, r3
   bbf9e:	6013      	str	r3, [r2, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
   bbfa0:	f89b 3000 	ldrb.w	r3, [fp]
   bbfa4:	2b09      	cmp	r3, #9
   bbfa6:	d003      	beq.n	bbfb0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x200>
   bbfa8:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   bbfac:	2b03      	cmp	r3, #3
   bbfae:	d10e      	bne.n	bbfce <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x21e>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
   bbfb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bbfb2:	9908      	ldr	r1, [sp, #32]
   bbfb4:	9322      	str	r3, [sp, #136]	; 0x88
   bbfb6:	9a06      	ldr	r2, [sp, #24]
   bbfb8:	7809      	ldrb	r1, [r1, #0]
   bbfba:	ee1a 3a10 	vmov	r3, s20
   bbfbe:	4620      	mov	r0, r4
}
   bbfc0:	b013      	add	sp, #76	; 0x4c
   bbfc2:	ecbd 8b06 	vpop	{d8-d10}
   bbfc6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
   bbfca:	f7ff be8f 	b.w	bbcec <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
  return kTfLiteOk;
   bbfce:	2600      	movs	r6, #0
   bbfd0:	e71c      	b.n	bbe0c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x5c>
   bbfd2:	bf00      	nop
   bbfd4:	000cadbc 	.word	0x000cadbc
   bbfd8:	000cba86 	.word	0x000cba86
   bbfdc:	000cb99b 	.word	0x000cb99b
   bbfe0:	000cada2 	.word	0x000cada2
   bbfe4:	000cadd6 	.word	0x000cadd6
   bbfe8:	000cadf0 	.word	0x000cadf0
   bbfec:	000cad56 	.word	0x000cad56
   bbff0:	000cae04 	.word	0x000cae04
   bbff4:	000cb8b1 	.word	0x000cb8b1
   bbff8:	000cb959 	.word	0x000cb959
   bbffc:	000cba9f 	.word	0x000cba9f
   bc000:	000cbaac 	.word	0x000cbaac
   bc004:	000caee7 	.word	0x000caee7
   bc008:	000cbab9 	.word	0x000cbab9

000bc00c <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>:

bool HaveSameShapes(const TfLiteTensor* input1, const TfLiteTensor* input2) {
   bc00c:	b508      	push	{r3, lr}
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
   bc00e:	6889      	ldr	r1, [r1, #8]
   bc010:	6880      	ldr	r0, [r0, #8]
   bc012:	f7f8 f869 	bl	b40e8 <TfLiteIntArrayEqual>
}
   bc016:	3800      	subs	r0, #0
   bc018:	bf18      	it	ne
   bc01a:	2001      	movne	r0, #1
   bc01c:	bd08      	pop	{r3, pc}
	...

000bc020 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
   bc020:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (double_multiplier == 0.) {
   bc022:	2200      	movs	r2, #0
                        int* shift) {
   bc024:	4606      	mov	r6, r0
   bc026:	460c      	mov	r4, r1
  if (double_multiplier == 0.) {
   bc028:	2300      	movs	r3, #0
   bc02a:	ec51 0b10 	vmov	r0, r1, d0
   bc02e:	ed8d 0b00 	vstr	d0, [sp]
   bc032:	f002 f8d3 	bl	be1dc <__aeabi_dcmpeq>
   bc036:	ed9d 0b00 	vldr	d0, [sp]
   bc03a:	4605      	mov	r5, r0
   bc03c:	b120      	cbz	r0, bc048 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x28>
    *quantized_multiplier = 0;
   bc03e:	2300      	movs	r3, #0
   bc040:	6033      	str	r3, [r6, #0]
    *shift = 0;
   bc042:	6023      	str	r3, [r4, #0]
  if (*shift < -31) {
    *shift = 0;
    q_fixed = 0;
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
}
   bc044:	b002      	add	sp, #8
   bc046:	bd70      	pop	{r4, r5, r6, pc}
  const double q = std::frexp(double_multiplier, shift);
   bc048:	4620      	mov	r0, r4
   bc04a:	f001 faad 	bl	bd5a8 <frexp>
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
   bc04e:	4b14      	ldr	r3, [pc, #80]	; (bc0a0 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x80>)
   bc050:	2200      	movs	r2, #0
  const double q = std::frexp(double_multiplier, shift);
   bc052:	ec51 0b10 	vmov	r0, r1, d0
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
   bc056:	f001 fe59 	bl	bdd0c <__aeabi_dmul>
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
   bc05a:	ec41 0b10 	vmov	d0, r0, r1
   bc05e:	f001 fad9 	bl	bd614 <round>
   bc062:	ec51 0b10 	vmov	r0, r1, d0
   bc066:	f002 f9d3 	bl	be410 <__aeabi_d2lz>
  TFLITE_CHECK(q_fixed <= (1ll << 31));
   bc06a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   bc06e:	4282      	cmp	r2, r0
   bc070:	eb75 0c01 	sbcs.w	ip, r5, r1
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
   bc074:	4603      	mov	r3, r0
  TFLITE_CHECK(q_fixed <= (1ll << 31));
   bc076:	da01      	bge.n	bc07c <_ZN6tflite18QuantizeMultiplierEdPlPi+0x5c>
   bc078:	f000 fa88 	bl	bc58c <abort>
  if (q_fixed == (1ll << 31)) {
   bc07c:	42a9      	cmp	r1, r5
   bc07e:	bf08      	it	eq
   bc080:	4290      	cmpeq	r0, r2
    ++*shift;
   bc082:	bf02      	ittt	eq
   bc084:	6823      	ldreq	r3, [r4, #0]
   bc086:	3301      	addeq	r3, #1
   bc088:	6023      	streq	r3, [r4, #0]
  if (*shift < -31) {
   bc08a:	6822      	ldr	r2, [r4, #0]
    q_fixed /= 2;
   bc08c:	bf08      	it	eq
   bc08e:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
  if (*shift < -31) {
   bc092:	321f      	adds	r2, #31
    *shift = 0;
   bc094:	bfbc      	itt	lt
   bc096:	2300      	movlt	r3, #0
   bc098:	6023      	strlt	r3, [r4, #0]
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
   bc09a:	6033      	str	r3, [r6, #0]
   bc09c:	e7d2      	b.n	bc044 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x24>
   bc09e:	bf00      	nop
   bc0a0:	41e00000 	.word	0x41e00000

000bc0a4 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
   bc0a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  TFLITE_CHECK_GT(double_multiplier, 1.);
   bc0a6:	4b0c      	ldr	r3, [pc, #48]	; (bc0d8 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x34>)
                                      int* left_shift) {
   bc0a8:	4605      	mov	r5, r0
   bc0aa:	460c      	mov	r4, r1
  TFLITE_CHECK_GT(double_multiplier, 1.);
   bc0ac:	2200      	movs	r2, #0
   bc0ae:	ec51 0b10 	vmov	r0, r1, d0
   bc0b2:	ed8d 0b00 	vstr	d0, [sp]
   bc0b6:	f002 f8b9 	bl	be22c <__aeabi_dcmpgt>
   bc0ba:	ed9d 0b00 	vldr	d0, [sp]
   bc0be:	b908      	cbnz	r0, bc0c4 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x20>
   bc0c0:	f000 fa64 	bl	bc58c <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
   bc0c4:	4621      	mov	r1, r4
   bc0c6:	4628      	mov	r0, r5
   bc0c8:	f7ff ffaa 	bl	bc020 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
   bc0cc:	6823      	ldr	r3, [r4, #0]
   bc0ce:	2b00      	cmp	r3, #0
   bc0d0:	dbf6      	blt.n	bc0c0 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x1c>
}
   bc0d2:	b003      	add	sp, #12
   bc0d4:	bd30      	pop	{r4, r5, pc}
   bc0d6:	bf00      	nop
   bc0d8:	3ff00000 	.word	0x3ff00000

000bc0dc <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>:

void QuantizeMultiplierSmallerThanOneExp(double double_multiplier,
                                         int32_t* quantized_multiplier,
                                         int* left_shift) {
   bc0dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bc0de:	ec55 4b10 	vmov	r4, r5, d0
   bc0e2:	4607      	mov	r7, r0
   bc0e4:	460e      	mov	r6, r1
  TFLITE_CHECK_LT(double_multiplier, 1.);
   bc0e6:	4b0f      	ldr	r3, [pc, #60]	; (bc124 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi+0x48>)
   bc0e8:	ee10 0a10 	vmov	r0, s0
   bc0ec:	2200      	movs	r2, #0
   bc0ee:	4629      	mov	r1, r5
   bc0f0:	f002 f87e 	bl	be1f0 <__aeabi_dcmplt>
   bc0f4:	b908      	cbnz	r0, bc0fa <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi+0x1e>
   bc0f6:	f000 fa49 	bl	bc58c <abort>
  TFLITE_CHECK_GT(double_multiplier, 0.);
   bc0fa:	2200      	movs	r2, #0
   bc0fc:	2300      	movs	r3, #0
   bc0fe:	4620      	mov	r0, r4
   bc100:	4629      	mov	r1, r5
   bc102:	f002 f893 	bl	be22c <__aeabi_dcmpgt>
   bc106:	2800      	cmp	r0, #0
   bc108:	d0f5      	beq.n	bc0f6 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi+0x1a>
  int shift;
  QuantizeMultiplier(double_multiplier, quantized_multiplier, &shift);
   bc10a:	ec45 4b10 	vmov	d0, r4, r5
   bc10e:	a901      	add	r1, sp, #4
   bc110:	4638      	mov	r0, r7
   bc112:	f7ff ff85 	bl	bc020 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_LE(shift, 0);
   bc116:	9b01      	ldr	r3, [sp, #4]
   bc118:	2b00      	cmp	r3, #0
   bc11a:	dcec      	bgt.n	bc0f6 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi+0x1a>
  *left_shift = shift;
   bc11c:	6033      	str	r3, [r6, #0]
}
   bc11e:	b003      	add	sp, #12
   bc120:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bc122:	bf00      	nop
   bc124:	3ff00000 	.word	0x3ff00000

000bc128 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
   bc128:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min<double>(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
   bc12c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
                              int32_t* quantized_multiplier, int* left_shift) {
   bc130:	ed2d 8b02 	vpush	{d8}
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
   bc134:	fa23 f000 	lsr.w	r0, r3, r0
                              int32_t* quantized_multiplier, int* left_shift) {
   bc138:	ec57 6b10 	vmov	r6, r7, d0
   bc13c:	ec59 8b11 	vmov	r8, r9, d1
   bc140:	4693      	mov	fp, r2
   bc142:	468a      	mov	sl, r1
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
   bc144:	f001 fd78 	bl	bdc38 <__aeabi_i2d>
   bc148:	4642      	mov	r2, r8
   bc14a:	4604      	mov	r4, r0
   bc14c:	460d      	mov	r5, r1
   bc14e:	464b      	mov	r3, r9
   bc150:	4630      	mov	r0, r6
   bc152:	4639      	mov	r1, r7
   bc154:	f001 fdda 	bl	bdd0c <__aeabi_dmul>
   bc158:	4602      	mov	r2, r0
   bc15a:	460b      	mov	r3, r1
   bc15c:	4620      	mov	r0, r4
   bc15e:	4629      	mov	r1, r5
   bc160:	f001 fdd4 	bl	bdd0c <__aeabi_dmul>
   bc164:	4602      	mov	r2, r0
   bc166:	460b      	mov	r3, r1
   bc168:	ec43 2b18 	vmov	d8, r2, r3
      if (__b < __a)
   bc16c:	a30a      	add	r3, pc, #40	; (adr r3, bc198 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x70>)
   bc16e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc172:	f002 f85b 	bl	be22c <__aeabi_dcmpgt>
   bc176:	b108      	cbz	r0, bc17c <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x54>
	return __b;
   bc178:	ed9f 8b07 	vldr	d8, [pc, #28]	; bc198 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x70>
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
   bc17c:	eeb0 0a48 	vmov.f32	s0, s16
   bc180:	eef0 0a68 	vmov.f32	s1, s17
                                   quantized_multiplier, left_shift);
}
   bc184:	ecbd 8b02 	vpop	{d8}
  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
   bc188:	4659      	mov	r1, fp
   bc18a:	4650      	mov	r0, sl
}
   bc18c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
   bc190:	f7ff bf88 	b.w	bc0a4 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
   bc194:	f3af 8000 	nop.w
   bc198:	ffc00000 	.word	0xffc00000
   bc19c:	41dfffff 	.word	0x41dfffff

000bc1a0 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
   bc1a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
   bc1a4:	2401      	movs	r4, #1
                         int total_signed_bits) {
   bc1a6:	4681      	mov	r9, r0
      1.0 * ((1 << input_integer_bits) - 1) *
   bc1a8:	fa04 f000 	lsl.w	r0, r4, r0
   bc1ac:	3801      	subs	r0, #1
                         int total_signed_bits) {
   bc1ae:	4688      	mov	r8, r1
   bc1b0:	4615      	mov	r5, r2
      1.0 * ((1 << input_integer_bits) - 1) *
   bc1b2:	f001 fd41 	bl	bdc38 <__aeabi_i2d>
   bc1b6:	4606      	mov	r6, r0
      (1ll << (total_signed_bits - input_integer_bits)) /
   bc1b8:	eba5 0009 	sub.w	r0, r5, r9
      1.0 * ((1 << input_integer_bits) - 1) *
   bc1bc:	460f      	mov	r7, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
   bc1be:	f1c0 0320 	rsb	r3, r0, #32
   bc1c2:	f1a0 0120 	sub.w	r1, r0, #32
   bc1c6:	fa24 f303 	lsr.w	r3, r4, r3
   bc1ca:	fa04 f101 	lsl.w	r1, r4, r1
      1.0 * ((1 << input_integer_bits) - 1) *
   bc1ce:	fa04 f000 	lsl.w	r0, r4, r0
   bc1d2:	4319      	orrs	r1, r3
   bc1d4:	f001 fd6c 	bl	bdcb0 <__aeabi_l2d>
   bc1d8:	4602      	mov	r2, r0
   bc1da:	460b      	mov	r3, r1
   bc1dc:	4630      	mov	r0, r6
   bc1de:	4639      	mov	r1, r7
   bc1e0:	f001 fd94 	bl	bdd0c <__aeabi_dmul>
      (1ll << input_left_shift);
   bc1e4:	f1c8 0320 	rsb	r3, r8, #32
      1.0 * ((1 << input_integer_bits) - 1) *
   bc1e8:	460f      	mov	r7, r1
      (1ll << input_left_shift);
   bc1ea:	f1a8 0120 	sub.w	r1, r8, #32
   bc1ee:	fa24 f303 	lsr.w	r3, r4, r3
   bc1f2:	fa04 f101 	lsl.w	r1, r4, r1
      1.0 * ((1 << input_integer_bits) - 1) *
   bc1f6:	4606      	mov	r6, r0
      (1ll << (total_signed_bits - input_integer_bits)) /
   bc1f8:	4319      	orrs	r1, r3
   bc1fa:	fa04 f008 	lsl.w	r0, r4, r8
   bc1fe:	f001 fd57 	bl	bdcb0 <__aeabi_l2d>
   bc202:	4602      	mov	r2, r0
   bc204:	460b      	mov	r3, r1
  const double max_input_rescaled =
   bc206:	4630      	mov	r0, r6
   bc208:	4639      	mov	r1, r7
   bc20a:	f001 fea9 	bl	bdf60 <__aeabi_ddiv>
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
   bc20e:	ec41 0b10 	vmov	d0, r0, r1
   bc212:	f001 f945 	bl	bd4a0 <floor>
   bc216:	ec51 0b10 	vmov	r0, r1, d0
   bc21a:	f002 f811 	bl	be240 <__aeabi_d2iz>
#endif  // TFLITE_EMULATE_FLOAT
}
   bc21e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

000bc224 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   bc224:	b508      	push	{r3, lr}
   bc226:	4b02      	ldr	r3, [pc, #8]	; (bc230 <HAL_USB_USART_Init+0xc>)
   bc228:	681b      	ldr	r3, [r3, #0]
   bc22a:	681b      	ldr	r3, [r3, #0]
   bc22c:	9301      	str	r3, [sp, #4]
   bc22e:	bd08      	pop	{r3, pc}
   bc230:	0003024c 	.word	0x0003024c

000bc234 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   bc234:	b508      	push	{r3, lr}
   bc236:	4b02      	ldr	r3, [pc, #8]	; (bc240 <HAL_USB_USART_Begin+0xc>)
   bc238:	681b      	ldr	r3, [r3, #0]
   bc23a:	685b      	ldr	r3, [r3, #4]
   bc23c:	9301      	str	r3, [sp, #4]
   bc23e:	bd08      	pop	{r3, pc}
   bc240:	0003024c 	.word	0x0003024c

000bc244 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   bc244:	b508      	push	{r3, lr}
   bc246:	4b02      	ldr	r3, [pc, #8]	; (bc250 <HAL_USB_USART_Available_Data+0xc>)
   bc248:	681b      	ldr	r3, [r3, #0]
   bc24a:	691b      	ldr	r3, [r3, #16]
   bc24c:	9301      	str	r3, [sp, #4]
   bc24e:	bd08      	pop	{r3, pc}
   bc250:	0003024c 	.word	0x0003024c

000bc254 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   bc254:	b508      	push	{r3, lr}
   bc256:	4b02      	ldr	r3, [pc, #8]	; (bc260 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   bc258:	681b      	ldr	r3, [r3, #0]
   bc25a:	695b      	ldr	r3, [r3, #20]
   bc25c:	9301      	str	r3, [sp, #4]
   bc25e:	bd08      	pop	{r3, pc}
   bc260:	0003024c 	.word	0x0003024c

000bc264 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bc264:	b508      	push	{r3, lr}
   bc266:	4b02      	ldr	r3, [pc, #8]	; (bc270 <HAL_USB_USART_Receive_Data+0xc>)
   bc268:	681b      	ldr	r3, [r3, #0]
   bc26a:	699b      	ldr	r3, [r3, #24]
   bc26c:	9301      	str	r3, [sp, #4]
   bc26e:	bd08      	pop	{r3, pc}
   bc270:	0003024c 	.word	0x0003024c

000bc274 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bc274:	b508      	push	{r3, lr}
   bc276:	4b02      	ldr	r3, [pc, #8]	; (bc280 <HAL_USB_USART_Send_Data+0xc>)
   bc278:	681b      	ldr	r3, [r3, #0]
   bc27a:	69db      	ldr	r3, [r3, #28]
   bc27c:	9301      	str	r3, [sp, #4]
   bc27e:	bd08      	pop	{r3, pc}
   bc280:	0003024c 	.word	0x0003024c

000bc284 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   bc284:	b508      	push	{r3, lr}
   bc286:	4b02      	ldr	r3, [pc, #8]	; (bc290 <HAL_USB_USART_Flush_Data+0xc>)
   bc288:	681b      	ldr	r3, [r3, #0]
   bc28a:	6a1b      	ldr	r3, [r3, #32]
   bc28c:	9301      	str	r3, [sp, #4]
   bc28e:	bd08      	pop	{r3, pc}
   bc290:	0003024c 	.word	0x0003024c

000bc294 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
   bc294:	b508      	push	{r3, lr}
   bc296:	4b02      	ldr	r3, [pc, #8]	; (bc2a0 <HAL_USB_USART_Is_Enabled+0xc>)
   bc298:	681b      	ldr	r3, [r3, #0]
   bc29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bc29c:	9301      	str	r3, [sp, #4]
   bc29e:	bd08      	pop	{r3, pc}
   bc2a0:	0003024c 	.word	0x0003024c

000bc2a4 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   bc2a4:	b508      	push	{r3, lr}
   bc2a6:	4b02      	ldr	r3, [pc, #8]	; (bc2b0 <hal_i2c_begin+0xc>)
   bc2a8:	681b      	ldr	r3, [r3, #0]
   bc2aa:	68db      	ldr	r3, [r3, #12]
   bc2ac:	9301      	str	r3, [sp, #4]
   bc2ae:	bd08      	pop	{r3, pc}
   bc2b0:	00030228 	.word	0x00030228

000bc2b4 <hal_i2c_write>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   bc2b4:	b508      	push	{r3, lr}
   bc2b6:	4b02      	ldr	r3, [pc, #8]	; (bc2c0 <hal_i2c_write+0xc>)
   bc2b8:	681b      	ldr	r3, [r3, #0]
   bc2ba:	6a1b      	ldr	r3, [r3, #32]
   bc2bc:	9301      	str	r3, [sp, #4]
   bc2be:	bd08      	pop	{r3, pc}
   bc2c0:	00030228 	.word	0x00030228

000bc2c4 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   bc2c4:	b508      	push	{r3, lr}
   bc2c6:	4b02      	ldr	r3, [pc, #8]	; (bc2d0 <hal_i2c_available+0xc>)
   bc2c8:	681b      	ldr	r3, [r3, #0]
   bc2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bc2cc:	9301      	str	r3, [sp, #4]
   bc2ce:	bd08      	pop	{r3, pc}
   bc2d0:	00030228 	.word	0x00030228

000bc2d4 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   bc2d4:	b508      	push	{r3, lr}
   bc2d6:	4b02      	ldr	r3, [pc, #8]	; (bc2e0 <hal_i2c_read+0xc>)
   bc2d8:	681b      	ldr	r3, [r3, #0]
   bc2da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bc2dc:	9301      	str	r3, [sp, #4]
   bc2de:	bd08      	pop	{r3, pc}
   bc2e0:	00030228 	.word	0x00030228

000bc2e4 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   bc2e4:	b508      	push	{r3, lr}
   bc2e6:	4b02      	ldr	r3, [pc, #8]	; (bc2f0 <hal_i2c_peek+0xc>)
   bc2e8:	681b      	ldr	r3, [r3, #0]
   bc2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bc2ec:	9301      	str	r3, [sp, #4]
   bc2ee:	bd08      	pop	{r3, pc}
   bc2f0:	00030228 	.word	0x00030228

000bc2f4 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   bc2f4:	b508      	push	{r3, lr}
   bc2f6:	4b02      	ldr	r3, [pc, #8]	; (bc300 <hal_i2c_flush+0xc>)
   bc2f8:	681b      	ldr	r3, [r3, #0]
   bc2fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bc2fc:	9301      	str	r3, [sp, #4]
   bc2fe:	bd08      	pop	{r3, pc}
   bc300:	00030228 	.word	0x00030228

000bc304 <hal_i2c_set_callback_on_received>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
   bc304:	b508      	push	{r3, lr}
   bc306:	4b02      	ldr	r3, [pc, #8]	; (bc310 <hal_i2c_set_callback_on_received+0xc>)
   bc308:	681b      	ldr	r3, [r3, #0]
   bc30a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   bc30c:	9301      	str	r3, [sp, #4]
   bc30e:	bd08      	pop	{r3, pc}
   bc310:	00030228 	.word	0x00030228

000bc314 <hal_i2c_init>:
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   bc314:	b508      	push	{r3, lr}
   bc316:	4b02      	ldr	r3, [pc, #8]	; (bc320 <hal_i2c_init+0xc>)
   bc318:	681b      	ldr	r3, [r3, #0]
   bc31a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bc31c:	9301      	str	r3, [sp, #4]
   bc31e:	bd08      	pop	{r3, pc}
   bc320:	00030228 	.word	0x00030228

000bc324 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   bc324:	b508      	push	{r3, lr}
   bc326:	4b02      	ldr	r3, [pc, #8]	; (bc330 <hal_usart_write+0xc>)
   bc328:	681b      	ldr	r3, [r3, #0]
   bc32a:	68db      	ldr	r3, [r3, #12]
   bc32c:	9301      	str	r3, [sp, #4]
   bc32e:	bd08      	pop	{r3, pc}
   bc330:	0003023c 	.word	0x0003023c

000bc334 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   bc334:	b508      	push	{r3, lr}
   bc336:	4b02      	ldr	r3, [pc, #8]	; (bc340 <hal_usart_available+0xc>)
   bc338:	681b      	ldr	r3, [r3, #0]
   bc33a:	691b      	ldr	r3, [r3, #16]
   bc33c:	9301      	str	r3, [sp, #4]
   bc33e:	bd08      	pop	{r3, pc}
   bc340:	0003023c 	.word	0x0003023c

000bc344 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   bc344:	b508      	push	{r3, lr}
   bc346:	4b02      	ldr	r3, [pc, #8]	; (bc350 <hal_usart_read+0xc>)
   bc348:	681b      	ldr	r3, [r3, #0]
   bc34a:	695b      	ldr	r3, [r3, #20]
   bc34c:	9301      	str	r3, [sp, #4]
   bc34e:	bd08      	pop	{r3, pc}
   bc350:	0003023c 	.word	0x0003023c

000bc354 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   bc354:	b508      	push	{r3, lr}
   bc356:	4b02      	ldr	r3, [pc, #8]	; (bc360 <hal_usart_peek+0xc>)
   bc358:	681b      	ldr	r3, [r3, #0]
   bc35a:	699b      	ldr	r3, [r3, #24]
   bc35c:	9301      	str	r3, [sp, #4]
   bc35e:	bd08      	pop	{r3, pc}
   bc360:	0003023c 	.word	0x0003023c

000bc364 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   bc364:	b508      	push	{r3, lr}
   bc366:	4b02      	ldr	r3, [pc, #8]	; (bc370 <hal_usart_flush+0xc>)
   bc368:	681b      	ldr	r3, [r3, #0]
   bc36a:	69db      	ldr	r3, [r3, #28]
   bc36c:	9301      	str	r3, [sp, #4]
   bc36e:	bd08      	pop	{r3, pc}
   bc370:	0003023c 	.word	0x0003023c

000bc374 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   bc374:	b508      	push	{r3, lr}
   bc376:	4b02      	ldr	r3, [pc, #8]	; (bc380 <hal_usart_available_data_for_write+0xc>)
   bc378:	681b      	ldr	r3, [r3, #0]
   bc37a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bc37c:	9301      	str	r3, [sp, #4]
   bc37e:	bd08      	pop	{r3, pc}
   bc380:	0003023c 	.word	0x0003023c

000bc384 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   bc384:	b508      	push	{r3, lr}
   bc386:	4b02      	ldr	r3, [pc, #8]	; (bc390 <hal_usart_init_ex+0xc>)
   bc388:	681b      	ldr	r3, [r3, #0]
   bc38a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bc38c:	9301      	str	r3, [sp, #4]
   bc38e:	bd08      	pop	{r3, pc}
   bc390:	0003023c 	.word	0x0003023c

000bc394 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   bc394:	b508      	push	{r3, lr}
   bc396:	4b02      	ldr	r3, [pc, #8]	; (bc3a0 <inet_inet_ntop+0xc>)
   bc398:	681b      	ldr	r3, [r3, #0]
   bc39a:	695b      	ldr	r3, [r3, #20]
   bc39c:	9301      	str	r3, [sp, #4]
   bc39e:	bd08      	pop	{r3, pc}
   bc3a0:	00030264 	.word	0x00030264

000bc3a4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   bc3a4:	b508      	push	{r3, lr}
   bc3a6:	4b02      	ldr	r3, [pc, #8]	; (bc3b0 <os_mutex_recursive_create+0xc>)
   bc3a8:	681b      	ldr	r3, [r3, #0]
   bc3aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bc3ac:	9301      	str	r3, [sp, #4]
   bc3ae:	bd08      	pop	{r3, pc}
   bc3b0:	00030248 	.word	0x00030248

000bc3b4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   bc3b4:	b508      	push	{r3, lr}
   bc3b6:	4b02      	ldr	r3, [pc, #8]	; (bc3c0 <HAL_RNG_GetRandomNumber+0xc>)
   bc3b8:	681b      	ldr	r3, [r3, #0]
   bc3ba:	685b      	ldr	r3, [r3, #4]
   bc3bc:	9301      	str	r3, [sp, #4]
   bc3be:	bd08      	pop	{r3, pc}
   bc3c0:	00030218 	.word	0x00030218

000bc3c4 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   bc3c4:	b508      	push	{r3, lr}
   bc3c6:	4b02      	ldr	r3, [pc, #8]	; (bc3d0 <HAL_Timer_Get_Micro_Seconds+0xc>)
   bc3c8:	681b      	ldr	r3, [r3, #0]
   bc3ca:	691b      	ldr	r3, [r3, #16]
   bc3cc:	9301      	str	r3, [sp, #4]
   bc3ce:	bd08      	pop	{r3, pc}
   bc3d0:	00030218 	.word	0x00030218

000bc3d4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   bc3d4:	b508      	push	{r3, lr}
   bc3d6:	4b02      	ldr	r3, [pc, #8]	; (bc3e0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   bc3d8:	681b      	ldr	r3, [r3, #0]
   bc3da:	695b      	ldr	r3, [r3, #20]
   bc3dc:	9301      	str	r3, [sp, #4]
   bc3de:	bd08      	pop	{r3, pc}
   bc3e0:	00030218 	.word	0x00030218

000bc3e4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   bc3e4:	b508      	push	{r3, lr}
   bc3e6:	4b02      	ldr	r3, [pc, #8]	; (bc3f0 <netdb_freeaddrinfo+0xc>)
   bc3e8:	681b      	ldr	r3, [r3, #0]
   bc3ea:	689b      	ldr	r3, [r3, #8]
   bc3ec:	9301      	str	r3, [sp, #4]
   bc3ee:	bd08      	pop	{r3, pc}
   bc3f0:	00030268 	.word	0x00030268

000bc3f4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   bc3f4:	b508      	push	{r3, lr}
   bc3f6:	4b02      	ldr	r3, [pc, #8]	; (bc400 <netdb_getaddrinfo+0xc>)
   bc3f8:	681b      	ldr	r3, [r3, #0]
   bc3fa:	68db      	ldr	r3, [r3, #12]
   bc3fc:	9301      	str	r3, [sp, #4]
   bc3fe:	bd08      	pop	{r3, pc}
   bc400:	00030268 	.word	0x00030268

000bc404 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   bc404:	b508      	push	{r3, lr}
   bc406:	4b02      	ldr	r3, [pc, #8]	; (bc410 <spark_cloud_flag_connected+0xc>)
   bc408:	681b      	ldr	r3, [r3, #0]
   bc40a:	695b      	ldr	r3, [r3, #20]
   bc40c:	9301      	str	r3, [sp, #4]
   bc40e:	bd08      	pop	{r3, pc}
   bc410:	00030244 	.word	0x00030244

000bc414 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   bc414:	b508      	push	{r3, lr}
   bc416:	4b02      	ldr	r3, [pc, #8]	; (bc420 <spark_send_event+0xc>)
   bc418:	681b      	ldr	r3, [r3, #0]
   bc41a:	6a1b      	ldr	r3, [r3, #32]
   bc41c:	9301      	str	r3, [sp, #4]
   bc41e:	bd08      	pop	{r3, pc}
   bc420:	00030244 	.word	0x00030244

000bc424 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   bc424:	b508      	push	{r3, lr}
   bc426:	4b02      	ldr	r3, [pc, #8]	; (bc430 <spark_subscribe+0xc>)
   bc428:	681b      	ldr	r3, [r3, #0]
   bc42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bc42c:	9301      	str	r3, [sp, #4]
   bc42e:	bd08      	pop	{r3, pc}
   bc430:	00030244 	.word	0x00030244

000bc434 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   bc434:	b508      	push	{r3, lr}
   bc436:	4b02      	ldr	r3, [pc, #8]	; (bc440 <spark_set_random_seed_from_cloud_handler+0xc>)
   bc438:	681b      	ldr	r3, [r3, #0]
   bc43a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bc43c:	9301      	str	r3, [sp, #4]
   bc43e:	bd08      	pop	{r3, pc}
   bc440:	00030244 	.word	0x00030244

000bc444 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   bc444:	b508      	push	{r3, lr}
   bc446:	4b02      	ldr	r3, [pc, #8]	; (bc450 <network_connect+0xc>)
   bc448:	681b      	ldr	r3, [r3, #0]
   bc44a:	685b      	ldr	r3, [r3, #4]
   bc44c:	9301      	str	r3, [sp, #4]
   bc44e:	bd08      	pop	{r3, pc}
   bc450:	00030240 	.word	0x00030240

000bc454 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   bc454:	b508      	push	{r3, lr}
   bc456:	4b02      	ldr	r3, [pc, #8]	; (bc460 <network_connecting+0xc>)
   bc458:	681b      	ldr	r3, [r3, #0]
   bc45a:	689b      	ldr	r3, [r3, #8]
   bc45c:	9301      	str	r3, [sp, #4]
   bc45e:	bd08      	pop	{r3, pc}
   bc460:	00030240 	.word	0x00030240

000bc464 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   bc464:	b508      	push	{r3, lr}
   bc466:	4b02      	ldr	r3, [pc, #8]	; (bc470 <network_disconnect+0xc>)
   bc468:	681b      	ldr	r3, [r3, #0]
   bc46a:	68db      	ldr	r3, [r3, #12]
   bc46c:	9301      	str	r3, [sp, #4]
   bc46e:	bd08      	pop	{r3, pc}
   bc470:	00030240 	.word	0x00030240

000bc474 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   bc474:	b508      	push	{r3, lr}
   bc476:	4b02      	ldr	r3, [pc, #8]	; (bc480 <network_ready+0xc>)
   bc478:	681b      	ldr	r3, [r3, #0]
   bc47a:	691b      	ldr	r3, [r3, #16]
   bc47c:	9301      	str	r3, [sp, #4]
   bc47e:	bd08      	pop	{r3, pc}
   bc480:	00030240 	.word	0x00030240

000bc484 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   bc484:	b508      	push	{r3, lr}
   bc486:	4b02      	ldr	r3, [pc, #8]	; (bc490 <network_on+0xc>)
   bc488:	681b      	ldr	r3, [r3, #0]
   bc48a:	695b      	ldr	r3, [r3, #20]
   bc48c:	9301      	str	r3, [sp, #4]
   bc48e:	bd08      	pop	{r3, pc}
   bc490:	00030240 	.word	0x00030240

000bc494 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   bc494:	b508      	push	{r3, lr}
   bc496:	4b02      	ldr	r3, [pc, #8]	; (bc4a0 <network_off+0xc>)
   bc498:	681b      	ldr	r3, [r3, #0]
   bc49a:	699b      	ldr	r3, [r3, #24]
   bc49c:	9301      	str	r3, [sp, #4]
   bc49e:	bd08      	pop	{r3, pc}
   bc4a0:	00030240 	.word	0x00030240

000bc4a4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   bc4a4:	b508      	push	{r3, lr}
   bc4a6:	4b02      	ldr	r3, [pc, #8]	; (bc4b0 <network_listen+0xc>)
   bc4a8:	681b      	ldr	r3, [r3, #0]
   bc4aa:	69db      	ldr	r3, [r3, #28]
   bc4ac:	9301      	str	r3, [sp, #4]
   bc4ae:	bd08      	pop	{r3, pc}
   bc4b0:	00030240 	.word	0x00030240

000bc4b4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   bc4b4:	b508      	push	{r3, lr}
   bc4b6:	4b02      	ldr	r3, [pc, #8]	; (bc4c0 <network_listening+0xc>)
   bc4b8:	681b      	ldr	r3, [r3, #0]
   bc4ba:	6a1b      	ldr	r3, [r3, #32]
   bc4bc:	9301      	str	r3, [sp, #4]
   bc4be:	bd08      	pop	{r3, pc}
   bc4c0:	00030240 	.word	0x00030240

000bc4c4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   bc4c4:	b508      	push	{r3, lr}
   bc4c6:	4b02      	ldr	r3, [pc, #8]	; (bc4d0 <network_set_listen_timeout+0xc>)
   bc4c8:	681b      	ldr	r3, [r3, #0]
   bc4ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bc4cc:	9301      	str	r3, [sp, #4]
   bc4ce:	bd08      	pop	{r3, pc}
   bc4d0:	00030240 	.word	0x00030240

000bc4d4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   bc4d4:	b508      	push	{r3, lr}
   bc4d6:	4b02      	ldr	r3, [pc, #8]	; (bc4e0 <network_get_listen_timeout+0xc>)
   bc4d8:	681b      	ldr	r3, [r3, #0]
   bc4da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bc4dc:	9301      	str	r3, [sp, #4]
   bc4de:	bd08      	pop	{r3, pc}
   bc4e0:	00030240 	.word	0x00030240

000bc4e4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   bc4e4:	b508      	push	{r3, lr}
   bc4e6:	4b02      	ldr	r3, [pc, #8]	; (bc4f0 <network_is_on+0xc>)
   bc4e8:	681b      	ldr	r3, [r3, #0]
   bc4ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bc4ec:	9301      	str	r3, [sp, #4]
   bc4ee:	bd08      	pop	{r3, pc}
   bc4f0:	00030240 	.word	0x00030240

000bc4f4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   bc4f4:	b508      	push	{r3, lr}
   bc4f6:	4b02      	ldr	r3, [pc, #8]	; (bc500 <network_is_off+0xc>)
   bc4f8:	681b      	ldr	r3, [r3, #0]
   bc4fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bc4fc:	9301      	str	r3, [sp, #4]
   bc4fe:	bd08      	pop	{r3, pc}
   bc500:	00030240 	.word	0x00030240

000bc504 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   bc504:	b508      	push	{r3, lr}
   bc506:	4b02      	ldr	r3, [pc, #8]	; (bc510 <set_system_mode+0xc>)
   bc508:	681b      	ldr	r3, [r3, #0]
   bc50a:	685b      	ldr	r3, [r3, #4]
   bc50c:	9301      	str	r3, [sp, #4]
   bc50e:	bd08      	pop	{r3, pc}
   bc510:	00030220 	.word	0x00030220

000bc514 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   bc514:	b508      	push	{r3, lr}
   bc516:	4b02      	ldr	r3, [pc, #8]	; (bc520 <application_thread_current+0xc>)
   bc518:	681b      	ldr	r3, [r3, #0]
   bc51a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bc51c:	9301      	str	r3, [sp, #4]
   bc51e:	bd08      	pop	{r3, pc}
   bc520:	00030220 	.word	0x00030220

000bc524 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   bc524:	b508      	push	{r3, lr}
   bc526:	4b02      	ldr	r3, [pc, #8]	; (bc530 <application_thread_invoke+0xc>)
   bc528:	681b      	ldr	r3, [r3, #0]
   bc52a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bc52c:	9301      	str	r3, [sp, #4]
   bc52e:	bd08      	pop	{r3, pc}
   bc530:	00030220 	.word	0x00030220

000bc534 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   bc534:	b508      	push	{r3, lr}
   bc536:	4b03      	ldr	r3, [pc, #12]	; (bc544 <system_ctrl_set_app_request_handler+0x10>)
   bc538:	681b      	ldr	r3, [r3, #0]
   bc53a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   bc53e:	9301      	str	r3, [sp, #4]
   bc540:	bd08      	pop	{r3, pc}
   bc542:	0000      	.short	0x0000
   bc544:	00030220 	.word	0x00030220

000bc548 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   bc548:	b508      	push	{r3, lr}
   bc54a:	4b03      	ldr	r3, [pc, #12]	; (bc558 <system_ctrl_set_result+0x10>)
   bc54c:	681b      	ldr	r3, [r3, #0]
   bc54e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   bc552:	9301      	str	r3, [sp, #4]
   bc554:	bd08      	pop	{r3, pc}
   bc556:	0000      	.short	0x0000
   bc558:	00030220 	.word	0x00030220

000bc55c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   bc55c:	b508      	push	{r3, lr}
   bc55e:	4b02      	ldr	r3, [pc, #8]	; (bc568 <malloc+0xc>)
   bc560:	681b      	ldr	r3, [r3, #0]
   bc562:	681b      	ldr	r3, [r3, #0]
   bc564:	9301      	str	r3, [sp, #4]
   bc566:	bd08      	pop	{r3, pc}
   bc568:	0003021c 	.word	0x0003021c

000bc56c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   bc56c:	b508      	push	{r3, lr}
   bc56e:	4b02      	ldr	r3, [pc, #8]	; (bc578 <free+0xc>)
   bc570:	681b      	ldr	r3, [r3, #0]
   bc572:	685b      	ldr	r3, [r3, #4]
   bc574:	9301      	str	r3, [sp, #4]
   bc576:	bd08      	pop	{r3, pc}
   bc578:	0003021c 	.word	0x0003021c

000bc57c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   bc57c:	b508      	push	{r3, lr}
   bc57e:	4b02      	ldr	r3, [pc, #8]	; (bc588 <vsnprintf+0xc>)
   bc580:	681b      	ldr	r3, [r3, #0]
   bc582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bc584:	9301      	str	r3, [sp, #4]
   bc586:	bd08      	pop	{r3, pc}
   bc588:	0003021c 	.word	0x0003021c

000bc58c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   bc58c:	b508      	push	{r3, lr}
   bc58e:	4b02      	ldr	r3, [pc, #8]	; (bc598 <abort+0xc>)
   bc590:	681b      	ldr	r3, [r3, #0]
   bc592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bc594:	9301      	str	r3, [sp, #4]
   bc596:	bd08      	pop	{r3, pc}
   bc598:	0003021c 	.word	0x0003021c

000bc59c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   bc59c:	b508      	push	{r3, lr}
   bc59e:	4b02      	ldr	r3, [pc, #8]	; (bc5a8 <_malloc_r+0xc>)
   bc5a0:	681b      	ldr	r3, [r3, #0]
   bc5a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bc5a4:	9301      	str	r3, [sp, #4]
   bc5a6:	bd08      	pop	{r3, pc}
   bc5a8:	0003021c 	.word	0x0003021c

000bc5ac <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   bc5ac:	b508      	push	{r3, lr}
   bc5ae:	4b02      	ldr	r3, [pc, #8]	; (bc5b8 <__errno+0xc>)
   bc5b0:	681b      	ldr	r3, [r3, #0]
   bc5b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bc5b4:	9301      	str	r3, [sp, #4]
   bc5b6:	bd08      	pop	{r3, pc}
   bc5b8:	0003021c 	.word	0x0003021c

000bc5bc <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   bc5bc:	b508      	push	{r3, lr}
   bc5be:	4b02      	ldr	r3, [pc, #8]	; (bc5c8 <__assert_func+0xc>)
   bc5c0:	681b      	ldr	r3, [r3, #0]
   bc5c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bc5c4:	9301      	str	r3, [sp, #4]
   bc5c6:	bd08      	pop	{r3, pc}
   bc5c8:	0003021c 	.word	0x0003021c

000bc5cc <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   bc5cc:	b508      	push	{r3, lr}
   bc5ce:	4b02      	ldr	r3, [pc, #8]	; (bc5d8 <newlib_impure_ptr_callback+0xc>)
   bc5d0:	681b      	ldr	r3, [r3, #0]
   bc5d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bc5d4:	9301      	str	r3, [sp, #4]
   bc5d6:	bd08      	pop	{r3, pc}
   bc5d8:	0003021c 	.word	0x0003021c

000bc5dc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   bc5dc:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   bc5de:	6843      	ldr	r3, [r0, #4]
   bc5e0:	3b01      	subs	r3, #1
    {
   bc5e2:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   bc5e4:	6043      	str	r3, [r0, #4]
   bc5e6:	b963      	cbnz	r3, bc602 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   bc5e8:	6803      	ldr	r3, [r0, #0]
   bc5ea:	689b      	ldr	r3, [r3, #8]
   bc5ec:	4798      	blx	r3
          if (--_M_weak_count == 0)
   bc5ee:	68a3      	ldr	r3, [r4, #8]
   bc5f0:	3b01      	subs	r3, #1
   bc5f2:	60a3      	str	r3, [r4, #8]
   bc5f4:	b92b      	cbnz	r3, bc602 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   bc5f6:	6823      	ldr	r3, [r4, #0]
   bc5f8:	4620      	mov	r0, r4
   bc5fa:	68db      	ldr	r3, [r3, #12]
    }
   bc5fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   bc600:	4718      	bx	r3
    }
   bc602:	bd10      	pop	{r4, pc}

000bc604 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   bc604:	b510      	push	{r4, lr}
   bc606:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   bc608:	6800      	ldr	r0, [r0, #0]
   bc60a:	b108      	cbz	r0, bc610 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   bc60c:	f7ff ffe6 	bl	bc5dc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   bc610:	4620      	mov	r0, r4
   bc612:	bd10      	pop	{r4, pc}

000bc614 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   bc614:	2300      	movs	r3, #0
   bc616:	6840      	ldr	r0, [r0, #4]
   bc618:	461a      	mov	r2, r3
   bc61a:	f7ff bf13 	b.w	bc444 <network_connect>

000bc61e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   bc61e:	6840      	ldr	r0, [r0, #4]
   bc620:	2200      	movs	r2, #0
   bc622:	2102      	movs	r1, #2
   bc624:	f7ff bf1e 	b.w	bc464 <network_disconnect>

000bc628 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   bc628:	2200      	movs	r2, #0
   bc62a:	6840      	ldr	r0, [r0, #4]
   bc62c:	4611      	mov	r1, r2
   bc62e:	f7ff bf11 	b.w	bc454 <network_connecting>

000bc632 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   bc632:	2200      	movs	r2, #0
   bc634:	6840      	ldr	r0, [r0, #4]
   bc636:	4611      	mov	r1, r2
   bc638:	f7ff bf1c 	b.w	bc474 <network_ready>

000bc63c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   bc63c:	2300      	movs	r3, #0
   bc63e:	6840      	ldr	r0, [r0, #4]
   bc640:	461a      	mov	r2, r3
   bc642:	4619      	mov	r1, r3
   bc644:	f7ff bf1e 	b.w	bc484 <network_on>

000bc648 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   bc648:	2300      	movs	r3, #0
   bc64a:	6840      	ldr	r0, [r0, #4]
   bc64c:	461a      	mov	r2, r3
   bc64e:	4619      	mov	r1, r3
   bc650:	f7ff bf20 	b.w	bc494 <network_off>

000bc654 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   bc654:	6840      	ldr	r0, [r0, #4]
   bc656:	2100      	movs	r1, #0
   bc658:	f7ff bf44 	b.w	bc4e4 <network_is_on>

000bc65c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   bc65c:	6840      	ldr	r0, [r0, #4]
   bc65e:	2100      	movs	r1, #0
   bc660:	f7ff bf48 	b.w	bc4f4 <network_is_off>

000bc664 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   bc664:	6840      	ldr	r0, [r0, #4]
   bc666:	2200      	movs	r2, #0
   bc668:	f081 0101 	eor.w	r1, r1, #1
   bc66c:	f7ff bf1a 	b.w	bc4a4 <network_listen>

000bc670 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   bc670:	6840      	ldr	r0, [r0, #4]
   bc672:	2200      	movs	r2, #0
   bc674:	f7ff bf26 	b.w	bc4c4 <network_set_listen_timeout>

000bc678 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   bc678:	2200      	movs	r2, #0
   bc67a:	6840      	ldr	r0, [r0, #4]
   bc67c:	4611      	mov	r1, r2
   bc67e:	f7ff bf29 	b.w	bc4d4 <network_get_listen_timeout>

000bc682 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   bc682:	2200      	movs	r2, #0
   bc684:	6840      	ldr	r0, [r0, #4]
   bc686:	4611      	mov	r1, r2
   bc688:	f7ff bf14 	b.w	bc4b4 <network_listening>

000bc68c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   bc68c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bc690:	b095      	sub	sp, #84	; 0x54
   bc692:	4614      	mov	r4, r2
   bc694:	460d      	mov	r5, r1
   bc696:	4607      	mov	r7, r0
    IPAddress addr;
   bc698:	f000 fa20 	bl	bcadc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   bc69c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   bc69e:	221c      	movs	r2, #28
   bc6a0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   bc6a2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   bc6a4:	f002 f8a1 	bl	be7ea <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   bc6a8:	2340      	movs	r3, #64	; 0x40
   bc6aa:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   bc6ac:	4620      	mov	r0, r4
   bc6ae:	466b      	mov	r3, sp
   bc6b0:	aa0c      	add	r2, sp, #48	; 0x30
   bc6b2:	2100      	movs	r1, #0
   bc6b4:	f7ff fe9e 	bl	bc3f4 <netdb_getaddrinfo>
    if (!r) {
   bc6b8:	4604      	mov	r4, r0
   bc6ba:	2800      	cmp	r0, #0
   bc6bc:	d14b      	bne.n	bc756 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bc6be:	4602      	mov	r2, r0
   bc6c0:	2101      	movs	r1, #1
   bc6c2:	6868      	ldr	r0, [r5, #4]
   bc6c4:	f7ff fed6 	bl	bc474 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bc6c8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bc6ca:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bc6cc:	4622      	mov	r2, r4
   bc6ce:	6868      	ldr	r0, [r5, #4]
   bc6d0:	f7ff fed0 	bl	bc474 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bc6d4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bc6d6:	4681      	mov	r9, r0
        bool ok = false;
   bc6d8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bc6da:	2e00      	cmp	r6, #0
   bc6dc:	d03b      	beq.n	bc756 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   bc6de:	2900      	cmp	r1, #0
   bc6e0:	d139      	bne.n	bc756 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   bc6e2:	6873      	ldr	r3, [r6, #4]
   bc6e4:	2b02      	cmp	r3, #2
   bc6e6:	d003      	beq.n	bc6f0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   bc6e8:	2b0a      	cmp	r3, #10
   bc6ea:	d011      	beq.n	bc710 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bc6ec:	69f6      	ldr	r6, [r6, #28]
   bc6ee:	e7f4      	b.n	bc6da <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   bc6f0:	f1b8 0f00 	cmp.w	r8, #0
   bc6f4:	d0fa      	beq.n	bc6ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   bc6f6:	6971      	ldr	r1, [r6, #20]


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
        return *this = IPAddress(address);
   bc6f8:	a806      	add	r0, sp, #24
   bc6fa:	3104      	adds	r1, #4
class IPAddress : public Printable {
   bc6fc:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   bc6fe:	f000 fa1b 	bl	bcb38 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bc702:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bc704:	1d3c      	adds	r4, r7, #4
   bc706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bc708:	682b      	ldr	r3, [r5, #0]
   bc70a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bc70c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   bc70e:	e7ed      	b.n	bc6ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   bc710:	f1b9 0f00 	cmp.w	r9, #0
   bc714:	d0ea      	beq.n	bc6ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   bc716:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   bc718:	2210      	movs	r2, #16
   bc71a:	a801      	add	r0, sp, #4
   bc71c:	f002 f865 	bl	be7ea <memset>
                    a.v = 6;
   bc720:	2306      	movs	r3, #6
   bc722:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   bc726:	ad01      	add	r5, sp, #4
   bc728:	f104 0308 	add.w	r3, r4, #8
   bc72c:	3418      	adds	r4, #24
   bc72e:	6818      	ldr	r0, [r3, #0]
   bc730:	6859      	ldr	r1, [r3, #4]
   bc732:	462a      	mov	r2, r5
   bc734:	c203      	stmia	r2!, {r0, r1}
   bc736:	3308      	adds	r3, #8
   bc738:	42a3      	cmp	r3, r4
   bc73a:	4615      	mov	r5, r2
   bc73c:	d1f7      	bne.n	bc72e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   bc73e:	a901      	add	r1, sp, #4
   bc740:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   bc742:	ad07      	add	r5, sp, #28
   bc744:	f000 f9d8 	bl	bcaf8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   bc748:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bc74a:	1d3c      	adds	r4, r7, #4
   bc74c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bc74e:	682b      	ldr	r3, [r5, #0]
   bc750:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bc752:	4649      	mov	r1, r9
   bc754:	e7ca      	b.n	bc6ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   bc756:	9800      	ldr	r0, [sp, #0]
   bc758:	f7ff fe44 	bl	bc3e4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   bc75c:	4638      	mov	r0, r7
   bc75e:	b015      	add	sp, #84	; 0x54
   bc760:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bc764 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   bc764:	4b02      	ldr	r3, [pc, #8]	; (bc770 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   bc766:	4a03      	ldr	r2, [pc, #12]	; (bc774 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   bc768:	601a      	str	r2, [r3, #0]
   bc76a:	2200      	movs	r2, #0
   bc76c:	605a      	str	r2, [r3, #4]

} // spark
   bc76e:	4770      	bx	lr
   bc770:	2003e6c4 	.word	0x2003e6c4
   bc774:	000cbb00 	.word	0x000cbb00

000bc778 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   bc778:	2200      	movs	r2, #0
   bc77a:	6840      	ldr	r0, [r0, #4]
   bc77c:	4611      	mov	r1, r2
   bc77e:	f7ff be79 	b.w	bc474 <network_ready>

000bc782 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bc782:	2200      	movs	r2, #0
   bc784:	6840      	ldr	r0, [r0, #4]
   bc786:	4611      	mov	r1, r2
   bc788:	f7ff be94 	b.w	bc4b4 <network_listening>

000bc78c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bc78c:	2200      	movs	r2, #0
   bc78e:	6840      	ldr	r0, [r0, #4]
   bc790:	4611      	mov	r1, r2
   bc792:	f7ff be9f 	b.w	bc4d4 <network_get_listen_timeout>

000bc796 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bc796:	6840      	ldr	r0, [r0, #4]
   bc798:	2200      	movs	r2, #0
   bc79a:	f7ff be93 	b.w	bc4c4 <network_set_listen_timeout>

000bc79e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bc79e:	6840      	ldr	r0, [r0, #4]
   bc7a0:	2200      	movs	r2, #0
   bc7a2:	f081 0101 	eor.w	r1, r1, #1
   bc7a6:	f7ff be7d 	b.w	bc4a4 <network_listen>

000bc7aa <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bc7aa:	2300      	movs	r3, #0
   bc7ac:	6840      	ldr	r0, [r0, #4]
   bc7ae:	461a      	mov	r2, r3
   bc7b0:	4619      	mov	r1, r3
   bc7b2:	f7ff be6f 	b.w	bc494 <network_off>

000bc7b6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bc7b6:	2300      	movs	r3, #0
   bc7b8:	6840      	ldr	r0, [r0, #4]
   bc7ba:	461a      	mov	r2, r3
   bc7bc:	4619      	mov	r1, r3
   bc7be:	f7ff be61 	b.w	bc484 <network_on>

000bc7c2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bc7c2:	2200      	movs	r2, #0
   bc7c4:	6840      	ldr	r0, [r0, #4]
   bc7c6:	4611      	mov	r1, r2
   bc7c8:	f7ff be44 	b.w	bc454 <network_connecting>

000bc7cc <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bc7cc:	6840      	ldr	r0, [r0, #4]
   bc7ce:	2200      	movs	r2, #0
   bc7d0:	2102      	movs	r1, #2
   bc7d2:	f7ff be47 	b.w	bc464 <network_disconnect>

000bc7d6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bc7d6:	2300      	movs	r3, #0
   bc7d8:	6840      	ldr	r0, [r0, #4]
   bc7da:	461a      	mov	r2, r3
   bc7dc:	f7ff be32 	b.w	bc444 <network_connect>

000bc7e0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   bc7e0:	4b02      	ldr	r3, [pc, #8]	; (bc7ec <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   bc7e2:	2204      	movs	r2, #4
   bc7e4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   bc7e6:	4a02      	ldr	r2, [pc, #8]	; (bc7f0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   bc7e8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   bc7ea:	4770      	bx	lr
   bc7ec:	2003e6cc 	.word	0x2003e6cc
   bc7f0:	000cbb3c 	.word	0x000cbb3c

000bc7f4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bc7f4:	4770      	bx	lr

000bc7f6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bc7f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc7f8:	4606      	mov	r6, r0
   bc7fa:	4615      	mov	r5, r2
   bc7fc:	460c      	mov	r4, r1
   bc7fe:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bc800:	42bc      	cmp	r4, r7
   bc802:	d006      	beq.n	bc812 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bc804:	6833      	ldr	r3, [r6, #0]
   bc806:	f814 1b01 	ldrb.w	r1, [r4], #1
   bc80a:	689b      	ldr	r3, [r3, #8]
   bc80c:	4630      	mov	r0, r6
   bc80e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bc810:	e7f6      	b.n	bc800 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bc812:	4628      	mov	r0, r5
   bc814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bc816 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bc816:	7c00      	ldrb	r0, [r0, #16]
   bc818:	2200      	movs	r2, #0
   bc81a:	f7ff bd4b 	b.w	bc2b4 <hal_i2c_write>

000bc81e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bc81e:	7c00      	ldrb	r0, [r0, #16]
   bc820:	2100      	movs	r1, #0
   bc822:	f7ff bd4f 	b.w	bc2c4 <hal_i2c_available>

000bc826 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bc826:	7c00      	ldrb	r0, [r0, #16]
   bc828:	2100      	movs	r1, #0
   bc82a:	f7ff bd53 	b.w	bc2d4 <hal_i2c_read>

000bc82e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bc82e:	7c00      	ldrb	r0, [r0, #16]
   bc830:	2100      	movs	r1, #0
   bc832:	f7ff bd57 	b.w	bc2e4 <hal_i2c_peek>

000bc836 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bc836:	7c00      	ldrb	r0, [r0, #16]
   bc838:	2100      	movs	r1, #0
   bc83a:	f7ff bd5b 	b.w	bc2f4 <hal_i2c_flush>

000bc83e <_ZN7TwoWireD0Ev>:
   bc83e:	b510      	push	{r4, lr}
   bc840:	2114      	movs	r1, #20
   bc842:	4604      	mov	r4, r0
   bc844:	f7f7 fc2d 	bl	b40a2 <_ZdlPvj>
   bc848:	4620      	mov	r0, r4
   bc84a:	bd10      	pop	{r4, pc}

000bc84c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bc84c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bc84e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bc852:	4604      	mov	r4, r0
   bc854:	4608      	mov	r0, r1
   bc856:	2100      	movs	r1, #0
   bc858:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bc85c:	4b03      	ldr	r3, [pc, #12]	; (bc86c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   bc85e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   bc860:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   bc862:	4611      	mov	r1, r2
   bc864:	f7ff fd56 	bl	bc314 <hal_i2c_init>
}
   bc868:	4620      	mov	r0, r4
   bc86a:	bd10      	pop	{r4, pc}
   bc86c:	000cbb78 	.word	0x000cbb78

000bc870 <_ZN7TwoWire5beginEh>:
{
   bc870:	460a      	mov	r2, r1
	hal_i2c_begin(_i2c, I2C_MODE_SLAVE, address, NULL);
   bc872:	7c00      	ldrb	r0, [r0, #16]
   bc874:	2300      	movs	r3, #0
   bc876:	2101      	movs	r1, #1
   bc878:	f7ff bd14 	b.w	bc2a4 <hal_i2c_begin>

000bc87c <_ZN7TwoWire5beginEi>:
  begin((uint8_t)address);
   bc87c:	b2c9      	uxtb	r1, r1
   bc87e:	f7ff bff7 	b.w	bc870 <_ZN7TwoWire5beginEh>

000bc882 <_ZN7TwoWire9onReceiveEPFviE>:
}

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
{
  hal_i2c_set_callback_on_received(_i2c, function, NULL);
   bc882:	7c00      	ldrb	r0, [r0, #16]
   bc884:	2200      	movs	r2, #0
   bc886:	f7ff bd3d 	b.w	bc304 <hal_i2c_set_callback_on_received>

000bc88a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   bc88a:	b510      	push	{r4, lr}
      if (_M_empty())
   bc88c:	6883      	ldr	r3, [r0, #8]
   bc88e:	4604      	mov	r4, r0
   bc890:	b90b      	cbnz	r3, bc896 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   bc892:	f7fa fd77 	bl	b7384 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bc896:	68c3      	ldr	r3, [r0, #12]
   bc898:	4798      	blx	r3
      if (_M_manager)
   bc89a:	68a3      	ldr	r3, [r4, #8]
   bc89c:	b11b      	cbz	r3, bc8a6 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   bc89e:	2203      	movs	r2, #3
   bc8a0:	4621      	mov	r1, r4
   bc8a2:	4620      	mov	r0, r4
   bc8a4:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   bc8a6:	4620      	mov	r0, r4
   bc8a8:	2110      	movs	r1, #16
}
   bc8aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   bc8ae:	f7f7 bbf8 	b.w	b40a2 <_ZdlPvj>

000bc8b2 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bc8b2:	4770      	bx	lr

000bc8b4 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bc8b4:	7441      	strb	r1, [r0, #17]
}
   bc8b6:	4770      	bx	lr

000bc8b8 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bc8b8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bc8ba:	7c00      	ldrb	r0, [r0, #16]
   bc8bc:	f7ff fd5a 	bl	bc374 <hal_usart_available_data_for_write>
}
   bc8c0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bc8c4:	bd08      	pop	{r3, pc}

000bc8c6 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bc8c6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bc8c8:	7c00      	ldrb	r0, [r0, #16]
   bc8ca:	f7ff fd33 	bl	bc334 <hal_usart_available>
}
   bc8ce:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bc8d2:	bd08      	pop	{r3, pc}

000bc8d4 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bc8d4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bc8d6:	7c00      	ldrb	r0, [r0, #16]
   bc8d8:	f7ff fd3c 	bl	bc354 <hal_usart_peek>
}
   bc8dc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bc8e0:	bd08      	pop	{r3, pc}

000bc8e2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bc8e2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bc8e4:	7c00      	ldrb	r0, [r0, #16]
   bc8e6:	f7ff fd2d 	bl	bc344 <hal_usart_read>
}
   bc8ea:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bc8ee:	bd08      	pop	{r3, pc}

000bc8f0 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   bc8f0:	7c00      	ldrb	r0, [r0, #16]
   bc8f2:	f7ff bd37 	b.w	bc364 <hal_usart_flush>

000bc8f6 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   bc8f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bc8f8:	7c45      	ldrb	r5, [r0, #17]
{
   bc8fa:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bc8fc:	b12d      	cbz	r5, bc90a <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   bc8fe:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   bc900:	b003      	add	sp, #12
   bc902:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   bc906:	f7ff bd0d 	b.w	bc324 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bc90a:	7c00      	ldrb	r0, [r0, #16]
   bc90c:	9101      	str	r1, [sp, #4]
   bc90e:	f7ff fd31 	bl	bc374 <hal_usart_available_data_for_write>
   bc912:	2800      	cmp	r0, #0
   bc914:	9901      	ldr	r1, [sp, #4]
   bc916:	dcf2      	bgt.n	bc8fe <_ZN11USARTSerial5writeEh+0x8>
}
   bc918:	4628      	mov	r0, r5
   bc91a:	b003      	add	sp, #12
   bc91c:	bd30      	pop	{r4, r5, pc}

000bc91e <_ZN11USARTSerialD0Ev>:
   bc91e:	b510      	push	{r4, lr}
   bc920:	2114      	movs	r1, #20
   bc922:	4604      	mov	r4, r0
   bc924:	f7f7 fbbd 	bl	b40a2 <_ZdlPvj>
   bc928:	4620      	mov	r0, r4
   bc92a:	bd10      	pop	{r4, pc}

000bc92c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   bc92c:	b510      	push	{r4, lr}
   bc92e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bc932:	4604      	mov	r4, r0
   bc934:	4608      	mov	r0, r1
   bc936:	4611      	mov	r1, r2
   bc938:	2200      	movs	r2, #0
   bc93a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bc93e:	4b04      	ldr	r3, [pc, #16]	; (bc950 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   bc940:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bc942:	2301      	movs	r3, #1
  _serial = serial;
   bc944:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bc946:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   bc948:	f7ff fd1c 	bl	bc384 <hal_usart_init_ex>
}
   bc94c:	4620      	mov	r0, r4
   bc94e:	bd10      	pop	{r4, pc}
   bc950:	000cbba0 	.word	0x000cbba0

000bc954 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bc954:	7441      	strb	r1, [r0, #17]
}
   bc956:	4770      	bx	lr

000bc958 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bc958:	4770      	bx	lr

000bc95a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bc95a:	4770      	bx	lr

000bc95c <_ZN9USBSerial4readEv>:
{
   bc95c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bc95e:	2100      	movs	r1, #0
   bc960:	7c00      	ldrb	r0, [r0, #16]
   bc962:	f7ff fc7f 	bl	bc264 <HAL_USB_USART_Receive_Data>
}
   bc966:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bc96a:	bd08      	pop	{r3, pc}

000bc96c <_ZN9USBSerial4peekEv>:
{
   bc96c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   bc96e:	2101      	movs	r1, #1
   bc970:	7c00      	ldrb	r0, [r0, #16]
   bc972:	f7ff fc77 	bl	bc264 <HAL_USB_USART_Receive_Data>
}
   bc976:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bc97a:	bd08      	pop	{r3, pc}

000bc97c <_ZN9USBSerial17availableForWriteEv>:
{
   bc97c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   bc97e:	7c00      	ldrb	r0, [r0, #16]
   bc980:	f7ff fc68 	bl	bc254 <HAL_USB_USART_Available_Data_For_Write>
}
   bc984:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bc988:	bd08      	pop	{r3, pc}

000bc98a <_ZN9USBSerial9availableEv>:
{
   bc98a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   bc98c:	7c00      	ldrb	r0, [r0, #16]
   bc98e:	f7ff fc59 	bl	bc244 <HAL_USB_USART_Available_Data>
}
   bc992:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bc996:	bd08      	pop	{r3, pc}

000bc998 <_ZN9USBSerial5writeEh>:
{
   bc998:	b513      	push	{r0, r1, r4, lr}
   bc99a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bc99c:	7c00      	ldrb	r0, [r0, #16]
{
   bc99e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bc9a0:	f7ff fc58 	bl	bc254 <HAL_USB_USART_Available_Data_For_Write>
   bc9a4:	2800      	cmp	r0, #0
   bc9a6:	9901      	ldr	r1, [sp, #4]
   bc9a8:	dc01      	bgt.n	bc9ae <_ZN9USBSerial5writeEh+0x16>
   bc9aa:	7c60      	ldrb	r0, [r4, #17]
   bc9ac:	b120      	cbz	r0, bc9b8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bc9ae:	7c20      	ldrb	r0, [r4, #16]
   bc9b0:	f7ff fc60 	bl	bc274 <HAL_USB_USART_Send_Data>
   bc9b4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   bc9b8:	b002      	add	sp, #8
   bc9ba:	bd10      	pop	{r4, pc}

000bc9bc <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   bc9bc:	7c00      	ldrb	r0, [r0, #16]
   bc9be:	f7ff bc61 	b.w	bc284 <HAL_USB_USART_Flush_Data>

000bc9c2 <_ZN9USBSerialD0Ev>:
   bc9c2:	b510      	push	{r4, lr}
   bc9c4:	2114      	movs	r1, #20
   bc9c6:	4604      	mov	r4, r0
   bc9c8:	f7f7 fb6b 	bl	b40a2 <_ZdlPvj>
   bc9cc:	4620      	mov	r0, r4
   bc9ce:	bd10      	pop	{r4, pc}

000bc9d0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   bc9d0:	b510      	push	{r4, lr}
   bc9d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bc9d6:	4604      	mov	r4, r0
   bc9d8:	4608      	mov	r0, r1
   bc9da:	2100      	movs	r1, #0
   bc9dc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bc9e0:	4b04      	ldr	r3, [pc, #16]	; (bc9f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   bc9e2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bc9e4:	2301      	movs	r3, #1
  _serial = serial;
   bc9e6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bc9e8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   bc9ea:	4611      	mov	r1, r2
   bc9ec:	f7ff fc1a 	bl	bc224 <HAL_USB_USART_Init>
}
   bc9f0:	4620      	mov	r0, r4
   bc9f2:	bd10      	pop	{r4, pc}
   bc9f4:	000cbbd0 	.word	0x000cbbd0

000bc9f8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   bc9f8:	7c00      	ldrb	r0, [r0, #16]
   bc9fa:	2200      	movs	r2, #0
   bc9fc:	f7ff bc1a 	b.w	bc234 <HAL_USB_USART_Begin>

000bca00 <_ZN9USBSerial9isEnabledEv>:
  return HAL_USB_USART_Is_Enabled(_serial);
   bca00:	7c00      	ldrb	r0, [r0, #16]
   bca02:	f7ff bc47 	b.w	bc294 <HAL_USB_USART_Is_Enabled>

000bca06 <_ZN9USBSerialcvbEv>:
  return isEnabled();
   bca06:	f7ff bffb 	b.w	bca00 <_ZN9USBSerial9isEnabledEv>

000bca0a <_Z19acquireSerialBufferv>:
{
   bca0a:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   bca0c:	2214      	movs	r2, #20
{
   bca0e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bca10:	2100      	movs	r1, #0
   bca12:	f001 feea 	bl	be7ea <memset>
}
   bca16:	4620      	mov	r0, r4
   bca18:	bd10      	pop	{r4, pc}
	...

000bca1c <_Z16_fetch_usbserialv>:
{
   bca1c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bca1e:	4c0f      	ldr	r4, [pc, #60]	; (bca5c <_Z16_fetch_usbserialv+0x40>)
{
   bca20:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bca22:	a803      	add	r0, sp, #12
   bca24:	f7ff fff1 	bl	bca0a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bca28:	7821      	ldrb	r1, [r4, #0]
   bca2a:	f3bf 8f5b 	dmb	ish
   bca2e:	f011 0101 	ands.w	r1, r1, #1
   bca32:	d10f      	bne.n	bca54 <_Z16_fetch_usbserialv+0x38>
   bca34:	4620      	mov	r0, r4
   bca36:	9101      	str	r1, [sp, #4]
   bca38:	f7f7 fb35 	bl	b40a6 <__cxa_guard_acquire>
   bca3c:	9901      	ldr	r1, [sp, #4]
   bca3e:	b148      	cbz	r0, bca54 <_Z16_fetch_usbserialv+0x38>
   bca40:	aa03      	add	r2, sp, #12
   bca42:	4807      	ldr	r0, [pc, #28]	; (bca60 <_Z16_fetch_usbserialv+0x44>)
   bca44:	f7ff ffc4 	bl	bc9d0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bca48:	4620      	mov	r0, r4
   bca4a:	f7f7 fb31 	bl	b40b0 <__cxa_guard_release>
   bca4e:	4805      	ldr	r0, [pc, #20]	; (bca64 <_Z16_fetch_usbserialv+0x48>)
   bca50:	f001 fe7e 	bl	be750 <atexit>
	return _usbserial;
}
   bca54:	4802      	ldr	r0, [pc, #8]	; (bca60 <_Z16_fetch_usbserialv+0x44>)
   bca56:	b008      	add	sp, #32
   bca58:	bd10      	pop	{r4, pc}
   bca5a:	bf00      	nop
   bca5c:	2003e6d4 	.word	0x2003e6d4
   bca60:	2003e6d8 	.word	0x2003e6d8
   bca64:	000bc959 	.word	0x000bc959

000bca68 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   bca68:	4770      	bx	lr

000bca6a <_ZN9IPAddressD0Ev>:
   bca6a:	b510      	push	{r4, lr}
   bca6c:	2118      	movs	r1, #24
   bca6e:	4604      	mov	r4, r0
   bca70:	f7f7 fb17 	bl	b40a2 <_ZdlPvj>
   bca74:	4620      	mov	r0, r4
   bca76:	bd10      	pop	{r4, pc}

000bca78 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bca78:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bca7a:	7d03      	ldrb	r3, [r0, #20]
   bca7c:	2b06      	cmp	r3, #6
{
   bca7e:	b08d      	sub	sp, #52	; 0x34
   bca80:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bca82:	f100 0704 	add.w	r7, r0, #4
   bca86:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bca8a:	d012      	beq.n	bcab2 <_ZNK9IPAddress7printToER5Print+0x3a>
   bca8c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   bca90:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bca94:	220a      	movs	r2, #10
   bca96:	4630      	mov	r0, r6
   bca98:	f000 fc07 	bl	bd2aa <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bca9c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bca9e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bcaa0:	d019      	beq.n	bcad6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bcaa2:	2c00      	cmp	r4, #0
   bcaa4:	d0f4      	beq.n	bca90 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bcaa6:	212e      	movs	r1, #46	; 0x2e
   bcaa8:	4630      	mov	r0, r6
   bcaaa:	f000 fbdb 	bl	bd264 <_ZN5Print5printEc>
   bcaae:	4404      	add	r4, r0
   bcab0:	e7ee      	b.n	bca90 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bcab2:	232f      	movs	r3, #47	; 0x2f
   bcab4:	466a      	mov	r2, sp
   bcab6:	4639      	mov	r1, r7
   bcab8:	200a      	movs	r0, #10
		buf[0] = 0;
   bcaba:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bcabe:	f7ff fc69 	bl	bc394 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bcac2:	4668      	mov	r0, sp
   bcac4:	f001 fefd 	bl	be8c2 <strlen>
   bcac8:	6833      	ldr	r3, [r6, #0]
   bcaca:	4602      	mov	r2, r0
   bcacc:	68db      	ldr	r3, [r3, #12]
   bcace:	4669      	mov	r1, sp
   bcad0:	4630      	mov	r0, r6
   bcad2:	4798      	blx	r3
   bcad4:	4604      	mov	r4, r0
    }
    return n;
}
   bcad6:	4620      	mov	r0, r4
   bcad8:	b00d      	add	sp, #52	; 0x34
   bcada:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bcadc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   bcadc:	b510      	push	{r4, lr}
   bcade:	4b05      	ldr	r3, [pc, #20]	; (bcaf4 <_ZN9IPAddressC1Ev+0x18>)
   bcae0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   bcae2:	2211      	movs	r2, #17
   bcae4:	f840 3b04 	str.w	r3, [r0], #4
   bcae8:	2100      	movs	r1, #0
   bcaea:	f001 fe7e 	bl	be7ea <memset>
}
   bcaee:	4620      	mov	r0, r4
   bcaf0:	bd10      	pop	{r4, pc}
   bcaf2:	bf00      	nop
   bcaf4:	000cbc00 	.word	0x000cbc00

000bcaf8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bcaf8:	4603      	mov	r3, r0
   bcafa:	4a07      	ldr	r2, [pc, #28]	; (bcb18 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bcafc:	b510      	push	{r4, lr}
   bcafe:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bcb02:	f101 0210 	add.w	r2, r1, #16
   bcb06:	f851 4b04 	ldr.w	r4, [r1], #4
   bcb0a:	f843 4b04 	str.w	r4, [r3], #4
   bcb0e:	4291      	cmp	r1, r2
   bcb10:	d1f9      	bne.n	bcb06 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bcb12:	780a      	ldrb	r2, [r1, #0]
   bcb14:	701a      	strb	r2, [r3, #0]
}
   bcb16:	bd10      	pop	{r4, pc}
   bcb18:	000cbc00 	.word	0x000cbc00

000bcb1c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bcb1c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bcb1e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bcb22:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bcb26:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bcb2a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bcb2e:	2304      	movs	r3, #4
   bcb30:	6041      	str	r1, [r0, #4]
   bcb32:	7503      	strb	r3, [r0, #20]
}
   bcb34:	bd10      	pop	{r4, pc}
	...

000bcb38 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bcb38:	b507      	push	{r0, r1, r2, lr}
   bcb3a:	4b06      	ldr	r3, [pc, #24]	; (bcb54 <_ZN9IPAddressC1EPKh+0x1c>)
   bcb3c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bcb3e:	78cb      	ldrb	r3, [r1, #3]
   bcb40:	9300      	str	r3, [sp, #0]
   bcb42:	788b      	ldrb	r3, [r1, #2]
   bcb44:	784a      	ldrb	r2, [r1, #1]
   bcb46:	7809      	ldrb	r1, [r1, #0]
   bcb48:	f7ff ffe8 	bl	bcb1c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bcb4c:	b003      	add	sp, #12
   bcb4e:	f85d fb04 	ldr.w	pc, [sp], #4
   bcb52:	bf00      	nop
   bcb54:	000cbc00 	.word	0x000cbc00

000bcb58 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bcb58:	4770      	bx	lr

000bcb5a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   bcb5a:	2000      	movs	r0, #0
   bcb5c:	4770      	bx	lr

000bcb5e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bcb5e:	b510      	push	{r4, lr}
   bcb60:	2110      	movs	r1, #16
   bcb62:	4604      	mov	r4, r0
   bcb64:	f7f7 fa9d 	bl	b40a2 <_ZdlPvj>
   bcb68:	4620      	mov	r0, r4
   bcb6a:	bd10      	pop	{r4, pc}

000bcb6c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   bcb6c:	b508      	push	{r3, lr}
      { delete this; }
   bcb6e:	f7ff fff6 	bl	bcb5e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   bcb72:	bd08      	pop	{r3, pc}

000bcb74 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   bcb74:	b530      	push	{r4, r5, lr}
        type_(type) {
   bcb76:	2200      	movs	r2, #0
   bcb78:	f64f 749c 	movw	r4, #65436	; 0xff9c
   bcb7c:	6002      	str	r2, [r0, #0]
   bcb7e:	8084      	strh	r4, [r0, #4]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   bcb80:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   bcb82:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bcb84:	680c      	ldr	r4, [r1, #0]
   bcb86:	8085      	strh	r5, [r0, #4]
   bcb88:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bcb8a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   bcb8c:	bd30      	pop	{r4, r5, pc}

000bcb8e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   bcb8e:	b510      	push	{r4, lr}
   bcb90:	4604      	mov	r4, r0
    free((void*)msg_);
   bcb92:	6800      	ldr	r0, [r0, #0]
   bcb94:	f7ff fcea 	bl	bc56c <free>
}
   bcb98:	4620      	mov	r0, r4
   bcb9a:	bd10      	pop	{r4, pc}

000bcb9c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bcb9c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   bcb9e:	68c4      	ldr	r4, [r0, #12]
   bcba0:	b1f4      	cbz	r4, bcbe0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   bcba2:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   bcba4:	2b02      	cmp	r3, #2
   bcba6:	d103      	bne.n	bcbb0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   bcba8:	f104 000c 	add.w	r0, r4, #12
   bcbac:	f7ff ffef 	bl	bcb8e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   bcbb0:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   bcbb2:	b135      	cbz	r5, bcbc2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   bcbb4:	4628      	mov	r0, r5
   bcbb6:	f7fa fbbd 	bl	b7334 <_ZNSt14_Function_baseD1Ev>
   bcbba:	2110      	movs	r1, #16
   bcbbc:	4628      	mov	r0, r5
   bcbbe:	f7f7 fa70 	bl	b40a2 <_ZdlPvj>
   bcbc2:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   bcbc4:	b135      	cbz	r5, bcbd4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   bcbc6:	4628      	mov	r0, r5
   bcbc8:	f7fa fbb4 	bl	b7334 <_ZNSt14_Function_baseD1Ev>
   bcbcc:	2110      	movs	r1, #16
   bcbce:	4628      	mov	r0, r5
   bcbd0:	f7f7 fa67 	bl	b40a2 <_ZdlPvj>
   bcbd4:	4620      	mov	r0, r4
   bcbd6:	2114      	movs	r1, #20
   bcbd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bcbdc:	f7f7 ba61 	b.w	b40a2 <_ZdlPvj>
   bcbe0:	bd38      	pop	{r3, r4, r5, pc}

000bcbe2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
   bcbe2:	680b      	ldr	r3, [r1, #0]
   bcbe4:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bcbe6:	684b      	ldr	r3, [r1, #4]
   bcbe8:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bcbea:	b113      	cbz	r3, bcbf2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   bcbec:	685a      	ldr	r2, [r3, #4]
   bcbee:	3201      	adds	r2, #1
   bcbf0:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bcbf2:	4770      	bx	lr

000bcbf4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   bcbf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bcbf6:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   bcbf8:	4668      	mov	r0, sp
   bcbfa:	460d      	mov	r5, r1
   bcbfc:	f7ff fff1 	bl	bcbe2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   bcc00:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bcc02:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bcc04:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   bcc06:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   bcc08:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bcc0a:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   bcc0c:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   bcc0e:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   bcc10:	f7ff fcf8 	bl	bc604 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   bcc14:	b135      	cbz	r5, bcc24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   bcc16:	1d28      	adds	r0, r5, #4
   bcc18:	f7ff fcf4 	bl	bc604 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bcc1c:	2108      	movs	r1, #8
   bcc1e:	4628      	mov	r0, r5
   bcc20:	f7f7 fa3f 	bl	b40a2 <_ZdlPvj>
        return p;
    }
   bcc24:	4620      	mov	r0, r4
   bcc26:	b003      	add	sp, #12
   bcc28:	bd30      	pop	{r4, r5, pc}

000bcc2a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   bcc2a:	b513      	push	{r0, r1, r4, lr}
   bcc2c:	460b      	mov	r3, r1
   bcc2e:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bcc30:	e9d0 0100 	ldrd	r0, r1, [r0]
   bcc34:	466c      	mov	r4, sp
   bcc36:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   bcc3a:	e893 0003 	ldmia.w	r3, {r0, r1}
   bcc3e:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   bcc42:	e894 0003 	ldmia.w	r4, {r0, r1}
   bcc46:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   bcc4a:	b002      	add	sp, #8
   bcc4c:	bd10      	pop	{r4, pc}

000bcc4e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   bcc4e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bcc50:	b510      	push	{r4, lr}
      if (_M_empty())
   bcc52:	b90a      	cbnz	r2, bcc58 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   bcc54:	f7fa fb96 	bl	b7384 <_ZSt25__throw_bad_function_callv>
    }
   bcc58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bcc5c:	68c3      	ldr	r3, [r0, #12]
   bcc5e:	4718      	bx	r3

000bcc60 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bcc60:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bcc62:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   bcc64:	f100 0110 	add.w	r1, r0, #16
   bcc68:	f7ff fff1 	bl	bcc4e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   bcc6c:	bd08      	pop	{r3, pc}

000bcc6e <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   bcc6e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bcc70:	b510      	push	{r4, lr}
      if (_M_empty())
   bcc72:	b90a      	cbnz	r2, bcc78 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   bcc74:	f7fa fb86 	bl	b7384 <_ZSt25__throw_bad_function_callv>
    }
   bcc78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bcc7c:	68c3      	ldr	r3, [r0, #12]
   bcc7e:	4718      	bx	r3

000bcc80 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bcc80:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bcc82:	6800      	ldr	r0, [r0, #0]
   bcc84:	f100 0110 	add.w	r1, r0, #16
   bcc88:	f7ff fff1 	bl	bcc6e <_ZNKSt8functionIFvRKbEEclES1_>
      }
   bcc8c:	bd08      	pop	{r3, pc}
	...

000bcc90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   bcc90:	b538      	push	{r3, r4, r5, lr}
   bcc92:	2300      	movs	r3, #0
   bcc94:	4604      	mov	r4, r0
   bcc96:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bcc98:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   bcc9a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bcc9c:	f7f7 f9fb 	bl	b4096 <_Znwj>
   bcca0:	b128      	cbz	r0, bccae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   bcca2:	2301      	movs	r3, #1
   bcca4:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   bcca8:	4b02      	ldr	r3, [pc, #8]	; (bccb4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   bccaa:	6003      	str	r3, [r0, #0]
   bccac:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bccae:	6020      	str	r0, [r4, #0]
	}
   bccb0:	4620      	mov	r0, r4
   bccb2:	bd38      	pop	{r3, r4, r5, pc}
   bccb4:	000cbc14 	.word	0x000cbc14

000bccb8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   bccb8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bccba:	2300      	movs	r3, #0
   bccbc:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bccbe:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bccc0:	4604      	mov	r4, r0
   bccc2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bccc4:	b12b      	cbz	r3, bccd2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bccc6:	2202      	movs	r2, #2
   bccc8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bccca:	68eb      	ldr	r3, [r5, #12]
   bcccc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bccce:	68ab      	ldr	r3, [r5, #8]
   bccd0:	60a3      	str	r3, [r4, #8]
    }
   bccd2:	4620      	mov	r0, r4
   bccd4:	bd38      	pop	{r3, r4, r5, pc}
	...

000bccd8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   bccd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   bccda:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   bccdc:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   bccde:	4668      	mov	r0, sp
   bcce0:	f7ff ff48 	bl	bcb74 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bcce4:	f04f 0302 	mov.w	r3, #2
   bcce8:	e8d4 2f4f 	ldrexb	r2, [r4]
   bccec:	2a00      	cmp	r2, #0
   bccee:	d103      	bne.n	bccf8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   bccf0:	e8c4 3f41 	strexb	r1, r3, [r4]
   bccf4:	2900      	cmp	r1, #0
   bccf6:	d1f7      	bne.n	bcce8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   bccf8:	d125      	bne.n	bcd46 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   bccfa:	f104 050c 	add.w	r5, r4, #12
   bccfe:	4669      	mov	r1, sp
   bcd00:	4628      	mov	r0, r5
   bcd02:	f7ff ff37 	bl	bcb74 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   bcd06:	f3bf 8f5b 	dmb	ish
   bcd0a:	2301      	movs	r3, #1
   bcd0c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bcd0e:	2000      	movs	r0, #0
   bcd10:	f104 0308 	add.w	r3, r4, #8
   bcd14:	f3bf 8f5b 	dmb	ish
   bcd18:	e853 6f00 	ldrex	r6, [r3]
   bcd1c:	e843 0200 	strex	r2, r0, [r3]
   bcd20:	2a00      	cmp	r2, #0
   bcd22:	d1f9      	bne.n	bcd18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   bcd24:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bcd28:	b16e      	cbz	r6, bcd46 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   bcd2a:	f7ff fbf3 	bl	bc514 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bcd2e:	b178      	cbz	r0, bcd50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bcd30:	4629      	mov	r1, r5
   bcd32:	4630      	mov	r0, r6
   bcd34:	f7ff ff8b 	bl	bcc4e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   bcd38:	4630      	mov	r0, r6
   bcd3a:	f7fa fafb 	bl	b7334 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bcd3e:	2110      	movs	r1, #16
   bcd40:	4630      	mov	r0, r6
   bcd42:	f7f7 f9ae 	bl	b40a2 <_ZdlPvj>
        p_->setError(std::move(error));
   bcd46:	4668      	mov	r0, sp
   bcd48:	f7ff ff21 	bl	bcb8e <_ZN8particle5ErrorD1Ev>
    }
   bcd4c:	b009      	add	sp, #36	; 0x24
   bcd4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bcd50:	4631      	mov	r1, r6
   bcd52:	a802      	add	r0, sp, #8
   bcd54:	f7ff ffb0 	bl	bccb8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bcd58:	68e0      	ldr	r0, [r4, #12]
   bcd5a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bcd5e:	b108      	cbz	r0, bcd64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   bcd60:	f001 fd92 	bl	be888 <strdup>
        type_(type) {
   bcd64:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bcd66:	2010      	movs	r0, #16
   bcd68:	f8ad 501c 	strh.w	r5, [sp, #28]
   bcd6c:	f7f7 f993 	bl	b4096 <_Znwj>
   bcd70:	4605      	mov	r5, r0
   bcd72:	b1e8      	cbz	r0, bcdb0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   bcd74:	2700      	movs	r7, #0
   bcd76:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bcd78:	2018      	movs	r0, #24
   bcd7a:	f7f7 f98c 	bl	b4096 <_Znwj>
   bcd7e:	4604      	mov	r4, r0
   bcd80:	b188      	cbz	r0, bcda6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   bcd82:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   bcd84:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bcd86:	a802      	add	r0, sp, #8
   bcd88:	f7ff ff4f 	bl	bcc2a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bcd8c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   bcd8e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bcd90:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bcd92:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bcd94:	9204      	str	r2, [sp, #16]
   bcd96:	a906      	add	r1, sp, #24
   bcd98:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bcd9a:	60e3      	str	r3, [r4, #12]
   bcd9c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   bcda0:	9205      	str	r2, [sp, #20]
   bcda2:	f7ff fee7 	bl	bcb74 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   bcda6:	4b08      	ldr	r3, [pc, #32]	; (bcdc8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   bcda8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bcdaa:	4b08      	ldr	r3, [pc, #32]	; (bcdcc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bcdac:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bcdae:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   bcdb0:	a806      	add	r0, sp, #24
   bcdb2:	f7ff feec 	bl	bcb8e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bcdb6:	a802      	add	r0, sp, #8
   bcdb8:	f7fa fabc 	bl	b7334 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bcdbc:	2200      	movs	r2, #0
   bcdbe:	4629      	mov	r1, r5
   bcdc0:	4803      	ldr	r0, [pc, #12]	; (bcdd0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   bcdc2:	f7ff fbaf 	bl	bc524 <application_thread_invoke>
   bcdc6:	e7b7      	b.n	bcd38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   bcdc8:	000bcc61 	.word	0x000bcc61
   bcdcc:	000bcee5 	.word	0x000bcee5
   bcdd0:	000bc88b 	.word	0x000bc88b

000bcdd4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   bcdd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcdd8:	b08b      	sub	sp, #44	; 0x2c
   bcdda:	4605      	mov	r5, r0
   bcddc:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   bcde0:	460f      	mov	r7, r1
   bcde2:	4690      	mov	r8, r2
   bcde4:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bcde6:	f7ff fb0d 	bl	bc404 <spark_cloud_flag_connected>
   bcdea:	ae07      	add	r6, sp, #28
    if (!connected()) {
   bcdec:	4683      	mov	fp, r0
   bcdee:	bb38      	cbnz	r0, bce40 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   bcdf0:	f64f 732e 	movw	r3, #65326	; 0xff2e
   bcdf4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bcdf6:	a905      	add	r1, sp, #20
   bcdf8:	4630      	mov	r0, r6
   bcdfa:	f8ad 3018 	strh.w	r3, [sp, #24]
   bcdfe:	f7ff feb9 	bl	bcb74 <_ZN8particle5ErrorC1EOS0_>
   bce02:	2014      	movs	r0, #20
   bce04:	f7f7 f947 	bl	b4096 <_Znwj>
   bce08:	4604      	mov	r4, r0
   bce0a:	b148      	cbz	r0, bce20 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   bce0c:	2302      	movs	r3, #2
   bce0e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bce10:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bce12:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bce16:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   bce18:	4631      	mov	r1, r6
   bce1a:	300c      	adds	r0, #12
   bce1c:	f7ff feaa 	bl	bcb74 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bce20:	4628      	mov	r0, r5
	: __shared_count(__p)
   bce22:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bce24:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   bce28:	f7ff ff32 	bl	bcc90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bce2c:	4630      	mov	r0, r6
   bce2e:	f7ff feae 	bl	bcb8e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   bce32:	a805      	add	r0, sp, #20
   bce34:	f7ff feab 	bl	bcb8e <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   bce38:	4628      	mov	r0, r5
   bce3a:	b00b      	add	sp, #44	; 0x2c
   bce3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   bce40:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   bce42:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   bce44:	2014      	movs	r0, #20
   bce46:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   bce4a:	9307      	str	r3, [sp, #28]
   bce4c:	f7f7 f923 	bl	b4096 <_Znwj>
   bce50:	4601      	mov	r1, r0
   bce52:	b118      	cbz	r0, bce5c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bce54:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bce58:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bce5a:	7044      	strb	r4, [r0, #1]
   bce5c:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bce5e:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   bce60:	f7ff ff16 	bl	bcc90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   bce64:	4b1e      	ldr	r3, [pc, #120]	; (bcee0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   bce66:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   bce68:	2008      	movs	r0, #8
   bce6a:	f7f7 f914 	bl	b4096 <_Znwj>
   bce6e:	4604      	mov	r4, r0
   bce70:	b110      	cbz	r0, bce78 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   bce72:	a903      	add	r1, sp, #12
   bce74:	f7ff feb5 	bl	bcbe2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bce78:	9600      	str	r6, [sp, #0]
   bce7a:	fa5f f38a 	uxtb.w	r3, sl
   bce7e:	464a      	mov	r2, r9
   bce80:	4641      	mov	r1, r8
   bce82:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   bce84:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bce86:	f7ff fac5 	bl	bc414 <spark_send_event>
   bce8a:	b9b8      	cbnz	r0, bcebc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   bce8c:	9b03      	ldr	r3, [sp, #12]
   bce8e:	785b      	ldrb	r3, [r3, #1]
   bce90:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   bce94:	b993      	cbnz	r3, bcebc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   bce96:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   bce9a:	a905      	add	r1, sp, #20
   bce9c:	a803      	add	r0, sp, #12
   bce9e:	9205      	str	r2, [sp, #20]
   bcea0:	f8ad 3018 	strh.w	r3, [sp, #24]
   bcea4:	f7ff ff18 	bl	bccd8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bcea8:	a805      	add	r0, sp, #20
   bceaa:	f7ff fe70 	bl	bcb8e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   bceae:	a805      	add	r0, sp, #20
   bceb0:	9909      	ldr	r1, [sp, #36]	; 0x24
   bceb2:	f7ff fe9f 	bl	bcbf4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   bceb6:	a806      	add	r0, sp, #24
   bceb8:	f7ff fba4 	bl	bc604 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bcebc:	a903      	add	r1, sp, #12
   bcebe:	a805      	add	r0, sp, #20
   bcec0:	f7ff fe8f 	bl	bcbe2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bcec4:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bcec6:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bcec8:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   bceca:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   bcecc:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bcece:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   bced0:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   bced2:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   bced4:	f7ff fb96 	bl	bc604 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bced8:	a804      	add	r0, sp, #16
   bceda:	f7ff fb93 	bl	bc604 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   bcede:	e7ab      	b.n	bce38 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   bcee0:	000bcf61 	.word	0x000bcf61

000bcee4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   bcee4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bcee6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bcee8:	4605      	mov	r5, r0
	switch (__op)
   bceea:	d103      	bne.n	bcef4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bceec:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bceee:	6003      	str	r3, [r0, #0]
      }
   bcef0:	2000      	movs	r0, #0
   bcef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   bcef4:	2a02      	cmp	r2, #2
   bcef6:	d010      	beq.n	bcf1a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   bcef8:	2a03      	cmp	r2, #3
   bcefa:	d1f9      	bne.n	bcef0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bcefc:	6804      	ldr	r4, [r0, #0]
   bcefe:	2c00      	cmp	r4, #0
   bcf00:	d0f6      	beq.n	bcef0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   bcf02:	f104 0010 	add.w	r0, r4, #16
   bcf06:	f7ff fe42 	bl	bcb8e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bcf0a:	4620      	mov	r0, r4
   bcf0c:	f7fa fa12 	bl	b7334 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bcf10:	2118      	movs	r1, #24
   bcf12:	4620      	mov	r0, r4
   bcf14:	f7f7 f8c5 	bl	b40a2 <_ZdlPvj>
   bcf18:	e7ea      	b.n	bcef0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bcf1a:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   bcf1c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bcf1e:	f7f7 f8ba 	bl	b4096 <_Znwj>
   bcf22:	4604      	mov	r4, r0
   bcf24:	b150      	cbz	r0, bcf3c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   bcf26:	4631      	mov	r1, r6
   bcf28:	f7ff fec6 	bl	bccb8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bcf2c:	6930      	ldr	r0, [r6, #16]
   bcf2e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bcf32:	b108      	cbz	r0, bcf38 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   bcf34:	f001 fca8 	bl	be888 <strdup>
        type_(type) {
   bcf38:	6120      	str	r0, [r4, #16]
   bcf3a:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   bcf3c:	602c      	str	r4, [r5, #0]
	}
   bcf3e:	e7d7      	b.n	bcef0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000bcf40 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   bcf40:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bcf42:	2300      	movs	r3, #0
   bcf44:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bcf46:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bcf48:	4604      	mov	r4, r0
   bcf4a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bcf4c:	b12b      	cbz	r3, bcf5a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bcf4e:	2202      	movs	r2, #2
   bcf50:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bcf52:	68eb      	ldr	r3, [r5, #12]
   bcf54:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bcf56:	68ab      	ldr	r3, [r5, #8]
   bcf58:	60a3      	str	r3, [r4, #8]
    }
   bcf5a:	4620      	mov	r0, r4
   bcf5c:	bd38      	pop	{r3, r4, r5, pc}
	...

000bcf60 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   bcf60:	b5f0      	push	{r4, r5, r6, r7, lr}
   bcf62:	b089      	sub	sp, #36	; 0x24
   bcf64:	4604      	mov	r4, r0
   bcf66:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   bcf68:	a801      	add	r0, sp, #4
   bcf6a:	4611      	mov	r1, r2
   bcf6c:	f7ff fe42 	bl	bcbf4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   bcf70:	b1a4      	cbz	r4, bcf9c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   bcf72:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bcf74:	b11d      	cbz	r5, bcf7e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   bcf76:	4628      	mov	r0, r5
   bcf78:	f001 fc86 	bl	be888 <strdup>
   bcf7c:	4605      	mov	r5, r0
   bcf7e:	a801      	add	r0, sp, #4
   bcf80:	a903      	add	r1, sp, #12
        type_(type) {
   bcf82:	9503      	str	r5, [sp, #12]
   bcf84:	f8ad 4010 	strh.w	r4, [sp, #16]
   bcf88:	f7ff fea6 	bl	bccd8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bcf8c:	a803      	add	r0, sp, #12
   bcf8e:	f7ff fdfe 	bl	bcb8e <_ZN8particle5ErrorD1Ev>
   bcf92:	a802      	add	r0, sp, #8
   bcf94:	f7ff fb36 	bl	bc604 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bcf98:	b009      	add	sp, #36	; 0x24
   bcf9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   bcf9c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bcf9e:	2301      	movs	r3, #1
   bcfa0:	e8d5 2f4f 	ldrexb	r2, [r5]
   bcfa4:	2a00      	cmp	r2, #0
   bcfa6:	d103      	bne.n	bcfb0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   bcfa8:	e8c5 3f41 	strexb	r1, r3, [r5]
   bcfac:	2900      	cmp	r1, #0
   bcfae:	d1f7      	bne.n	bcfa0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   bcfb0:	d1ef      	bne.n	bcf92 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   bcfb2:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   bcfb4:	f3bf 8f5b 	dmb	ish
   bcfb8:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bcfba:	1d2b      	adds	r3, r5, #4
   bcfbc:	f3bf 8f5b 	dmb	ish
   bcfc0:	e853 6f00 	ldrex	r6, [r3]
   bcfc4:	e843 4200 	strex	r2, r4, [r3]
   bcfc8:	2a00      	cmp	r2, #0
   bcfca:	d1f9      	bne.n	bcfc0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   bcfcc:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bcfd0:	2e00      	cmp	r6, #0
   bcfd2:	d0de      	beq.n	bcf92 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   bcfd4:	4620      	mov	r0, r4
   bcfd6:	f7ff fa9d 	bl	bc514 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bcfda:	4607      	mov	r7, r0
   bcfdc:	b160      	cbz	r0, bcff8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bcfde:	f105 010c 	add.w	r1, r5, #12
   bcfe2:	4630      	mov	r0, r6
   bcfe4:	f7ff fe43 	bl	bcc6e <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   bcfe8:	4630      	mov	r0, r6
   bcfea:	f7fa f9a3 	bl	b7334 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bcfee:	2110      	movs	r1, #16
   bcff0:	4630      	mov	r0, r6
   bcff2:	f7f7 f856 	bl	b40a2 <_ZdlPvj>
   bcff6:	e7cc      	b.n	bcf92 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bcff8:	4631      	mov	r1, r6
   bcffa:	a803      	add	r0, sp, #12
   bcffc:	f7ff ffa0 	bl	bcf40 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bd000:	7b2b      	ldrb	r3, [r5, #12]
   bd002:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bd006:	2010      	movs	r0, #16
   bd008:	f7f7 f845 	bl	b4096 <_Znwj>
   bd00c:	4605      	mov	r5, r0
   bd00e:	b1d0      	cbz	r0, bd046 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   bd010:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bd012:	2014      	movs	r0, #20
   bd014:	f7f7 f83f 	bl	b4096 <_Znwj>
   bd018:	4604      	mov	r4, r0
   bd01a:	b178      	cbz	r0, bd03c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   bd01c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bd01e:	4601      	mov	r1, r0
   bd020:	a803      	add	r0, sp, #12
   bd022:	f7ff fe02 	bl	bcc2a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bd026:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bd028:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bd02a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bd02c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   bd02e:	9205      	str	r2, [sp, #20]
   bd030:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bd032:	60e3      	str	r3, [r4, #12]
   bd034:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   bd038:	9206      	str	r2, [sp, #24]
   bd03a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   bd03c:	4b06      	ldr	r3, [pc, #24]	; (bd058 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   bd03e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bd040:	4b06      	ldr	r3, [pc, #24]	; (bd05c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bd042:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bd044:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   bd046:	a803      	add	r0, sp, #12
   bd048:	f7fa f974 	bl	b7334 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bd04c:	2200      	movs	r2, #0
   bd04e:	4629      	mov	r1, r5
   bd050:	4803      	ldr	r0, [pc, #12]	; (bd060 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   bd052:	f7ff fa67 	bl	bc524 <application_thread_invoke>
   bd056:	e7c7      	b.n	bcfe8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   bd058:	000bcc81 	.word	0x000bcc81
   bd05c:	000bd065 	.word	0x000bd065
   bd060:	000bc88b 	.word	0x000bc88b

000bd064 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   bd064:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bd066:	b570      	push	{r4, r5, r6, lr}
   bd068:	4604      	mov	r4, r0
	switch (__op)
   bd06a:	d103      	bne.n	bd074 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bd06c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bd06e:	6003      	str	r3, [r0, #0]
      }
   bd070:	2000      	movs	r0, #0
   bd072:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   bd074:	2a02      	cmp	r2, #2
   bd076:	d00c      	beq.n	bd092 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   bd078:	2a03      	cmp	r2, #3
   bd07a:	d1f9      	bne.n	bd070 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bd07c:	6804      	ldr	r4, [r0, #0]
   bd07e:	2c00      	cmp	r4, #0
   bd080:	d0f6      	beq.n	bd070 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   bd082:	4620      	mov	r0, r4
   bd084:	f7fa f956 	bl	b7334 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bd088:	2114      	movs	r1, #20
   bd08a:	4620      	mov	r0, r4
   bd08c:	f7f7 f809 	bl	b40a2 <_ZdlPvj>
   bd090:	e7ee      	b.n	bd070 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bd092:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   bd094:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bd096:	f7f6 fffe 	bl	b4096 <_Znwj>
   bd09a:	4605      	mov	r5, r0
   bd09c:	b120      	cbz	r0, bd0a8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   bd09e:	4631      	mov	r1, r6
   bd0a0:	f7ff ff4e 	bl	bcf40 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   bd0a4:	7c33      	ldrb	r3, [r6, #16]
   bd0a6:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   bd0a8:	6025      	str	r5, [r4, #0]
	}
   bd0aa:	e7e1      	b.n	bd070 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000bd0ac <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bd0ac:	4b01      	ldr	r3, [pc, #4]	; (bd0b4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bd0ae:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bd0b0:	4770      	bx	lr
   bd0b2:	bf00      	nop
   bd0b4:	2003a248 	.word	0x2003a248

000bd0b8 <serialEventRun>:
{
   bd0b8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bd0ba:	4b0b      	ldr	r3, [pc, #44]	; (bd0e8 <serialEventRun+0x30>)
   bd0bc:	b143      	cbz	r3, bd0d0 <serialEventRun+0x18>
   bd0be:	f7ff fcad 	bl	bca1c <_Z16_fetch_usbserialv>
   bd0c2:	6803      	ldr	r3, [r0, #0]
   bd0c4:	691b      	ldr	r3, [r3, #16]
   bd0c6:	4798      	blx	r3
   bd0c8:	2800      	cmp	r0, #0
   bd0ca:	dd01      	ble.n	bd0d0 <serialEventRun+0x18>
        serialEvent();
   bd0cc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bd0d0:	4b06      	ldr	r3, [pc, #24]	; (bd0ec <serialEventRun+0x34>)
   bd0d2:	b143      	cbz	r3, bd0e6 <serialEventRun+0x2e>
   bd0d4:	f000 f9b8 	bl	bd448 <_Z22__fetch_global_Serial1v>
   bd0d8:	6803      	ldr	r3, [r0, #0]
   bd0da:	691b      	ldr	r3, [r3, #16]
   bd0dc:	4798      	blx	r3
   bd0de:	2800      	cmp	r0, #0
   bd0e0:	dd01      	ble.n	bd0e6 <serialEventRun+0x2e>
        serialEvent1();
   bd0e2:	f3af 8000 	nop.w
}
   bd0e6:	bd08      	pop	{r3, pc}
	...

000bd0f0 <_post_loop>:
{
   bd0f0:	b508      	push	{r3, lr}
	serialEventRun();
   bd0f2:	f7ff ffe1 	bl	bd0b8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bd0f6:	f7ff f96d 	bl	bc3d4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bd0fa:	4b01      	ldr	r3, [pc, #4]	; (bd100 <_post_loop+0x10>)
   bd0fc:	6018      	str	r0, [r3, #0]
}
   bd0fe:	bd08      	pop	{r3, pc}
   bd100:	2003e740 	.word	0x2003e740

000bd104 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bd104:	4805      	ldr	r0, [pc, #20]	; (bd11c <_Z33system_initialize_user_backup_ramv+0x18>)
   bd106:	4a06      	ldr	r2, [pc, #24]	; (bd120 <_Z33system_initialize_user_backup_ramv+0x1c>)
   bd108:	4906      	ldr	r1, [pc, #24]	; (bd124 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bd10a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bd10c:	1a12      	subs	r2, r2, r0
   bd10e:	f001 fb44 	bl	be79a <memcpy>
    __backup_sram_signature = signature;
   bd112:	4b05      	ldr	r3, [pc, #20]	; (bd128 <_Z33system_initialize_user_backup_ramv+0x24>)
   bd114:	4a05      	ldr	r2, [pc, #20]	; (bd12c <_Z33system_initialize_user_backup_ramv+0x28>)
   bd116:	601a      	str	r2, [r3, #0]
}
   bd118:	bd08      	pop	{r3, pc}
   bd11a:	bf00      	nop
   bd11c:	2003f400 	.word	0x2003f400
   bd120:	2003f404 	.word	0x2003f404
   bd124:	000cc17c 	.word	0x000cc17c
   bd128:	2003f400 	.word	0x2003f400
   bd12c:	9a271c1e 	.word	0x9a271c1e

000bd130 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bd130:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bd132:	2300      	movs	r3, #0
   bd134:	9300      	str	r3, [sp, #0]
   bd136:	461a      	mov	r2, r3
   bd138:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bd13c:	f7ff fa04 	bl	bc548 <system_ctrl_set_result>
}
   bd140:	b003      	add	sp, #12
   bd142:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bd148 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bd148:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bd14a:	8843      	ldrh	r3, [r0, #2]
   bd14c:	2b0a      	cmp	r3, #10
   bd14e:	d008      	beq.n	bd162 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bd150:	2b50      	cmp	r3, #80	; 0x50
   bd152:	d10b      	bne.n	bd16c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bd154:	4b09      	ldr	r3, [pc, #36]	; (bd17c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bd156:	681b      	ldr	r3, [r3, #0]
   bd158:	b14b      	cbz	r3, bd16e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bd15a:	b003      	add	sp, #12
   bd15c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bd160:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bd162:	f7ff ffe5 	bl	bd130 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bd166:	b003      	add	sp, #12
   bd168:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bd16c:	2300      	movs	r3, #0
   bd16e:	9300      	str	r3, [sp, #0]
   bd170:	461a      	mov	r2, r3
   bd172:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bd176:	f7ff f9e7 	bl	bc548 <system_ctrl_set_result>
}
   bd17a:	e7f4      	b.n	bd166 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bd17c:	2003e6f0 	.word	0x2003e6f0

000bd180 <module_user_init_hook>:
{
   bd180:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bd182:	4812      	ldr	r0, [pc, #72]	; (bd1cc <module_user_init_hook+0x4c>)
   bd184:	2100      	movs	r1, #0
   bd186:	f7ff fa21 	bl	bc5cc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bd18a:	4b11      	ldr	r3, [pc, #68]	; (bd1d0 <module_user_init_hook+0x50>)
   bd18c:	681a      	ldr	r2, [r3, #0]
   bd18e:	4b11      	ldr	r3, [pc, #68]	; (bd1d4 <module_user_init_hook+0x54>)
   bd190:	429a      	cmp	r2, r3
   bd192:	4b11      	ldr	r3, [pc, #68]	; (bd1d8 <module_user_init_hook+0x58>)
   bd194:	bf0c      	ite	eq
   bd196:	2201      	moveq	r2, #1
   bd198:	2200      	movne	r2, #0
   bd19a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bd19c:	d001      	beq.n	bd1a2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bd19e:	f7ff ffb1 	bl	bd104 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bd1a2:	f7ff f907 	bl	bc3b4 <HAL_RNG_GetRandomNumber>
   bd1a6:	4604      	mov	r4, r0
    srand(seed);
   bd1a8:	f001 fb36 	bl	be818 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bd1ac:	4b0b      	ldr	r3, [pc, #44]	; (bd1dc <module_user_init_hook+0x5c>)
   bd1ae:	b113      	cbz	r3, bd1b6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bd1b0:	4620      	mov	r0, r4
   bd1b2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bd1b6:	2100      	movs	r1, #0
   bd1b8:	4808      	ldr	r0, [pc, #32]	; (bd1dc <module_user_init_hook+0x5c>)
   bd1ba:	f7ff f93b 	bl	bc434 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bd1be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bd1c2:	4807      	ldr	r0, [pc, #28]	; (bd1e0 <module_user_init_hook+0x60>)
   bd1c4:	2100      	movs	r1, #0
   bd1c6:	f7ff b9b5 	b.w	bc534 <system_ctrl_set_app_request_handler>
   bd1ca:	bf00      	nop
   bd1cc:	000bd0ad 	.word	0x000bd0ad
   bd1d0:	2003f400 	.word	0x2003f400
   bd1d4:	9a271c1e 	.word	0x9a271c1e
   bd1d8:	2003e6ec 	.word	0x2003e6ec
   bd1dc:	00000000 	.word	0x00000000
   bd1e0:	000bd149 	.word	0x000bd149

000bd1e4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   bd1e4:	4b01      	ldr	r3, [pc, #4]	; (bd1ec <_GLOBAL__sub_I_RGB+0x8>)
   bd1e6:	2200      	movs	r2, #0
   bd1e8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   bd1ea:	4770      	bx	lr
   bd1ec:	2003e6f4 	.word	0x2003e6f4

000bd1f0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   bd1f0:	4b02      	ldr	r3, [pc, #8]	; (bd1fc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   bd1f2:	681a      	ldr	r2, [r3, #0]
   bd1f4:	4b02      	ldr	r3, [pc, #8]	; (bd200 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   bd1f6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   bd1f8:	4770      	bx	lr
   bd1fa:	bf00      	nop
   bd1fc:	2003a240 	.word	0x2003a240
   bd200:	2003e704 	.word	0x2003e704

000bd204 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   bd204:	4b01      	ldr	r3, [pc, #4]	; (bd20c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   bd206:	4a02      	ldr	r2, [pc, #8]	; (bd210 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   bd208:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   bd20a:	4770      	bx	lr
   bd20c:	2003e708 	.word	0x2003e708
   bd210:	000cbc44 	.word	0x000cbc44

000bd214 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   bd214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bd216:	4606      	mov	r6, r0
   bd218:	460d      	mov	r5, r1
  size_t n = 0;
   bd21a:	188f      	adds	r7, r1, r2
   bd21c:	2400      	movs	r4, #0
  while (size--) {
   bd21e:	42bd      	cmp	r5, r7
   bd220:	d00c      	beq.n	bd23c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   bd222:	6833      	ldr	r3, [r6, #0]
   bd224:	f815 1b01 	ldrb.w	r1, [r5], #1
   bd228:	689b      	ldr	r3, [r3, #8]
   bd22a:	4630      	mov	r0, r6
   bd22c:	4798      	blx	r3
     if (chunk>=0)
   bd22e:	1e03      	subs	r3, r0, #0
   bd230:	db01      	blt.n	bd236 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   bd232:	441c      	add	r4, r3
  while (size--) {
   bd234:	e7f3      	b.n	bd21e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   bd236:	2c00      	cmp	r4, #0
   bd238:	bf08      	it	eq
   bd23a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   bd23c:	4620      	mov	r0, r4
   bd23e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bd240 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   bd240:	b513      	push	{r0, r1, r4, lr}
   bd242:	4604      	mov	r4, r0
    }
   bd244:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   bd246:	b159      	cbz	r1, bd260 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   bd248:	9101      	str	r1, [sp, #4]
   bd24a:	f001 fb3a 	bl	be8c2 <strlen>
   bd24e:	6823      	ldr	r3, [r4, #0]
   bd250:	9901      	ldr	r1, [sp, #4]
   bd252:	68db      	ldr	r3, [r3, #12]
   bd254:	4602      	mov	r2, r0
   bd256:	4620      	mov	r0, r4
    }
   bd258:	b002      	add	sp, #8
   bd25a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   bd25e:	4718      	bx	r3
    }
   bd260:	b002      	add	sp, #8
   bd262:	bd10      	pop	{r4, pc}

000bd264 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   bd264:	6803      	ldr	r3, [r0, #0]
   bd266:	689b      	ldr	r3, [r3, #8]
   bd268:	4718      	bx	r3

000bd26a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   bd26a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   bd26c:	210d      	movs	r1, #13
{
   bd26e:	4605      	mov	r5, r0
  size_t n = print('\r');
   bd270:	f7ff fff8 	bl	bd264 <_ZN5Print5printEc>
  n += print('\n');
   bd274:	210a      	movs	r1, #10
  size_t n = print('\r');
   bd276:	4604      	mov	r4, r0
  n += print('\n');
   bd278:	4628      	mov	r0, r5
   bd27a:	f7ff fff3 	bl	bd264 <_ZN5Print5printEc>
  return n;
}
   bd27e:	4420      	add	r0, r4
   bd280:	bd38      	pop	{r3, r4, r5, pc}

000bd282 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   bd282:	b538      	push	{r3, r4, r5, lr}
   bd284:	4605      	mov	r5, r0
  return write(str);
   bd286:	f7ff ffdb 	bl	bd240 <_ZN5Print5writeEPKc>
   bd28a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   bd28c:	4628      	mov	r0, r5
   bd28e:	f7ff ffec 	bl	bd26a <_ZN5Print7printlnEv>
  return n;
}
   bd292:	4420      	add	r0, r4
   bd294:	bd38      	pop	{r3, r4, r5, pc}

000bd296 <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
   bd296:	b538      	push	{r3, r4, r5, lr}
   bd298:	4605      	mov	r5, r0
  size_t n = print(c);
   bd29a:	f7ff ffe3 	bl	bd264 <_ZN5Print5printEc>
   bd29e:	4604      	mov	r4, r0
  n += println();
   bd2a0:	4628      	mov	r0, r5
   bd2a2:	f7ff ffe2 	bl	bd26a <_ZN5Print7printlnEv>
  return n;
}
   bd2a6:	4420      	add	r0, r4
   bd2a8:	bd38      	pop	{r3, r4, r5, pc}

000bd2aa <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   bd2aa:	b530      	push	{r4, r5, lr}
   bd2ac:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   bd2ae:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   bd2b0:	2a01      	cmp	r2, #1
  *str = '\0';
   bd2b2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   bd2b6:	bf98      	it	ls
   bd2b8:	220a      	movls	r2, #10
   bd2ba:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   bd2bc:	460d      	mov	r5, r1
   bd2be:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   bd2c2:	fb01 5312 	mls	r3, r1, r2, r5
   bd2c6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bd2ca:	2b09      	cmp	r3, #9
   bd2cc:	bf94      	ite	ls
   bd2ce:	3330      	addls	r3, #48	; 0x30
   bd2d0:	3337      	addhi	r3, #55	; 0x37
   bd2d2:	b2db      	uxtb	r3, r3
  } while(n);
   bd2d4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bd2d6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   bd2da:	d9ef      	bls.n	bd2bc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   bd2dc:	4621      	mov	r1, r4
   bd2de:	f7ff ffaf 	bl	bd240 <_ZN5Print5writeEPKc>
}
   bd2e2:	b00b      	add	sp, #44	; 0x2c
   bd2e4:	bd30      	pop	{r4, r5, pc}
	...

000bd2e8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   bd2e8:	4802      	ldr	r0, [pc, #8]	; (bd2f4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   bd2ea:	2300      	movs	r3, #0
   bd2ec:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   bd2ee:	f7ff b859 	b.w	bc3a4 <os_mutex_recursive_create>
   bd2f2:	bf00      	nop
   bd2f4:	2003e70c 	.word	0x2003e70c

000bd2f8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   bd2f8:	4b05      	ldr	r3, [pc, #20]	; (bd310 <_GLOBAL__sub_I_System+0x18>)
   bd2fa:	2202      	movs	r2, #2
   bd2fc:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   bd2fe:	4b05      	ldr	r3, [pc, #20]	; (bd314 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   bd300:	4a05      	ldr	r2, [pc, #20]	; (bd318 <_GLOBAL__sub_I_System+0x20>)
   bd302:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   bd304:	2000      	movs	r0, #0
   bd306:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   bd30a:	f7ff b8fb 	b.w	bc504 <set_system_mode>
   bd30e:	bf00      	nop
   bd310:	2003e71c 	.word	0x2003e71c
   bd314:	2003e710 	.word	0x2003e710
   bd318:	ffff0000 	.word	0xffff0000

000bd31c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bd31c:	2200      	movs	r2, #0
   bd31e:	6840      	ldr	r0, [r0, #4]
   bd320:	4611      	mov	r1, r2
   bd322:	f7ff b8c7 	b.w	bc4b4 <network_listening>

000bd326 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bd326:	2200      	movs	r2, #0
   bd328:	6840      	ldr	r0, [r0, #4]
   bd32a:	4611      	mov	r1, r2
   bd32c:	f7ff b8d2 	b.w	bc4d4 <network_get_listen_timeout>

000bd330 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bd330:	6840      	ldr	r0, [r0, #4]
   bd332:	2200      	movs	r2, #0
   bd334:	f7ff b8c6 	b.w	bc4c4 <network_set_listen_timeout>

000bd338 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bd338:	6840      	ldr	r0, [r0, #4]
   bd33a:	2200      	movs	r2, #0
   bd33c:	f081 0101 	eor.w	r1, r1, #1
   bd340:	f7ff b8b0 	b.w	bc4a4 <network_listen>

000bd344 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bd344:	2300      	movs	r3, #0
   bd346:	6840      	ldr	r0, [r0, #4]
   bd348:	461a      	mov	r2, r3
   bd34a:	4619      	mov	r1, r3
   bd34c:	f7ff b8a2 	b.w	bc494 <network_off>

000bd350 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bd350:	2300      	movs	r3, #0
   bd352:	6840      	ldr	r0, [r0, #4]
   bd354:	461a      	mov	r2, r3
   bd356:	4619      	mov	r1, r3
   bd358:	f7ff b894 	b.w	bc484 <network_on>

000bd35c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   bd35c:	2200      	movs	r2, #0
   bd35e:	6840      	ldr	r0, [r0, #4]
   bd360:	4611      	mov	r1, r2
   bd362:	f7ff b887 	b.w	bc474 <network_ready>

000bd366 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bd366:	2200      	movs	r2, #0
   bd368:	6840      	ldr	r0, [r0, #4]
   bd36a:	4611      	mov	r1, r2
   bd36c:	f7ff b872 	b.w	bc454 <network_connecting>

000bd370 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bd370:	6840      	ldr	r0, [r0, #4]
   bd372:	2200      	movs	r2, #0
   bd374:	2102      	movs	r1, #2
   bd376:	f7ff b875 	b.w	bc464 <network_disconnect>

000bd37a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bd37a:	2300      	movs	r3, #0
   bd37c:	6840      	ldr	r0, [r0, #4]
   bd37e:	461a      	mov	r2, r3
   bd380:	f7ff b860 	b.w	bc444 <network_connect>

000bd384 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   bd384:	4b02      	ldr	r3, [pc, #8]	; (bd390 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   bd386:	2203      	movs	r2, #3
   bd388:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   bd38a:	4a02      	ldr	r2, [pc, #8]	; (bd394 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   bd38c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   bd38e:	4770      	bx	lr
   bd390:	2003e720 	.word	0x2003e720
   bd394:	000cbc50 	.word	0x000cbc50

000bd398 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bd398:	4770      	bx	lr
	...

000bd39c <_Z17acquireWireBufferv>:
{
   bd39c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bd39e:	2520      	movs	r5, #32
   bd3a0:	2314      	movs	r3, #20
{
   bd3a2:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bd3a4:	6003      	str	r3, [r0, #0]
   bd3a6:	6085      	str	r5, [r0, #8]
   bd3a8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bd3aa:	4906      	ldr	r1, [pc, #24]	; (bd3c4 <_Z17acquireWireBufferv+0x28>)
   bd3ac:	4628      	mov	r0, r5
   bd3ae:	f000 f86f 	bl	bd490 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bd3b2:	4904      	ldr	r1, [pc, #16]	; (bd3c4 <_Z17acquireWireBufferv+0x28>)
	};
   bd3b4:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bd3b6:	4628      	mov	r0, r5
   bd3b8:	f000 f86a 	bl	bd490 <_ZnajRKSt9nothrow_t>
	};
   bd3bc:	60e0      	str	r0, [r4, #12]
}
   bd3be:	4620      	mov	r0, r4
   bd3c0:	bd38      	pop	{r3, r4, r5, pc}
   bd3c2:	bf00      	nop
   bd3c4:	000cbc84 	.word	0x000cbc84

000bd3c8 <_Z19__fetch_global_Wirev>:
{
   bd3c8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bd3ca:	4d0e      	ldr	r5, [pc, #56]	; (bd404 <_Z19__fetch_global_Wirev+0x3c>)
   bd3cc:	7829      	ldrb	r1, [r5, #0]
   bd3ce:	f3bf 8f5b 	dmb	ish
   bd3d2:	f011 0401 	ands.w	r4, r1, #1
{
   bd3d6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bd3d8:	d111      	bne.n	bd3fe <_Z19__fetch_global_Wirev+0x36>
   bd3da:	4628      	mov	r0, r5
   bd3dc:	f7f6 fe63 	bl	b40a6 <__cxa_guard_acquire>
   bd3e0:	b168      	cbz	r0, bd3fe <_Z19__fetch_global_Wirev+0x36>
   bd3e2:	a801      	add	r0, sp, #4
   bd3e4:	f7ff ffda 	bl	bd39c <_Z17acquireWireBufferv>
   bd3e8:	aa01      	add	r2, sp, #4
   bd3ea:	4621      	mov	r1, r4
   bd3ec:	4806      	ldr	r0, [pc, #24]	; (bd408 <_Z19__fetch_global_Wirev+0x40>)
   bd3ee:	f7ff fa2d 	bl	bc84c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bd3f2:	4628      	mov	r0, r5
   bd3f4:	f7f6 fe5c 	bl	b40b0 <__cxa_guard_release>
   bd3f8:	4804      	ldr	r0, [pc, #16]	; (bd40c <_Z19__fetch_global_Wirev+0x44>)
   bd3fa:	f001 f9a9 	bl	be750 <atexit>
	return wire;
}
   bd3fe:	4802      	ldr	r0, [pc, #8]	; (bd408 <_Z19__fetch_global_Wirev+0x40>)
   bd400:	b007      	add	sp, #28
   bd402:	bd30      	pop	{r4, r5, pc}
   bd404:	2003e728 	.word	0x2003e728
   bd408:	2003e72c 	.word	0x2003e72c
   bd40c:	000bd399 	.word	0x000bd399

000bd410 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bd410:	4770      	bx	lr
	...

000bd414 <_Z20acquireSerial1Bufferv>:
{
   bd414:	b538      	push	{r3, r4, r5, lr}
   bd416:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bd418:	2514      	movs	r5, #20
   bd41a:	462a      	mov	r2, r5
   bd41c:	2100      	movs	r1, #0
   bd41e:	f001 f9e4 	bl	be7ea <memset>
   bd422:	8025      	strh	r5, [r4, #0]
   bd424:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bd426:	4907      	ldr	r1, [pc, #28]	; (bd444 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bd428:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bd42a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bd42c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bd42e:	f000 f82f 	bl	bd490 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bd432:	4904      	ldr	r1, [pc, #16]	; (bd444 <_Z20acquireSerial1Bufferv+0x30>)
    };
   bd434:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bd436:	4628      	mov	r0, r5
   bd438:	f000 f82a 	bl	bd490 <_ZnajRKSt9nothrow_t>
    };
   bd43c:	60e0      	str	r0, [r4, #12]
}
   bd43e:	4620      	mov	r0, r4
   bd440:	bd38      	pop	{r3, r4, r5, pc}
   bd442:	bf00      	nop
   bd444:	000cbc84 	.word	0x000cbc84

000bd448 <_Z22__fetch_global_Serial1v>:
{
   bd448:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bd44a:	4d0e      	ldr	r5, [pc, #56]	; (bd484 <_Z22__fetch_global_Serial1v+0x3c>)
   bd44c:	7829      	ldrb	r1, [r5, #0]
   bd44e:	f3bf 8f5b 	dmb	ish
   bd452:	f011 0401 	ands.w	r4, r1, #1
{
   bd456:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bd458:	d111      	bne.n	bd47e <_Z22__fetch_global_Serial1v+0x36>
   bd45a:	4628      	mov	r0, r5
   bd45c:	f7f6 fe23 	bl	b40a6 <__cxa_guard_acquire>
   bd460:	b168      	cbz	r0, bd47e <_Z22__fetch_global_Serial1v+0x36>
   bd462:	a801      	add	r0, sp, #4
   bd464:	f7ff ffd6 	bl	bd414 <_Z20acquireSerial1Bufferv>
   bd468:	aa01      	add	r2, sp, #4
   bd46a:	4621      	mov	r1, r4
   bd46c:	4806      	ldr	r0, [pc, #24]	; (bd488 <_Z22__fetch_global_Serial1v+0x40>)
   bd46e:	f7ff fa5d 	bl	bc92c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bd472:	4628      	mov	r0, r5
   bd474:	f7f6 fe1c 	bl	b40b0 <__cxa_guard_release>
   bd478:	4804      	ldr	r0, [pc, #16]	; (bd48c <_Z22__fetch_global_Serial1v+0x44>)
   bd47a:	f001 f969 	bl	be750 <atexit>
    return serial1;
}
   bd47e:	4802      	ldr	r0, [pc, #8]	; (bd488 <_Z22__fetch_global_Serial1v+0x40>)
   bd480:	b007      	add	sp, #28
   bd482:	bd30      	pop	{r4, r5, pc}
   bd484:	2003e744 	.word	0x2003e744
   bd488:	2003e748 	.word	0x2003e748
   bd48c:	000bd411 	.word	0x000bd411

000bd490 <_ZnajRKSt9nothrow_t>:
   bd490:	f7f6 be03 	b.w	b409a <_Znaj>

000bd494 <_ZSt17__throw_bad_allocv>:
   bd494:	b508      	push	{r3, lr}
   bd496:	f7ff f879 	bl	bc58c <abort>

000bd49a <_ZSt20__throw_length_errorPKc>:
   bd49a:	b508      	push	{r3, lr}
   bd49c:	f7ff f876 	bl	bc58c <abort>

000bd4a0 <floor>:
   bd4a0:	ec51 0b10 	vmov	r0, r1, d0
   bd4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bd4a6:	f3c1 530a 	ubfx	r3, r1, #20, #11
   bd4aa:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   bd4ae:	2d13      	cmp	r5, #19
   bd4b0:	ee10 6a10 	vmov	r6, s0
   bd4b4:	460c      	mov	r4, r1
   bd4b6:	dc30      	bgt.n	bd51a <floor+0x7a>
   bd4b8:	2d00      	cmp	r5, #0
   bd4ba:	db1e      	blt.n	bd4fa <floor+0x5a>
   bd4bc:	4f38      	ldr	r7, [pc, #224]	; (bd5a0 <floor+0x100>)
   bd4be:	412f      	asrs	r7, r5
   bd4c0:	ea01 0307 	and.w	r3, r1, r7
   bd4c4:	4303      	orrs	r3, r0
   bd4c6:	d02d      	beq.n	bd524 <floor+0x84>
   bd4c8:	a333      	add	r3, pc, #204	; (adr r3, bd598 <floor+0xf8>)
   bd4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   bd4ce:	f000 fa67 	bl	bd9a0 <__adddf3>
   bd4d2:	2200      	movs	r2, #0
   bd4d4:	2300      	movs	r3, #0
   bd4d6:	f000 fea9 	bl	be22c <__aeabi_dcmpgt>
   bd4da:	b148      	cbz	r0, bd4f0 <floor+0x50>
   bd4dc:	2c00      	cmp	r4, #0
   bd4de:	da04      	bge.n	bd4ea <floor+0x4a>
   bd4e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   bd4e4:	fa43 f505 	asr.w	r5, r3, r5
   bd4e8:	442c      	add	r4, r5
   bd4ea:	ea24 0407 	bic.w	r4, r4, r7
   bd4ee:	2600      	movs	r6, #0
   bd4f0:	4623      	mov	r3, r4
   bd4f2:	4632      	mov	r2, r6
   bd4f4:	ec43 2b10 	vmov	d0, r2, r3
   bd4f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bd4fa:	a327      	add	r3, pc, #156	; (adr r3, bd598 <floor+0xf8>)
   bd4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   bd500:	f000 fa4e 	bl	bd9a0 <__adddf3>
   bd504:	2200      	movs	r2, #0
   bd506:	2300      	movs	r3, #0
   bd508:	f000 fe90 	bl	be22c <__aeabi_dcmpgt>
   bd50c:	2800      	cmp	r0, #0
   bd50e:	d0ef      	beq.n	bd4f0 <floor+0x50>
   bd510:	2c00      	cmp	r4, #0
   bd512:	db29      	blt.n	bd568 <floor+0xc8>
   bd514:	2600      	movs	r6, #0
   bd516:	4634      	mov	r4, r6
   bd518:	e7ea      	b.n	bd4f0 <floor+0x50>
   bd51a:	2d33      	cmp	r5, #51	; 0x33
   bd51c:	dd05      	ble.n	bd52a <floor+0x8a>
   bd51e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   bd522:	d019      	beq.n	bd558 <floor+0xb8>
   bd524:	ec41 0b10 	vmov	d0, r0, r1
   bd528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bd52a:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   bd52e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   bd532:	40df      	lsrs	r7, r3
   bd534:	4207      	tst	r7, r0
   bd536:	d0f5      	beq.n	bd524 <floor+0x84>
   bd538:	a317      	add	r3, pc, #92	; (adr r3, bd598 <floor+0xf8>)
   bd53a:	e9d3 2300 	ldrd	r2, r3, [r3]
   bd53e:	f000 fa2f 	bl	bd9a0 <__adddf3>
   bd542:	2200      	movs	r2, #0
   bd544:	2300      	movs	r3, #0
   bd546:	f000 fe71 	bl	be22c <__aeabi_dcmpgt>
   bd54a:	2800      	cmp	r0, #0
   bd54c:	d0d0      	beq.n	bd4f0 <floor+0x50>
   bd54e:	2c00      	cmp	r4, #0
   bd550:	db13      	blt.n	bd57a <floor+0xda>
   bd552:	ea26 0607 	bic.w	r6, r6, r7
   bd556:	e7cb      	b.n	bd4f0 <floor+0x50>
   bd558:	ee10 2a10 	vmov	r2, s0
   bd55c:	460b      	mov	r3, r1
   bd55e:	f000 fa1f 	bl	bd9a0 <__adddf3>
   bd562:	ec41 0b10 	vmov	d0, r0, r1
   bd566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bd568:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
   bd56c:	4a0d      	ldr	r2, [pc, #52]	; (bd5a4 <floor+0x104>)
   bd56e:	431e      	orrs	r6, r3
   bd570:	2e00      	cmp	r6, #0
   bd572:	bf18      	it	ne
   bd574:	4614      	movne	r4, r2
   bd576:	2600      	movs	r6, #0
   bd578:	e7ba      	b.n	bd4f0 <floor+0x50>
   bd57a:	2d14      	cmp	r5, #20
   bd57c:	d008      	beq.n	bd590 <floor+0xf0>
   bd57e:	2301      	movs	r3, #1
   bd580:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   bd584:	fa03 f505 	lsl.w	r5, r3, r5
   bd588:	19ae      	adds	r6, r5, r6
   bd58a:	bf28      	it	cs
   bd58c:	18e4      	addcs	r4, r4, r3
   bd58e:	e7e0      	b.n	bd552 <floor+0xb2>
   bd590:	3401      	adds	r4, #1
   bd592:	e7de      	b.n	bd552 <floor+0xb2>
   bd594:	f3af 8000 	nop.w
   bd598:	8800759c 	.word	0x8800759c
   bd59c:	7e37e43c 	.word	0x7e37e43c
   bd5a0:	000fffff 	.word	0x000fffff
   bd5a4:	bff00000 	.word	0xbff00000

000bd5a8 <frexp>:
   bd5a8:	ec53 2b10 	vmov	r2, r3, d0
   bd5ac:	b570      	push	{r4, r5, r6, lr}
   bd5ae:	4e16      	ldr	r6, [pc, #88]	; (bd608 <frexp+0x60>)
   bd5b0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   bd5b4:	2500      	movs	r5, #0
   bd5b6:	42b1      	cmp	r1, r6
   bd5b8:	4604      	mov	r4, r0
   bd5ba:	6005      	str	r5, [r0, #0]
   bd5bc:	dc21      	bgt.n	bd602 <frexp+0x5a>
   bd5be:	ee10 6a10 	vmov	r6, s0
   bd5c2:	430e      	orrs	r6, r1
   bd5c4:	d01d      	beq.n	bd602 <frexp+0x5a>
   bd5c6:	4e11      	ldr	r6, [pc, #68]	; (bd60c <frexp+0x64>)
   bd5c8:	401e      	ands	r6, r3
   bd5ca:	4618      	mov	r0, r3
   bd5cc:	b966      	cbnz	r6, bd5e8 <frexp+0x40>
   bd5ce:	4619      	mov	r1, r3
   bd5d0:	2200      	movs	r2, #0
   bd5d2:	ee10 0a10 	vmov	r0, s0
   bd5d6:	4b0e      	ldr	r3, [pc, #56]	; (bd610 <frexp+0x68>)
   bd5d8:	f000 fb98 	bl	bdd0c <__aeabi_dmul>
   bd5dc:	f06f 0535 	mvn.w	r5, #53	; 0x35
   bd5e0:	4602      	mov	r2, r0
   bd5e2:	4608      	mov	r0, r1
   bd5e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bd5e8:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
   bd5ec:	1509      	asrs	r1, r1, #20
   bd5ee:	f420 00e0 	bic.w	r0, r0, #7340032	; 0x700000
   bd5f2:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
   bd5f6:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
   bd5fa:	4429      	add	r1, r5
   bd5fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   bd600:	6021      	str	r1, [r4, #0]
   bd602:	ec43 2b10 	vmov	d0, r2, r3
   bd606:	bd70      	pop	{r4, r5, r6, pc}
   bd608:	7fefffff 	.word	0x7fefffff
   bd60c:	7ff00000 	.word	0x7ff00000
   bd610:	43500000 	.word	0x43500000

000bd614 <round>:
   bd614:	ec53 2b10 	vmov	r2, r3, d0
   bd618:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
   bd61c:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
   bd620:	2913      	cmp	r1, #19
   bd622:	b510      	push	{r4, lr}
   bd624:	ee10 0a10 	vmov	r0, s0
   bd628:	469e      	mov	lr, r3
   bd62a:	dc22      	bgt.n	bd672 <round+0x5e>
   bd62c:	2900      	cmp	r1, #0
   bd62e:	db09      	blt.n	bd644 <round+0x30>
   bd630:	4c1f      	ldr	r4, [pc, #124]	; (bd6b0 <round+0x9c>)
   bd632:	fa44 fc01 	asr.w	ip, r4, r1
   bd636:	ea03 040c 	and.w	r4, r3, ip
   bd63a:	4320      	orrs	r0, r4
   bd63c:	d110      	bne.n	bd660 <round+0x4c>
   bd63e:	ec43 2b10 	vmov	d0, r2, r3
   bd642:	bd10      	pop	{r4, pc}
   bd644:	f003 4e00 	and.w	lr, r3, #2147483648	; 0x80000000
   bd648:	3101      	adds	r1, #1
   bd64a:	bf04      	itt	eq
   bd64c:	f04e 5e7f 	orreq.w	lr, lr, #1069547520	; 0x3fc00000
   bd650:	f44e 1e40 	orreq.w	lr, lr, #3145728	; 0x300000
   bd654:	2000      	movs	r0, #0
   bd656:	4673      	mov	r3, lr
   bd658:	4602      	mov	r2, r0
   bd65a:	ec43 2b10 	vmov	d0, r2, r3
   bd65e:	bd10      	pop	{r4, pc}
   bd660:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   bd664:	fa43 f101 	asr.w	r1, r3, r1
   bd668:	448e      	add	lr, r1
   bd66a:	ea2e 0e0c 	bic.w	lr, lr, ip
   bd66e:	2000      	movs	r0, #0
   bd670:	e7f1      	b.n	bd656 <round+0x42>
   bd672:	2933      	cmp	r1, #51	; 0x33
   bd674:	dd08      	ble.n	bd688 <round+0x74>
   bd676:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   bd67a:	d1e0      	bne.n	bd63e <round+0x2a>
   bd67c:	4619      	mov	r1, r3
   bd67e:	f000 f98f 	bl	bd9a0 <__adddf3>
   bd682:	ec41 0b10 	vmov	d0, r0, r1
   bd686:	bd10      	pop	{r4, pc}
   bd688:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
   bd68c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   bd690:	fa24 fc0c 	lsr.w	ip, r4, ip
   bd694:	ea12 0f0c 	tst.w	r2, ip
   bd698:	d0d1      	beq.n	bd63e <round+0x2a>
   bd69a:	2301      	movs	r3, #1
   bd69c:	f1c1 0133 	rsb	r1, r1, #51	; 0x33
   bd6a0:	fa03 f101 	lsl.w	r1, r3, r1
   bd6a4:	1840      	adds	r0, r0, r1
   bd6a6:	bf28      	it	cs
   bd6a8:	449e      	addcs	lr, r3
   bd6aa:	ea20 000c 	bic.w	r0, r0, ip
   bd6ae:	e7d2      	b.n	bd656 <round+0x42>
   bd6b0:	000fffff 	.word	0x000fffff

000bd6b4 <roundf>:
   bd6b4:	ee10 3a10 	vmov	r3, s0
   bd6b8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   bd6bc:	3a7f      	subs	r2, #127	; 0x7f
   bd6be:	2a16      	cmp	r2, #22
   bd6c0:	ee10 1a10 	vmov	r1, s0
   bd6c4:	dc15      	bgt.n	bd6f2 <roundf+0x3e>
   bd6c6:	2a00      	cmp	r2, #0
   bd6c8:	db0c      	blt.n	bd6e4 <roundf+0x30>
   bd6ca:	480c      	ldr	r0, [pc, #48]	; (bd6fc <roundf+0x48>)
   bd6cc:	4110      	asrs	r0, r2
   bd6ce:	4203      	tst	r3, r0
   bd6d0:	d005      	beq.n	bd6de <roundf+0x2a>
   bd6d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   bd6d6:	4113      	asrs	r3, r2
   bd6d8:	440b      	add	r3, r1
   bd6da:	ea23 0300 	bic.w	r3, r3, r0
   bd6de:	ee00 3a10 	vmov	s0, r3
   bd6e2:	4770      	bx	lr
   bd6e4:	3201      	adds	r2, #1
   bd6e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
   bd6ea:	d1f8      	bne.n	bd6de <roundf+0x2a>
   bd6ec:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
   bd6f0:	e7f5      	b.n	bd6de <roundf+0x2a>
   bd6f2:	2a80      	cmp	r2, #128	; 0x80
   bd6f4:	d1f3      	bne.n	bd6de <roundf+0x2a>
   bd6f6:	ee30 0a00 	vadd.f32	s0, s0, s0
   bd6fa:	4770      	bx	lr
   bd6fc:	007fffff 	.word	0x007fffff

000bd700 <expf>:
   bd700:	b508      	push	{r3, lr}
   bd702:	ed2d 8b02 	vpush	{d8}
   bd706:	eeb0 8a40 	vmov.f32	s16, s0
   bd70a:	f000 f837 	bl	bd77c <__ieee754_expf>
   bd70e:	4b16      	ldr	r3, [pc, #88]	; (bd768 <expf+0x68>)
   bd710:	f993 3000 	ldrsb.w	r3, [r3]
   bd714:	3301      	adds	r3, #1
   bd716:	eef0 8a40 	vmov.f32	s17, s0
   bd71a:	d012      	beq.n	bd742 <expf+0x42>
   bd71c:	eeb0 0a48 	vmov.f32	s0, s16
   bd720:	f000 f92a 	bl	bd978 <finitef>
   bd724:	b168      	cbz	r0, bd742 <expf+0x42>
   bd726:	eddf 7a11 	vldr	s15, [pc, #68]	; bd76c <expf+0x6c>
   bd72a:	eeb4 8ae7 	vcmpe.f32	s16, s15
   bd72e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bd732:	dc12      	bgt.n	bd75a <expf+0x5a>
   bd734:	eddf 7a0e 	vldr	s15, [pc, #56]	; bd770 <expf+0x70>
   bd738:	eeb4 8ae7 	vcmpe.f32	s16, s15
   bd73c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bd740:	d404      	bmi.n	bd74c <expf+0x4c>
   bd742:	eeb0 0a68 	vmov.f32	s0, s17
   bd746:	ecbd 8b02 	vpop	{d8}
   bd74a:	bd08      	pop	{r3, pc}
   bd74c:	f7fe ff2e 	bl	bc5ac <__errno>
   bd750:	2322      	movs	r3, #34	; 0x22
   bd752:	eddf 8a08 	vldr	s17, [pc, #32]	; bd774 <expf+0x74>
   bd756:	6003      	str	r3, [r0, #0]
   bd758:	e7f3      	b.n	bd742 <expf+0x42>
   bd75a:	f7fe ff27 	bl	bc5ac <__errno>
   bd75e:	2322      	movs	r3, #34	; 0x22
   bd760:	eddf 8a05 	vldr	s17, [pc, #20]	; bd778 <expf+0x78>
   bd764:	6003      	str	r3, [r0, #0]
   bd766:	e7ec      	b.n	bd742 <expf+0x42>
   bd768:	2003a244 	.word	0x2003a244
   bd76c:	42b17180 	.word	0x42b17180
   bd770:	c2cff1b5 	.word	0xc2cff1b5
   bd774:	00000000 	.word	0x00000000
   bd778:	7f800000 	.word	0x7f800000

000bd77c <__ieee754_expf>:
   bd77c:	ee10 3a10 	vmov	r3, s0
   bd780:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   bd784:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   bd788:	d855      	bhi.n	bd836 <__ieee754_expf+0xba>
   bd78a:	ea4f 71d3 	mov.w	r1, r3, lsr #31
   bd78e:	f000 8096 	beq.w	bd8be <__ieee754_expf+0x142>
   bd792:	4863      	ldr	r0, [pc, #396]	; (bd920 <__ieee754_expf+0x1a4>)
   bd794:	4283      	cmp	r3, r0
   bd796:	dc51      	bgt.n	bd83c <__ieee754_expf+0xc0>
   bd798:	2b00      	cmp	r3, #0
   bd79a:	f2c0 8089 	blt.w	bd8b0 <__ieee754_expf+0x134>
   bd79e:	4b61      	ldr	r3, [pc, #388]	; (bd924 <__ieee754_expf+0x1a8>)
   bd7a0:	429a      	cmp	r2, r3
   bd7a2:	d950      	bls.n	bd846 <__ieee754_expf+0xca>
   bd7a4:	4b60      	ldr	r3, [pc, #384]	; (bd928 <__ieee754_expf+0x1ac>)
   bd7a6:	429a      	cmp	r2, r3
   bd7a8:	f200 809c 	bhi.w	bd8e4 <__ieee754_expf+0x168>
   bd7ac:	4b5f      	ldr	r3, [pc, #380]	; (bd92c <__ieee754_expf+0x1b0>)
   bd7ae:	4a60      	ldr	r2, [pc, #384]	; (bd930 <__ieee754_expf+0x1b4>)
   bd7b0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   bd7b4:	ed93 4a00 	vldr	s8, [r3]
   bd7b8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   bd7bc:	f1c1 0301 	rsb	r3, r1, #1
   bd7c0:	ee30 4a44 	vsub.f32	s8, s0, s8
   bd7c4:	ed92 7a00 	vldr	s14, [r2]
   bd7c8:	1a5b      	subs	r3, r3, r1
   bd7ca:	ee34 0a47 	vsub.f32	s0, s8, s14
   bd7ce:	eddf 7a59 	vldr	s15, [pc, #356]	; bd934 <__ieee754_expf+0x1b8>
   bd7d2:	eddf 4a59 	vldr	s9, [pc, #356]	; bd938 <__ieee754_expf+0x1bc>
   bd7d6:	ed9f 5a59 	vldr	s10, [pc, #356]	; bd93c <__ieee754_expf+0x1c0>
   bd7da:	ed9f 6a59 	vldr	s12, [pc, #356]	; bd940 <__ieee754_expf+0x1c4>
   bd7de:	eddf 5a59 	vldr	s11, [pc, #356]	; bd944 <__ieee754_expf+0x1c8>
   bd7e2:	ee60 6a00 	vmul.f32	s13, s0, s0
   bd7e6:	eee6 4aa7 	vfma.f32	s9, s13, s15
   bd7ea:	eea4 5aa6 	vfma.f32	s10, s9, s13
   bd7ee:	eea5 6a26 	vfma.f32	s12, s10, s13
   bd7f2:	eee6 5a26 	vfma.f32	s11, s12, s13
   bd7f6:	eeb0 6a40 	vmov.f32	s12, s0
   bd7fa:	eea5 6ae6 	vfms.f32	s12, s11, s13
   bd7fe:	2b00      	cmp	r3, #0
   bd800:	d047      	beq.n	bd892 <__ieee754_expf+0x116>
   bd802:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
   bd806:	ee60 5a06 	vmul.f32	s11, s0, s12
   bd80a:	ee36 6ac6 	vsub.f32	s12, s13, s12
   bd80e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   bd812:	ee85 0a86 	vdiv.f32	s0, s11, s12
   bd816:	f113 0f7d 	cmn.w	r3, #125	; 0x7d
   bd81a:	ee37 0a40 	vsub.f32	s0, s14, s0
   bd81e:	ee30 0a44 	vsub.f32	s0, s0, s8
   bd822:	ee37 0ac0 	vsub.f32	s0, s15, s0
   bd826:	db51      	blt.n	bd8cc <__ieee754_expf+0x150>
   bd828:	ee10 2a10 	vmov	r2, s0
   bd82c:	eb02 53c3 	add.w	r3, r2, r3, lsl #23
   bd830:	ee00 3a10 	vmov	s0, r3
   bd834:	4770      	bx	lr
   bd836:	ee30 0a00 	vadd.f32	s0, s0, s0
   bd83a:	4770      	bx	lr
   bd83c:	ed9f 0a42 	vldr	s0, [pc, #264]	; bd948 <__ieee754_expf+0x1cc>
   bd840:	ee20 0a00 	vmul.f32	s0, s0, s0
   bd844:	4770      	bx	lr
   bd846:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
   bd84a:	d20a      	bcs.n	bd862 <__ieee754_expf+0xe6>
   bd84c:	eddf 7a3e 	vldr	s15, [pc, #248]	; bd948 <__ieee754_expf+0x1cc>
   bd850:	ee70 7a27 	vadd.f32	s15, s0, s15
   bd854:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   bd858:	eef4 7ac7 	vcmpe.f32	s15, s14
   bd85c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bd860:	dc5a      	bgt.n	bd918 <__ieee754_expf+0x19c>
   bd862:	ee60 7a00 	vmul.f32	s15, s0, s0
   bd866:	ed9f 7a33 	vldr	s14, [pc, #204]	; bd934 <__ieee754_expf+0x1b8>
   bd86a:	eddf 5a33 	vldr	s11, [pc, #204]	; bd938 <__ieee754_expf+0x1bc>
   bd86e:	ed9f 6a33 	vldr	s12, [pc, #204]	; bd93c <__ieee754_expf+0x1c0>
   bd872:	eddf 6a33 	vldr	s13, [pc, #204]	; bd940 <__ieee754_expf+0x1c4>
   bd876:	eee7 5a87 	vfma.f32	s11, s15, s14
   bd87a:	ed9f 7a32 	vldr	s14, [pc, #200]	; bd944 <__ieee754_expf+0x1c8>
   bd87e:	eea7 6aa5 	vfma.f32	s12, s15, s11
   bd882:	eee7 6a86 	vfma.f32	s13, s15, s12
   bd886:	eeb0 6a40 	vmov.f32	s12, s0
   bd88a:	eea7 7aa6 	vfma.f32	s14, s15, s13
   bd88e:	eea7 6ac7 	vfms.f32	s12, s15, s14
   bd892:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   bd896:	ee60 6a06 	vmul.f32	s13, s0, s12
   bd89a:	ee36 6a67 	vsub.f32	s12, s12, s15
   bd89e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   bd8a2:	eec6 7a86 	vdiv.f32	s15, s13, s12
   bd8a6:	ee37 0ac0 	vsub.f32	s0, s15, s0
   bd8aa:	ee37 0a40 	vsub.f32	s0, s14, s0
   bd8ae:	4770      	bx	lr
   bd8b0:	4b26      	ldr	r3, [pc, #152]	; (bd94c <__ieee754_expf+0x1d0>)
   bd8b2:	429a      	cmp	r2, r3
   bd8b4:	f67f af73 	bls.w	bd79e <__ieee754_expf+0x22>
   bd8b8:	ed9f 0a25 	vldr	s0, [pc, #148]	; bd950 <__ieee754_expf+0x1d4>
   bd8bc:	4770      	bx	lr
   bd8be:	eddf 7a24 	vldr	s15, [pc, #144]	; bd950 <__ieee754_expf+0x1d4>
   bd8c2:	2900      	cmp	r1, #0
   bd8c4:	bf18      	it	ne
   bd8c6:	eeb0 0a67 	vmovne.f32	s0, s15
   bd8ca:	4770      	bx	lr
   bd8cc:	ee10 2a10 	vmov	r2, s0
   bd8d0:	3364      	adds	r3, #100	; 0x64
   bd8d2:	eb02 53c3 	add.w	r3, r2, r3, lsl #23
   bd8d6:	eddf 7a1f 	vldr	s15, [pc, #124]	; bd954 <__ieee754_expf+0x1d8>
   bd8da:	ee00 3a10 	vmov	s0, r3
   bd8de:	ee20 0a27 	vmul.f32	s0, s0, s15
   bd8e2:	4770      	bx	lr
   bd8e4:	4b1c      	ldr	r3, [pc, #112]	; (bd958 <__ieee754_expf+0x1dc>)
   bd8e6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; bd95c <__ieee754_expf+0x1e0>
   bd8ea:	ed9f 6a1d 	vldr	s12, [pc, #116]	; bd960 <__ieee754_expf+0x1e4>
   bd8ee:	eddf 6a1d 	vldr	s13, [pc, #116]	; bd964 <__ieee754_expf+0x1e8>
   bd8f2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   bd8f6:	edd3 7a00 	vldr	s15, [r3]
   bd8fa:	eee0 7a07 	vfma.f32	s15, s0, s14
   bd8fe:	eeb0 4a40 	vmov.f32	s8, s0
   bd902:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   bd906:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   bd90a:	ee17 3a90 	vmov	r3, s15
   bd90e:	eea7 4a46 	vfms.f32	s8, s14, s12
   bd912:	ee27 7a26 	vmul.f32	s14, s14, s13
   bd916:	e758      	b.n	bd7ca <__ieee754_expf+0x4e>
   bd918:	ee30 0a07 	vadd.f32	s0, s0, s14
   bd91c:	4770      	bx	lr
   bd91e:	bf00      	nop
   bd920:	42b17217 	.word	0x42b17217
   bd924:	3eb17218 	.word	0x3eb17218
   bd928:	3f851591 	.word	0x3f851591
   bd92c:	000cbc90 	.word	0x000cbc90
   bd930:	000cbc98 	.word	0x000cbc98
   bd934:	3331bb4c 	.word	0x3331bb4c
   bd938:	b5ddea0e 	.word	0xb5ddea0e
   bd93c:	388ab355 	.word	0x388ab355
   bd940:	bb360b61 	.word	0xbb360b61
   bd944:	3e2aaaab 	.word	0x3e2aaaab
   bd948:	7149f2ca 	.word	0x7149f2ca
   bd94c:	42cff1b5 	.word	0x42cff1b5
   bd950:	00000000 	.word	0x00000000
   bd954:	0d800000 	.word	0x0d800000
   bd958:	000cbc88 	.word	0x000cbc88
   bd95c:	3fb8aa3b 	.word	0x3fb8aa3b
   bd960:	3f317180 	.word	0x3f317180
   bd964:	3717f7d1 	.word	0x3717f7d1

000bd968 <nan>:
   bd968:	ed9f 0b01 	vldr	d0, [pc, #4]	; bd970 <nan+0x8>
   bd96c:	4770      	bx	lr
   bd96e:	bf00      	nop
   bd970:	00000000 	.word	0x00000000
   bd974:	7ff80000 	.word	0x7ff80000

000bd978 <finitef>:
   bd978:	b082      	sub	sp, #8
   bd97a:	ed8d 0a01 	vstr	s0, [sp, #4]
   bd97e:	9801      	ldr	r0, [sp, #4]
   bd980:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   bd984:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
   bd988:	bfac      	ite	ge
   bd98a:	2000      	movge	r0, #0
   bd98c:	2001      	movlt	r0, #1
   bd98e:	b002      	add	sp, #8
   bd990:	4770      	bx	lr
   bd992:	bf00      	nop

000bd994 <__aeabi_drsub>:
   bd994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bd998:	e002      	b.n	bd9a0 <__adddf3>
   bd99a:	bf00      	nop

000bd99c <__aeabi_dsub>:
   bd99c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bd9a0 <__adddf3>:
   bd9a0:	b530      	push	{r4, r5, lr}
   bd9a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bd9a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bd9aa:	ea94 0f05 	teq	r4, r5
   bd9ae:	bf08      	it	eq
   bd9b0:	ea90 0f02 	teqeq	r0, r2
   bd9b4:	bf1f      	itttt	ne
   bd9b6:	ea54 0c00 	orrsne.w	ip, r4, r0
   bd9ba:	ea55 0c02 	orrsne.w	ip, r5, r2
   bd9be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bd9c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bd9c6:	f000 80e2 	beq.w	bdb8e <__adddf3+0x1ee>
   bd9ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bd9ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bd9d2:	bfb8      	it	lt
   bd9d4:	426d      	neglt	r5, r5
   bd9d6:	dd0c      	ble.n	bd9f2 <__adddf3+0x52>
   bd9d8:	442c      	add	r4, r5
   bd9da:	ea80 0202 	eor.w	r2, r0, r2
   bd9de:	ea81 0303 	eor.w	r3, r1, r3
   bd9e2:	ea82 0000 	eor.w	r0, r2, r0
   bd9e6:	ea83 0101 	eor.w	r1, r3, r1
   bd9ea:	ea80 0202 	eor.w	r2, r0, r2
   bd9ee:	ea81 0303 	eor.w	r3, r1, r3
   bd9f2:	2d36      	cmp	r5, #54	; 0x36
   bd9f4:	bf88      	it	hi
   bd9f6:	bd30      	pophi	{r4, r5, pc}
   bd9f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bd9fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bda00:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bda04:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bda08:	d002      	beq.n	bda10 <__adddf3+0x70>
   bda0a:	4240      	negs	r0, r0
   bda0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bda10:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bda14:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bda18:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bda1c:	d002      	beq.n	bda24 <__adddf3+0x84>
   bda1e:	4252      	negs	r2, r2
   bda20:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bda24:	ea94 0f05 	teq	r4, r5
   bda28:	f000 80a7 	beq.w	bdb7a <__adddf3+0x1da>
   bda2c:	f1a4 0401 	sub.w	r4, r4, #1
   bda30:	f1d5 0e20 	rsbs	lr, r5, #32
   bda34:	db0d      	blt.n	bda52 <__adddf3+0xb2>
   bda36:	fa02 fc0e 	lsl.w	ip, r2, lr
   bda3a:	fa22 f205 	lsr.w	r2, r2, r5
   bda3e:	1880      	adds	r0, r0, r2
   bda40:	f141 0100 	adc.w	r1, r1, #0
   bda44:	fa03 f20e 	lsl.w	r2, r3, lr
   bda48:	1880      	adds	r0, r0, r2
   bda4a:	fa43 f305 	asr.w	r3, r3, r5
   bda4e:	4159      	adcs	r1, r3
   bda50:	e00e      	b.n	bda70 <__adddf3+0xd0>
   bda52:	f1a5 0520 	sub.w	r5, r5, #32
   bda56:	f10e 0e20 	add.w	lr, lr, #32
   bda5a:	2a01      	cmp	r2, #1
   bda5c:	fa03 fc0e 	lsl.w	ip, r3, lr
   bda60:	bf28      	it	cs
   bda62:	f04c 0c02 	orrcs.w	ip, ip, #2
   bda66:	fa43 f305 	asr.w	r3, r3, r5
   bda6a:	18c0      	adds	r0, r0, r3
   bda6c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bda70:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bda74:	d507      	bpl.n	bda86 <__adddf3+0xe6>
   bda76:	f04f 0e00 	mov.w	lr, #0
   bda7a:	f1dc 0c00 	rsbs	ip, ip, #0
   bda7e:	eb7e 0000 	sbcs.w	r0, lr, r0
   bda82:	eb6e 0101 	sbc.w	r1, lr, r1
   bda86:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bda8a:	d31b      	bcc.n	bdac4 <__adddf3+0x124>
   bda8c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bda90:	d30c      	bcc.n	bdaac <__adddf3+0x10c>
   bda92:	0849      	lsrs	r1, r1, #1
   bda94:	ea5f 0030 	movs.w	r0, r0, rrx
   bda98:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bda9c:	f104 0401 	add.w	r4, r4, #1
   bdaa0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bdaa4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bdaa8:	f080 809a 	bcs.w	bdbe0 <__adddf3+0x240>
   bdaac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bdab0:	bf08      	it	eq
   bdab2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bdab6:	f150 0000 	adcs.w	r0, r0, #0
   bdaba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bdabe:	ea41 0105 	orr.w	r1, r1, r5
   bdac2:	bd30      	pop	{r4, r5, pc}
   bdac4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bdac8:	4140      	adcs	r0, r0
   bdaca:	eb41 0101 	adc.w	r1, r1, r1
   bdace:	3c01      	subs	r4, #1
   bdad0:	bf28      	it	cs
   bdad2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bdad6:	d2e9      	bcs.n	bdaac <__adddf3+0x10c>
   bdad8:	f091 0f00 	teq	r1, #0
   bdadc:	bf04      	itt	eq
   bdade:	4601      	moveq	r1, r0
   bdae0:	2000      	moveq	r0, #0
   bdae2:	fab1 f381 	clz	r3, r1
   bdae6:	bf08      	it	eq
   bdae8:	3320      	addeq	r3, #32
   bdaea:	f1a3 030b 	sub.w	r3, r3, #11
   bdaee:	f1b3 0220 	subs.w	r2, r3, #32
   bdaf2:	da0c      	bge.n	bdb0e <__adddf3+0x16e>
   bdaf4:	320c      	adds	r2, #12
   bdaf6:	dd08      	ble.n	bdb0a <__adddf3+0x16a>
   bdaf8:	f102 0c14 	add.w	ip, r2, #20
   bdafc:	f1c2 020c 	rsb	r2, r2, #12
   bdb00:	fa01 f00c 	lsl.w	r0, r1, ip
   bdb04:	fa21 f102 	lsr.w	r1, r1, r2
   bdb08:	e00c      	b.n	bdb24 <__adddf3+0x184>
   bdb0a:	f102 0214 	add.w	r2, r2, #20
   bdb0e:	bfd8      	it	le
   bdb10:	f1c2 0c20 	rsble	ip, r2, #32
   bdb14:	fa01 f102 	lsl.w	r1, r1, r2
   bdb18:	fa20 fc0c 	lsr.w	ip, r0, ip
   bdb1c:	bfdc      	itt	le
   bdb1e:	ea41 010c 	orrle.w	r1, r1, ip
   bdb22:	4090      	lslle	r0, r2
   bdb24:	1ae4      	subs	r4, r4, r3
   bdb26:	bfa2      	ittt	ge
   bdb28:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bdb2c:	4329      	orrge	r1, r5
   bdb2e:	bd30      	popge	{r4, r5, pc}
   bdb30:	ea6f 0404 	mvn.w	r4, r4
   bdb34:	3c1f      	subs	r4, #31
   bdb36:	da1c      	bge.n	bdb72 <__adddf3+0x1d2>
   bdb38:	340c      	adds	r4, #12
   bdb3a:	dc0e      	bgt.n	bdb5a <__adddf3+0x1ba>
   bdb3c:	f104 0414 	add.w	r4, r4, #20
   bdb40:	f1c4 0220 	rsb	r2, r4, #32
   bdb44:	fa20 f004 	lsr.w	r0, r0, r4
   bdb48:	fa01 f302 	lsl.w	r3, r1, r2
   bdb4c:	ea40 0003 	orr.w	r0, r0, r3
   bdb50:	fa21 f304 	lsr.w	r3, r1, r4
   bdb54:	ea45 0103 	orr.w	r1, r5, r3
   bdb58:	bd30      	pop	{r4, r5, pc}
   bdb5a:	f1c4 040c 	rsb	r4, r4, #12
   bdb5e:	f1c4 0220 	rsb	r2, r4, #32
   bdb62:	fa20 f002 	lsr.w	r0, r0, r2
   bdb66:	fa01 f304 	lsl.w	r3, r1, r4
   bdb6a:	ea40 0003 	orr.w	r0, r0, r3
   bdb6e:	4629      	mov	r1, r5
   bdb70:	bd30      	pop	{r4, r5, pc}
   bdb72:	fa21 f004 	lsr.w	r0, r1, r4
   bdb76:	4629      	mov	r1, r5
   bdb78:	bd30      	pop	{r4, r5, pc}
   bdb7a:	f094 0f00 	teq	r4, #0
   bdb7e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bdb82:	bf06      	itte	eq
   bdb84:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bdb88:	3401      	addeq	r4, #1
   bdb8a:	3d01      	subne	r5, #1
   bdb8c:	e74e      	b.n	bda2c <__adddf3+0x8c>
   bdb8e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bdb92:	bf18      	it	ne
   bdb94:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bdb98:	d029      	beq.n	bdbee <__adddf3+0x24e>
   bdb9a:	ea94 0f05 	teq	r4, r5
   bdb9e:	bf08      	it	eq
   bdba0:	ea90 0f02 	teqeq	r0, r2
   bdba4:	d005      	beq.n	bdbb2 <__adddf3+0x212>
   bdba6:	ea54 0c00 	orrs.w	ip, r4, r0
   bdbaa:	bf04      	itt	eq
   bdbac:	4619      	moveq	r1, r3
   bdbae:	4610      	moveq	r0, r2
   bdbb0:	bd30      	pop	{r4, r5, pc}
   bdbb2:	ea91 0f03 	teq	r1, r3
   bdbb6:	bf1e      	ittt	ne
   bdbb8:	2100      	movne	r1, #0
   bdbba:	2000      	movne	r0, #0
   bdbbc:	bd30      	popne	{r4, r5, pc}
   bdbbe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bdbc2:	d105      	bne.n	bdbd0 <__adddf3+0x230>
   bdbc4:	0040      	lsls	r0, r0, #1
   bdbc6:	4149      	adcs	r1, r1
   bdbc8:	bf28      	it	cs
   bdbca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bdbce:	bd30      	pop	{r4, r5, pc}
   bdbd0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bdbd4:	bf3c      	itt	cc
   bdbd6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bdbda:	bd30      	popcc	{r4, r5, pc}
   bdbdc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bdbe0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bdbe4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bdbe8:	f04f 0000 	mov.w	r0, #0
   bdbec:	bd30      	pop	{r4, r5, pc}
   bdbee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bdbf2:	bf1a      	itte	ne
   bdbf4:	4619      	movne	r1, r3
   bdbf6:	4610      	movne	r0, r2
   bdbf8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bdbfc:	bf1c      	itt	ne
   bdbfe:	460b      	movne	r3, r1
   bdc00:	4602      	movne	r2, r0
   bdc02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bdc06:	bf06      	itte	eq
   bdc08:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bdc0c:	ea91 0f03 	teqeq	r1, r3
   bdc10:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bdc14:	bd30      	pop	{r4, r5, pc}
   bdc16:	bf00      	nop

000bdc18 <__aeabi_ui2d>:
   bdc18:	f090 0f00 	teq	r0, #0
   bdc1c:	bf04      	itt	eq
   bdc1e:	2100      	moveq	r1, #0
   bdc20:	4770      	bxeq	lr
   bdc22:	b530      	push	{r4, r5, lr}
   bdc24:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bdc28:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bdc2c:	f04f 0500 	mov.w	r5, #0
   bdc30:	f04f 0100 	mov.w	r1, #0
   bdc34:	e750      	b.n	bdad8 <__adddf3+0x138>
   bdc36:	bf00      	nop

000bdc38 <__aeabi_i2d>:
   bdc38:	f090 0f00 	teq	r0, #0
   bdc3c:	bf04      	itt	eq
   bdc3e:	2100      	moveq	r1, #0
   bdc40:	4770      	bxeq	lr
   bdc42:	b530      	push	{r4, r5, lr}
   bdc44:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bdc48:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bdc4c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bdc50:	bf48      	it	mi
   bdc52:	4240      	negmi	r0, r0
   bdc54:	f04f 0100 	mov.w	r1, #0
   bdc58:	e73e      	b.n	bdad8 <__adddf3+0x138>
   bdc5a:	bf00      	nop

000bdc5c <__aeabi_f2d>:
   bdc5c:	0042      	lsls	r2, r0, #1
   bdc5e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bdc62:	ea4f 0131 	mov.w	r1, r1, rrx
   bdc66:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bdc6a:	bf1f      	itttt	ne
   bdc6c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bdc70:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bdc74:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bdc78:	4770      	bxne	lr
   bdc7a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bdc7e:	bf08      	it	eq
   bdc80:	4770      	bxeq	lr
   bdc82:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bdc86:	bf04      	itt	eq
   bdc88:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bdc8c:	4770      	bxeq	lr
   bdc8e:	b530      	push	{r4, r5, lr}
   bdc90:	f44f 7460 	mov.w	r4, #896	; 0x380
   bdc94:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bdc98:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bdc9c:	e71c      	b.n	bdad8 <__adddf3+0x138>
   bdc9e:	bf00      	nop

000bdca0 <__aeabi_ul2d>:
   bdca0:	ea50 0201 	orrs.w	r2, r0, r1
   bdca4:	bf08      	it	eq
   bdca6:	4770      	bxeq	lr
   bdca8:	b530      	push	{r4, r5, lr}
   bdcaa:	f04f 0500 	mov.w	r5, #0
   bdcae:	e00a      	b.n	bdcc6 <__aeabi_l2d+0x16>

000bdcb0 <__aeabi_l2d>:
   bdcb0:	ea50 0201 	orrs.w	r2, r0, r1
   bdcb4:	bf08      	it	eq
   bdcb6:	4770      	bxeq	lr
   bdcb8:	b530      	push	{r4, r5, lr}
   bdcba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bdcbe:	d502      	bpl.n	bdcc6 <__aeabi_l2d+0x16>
   bdcc0:	4240      	negs	r0, r0
   bdcc2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bdcc6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bdcca:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bdcce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bdcd2:	f43f aed8 	beq.w	bda86 <__adddf3+0xe6>
   bdcd6:	f04f 0203 	mov.w	r2, #3
   bdcda:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bdcde:	bf18      	it	ne
   bdce0:	3203      	addne	r2, #3
   bdce2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bdce6:	bf18      	it	ne
   bdce8:	3203      	addne	r2, #3
   bdcea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bdcee:	f1c2 0320 	rsb	r3, r2, #32
   bdcf2:	fa00 fc03 	lsl.w	ip, r0, r3
   bdcf6:	fa20 f002 	lsr.w	r0, r0, r2
   bdcfa:	fa01 fe03 	lsl.w	lr, r1, r3
   bdcfe:	ea40 000e 	orr.w	r0, r0, lr
   bdd02:	fa21 f102 	lsr.w	r1, r1, r2
   bdd06:	4414      	add	r4, r2
   bdd08:	e6bd      	b.n	bda86 <__adddf3+0xe6>
   bdd0a:	bf00      	nop

000bdd0c <__aeabi_dmul>:
   bdd0c:	b570      	push	{r4, r5, r6, lr}
   bdd0e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bdd12:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bdd16:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bdd1a:	bf1d      	ittte	ne
   bdd1c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bdd20:	ea94 0f0c 	teqne	r4, ip
   bdd24:	ea95 0f0c 	teqne	r5, ip
   bdd28:	f000 f8de 	bleq	bdee8 <__aeabi_dmul+0x1dc>
   bdd2c:	442c      	add	r4, r5
   bdd2e:	ea81 0603 	eor.w	r6, r1, r3
   bdd32:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bdd36:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bdd3a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bdd3e:	bf18      	it	ne
   bdd40:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bdd44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bdd48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bdd4c:	d038      	beq.n	bddc0 <__aeabi_dmul+0xb4>
   bdd4e:	fba0 ce02 	umull	ip, lr, r0, r2
   bdd52:	f04f 0500 	mov.w	r5, #0
   bdd56:	fbe1 e502 	umlal	lr, r5, r1, r2
   bdd5a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bdd5e:	fbe0 e503 	umlal	lr, r5, r0, r3
   bdd62:	f04f 0600 	mov.w	r6, #0
   bdd66:	fbe1 5603 	umlal	r5, r6, r1, r3
   bdd6a:	f09c 0f00 	teq	ip, #0
   bdd6e:	bf18      	it	ne
   bdd70:	f04e 0e01 	orrne.w	lr, lr, #1
   bdd74:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bdd78:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bdd7c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bdd80:	d204      	bcs.n	bdd8c <__aeabi_dmul+0x80>
   bdd82:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bdd86:	416d      	adcs	r5, r5
   bdd88:	eb46 0606 	adc.w	r6, r6, r6
   bdd8c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bdd90:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bdd94:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bdd98:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bdd9c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bdda0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bdda4:	bf88      	it	hi
   bdda6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bddaa:	d81e      	bhi.n	bddea <__aeabi_dmul+0xde>
   bddac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bddb0:	bf08      	it	eq
   bddb2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bddb6:	f150 0000 	adcs.w	r0, r0, #0
   bddba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bddbe:	bd70      	pop	{r4, r5, r6, pc}
   bddc0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bddc4:	ea46 0101 	orr.w	r1, r6, r1
   bddc8:	ea40 0002 	orr.w	r0, r0, r2
   bddcc:	ea81 0103 	eor.w	r1, r1, r3
   bddd0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bddd4:	bfc2      	ittt	gt
   bddd6:	ebd4 050c 	rsbsgt	r5, r4, ip
   bddda:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bddde:	bd70      	popgt	{r4, r5, r6, pc}
   bdde0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bdde4:	f04f 0e00 	mov.w	lr, #0
   bdde8:	3c01      	subs	r4, #1
   bddea:	f300 80ab 	bgt.w	bdf44 <__aeabi_dmul+0x238>
   bddee:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bddf2:	bfde      	ittt	le
   bddf4:	2000      	movle	r0, #0
   bddf6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bddfa:	bd70      	pople	{r4, r5, r6, pc}
   bddfc:	f1c4 0400 	rsb	r4, r4, #0
   bde00:	3c20      	subs	r4, #32
   bde02:	da35      	bge.n	bde70 <__aeabi_dmul+0x164>
   bde04:	340c      	adds	r4, #12
   bde06:	dc1b      	bgt.n	bde40 <__aeabi_dmul+0x134>
   bde08:	f104 0414 	add.w	r4, r4, #20
   bde0c:	f1c4 0520 	rsb	r5, r4, #32
   bde10:	fa00 f305 	lsl.w	r3, r0, r5
   bde14:	fa20 f004 	lsr.w	r0, r0, r4
   bde18:	fa01 f205 	lsl.w	r2, r1, r5
   bde1c:	ea40 0002 	orr.w	r0, r0, r2
   bde20:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bde24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bde28:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bde2c:	fa21 f604 	lsr.w	r6, r1, r4
   bde30:	eb42 0106 	adc.w	r1, r2, r6
   bde34:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bde38:	bf08      	it	eq
   bde3a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bde3e:	bd70      	pop	{r4, r5, r6, pc}
   bde40:	f1c4 040c 	rsb	r4, r4, #12
   bde44:	f1c4 0520 	rsb	r5, r4, #32
   bde48:	fa00 f304 	lsl.w	r3, r0, r4
   bde4c:	fa20 f005 	lsr.w	r0, r0, r5
   bde50:	fa01 f204 	lsl.w	r2, r1, r4
   bde54:	ea40 0002 	orr.w	r0, r0, r2
   bde58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bde5c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bde60:	f141 0100 	adc.w	r1, r1, #0
   bde64:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bde68:	bf08      	it	eq
   bde6a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bde6e:	bd70      	pop	{r4, r5, r6, pc}
   bde70:	f1c4 0520 	rsb	r5, r4, #32
   bde74:	fa00 f205 	lsl.w	r2, r0, r5
   bde78:	ea4e 0e02 	orr.w	lr, lr, r2
   bde7c:	fa20 f304 	lsr.w	r3, r0, r4
   bde80:	fa01 f205 	lsl.w	r2, r1, r5
   bde84:	ea43 0302 	orr.w	r3, r3, r2
   bde88:	fa21 f004 	lsr.w	r0, r1, r4
   bde8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bde90:	fa21 f204 	lsr.w	r2, r1, r4
   bde94:	ea20 0002 	bic.w	r0, r0, r2
   bde98:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bde9c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bdea0:	bf08      	it	eq
   bdea2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bdea6:	bd70      	pop	{r4, r5, r6, pc}
   bdea8:	f094 0f00 	teq	r4, #0
   bdeac:	d10f      	bne.n	bdece <__aeabi_dmul+0x1c2>
   bdeae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bdeb2:	0040      	lsls	r0, r0, #1
   bdeb4:	eb41 0101 	adc.w	r1, r1, r1
   bdeb8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bdebc:	bf08      	it	eq
   bdebe:	3c01      	subeq	r4, #1
   bdec0:	d0f7      	beq.n	bdeb2 <__aeabi_dmul+0x1a6>
   bdec2:	ea41 0106 	orr.w	r1, r1, r6
   bdec6:	f095 0f00 	teq	r5, #0
   bdeca:	bf18      	it	ne
   bdecc:	4770      	bxne	lr
   bdece:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bded2:	0052      	lsls	r2, r2, #1
   bded4:	eb43 0303 	adc.w	r3, r3, r3
   bded8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bdedc:	bf08      	it	eq
   bdede:	3d01      	subeq	r5, #1
   bdee0:	d0f7      	beq.n	bded2 <__aeabi_dmul+0x1c6>
   bdee2:	ea43 0306 	orr.w	r3, r3, r6
   bdee6:	4770      	bx	lr
   bdee8:	ea94 0f0c 	teq	r4, ip
   bdeec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bdef0:	bf18      	it	ne
   bdef2:	ea95 0f0c 	teqne	r5, ip
   bdef6:	d00c      	beq.n	bdf12 <__aeabi_dmul+0x206>
   bdef8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bdefc:	bf18      	it	ne
   bdefe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bdf02:	d1d1      	bne.n	bdea8 <__aeabi_dmul+0x19c>
   bdf04:	ea81 0103 	eor.w	r1, r1, r3
   bdf08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bdf0c:	f04f 0000 	mov.w	r0, #0
   bdf10:	bd70      	pop	{r4, r5, r6, pc}
   bdf12:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bdf16:	bf06      	itte	eq
   bdf18:	4610      	moveq	r0, r2
   bdf1a:	4619      	moveq	r1, r3
   bdf1c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bdf20:	d019      	beq.n	bdf56 <__aeabi_dmul+0x24a>
   bdf22:	ea94 0f0c 	teq	r4, ip
   bdf26:	d102      	bne.n	bdf2e <__aeabi_dmul+0x222>
   bdf28:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bdf2c:	d113      	bne.n	bdf56 <__aeabi_dmul+0x24a>
   bdf2e:	ea95 0f0c 	teq	r5, ip
   bdf32:	d105      	bne.n	bdf40 <__aeabi_dmul+0x234>
   bdf34:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bdf38:	bf1c      	itt	ne
   bdf3a:	4610      	movne	r0, r2
   bdf3c:	4619      	movne	r1, r3
   bdf3e:	d10a      	bne.n	bdf56 <__aeabi_dmul+0x24a>
   bdf40:	ea81 0103 	eor.w	r1, r1, r3
   bdf44:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bdf48:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bdf4c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bdf50:	f04f 0000 	mov.w	r0, #0
   bdf54:	bd70      	pop	{r4, r5, r6, pc}
   bdf56:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bdf5a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bdf5e:	bd70      	pop	{r4, r5, r6, pc}

000bdf60 <__aeabi_ddiv>:
   bdf60:	b570      	push	{r4, r5, r6, lr}
   bdf62:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bdf66:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bdf6a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bdf6e:	bf1d      	ittte	ne
   bdf70:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bdf74:	ea94 0f0c 	teqne	r4, ip
   bdf78:	ea95 0f0c 	teqne	r5, ip
   bdf7c:	f000 f8a7 	bleq	be0ce <__aeabi_ddiv+0x16e>
   bdf80:	eba4 0405 	sub.w	r4, r4, r5
   bdf84:	ea81 0e03 	eor.w	lr, r1, r3
   bdf88:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bdf8c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bdf90:	f000 8088 	beq.w	be0a4 <__aeabi_ddiv+0x144>
   bdf94:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bdf98:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bdf9c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bdfa0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bdfa4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bdfa8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bdfac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bdfb0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bdfb4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bdfb8:	429d      	cmp	r5, r3
   bdfba:	bf08      	it	eq
   bdfbc:	4296      	cmpeq	r6, r2
   bdfbe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bdfc2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bdfc6:	d202      	bcs.n	bdfce <__aeabi_ddiv+0x6e>
   bdfc8:	085b      	lsrs	r3, r3, #1
   bdfca:	ea4f 0232 	mov.w	r2, r2, rrx
   bdfce:	1ab6      	subs	r6, r6, r2
   bdfd0:	eb65 0503 	sbc.w	r5, r5, r3
   bdfd4:	085b      	lsrs	r3, r3, #1
   bdfd6:	ea4f 0232 	mov.w	r2, r2, rrx
   bdfda:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bdfde:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bdfe2:	ebb6 0e02 	subs.w	lr, r6, r2
   bdfe6:	eb75 0e03 	sbcs.w	lr, r5, r3
   bdfea:	bf22      	ittt	cs
   bdfec:	1ab6      	subcs	r6, r6, r2
   bdfee:	4675      	movcs	r5, lr
   bdff0:	ea40 000c 	orrcs.w	r0, r0, ip
   bdff4:	085b      	lsrs	r3, r3, #1
   bdff6:	ea4f 0232 	mov.w	r2, r2, rrx
   bdffa:	ebb6 0e02 	subs.w	lr, r6, r2
   bdffe:	eb75 0e03 	sbcs.w	lr, r5, r3
   be002:	bf22      	ittt	cs
   be004:	1ab6      	subcs	r6, r6, r2
   be006:	4675      	movcs	r5, lr
   be008:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   be00c:	085b      	lsrs	r3, r3, #1
   be00e:	ea4f 0232 	mov.w	r2, r2, rrx
   be012:	ebb6 0e02 	subs.w	lr, r6, r2
   be016:	eb75 0e03 	sbcs.w	lr, r5, r3
   be01a:	bf22      	ittt	cs
   be01c:	1ab6      	subcs	r6, r6, r2
   be01e:	4675      	movcs	r5, lr
   be020:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   be024:	085b      	lsrs	r3, r3, #1
   be026:	ea4f 0232 	mov.w	r2, r2, rrx
   be02a:	ebb6 0e02 	subs.w	lr, r6, r2
   be02e:	eb75 0e03 	sbcs.w	lr, r5, r3
   be032:	bf22      	ittt	cs
   be034:	1ab6      	subcs	r6, r6, r2
   be036:	4675      	movcs	r5, lr
   be038:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   be03c:	ea55 0e06 	orrs.w	lr, r5, r6
   be040:	d018      	beq.n	be074 <__aeabi_ddiv+0x114>
   be042:	ea4f 1505 	mov.w	r5, r5, lsl #4
   be046:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   be04a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   be04e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   be052:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   be056:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   be05a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   be05e:	d1c0      	bne.n	bdfe2 <__aeabi_ddiv+0x82>
   be060:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   be064:	d10b      	bne.n	be07e <__aeabi_ddiv+0x11e>
   be066:	ea41 0100 	orr.w	r1, r1, r0
   be06a:	f04f 0000 	mov.w	r0, #0
   be06e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   be072:	e7b6      	b.n	bdfe2 <__aeabi_ddiv+0x82>
   be074:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   be078:	bf04      	itt	eq
   be07a:	4301      	orreq	r1, r0
   be07c:	2000      	moveq	r0, #0
   be07e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   be082:	bf88      	it	hi
   be084:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   be088:	f63f aeaf 	bhi.w	bddea <__aeabi_dmul+0xde>
   be08c:	ebb5 0c03 	subs.w	ip, r5, r3
   be090:	bf04      	itt	eq
   be092:	ebb6 0c02 	subseq.w	ip, r6, r2
   be096:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   be09a:	f150 0000 	adcs.w	r0, r0, #0
   be09e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   be0a2:	bd70      	pop	{r4, r5, r6, pc}
   be0a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   be0a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   be0ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   be0b0:	bfc2      	ittt	gt
   be0b2:	ebd4 050c 	rsbsgt	r5, r4, ip
   be0b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   be0ba:	bd70      	popgt	{r4, r5, r6, pc}
   be0bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   be0c0:	f04f 0e00 	mov.w	lr, #0
   be0c4:	3c01      	subs	r4, #1
   be0c6:	e690      	b.n	bddea <__aeabi_dmul+0xde>
   be0c8:	ea45 0e06 	orr.w	lr, r5, r6
   be0cc:	e68d      	b.n	bddea <__aeabi_dmul+0xde>
   be0ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   be0d2:	ea94 0f0c 	teq	r4, ip
   be0d6:	bf08      	it	eq
   be0d8:	ea95 0f0c 	teqeq	r5, ip
   be0dc:	f43f af3b 	beq.w	bdf56 <__aeabi_dmul+0x24a>
   be0e0:	ea94 0f0c 	teq	r4, ip
   be0e4:	d10a      	bne.n	be0fc <__aeabi_ddiv+0x19c>
   be0e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   be0ea:	f47f af34 	bne.w	bdf56 <__aeabi_dmul+0x24a>
   be0ee:	ea95 0f0c 	teq	r5, ip
   be0f2:	f47f af25 	bne.w	bdf40 <__aeabi_dmul+0x234>
   be0f6:	4610      	mov	r0, r2
   be0f8:	4619      	mov	r1, r3
   be0fa:	e72c      	b.n	bdf56 <__aeabi_dmul+0x24a>
   be0fc:	ea95 0f0c 	teq	r5, ip
   be100:	d106      	bne.n	be110 <__aeabi_ddiv+0x1b0>
   be102:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   be106:	f43f aefd 	beq.w	bdf04 <__aeabi_dmul+0x1f8>
   be10a:	4610      	mov	r0, r2
   be10c:	4619      	mov	r1, r3
   be10e:	e722      	b.n	bdf56 <__aeabi_dmul+0x24a>
   be110:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   be114:	bf18      	it	ne
   be116:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   be11a:	f47f aec5 	bne.w	bdea8 <__aeabi_dmul+0x19c>
   be11e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   be122:	f47f af0d 	bne.w	bdf40 <__aeabi_dmul+0x234>
   be126:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   be12a:	f47f aeeb 	bne.w	bdf04 <__aeabi_dmul+0x1f8>
   be12e:	e712      	b.n	bdf56 <__aeabi_dmul+0x24a>

000be130 <__gedf2>:
   be130:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   be134:	e006      	b.n	be144 <__cmpdf2+0x4>
   be136:	bf00      	nop

000be138 <__ledf2>:
   be138:	f04f 0c01 	mov.w	ip, #1
   be13c:	e002      	b.n	be144 <__cmpdf2+0x4>
   be13e:	bf00      	nop

000be140 <__cmpdf2>:
   be140:	f04f 0c01 	mov.w	ip, #1
   be144:	f84d cd04 	str.w	ip, [sp, #-4]!
   be148:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   be14c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   be150:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   be154:	bf18      	it	ne
   be156:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   be15a:	d01b      	beq.n	be194 <__cmpdf2+0x54>
   be15c:	b001      	add	sp, #4
   be15e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   be162:	bf0c      	ite	eq
   be164:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   be168:	ea91 0f03 	teqne	r1, r3
   be16c:	bf02      	ittt	eq
   be16e:	ea90 0f02 	teqeq	r0, r2
   be172:	2000      	moveq	r0, #0
   be174:	4770      	bxeq	lr
   be176:	f110 0f00 	cmn.w	r0, #0
   be17a:	ea91 0f03 	teq	r1, r3
   be17e:	bf58      	it	pl
   be180:	4299      	cmppl	r1, r3
   be182:	bf08      	it	eq
   be184:	4290      	cmpeq	r0, r2
   be186:	bf2c      	ite	cs
   be188:	17d8      	asrcs	r0, r3, #31
   be18a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   be18e:	f040 0001 	orr.w	r0, r0, #1
   be192:	4770      	bx	lr
   be194:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   be198:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   be19c:	d102      	bne.n	be1a4 <__cmpdf2+0x64>
   be19e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   be1a2:	d107      	bne.n	be1b4 <__cmpdf2+0x74>
   be1a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   be1a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   be1ac:	d1d6      	bne.n	be15c <__cmpdf2+0x1c>
   be1ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   be1b2:	d0d3      	beq.n	be15c <__cmpdf2+0x1c>
   be1b4:	f85d 0b04 	ldr.w	r0, [sp], #4
   be1b8:	4770      	bx	lr
   be1ba:	bf00      	nop

000be1bc <__aeabi_cdrcmple>:
   be1bc:	4684      	mov	ip, r0
   be1be:	4610      	mov	r0, r2
   be1c0:	4662      	mov	r2, ip
   be1c2:	468c      	mov	ip, r1
   be1c4:	4619      	mov	r1, r3
   be1c6:	4663      	mov	r3, ip
   be1c8:	e000      	b.n	be1cc <__aeabi_cdcmpeq>
   be1ca:	bf00      	nop

000be1cc <__aeabi_cdcmpeq>:
   be1cc:	b501      	push	{r0, lr}
   be1ce:	f7ff ffb7 	bl	be140 <__cmpdf2>
   be1d2:	2800      	cmp	r0, #0
   be1d4:	bf48      	it	mi
   be1d6:	f110 0f00 	cmnmi.w	r0, #0
   be1da:	bd01      	pop	{r0, pc}

000be1dc <__aeabi_dcmpeq>:
   be1dc:	f84d ed08 	str.w	lr, [sp, #-8]!
   be1e0:	f7ff fff4 	bl	be1cc <__aeabi_cdcmpeq>
   be1e4:	bf0c      	ite	eq
   be1e6:	2001      	moveq	r0, #1
   be1e8:	2000      	movne	r0, #0
   be1ea:	f85d fb08 	ldr.w	pc, [sp], #8
   be1ee:	bf00      	nop

000be1f0 <__aeabi_dcmplt>:
   be1f0:	f84d ed08 	str.w	lr, [sp, #-8]!
   be1f4:	f7ff ffea 	bl	be1cc <__aeabi_cdcmpeq>
   be1f8:	bf34      	ite	cc
   be1fa:	2001      	movcc	r0, #1
   be1fc:	2000      	movcs	r0, #0
   be1fe:	f85d fb08 	ldr.w	pc, [sp], #8
   be202:	bf00      	nop

000be204 <__aeabi_dcmple>:
   be204:	f84d ed08 	str.w	lr, [sp, #-8]!
   be208:	f7ff ffe0 	bl	be1cc <__aeabi_cdcmpeq>
   be20c:	bf94      	ite	ls
   be20e:	2001      	movls	r0, #1
   be210:	2000      	movhi	r0, #0
   be212:	f85d fb08 	ldr.w	pc, [sp], #8
   be216:	bf00      	nop

000be218 <__aeabi_dcmpge>:
   be218:	f84d ed08 	str.w	lr, [sp, #-8]!
   be21c:	f7ff ffce 	bl	be1bc <__aeabi_cdrcmple>
   be220:	bf94      	ite	ls
   be222:	2001      	movls	r0, #1
   be224:	2000      	movhi	r0, #0
   be226:	f85d fb08 	ldr.w	pc, [sp], #8
   be22a:	bf00      	nop

000be22c <__aeabi_dcmpgt>:
   be22c:	f84d ed08 	str.w	lr, [sp, #-8]!
   be230:	f7ff ffc4 	bl	be1bc <__aeabi_cdrcmple>
   be234:	bf34      	ite	cc
   be236:	2001      	movcc	r0, #1
   be238:	2000      	movcs	r0, #0
   be23a:	f85d fb08 	ldr.w	pc, [sp], #8
   be23e:	bf00      	nop

000be240 <__aeabi_d2iz>:
   be240:	ea4f 0241 	mov.w	r2, r1, lsl #1
   be244:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   be248:	d215      	bcs.n	be276 <__aeabi_d2iz+0x36>
   be24a:	d511      	bpl.n	be270 <__aeabi_d2iz+0x30>
   be24c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   be250:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   be254:	d912      	bls.n	be27c <__aeabi_d2iz+0x3c>
   be256:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   be25a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   be25e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   be262:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   be266:	fa23 f002 	lsr.w	r0, r3, r2
   be26a:	bf18      	it	ne
   be26c:	4240      	negne	r0, r0
   be26e:	4770      	bx	lr
   be270:	f04f 0000 	mov.w	r0, #0
   be274:	4770      	bx	lr
   be276:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   be27a:	d105      	bne.n	be288 <__aeabi_d2iz+0x48>
   be27c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   be280:	bf08      	it	eq
   be282:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   be286:	4770      	bx	lr
   be288:	f04f 0000 	mov.w	r0, #0
   be28c:	4770      	bx	lr
   be28e:	bf00      	nop

000be290 <__aeabi_d2uiz>:
   be290:	004a      	lsls	r2, r1, #1
   be292:	d211      	bcs.n	be2b8 <__aeabi_d2uiz+0x28>
   be294:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   be298:	d211      	bcs.n	be2be <__aeabi_d2uiz+0x2e>
   be29a:	d50d      	bpl.n	be2b8 <__aeabi_d2uiz+0x28>
   be29c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   be2a0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   be2a4:	d40e      	bmi.n	be2c4 <__aeabi_d2uiz+0x34>
   be2a6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   be2aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   be2ae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   be2b2:	fa23 f002 	lsr.w	r0, r3, r2
   be2b6:	4770      	bx	lr
   be2b8:	f04f 0000 	mov.w	r0, #0
   be2bc:	4770      	bx	lr
   be2be:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   be2c2:	d102      	bne.n	be2ca <__aeabi_d2uiz+0x3a>
   be2c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   be2c8:	4770      	bx	lr
   be2ca:	f04f 0000 	mov.w	r0, #0
   be2ce:	4770      	bx	lr

000be2d0 <__aeabi_d2f>:
   be2d0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   be2d4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   be2d8:	bf24      	itt	cs
   be2da:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   be2de:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   be2e2:	d90d      	bls.n	be300 <__aeabi_d2f+0x30>
   be2e4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   be2e8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   be2ec:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   be2f0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   be2f4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   be2f8:	bf08      	it	eq
   be2fa:	f020 0001 	biceq.w	r0, r0, #1
   be2fe:	4770      	bx	lr
   be300:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   be304:	d121      	bne.n	be34a <__aeabi_d2f+0x7a>
   be306:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   be30a:	bfbc      	itt	lt
   be30c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   be310:	4770      	bxlt	lr
   be312:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   be316:	ea4f 5252 	mov.w	r2, r2, lsr #21
   be31a:	f1c2 0218 	rsb	r2, r2, #24
   be31e:	f1c2 0c20 	rsb	ip, r2, #32
   be322:	fa10 f30c 	lsls.w	r3, r0, ip
   be326:	fa20 f002 	lsr.w	r0, r0, r2
   be32a:	bf18      	it	ne
   be32c:	f040 0001 	orrne.w	r0, r0, #1
   be330:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   be334:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   be338:	fa03 fc0c 	lsl.w	ip, r3, ip
   be33c:	ea40 000c 	orr.w	r0, r0, ip
   be340:	fa23 f302 	lsr.w	r3, r3, r2
   be344:	ea4f 0343 	mov.w	r3, r3, lsl #1
   be348:	e7cc      	b.n	be2e4 <__aeabi_d2f+0x14>
   be34a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   be34e:	d107      	bne.n	be360 <__aeabi_d2f+0x90>
   be350:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   be354:	bf1e      	ittt	ne
   be356:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   be35a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   be35e:	4770      	bxne	lr
   be360:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   be364:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   be368:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   be36c:	4770      	bx	lr
   be36e:	bf00      	nop

000be370 <__aeabi_ldivmod>:
   be370:	b97b      	cbnz	r3, be392 <__aeabi_ldivmod+0x22>
   be372:	b972      	cbnz	r2, be392 <__aeabi_ldivmod+0x22>
   be374:	2900      	cmp	r1, #0
   be376:	bfbe      	ittt	lt
   be378:	2000      	movlt	r0, #0
   be37a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   be37e:	e006      	blt.n	be38e <__aeabi_ldivmod+0x1e>
   be380:	bf08      	it	eq
   be382:	2800      	cmpeq	r0, #0
   be384:	bf1c      	itt	ne
   be386:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   be38a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   be38e:	f000 b9dd 	b.w	be74c <__aeabi_idiv0>
   be392:	f1ad 0c08 	sub.w	ip, sp, #8
   be396:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   be39a:	2900      	cmp	r1, #0
   be39c:	db09      	blt.n	be3b2 <__aeabi_ldivmod+0x42>
   be39e:	2b00      	cmp	r3, #0
   be3a0:	db1a      	blt.n	be3d8 <__aeabi_ldivmod+0x68>
   be3a2:	f000 f86b 	bl	be47c <__udivmoddi4>
   be3a6:	f8dd e004 	ldr.w	lr, [sp, #4]
   be3aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   be3ae:	b004      	add	sp, #16
   be3b0:	4770      	bx	lr
   be3b2:	4240      	negs	r0, r0
   be3b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   be3b8:	2b00      	cmp	r3, #0
   be3ba:	db1b      	blt.n	be3f4 <__aeabi_ldivmod+0x84>
   be3bc:	f000 f85e 	bl	be47c <__udivmoddi4>
   be3c0:	f8dd e004 	ldr.w	lr, [sp, #4]
   be3c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   be3c8:	b004      	add	sp, #16
   be3ca:	4240      	negs	r0, r0
   be3cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   be3d0:	4252      	negs	r2, r2
   be3d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   be3d6:	4770      	bx	lr
   be3d8:	4252      	negs	r2, r2
   be3da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   be3de:	f000 f84d 	bl	be47c <__udivmoddi4>
   be3e2:	f8dd e004 	ldr.w	lr, [sp, #4]
   be3e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   be3ea:	b004      	add	sp, #16
   be3ec:	4240      	negs	r0, r0
   be3ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   be3f2:	4770      	bx	lr
   be3f4:	4252      	negs	r2, r2
   be3f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   be3fa:	f000 f83f 	bl	be47c <__udivmoddi4>
   be3fe:	f8dd e004 	ldr.w	lr, [sp, #4]
   be402:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   be406:	b004      	add	sp, #16
   be408:	4252      	negs	r2, r2
   be40a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   be40e:	4770      	bx	lr

000be410 <__aeabi_d2lz>:
   be410:	b538      	push	{r3, r4, r5, lr}
   be412:	2200      	movs	r2, #0
   be414:	2300      	movs	r3, #0
   be416:	4604      	mov	r4, r0
   be418:	460d      	mov	r5, r1
   be41a:	f7ff fee9 	bl	be1f0 <__aeabi_dcmplt>
   be41e:	b928      	cbnz	r0, be42c <__aeabi_d2lz+0x1c>
   be420:	4620      	mov	r0, r4
   be422:	4629      	mov	r1, r5
   be424:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   be428:	f000 b80a 	b.w	be440 <__aeabi_d2ulz>
   be42c:	4620      	mov	r0, r4
   be42e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   be432:	f000 f805 	bl	be440 <__aeabi_d2ulz>
   be436:	4240      	negs	r0, r0
   be438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   be43c:	bd38      	pop	{r3, r4, r5, pc}
   be43e:	bf00      	nop

000be440 <__aeabi_d2ulz>:
   be440:	b5d0      	push	{r4, r6, r7, lr}
   be442:	4b0c      	ldr	r3, [pc, #48]	; (be474 <__aeabi_d2ulz+0x34>)
   be444:	2200      	movs	r2, #0
   be446:	4606      	mov	r6, r0
   be448:	460f      	mov	r7, r1
   be44a:	f7ff fc5f 	bl	bdd0c <__aeabi_dmul>
   be44e:	f7ff ff1f 	bl	be290 <__aeabi_d2uiz>
   be452:	4604      	mov	r4, r0
   be454:	f7ff fbe0 	bl	bdc18 <__aeabi_ui2d>
   be458:	4b07      	ldr	r3, [pc, #28]	; (be478 <__aeabi_d2ulz+0x38>)
   be45a:	2200      	movs	r2, #0
   be45c:	f7ff fc56 	bl	bdd0c <__aeabi_dmul>
   be460:	4602      	mov	r2, r0
   be462:	460b      	mov	r3, r1
   be464:	4630      	mov	r0, r6
   be466:	4639      	mov	r1, r7
   be468:	f7ff fa98 	bl	bd99c <__aeabi_dsub>
   be46c:	f7ff ff10 	bl	be290 <__aeabi_d2uiz>
   be470:	4621      	mov	r1, r4
   be472:	bdd0      	pop	{r4, r6, r7, pc}
   be474:	3df00000 	.word	0x3df00000
   be478:	41f00000 	.word	0x41f00000

000be47c <__udivmoddi4>:
   be47c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   be480:	9d08      	ldr	r5, [sp, #32]
   be482:	4604      	mov	r4, r0
   be484:	468e      	mov	lr, r1
   be486:	2b00      	cmp	r3, #0
   be488:	d14d      	bne.n	be526 <__udivmoddi4+0xaa>
   be48a:	428a      	cmp	r2, r1
   be48c:	4694      	mov	ip, r2
   be48e:	d969      	bls.n	be564 <__udivmoddi4+0xe8>
   be490:	fab2 f282 	clz	r2, r2
   be494:	b152      	cbz	r2, be4ac <__udivmoddi4+0x30>
   be496:	fa01 f302 	lsl.w	r3, r1, r2
   be49a:	f1c2 0120 	rsb	r1, r2, #32
   be49e:	fa20 f101 	lsr.w	r1, r0, r1
   be4a2:	fa0c fc02 	lsl.w	ip, ip, r2
   be4a6:	ea41 0e03 	orr.w	lr, r1, r3
   be4aa:	4094      	lsls	r4, r2
   be4ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
   be4b0:	0c21      	lsrs	r1, r4, #16
   be4b2:	fbbe f6f8 	udiv	r6, lr, r8
   be4b6:	fa1f f78c 	uxth.w	r7, ip
   be4ba:	fb08 e316 	mls	r3, r8, r6, lr
   be4be:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   be4c2:	fb06 f107 	mul.w	r1, r6, r7
   be4c6:	4299      	cmp	r1, r3
   be4c8:	d90a      	bls.n	be4e0 <__udivmoddi4+0x64>
   be4ca:	eb1c 0303 	adds.w	r3, ip, r3
   be4ce:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   be4d2:	f080 811f 	bcs.w	be714 <__udivmoddi4+0x298>
   be4d6:	4299      	cmp	r1, r3
   be4d8:	f240 811c 	bls.w	be714 <__udivmoddi4+0x298>
   be4dc:	3e02      	subs	r6, #2
   be4de:	4463      	add	r3, ip
   be4e0:	1a5b      	subs	r3, r3, r1
   be4e2:	b2a4      	uxth	r4, r4
   be4e4:	fbb3 f0f8 	udiv	r0, r3, r8
   be4e8:	fb08 3310 	mls	r3, r8, r0, r3
   be4ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   be4f0:	fb00 f707 	mul.w	r7, r0, r7
   be4f4:	42a7      	cmp	r7, r4
   be4f6:	d90a      	bls.n	be50e <__udivmoddi4+0x92>
   be4f8:	eb1c 0404 	adds.w	r4, ip, r4
   be4fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   be500:	f080 810a 	bcs.w	be718 <__udivmoddi4+0x29c>
   be504:	42a7      	cmp	r7, r4
   be506:	f240 8107 	bls.w	be718 <__udivmoddi4+0x29c>
   be50a:	4464      	add	r4, ip
   be50c:	3802      	subs	r0, #2
   be50e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   be512:	1be4      	subs	r4, r4, r7
   be514:	2600      	movs	r6, #0
   be516:	b11d      	cbz	r5, be520 <__udivmoddi4+0xa4>
   be518:	40d4      	lsrs	r4, r2
   be51a:	2300      	movs	r3, #0
   be51c:	e9c5 4300 	strd	r4, r3, [r5]
   be520:	4631      	mov	r1, r6
   be522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   be526:	428b      	cmp	r3, r1
   be528:	d909      	bls.n	be53e <__udivmoddi4+0xc2>
   be52a:	2d00      	cmp	r5, #0
   be52c:	f000 80ef 	beq.w	be70e <__udivmoddi4+0x292>
   be530:	2600      	movs	r6, #0
   be532:	e9c5 0100 	strd	r0, r1, [r5]
   be536:	4630      	mov	r0, r6
   be538:	4631      	mov	r1, r6
   be53a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   be53e:	fab3 f683 	clz	r6, r3
   be542:	2e00      	cmp	r6, #0
   be544:	d14a      	bne.n	be5dc <__udivmoddi4+0x160>
   be546:	428b      	cmp	r3, r1
   be548:	d302      	bcc.n	be550 <__udivmoddi4+0xd4>
   be54a:	4282      	cmp	r2, r0
   be54c:	f200 80f9 	bhi.w	be742 <__udivmoddi4+0x2c6>
   be550:	1a84      	subs	r4, r0, r2
   be552:	eb61 0303 	sbc.w	r3, r1, r3
   be556:	2001      	movs	r0, #1
   be558:	469e      	mov	lr, r3
   be55a:	2d00      	cmp	r5, #0
   be55c:	d0e0      	beq.n	be520 <__udivmoddi4+0xa4>
   be55e:	e9c5 4e00 	strd	r4, lr, [r5]
   be562:	e7dd      	b.n	be520 <__udivmoddi4+0xa4>
   be564:	b902      	cbnz	r2, be568 <__udivmoddi4+0xec>
   be566:	deff      	udf	#255	; 0xff
   be568:	fab2 f282 	clz	r2, r2
   be56c:	2a00      	cmp	r2, #0
   be56e:	f040 8092 	bne.w	be696 <__udivmoddi4+0x21a>
   be572:	eba1 010c 	sub.w	r1, r1, ip
   be576:	ea4f 471c 	mov.w	r7, ip, lsr #16
   be57a:	fa1f fe8c 	uxth.w	lr, ip
   be57e:	2601      	movs	r6, #1
   be580:	0c20      	lsrs	r0, r4, #16
   be582:	fbb1 f3f7 	udiv	r3, r1, r7
   be586:	fb07 1113 	mls	r1, r7, r3, r1
   be58a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   be58e:	fb0e f003 	mul.w	r0, lr, r3
   be592:	4288      	cmp	r0, r1
   be594:	d908      	bls.n	be5a8 <__udivmoddi4+0x12c>
   be596:	eb1c 0101 	adds.w	r1, ip, r1
   be59a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   be59e:	d202      	bcs.n	be5a6 <__udivmoddi4+0x12a>
   be5a0:	4288      	cmp	r0, r1
   be5a2:	f200 80cb 	bhi.w	be73c <__udivmoddi4+0x2c0>
   be5a6:	4643      	mov	r3, r8
   be5a8:	1a09      	subs	r1, r1, r0
   be5aa:	b2a4      	uxth	r4, r4
   be5ac:	fbb1 f0f7 	udiv	r0, r1, r7
   be5b0:	fb07 1110 	mls	r1, r7, r0, r1
   be5b4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   be5b8:	fb0e fe00 	mul.w	lr, lr, r0
   be5bc:	45a6      	cmp	lr, r4
   be5be:	d908      	bls.n	be5d2 <__udivmoddi4+0x156>
   be5c0:	eb1c 0404 	adds.w	r4, ip, r4
   be5c4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   be5c8:	d202      	bcs.n	be5d0 <__udivmoddi4+0x154>
   be5ca:	45a6      	cmp	lr, r4
   be5cc:	f200 80bb 	bhi.w	be746 <__udivmoddi4+0x2ca>
   be5d0:	4608      	mov	r0, r1
   be5d2:	eba4 040e 	sub.w	r4, r4, lr
   be5d6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   be5da:	e79c      	b.n	be516 <__udivmoddi4+0x9a>
   be5dc:	f1c6 0720 	rsb	r7, r6, #32
   be5e0:	40b3      	lsls	r3, r6
   be5e2:	fa22 fc07 	lsr.w	ip, r2, r7
   be5e6:	ea4c 0c03 	orr.w	ip, ip, r3
   be5ea:	fa20 f407 	lsr.w	r4, r0, r7
   be5ee:	fa01 f306 	lsl.w	r3, r1, r6
   be5f2:	431c      	orrs	r4, r3
   be5f4:	40f9      	lsrs	r1, r7
   be5f6:	ea4f 491c 	mov.w	r9, ip, lsr #16
   be5fa:	fa00 f306 	lsl.w	r3, r0, r6
   be5fe:	fbb1 f8f9 	udiv	r8, r1, r9
   be602:	0c20      	lsrs	r0, r4, #16
   be604:	fa1f fe8c 	uxth.w	lr, ip
   be608:	fb09 1118 	mls	r1, r9, r8, r1
   be60c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   be610:	fb08 f00e 	mul.w	r0, r8, lr
   be614:	4288      	cmp	r0, r1
   be616:	fa02 f206 	lsl.w	r2, r2, r6
   be61a:	d90b      	bls.n	be634 <__udivmoddi4+0x1b8>
   be61c:	eb1c 0101 	adds.w	r1, ip, r1
   be620:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   be624:	f080 8088 	bcs.w	be738 <__udivmoddi4+0x2bc>
   be628:	4288      	cmp	r0, r1
   be62a:	f240 8085 	bls.w	be738 <__udivmoddi4+0x2bc>
   be62e:	f1a8 0802 	sub.w	r8, r8, #2
   be632:	4461      	add	r1, ip
   be634:	1a09      	subs	r1, r1, r0
   be636:	b2a4      	uxth	r4, r4
   be638:	fbb1 f0f9 	udiv	r0, r1, r9
   be63c:	fb09 1110 	mls	r1, r9, r0, r1
   be640:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   be644:	fb00 fe0e 	mul.w	lr, r0, lr
   be648:	458e      	cmp	lr, r1
   be64a:	d908      	bls.n	be65e <__udivmoddi4+0x1e2>
   be64c:	eb1c 0101 	adds.w	r1, ip, r1
   be650:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
   be654:	d26c      	bcs.n	be730 <__udivmoddi4+0x2b4>
   be656:	458e      	cmp	lr, r1
   be658:	d96a      	bls.n	be730 <__udivmoddi4+0x2b4>
   be65a:	3802      	subs	r0, #2
   be65c:	4461      	add	r1, ip
   be65e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   be662:	fba0 9402 	umull	r9, r4, r0, r2
   be666:	eba1 010e 	sub.w	r1, r1, lr
   be66a:	42a1      	cmp	r1, r4
   be66c:	46c8      	mov	r8, r9
   be66e:	46a6      	mov	lr, r4
   be670:	d356      	bcc.n	be720 <__udivmoddi4+0x2a4>
   be672:	d053      	beq.n	be71c <__udivmoddi4+0x2a0>
   be674:	b15d      	cbz	r5, be68e <__udivmoddi4+0x212>
   be676:	ebb3 0208 	subs.w	r2, r3, r8
   be67a:	eb61 010e 	sbc.w	r1, r1, lr
   be67e:	fa01 f707 	lsl.w	r7, r1, r7
   be682:	fa22 f306 	lsr.w	r3, r2, r6
   be686:	40f1      	lsrs	r1, r6
   be688:	431f      	orrs	r7, r3
   be68a:	e9c5 7100 	strd	r7, r1, [r5]
   be68e:	2600      	movs	r6, #0
   be690:	4631      	mov	r1, r6
   be692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   be696:	f1c2 0320 	rsb	r3, r2, #32
   be69a:	40d8      	lsrs	r0, r3
   be69c:	fa0c fc02 	lsl.w	ip, ip, r2
   be6a0:	fa21 f303 	lsr.w	r3, r1, r3
   be6a4:	4091      	lsls	r1, r2
   be6a6:	4301      	orrs	r1, r0
   be6a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
   be6ac:	fa1f fe8c 	uxth.w	lr, ip
   be6b0:	fbb3 f0f7 	udiv	r0, r3, r7
   be6b4:	fb07 3610 	mls	r6, r7, r0, r3
   be6b8:	0c0b      	lsrs	r3, r1, #16
   be6ba:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   be6be:	fb00 f60e 	mul.w	r6, r0, lr
   be6c2:	429e      	cmp	r6, r3
   be6c4:	fa04 f402 	lsl.w	r4, r4, r2
   be6c8:	d908      	bls.n	be6dc <__udivmoddi4+0x260>
   be6ca:	eb1c 0303 	adds.w	r3, ip, r3
   be6ce:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
   be6d2:	d22f      	bcs.n	be734 <__udivmoddi4+0x2b8>
   be6d4:	429e      	cmp	r6, r3
   be6d6:	d92d      	bls.n	be734 <__udivmoddi4+0x2b8>
   be6d8:	3802      	subs	r0, #2
   be6da:	4463      	add	r3, ip
   be6dc:	1b9b      	subs	r3, r3, r6
   be6de:	b289      	uxth	r1, r1
   be6e0:	fbb3 f6f7 	udiv	r6, r3, r7
   be6e4:	fb07 3316 	mls	r3, r7, r6, r3
   be6e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   be6ec:	fb06 f30e 	mul.w	r3, r6, lr
   be6f0:	428b      	cmp	r3, r1
   be6f2:	d908      	bls.n	be706 <__udivmoddi4+0x28a>
   be6f4:	eb1c 0101 	adds.w	r1, ip, r1
   be6f8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
   be6fc:	d216      	bcs.n	be72c <__udivmoddi4+0x2b0>
   be6fe:	428b      	cmp	r3, r1
   be700:	d914      	bls.n	be72c <__udivmoddi4+0x2b0>
   be702:	3e02      	subs	r6, #2
   be704:	4461      	add	r1, ip
   be706:	1ac9      	subs	r1, r1, r3
   be708:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   be70c:	e738      	b.n	be580 <__udivmoddi4+0x104>
   be70e:	462e      	mov	r6, r5
   be710:	4628      	mov	r0, r5
   be712:	e705      	b.n	be520 <__udivmoddi4+0xa4>
   be714:	4606      	mov	r6, r0
   be716:	e6e3      	b.n	be4e0 <__udivmoddi4+0x64>
   be718:	4618      	mov	r0, r3
   be71a:	e6f8      	b.n	be50e <__udivmoddi4+0x92>
   be71c:	454b      	cmp	r3, r9
   be71e:	d2a9      	bcs.n	be674 <__udivmoddi4+0x1f8>
   be720:	ebb9 0802 	subs.w	r8, r9, r2
   be724:	eb64 0e0c 	sbc.w	lr, r4, ip
   be728:	3801      	subs	r0, #1
   be72a:	e7a3      	b.n	be674 <__udivmoddi4+0x1f8>
   be72c:	4646      	mov	r6, r8
   be72e:	e7ea      	b.n	be706 <__udivmoddi4+0x28a>
   be730:	4620      	mov	r0, r4
   be732:	e794      	b.n	be65e <__udivmoddi4+0x1e2>
   be734:	4640      	mov	r0, r8
   be736:	e7d1      	b.n	be6dc <__udivmoddi4+0x260>
   be738:	46d0      	mov	r8, sl
   be73a:	e77b      	b.n	be634 <__udivmoddi4+0x1b8>
   be73c:	3b02      	subs	r3, #2
   be73e:	4461      	add	r1, ip
   be740:	e732      	b.n	be5a8 <__udivmoddi4+0x12c>
   be742:	4630      	mov	r0, r6
   be744:	e709      	b.n	be55a <__udivmoddi4+0xde>
   be746:	4464      	add	r4, ip
   be748:	3802      	subs	r0, #2
   be74a:	e742      	b.n	be5d2 <__udivmoddi4+0x156>

000be74c <__aeabi_idiv0>:
   be74c:	4770      	bx	lr
   be74e:	bf00      	nop

000be750 <atexit>:
   be750:	2300      	movs	r3, #0
   be752:	4601      	mov	r1, r0
   be754:	461a      	mov	r2, r3
   be756:	4618      	mov	r0, r3
   be758:	f000 bf00 	b.w	bf55c <__register_exitproc>

000be75c <atof>:
   be75c:	2100      	movs	r1, #0
   be75e:	f000 bef1 	b.w	bf544 <strtod>
	...

000be764 <calloc>:
   be764:	4b02      	ldr	r3, [pc, #8]	; (be770 <calloc+0xc>)
   be766:	460a      	mov	r2, r1
   be768:	4601      	mov	r1, r0
   be76a:	6818      	ldr	r0, [r3, #0]
   be76c:	f000 b845 	b.w	be7fa <_calloc_r>
   be770:	2003a248 	.word	0x2003a248

000be774 <__retarget_lock_acquire_recursive>:
   be774:	4770      	bx	lr

000be776 <__retarget_lock_release>:
   be776:	4770      	bx	lr

000be778 <__retarget_lock_release_recursive>:
   be778:	4770      	bx	lr

000be77a <memcmp>:
   be77a:	b510      	push	{r4, lr}
   be77c:	3901      	subs	r1, #1
   be77e:	4402      	add	r2, r0
   be780:	4290      	cmp	r0, r2
   be782:	d101      	bne.n	be788 <memcmp+0xe>
   be784:	2000      	movs	r0, #0
   be786:	e005      	b.n	be794 <memcmp+0x1a>
   be788:	7803      	ldrb	r3, [r0, #0]
   be78a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   be78e:	42a3      	cmp	r3, r4
   be790:	d001      	beq.n	be796 <memcmp+0x1c>
   be792:	1b18      	subs	r0, r3, r4
   be794:	bd10      	pop	{r4, pc}
   be796:	3001      	adds	r0, #1
   be798:	e7f2      	b.n	be780 <memcmp+0x6>

000be79a <memcpy>:
   be79a:	440a      	add	r2, r1
   be79c:	4291      	cmp	r1, r2
   be79e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   be7a2:	d100      	bne.n	be7a6 <memcpy+0xc>
   be7a4:	4770      	bx	lr
   be7a6:	b510      	push	{r4, lr}
   be7a8:	f811 4b01 	ldrb.w	r4, [r1], #1
   be7ac:	f803 4f01 	strb.w	r4, [r3, #1]!
   be7b0:	4291      	cmp	r1, r2
   be7b2:	d1f9      	bne.n	be7a8 <memcpy+0xe>
   be7b4:	bd10      	pop	{r4, pc}

000be7b6 <memmove>:
   be7b6:	4288      	cmp	r0, r1
   be7b8:	b510      	push	{r4, lr}
   be7ba:	eb01 0402 	add.w	r4, r1, r2
   be7be:	d902      	bls.n	be7c6 <memmove+0x10>
   be7c0:	4284      	cmp	r4, r0
   be7c2:	4623      	mov	r3, r4
   be7c4:	d807      	bhi.n	be7d6 <memmove+0x20>
   be7c6:	1e43      	subs	r3, r0, #1
   be7c8:	42a1      	cmp	r1, r4
   be7ca:	d008      	beq.n	be7de <memmove+0x28>
   be7cc:	f811 2b01 	ldrb.w	r2, [r1], #1
   be7d0:	f803 2f01 	strb.w	r2, [r3, #1]!
   be7d4:	e7f8      	b.n	be7c8 <memmove+0x12>
   be7d6:	4402      	add	r2, r0
   be7d8:	4601      	mov	r1, r0
   be7da:	428a      	cmp	r2, r1
   be7dc:	d100      	bne.n	be7e0 <memmove+0x2a>
   be7de:	bd10      	pop	{r4, pc}
   be7e0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   be7e4:	f802 4d01 	strb.w	r4, [r2, #-1]!
   be7e8:	e7f7      	b.n	be7da <memmove+0x24>

000be7ea <memset>:
   be7ea:	4402      	add	r2, r0
   be7ec:	4603      	mov	r3, r0
   be7ee:	4293      	cmp	r3, r2
   be7f0:	d100      	bne.n	be7f4 <memset+0xa>
   be7f2:	4770      	bx	lr
   be7f4:	f803 1b01 	strb.w	r1, [r3], #1
   be7f8:	e7f9      	b.n	be7ee <memset+0x4>

000be7fa <_calloc_r>:
   be7fa:	b513      	push	{r0, r1, r4, lr}
   be7fc:	434a      	muls	r2, r1
   be7fe:	4611      	mov	r1, r2
   be800:	9201      	str	r2, [sp, #4]
   be802:	f7fd fecb 	bl	bc59c <_malloc_r>
   be806:	4604      	mov	r4, r0
   be808:	b118      	cbz	r0, be812 <_calloc_r+0x18>
   be80a:	9a01      	ldr	r2, [sp, #4]
   be80c:	2100      	movs	r1, #0
   be80e:	f7ff ffec 	bl	be7ea <memset>
   be812:	4620      	mov	r0, r4
   be814:	b002      	add	sp, #8
   be816:	bd10      	pop	{r4, pc}

000be818 <srand>:
   be818:	b538      	push	{r3, r4, r5, lr}
   be81a:	4b10      	ldr	r3, [pc, #64]	; (be85c <srand+0x44>)
   be81c:	681d      	ldr	r5, [r3, #0]
   be81e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   be820:	4604      	mov	r4, r0
   be822:	b9b3      	cbnz	r3, be852 <srand+0x3a>
   be824:	2018      	movs	r0, #24
   be826:	f7fd fe99 	bl	bc55c <malloc>
   be82a:	4602      	mov	r2, r0
   be82c:	63a8      	str	r0, [r5, #56]	; 0x38
   be82e:	b920      	cbnz	r0, be83a <srand+0x22>
   be830:	4b0b      	ldr	r3, [pc, #44]	; (be860 <srand+0x48>)
   be832:	480c      	ldr	r0, [pc, #48]	; (be864 <srand+0x4c>)
   be834:	2142      	movs	r1, #66	; 0x42
   be836:	f7fd fec1 	bl	bc5bc <__assert_func>
   be83a:	490b      	ldr	r1, [pc, #44]	; (be868 <srand+0x50>)
   be83c:	4b0b      	ldr	r3, [pc, #44]	; (be86c <srand+0x54>)
   be83e:	e9c0 1300 	strd	r1, r3, [r0]
   be842:	4b0b      	ldr	r3, [pc, #44]	; (be870 <srand+0x58>)
   be844:	6083      	str	r3, [r0, #8]
   be846:	230b      	movs	r3, #11
   be848:	8183      	strh	r3, [r0, #12]
   be84a:	2100      	movs	r1, #0
   be84c:	2001      	movs	r0, #1
   be84e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   be852:	6bab      	ldr	r3, [r5, #56]	; 0x38
   be854:	2200      	movs	r2, #0
   be856:	611c      	str	r4, [r3, #16]
   be858:	615a      	str	r2, [r3, #20]
   be85a:	bd38      	pop	{r3, r4, r5, pc}
   be85c:	2003a248 	.word	0x2003a248
   be860:	000cbca0 	.word	0x000cbca0
   be864:	000cbcb7 	.word	0x000cbcb7
   be868:	abcd330e 	.word	0xabcd330e
   be86c:	e66d1234 	.word	0xe66d1234
   be870:	0005deec 	.word	0x0005deec

000be874 <strcmp>:
   be874:	f810 2b01 	ldrb.w	r2, [r0], #1
   be878:	f811 3b01 	ldrb.w	r3, [r1], #1
   be87c:	2a01      	cmp	r2, #1
   be87e:	bf28      	it	cs
   be880:	429a      	cmpcs	r2, r3
   be882:	d0f7      	beq.n	be874 <strcmp>
   be884:	1ad0      	subs	r0, r2, r3
   be886:	4770      	bx	lr

000be888 <strdup>:
   be888:	4b02      	ldr	r3, [pc, #8]	; (be894 <strdup+0xc>)
   be88a:	4601      	mov	r1, r0
   be88c:	6818      	ldr	r0, [r3, #0]
   be88e:	f000 b803 	b.w	be898 <_strdup_r>
   be892:	bf00      	nop
   be894:	2003a248 	.word	0x2003a248

000be898 <_strdup_r>:
   be898:	b537      	push	{r0, r1, r2, r4, r5, lr}
   be89a:	4604      	mov	r4, r0
   be89c:	4608      	mov	r0, r1
   be89e:	460d      	mov	r5, r1
   be8a0:	f000 f80f 	bl	be8c2 <strlen>
   be8a4:	1c42      	adds	r2, r0, #1
   be8a6:	4611      	mov	r1, r2
   be8a8:	4620      	mov	r0, r4
   be8aa:	9201      	str	r2, [sp, #4]
   be8ac:	f7fd fe76 	bl	bc59c <_malloc_r>
   be8b0:	4604      	mov	r4, r0
   be8b2:	b118      	cbz	r0, be8bc <_strdup_r+0x24>
   be8b4:	9a01      	ldr	r2, [sp, #4]
   be8b6:	4629      	mov	r1, r5
   be8b8:	f7ff ff6f 	bl	be79a <memcpy>
   be8bc:	4620      	mov	r0, r4
   be8be:	b003      	add	sp, #12
   be8c0:	bd30      	pop	{r4, r5, pc}

000be8c2 <strlen>:
   be8c2:	4603      	mov	r3, r0
   be8c4:	f813 2b01 	ldrb.w	r2, [r3], #1
   be8c8:	2a00      	cmp	r2, #0
   be8ca:	d1fb      	bne.n	be8c4 <strlen+0x2>
   be8cc:	1a18      	subs	r0, r3, r0
   be8ce:	3801      	subs	r0, #1
   be8d0:	4770      	bx	lr

000be8d2 <strncmp>:
   be8d2:	b510      	push	{r4, lr}
   be8d4:	b17a      	cbz	r2, be8f6 <strncmp+0x24>
   be8d6:	4603      	mov	r3, r0
   be8d8:	3901      	subs	r1, #1
   be8da:	1884      	adds	r4, r0, r2
   be8dc:	f813 0b01 	ldrb.w	r0, [r3], #1
   be8e0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   be8e4:	4290      	cmp	r0, r2
   be8e6:	d101      	bne.n	be8ec <strncmp+0x1a>
   be8e8:	42a3      	cmp	r3, r4
   be8ea:	d101      	bne.n	be8f0 <strncmp+0x1e>
   be8ec:	1a80      	subs	r0, r0, r2
   be8ee:	bd10      	pop	{r4, pc}
   be8f0:	2800      	cmp	r0, #0
   be8f2:	d1f3      	bne.n	be8dc <strncmp+0xa>
   be8f4:	e7fa      	b.n	be8ec <strncmp+0x1a>
   be8f6:	4610      	mov	r0, r2
   be8f8:	e7f9      	b.n	be8ee <strncmp+0x1c>

000be8fa <sulp>:
   be8fa:	b570      	push	{r4, r5, r6, lr}
   be8fc:	4604      	mov	r4, r0
   be8fe:	460d      	mov	r5, r1
   be900:	ec45 4b10 	vmov	d0, r4, r5
   be904:	4616      	mov	r6, r2
   be906:	f001 fd7f 	bl	c0408 <__ulp>
   be90a:	ec51 0b10 	vmov	r0, r1, d0
   be90e:	b17e      	cbz	r6, be930 <sulp+0x36>
   be910:	f3c5 530a 	ubfx	r3, r5, #20, #11
   be914:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   be918:	2b00      	cmp	r3, #0
   be91a:	dd09      	ble.n	be930 <sulp+0x36>
   be91c:	051b      	lsls	r3, r3, #20
   be91e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   be922:	2400      	movs	r4, #0
   be924:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   be928:	4622      	mov	r2, r4
   be92a:	462b      	mov	r3, r5
   be92c:	f7ff f9ee 	bl	bdd0c <__aeabi_dmul>
   be930:	bd70      	pop	{r4, r5, r6, pc}
   be932:	0000      	movs	r0, r0
   be934:	0000      	movs	r0, r0
	...

000be938 <_strtod_l>:
   be938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be93c:	ed2d 8b02 	vpush	{d8}
   be940:	b09d      	sub	sp, #116	; 0x74
   be942:	461f      	mov	r7, r3
   be944:	2300      	movs	r3, #0
   be946:	9318      	str	r3, [sp, #96]	; 0x60
   be948:	4ba2      	ldr	r3, [pc, #648]	; (bebd4 <_strtod_l+0x29c>)
   be94a:	9213      	str	r2, [sp, #76]	; 0x4c
   be94c:	681b      	ldr	r3, [r3, #0]
   be94e:	9305      	str	r3, [sp, #20]
   be950:	4604      	mov	r4, r0
   be952:	4618      	mov	r0, r3
   be954:	4688      	mov	r8, r1
   be956:	f7ff ffb4 	bl	be8c2 <strlen>
   be95a:	f04f 0a00 	mov.w	sl, #0
   be95e:	4605      	mov	r5, r0
   be960:	f04f 0b00 	mov.w	fp, #0
   be964:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   be968:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   be96a:	781a      	ldrb	r2, [r3, #0]
   be96c:	2a2b      	cmp	r2, #43	; 0x2b
   be96e:	d04e      	beq.n	bea0e <_strtod_l+0xd6>
   be970:	d83b      	bhi.n	be9ea <_strtod_l+0xb2>
   be972:	2a0d      	cmp	r2, #13
   be974:	d834      	bhi.n	be9e0 <_strtod_l+0xa8>
   be976:	2a08      	cmp	r2, #8
   be978:	d834      	bhi.n	be9e4 <_strtod_l+0xac>
   be97a:	2a00      	cmp	r2, #0
   be97c:	d03e      	beq.n	be9fc <_strtod_l+0xc4>
   be97e:	2300      	movs	r3, #0
   be980:	930a      	str	r3, [sp, #40]	; 0x28
   be982:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   be984:	7833      	ldrb	r3, [r6, #0]
   be986:	2b30      	cmp	r3, #48	; 0x30
   be988:	f040 80b0 	bne.w	beaec <_strtod_l+0x1b4>
   be98c:	7873      	ldrb	r3, [r6, #1]
   be98e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   be992:	2b58      	cmp	r3, #88	; 0x58
   be994:	d168      	bne.n	bea68 <_strtod_l+0x130>
   be996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   be998:	9301      	str	r3, [sp, #4]
   be99a:	ab18      	add	r3, sp, #96	; 0x60
   be99c:	9702      	str	r7, [sp, #8]
   be99e:	9300      	str	r3, [sp, #0]
   be9a0:	4a8d      	ldr	r2, [pc, #564]	; (bebd8 <_strtod_l+0x2a0>)
   be9a2:	ab19      	add	r3, sp, #100	; 0x64
   be9a4:	a917      	add	r1, sp, #92	; 0x5c
   be9a6:	4620      	mov	r0, r4
   be9a8:	f000 fea2 	bl	bf6f0 <__gethex>
   be9ac:	f010 0707 	ands.w	r7, r0, #7
   be9b0:	4605      	mov	r5, r0
   be9b2:	d005      	beq.n	be9c0 <_strtod_l+0x88>
   be9b4:	2f06      	cmp	r7, #6
   be9b6:	d12c      	bne.n	bea12 <_strtod_l+0xda>
   be9b8:	3601      	adds	r6, #1
   be9ba:	2300      	movs	r3, #0
   be9bc:	9617      	str	r6, [sp, #92]	; 0x5c
   be9be:	930a      	str	r3, [sp, #40]	; 0x28
   be9c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   be9c2:	2b00      	cmp	r3, #0
   be9c4:	f040 8590 	bne.w	bf4e8 <_strtod_l+0xbb0>
   be9c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   be9ca:	b1eb      	cbz	r3, bea08 <_strtod_l+0xd0>
   be9cc:	4652      	mov	r2, sl
   be9ce:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   be9d2:	ec43 2b10 	vmov	d0, r2, r3
   be9d6:	b01d      	add	sp, #116	; 0x74
   be9d8:	ecbd 8b02 	vpop	{d8}
   be9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   be9e0:	2a20      	cmp	r2, #32
   be9e2:	d1cc      	bne.n	be97e <_strtod_l+0x46>
   be9e4:	3301      	adds	r3, #1
   be9e6:	9317      	str	r3, [sp, #92]	; 0x5c
   be9e8:	e7be      	b.n	be968 <_strtod_l+0x30>
   be9ea:	2a2d      	cmp	r2, #45	; 0x2d
   be9ec:	d1c7      	bne.n	be97e <_strtod_l+0x46>
   be9ee:	2201      	movs	r2, #1
   be9f0:	920a      	str	r2, [sp, #40]	; 0x28
   be9f2:	1c5a      	adds	r2, r3, #1
   be9f4:	9217      	str	r2, [sp, #92]	; 0x5c
   be9f6:	785b      	ldrb	r3, [r3, #1]
   be9f8:	2b00      	cmp	r3, #0
   be9fa:	d1c2      	bne.n	be982 <_strtod_l+0x4a>
   be9fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   be9fe:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bea02:	2b00      	cmp	r3, #0
   bea04:	f040 856e 	bne.w	bf4e4 <_strtod_l+0xbac>
   bea08:	4652      	mov	r2, sl
   bea0a:	465b      	mov	r3, fp
   bea0c:	e7e1      	b.n	be9d2 <_strtod_l+0x9a>
   bea0e:	2200      	movs	r2, #0
   bea10:	e7ee      	b.n	be9f0 <_strtod_l+0xb8>
   bea12:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bea14:	b13a      	cbz	r2, bea26 <_strtod_l+0xee>
   bea16:	2135      	movs	r1, #53	; 0x35
   bea18:	a81a      	add	r0, sp, #104	; 0x68
   bea1a:	f001 fe00 	bl	c061e <__copybits>
   bea1e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bea20:	4620      	mov	r0, r4
   bea22:	f001 f9bf 	bl	bfda4 <_Bfree>
   bea26:	3f01      	subs	r7, #1
   bea28:	2f04      	cmp	r7, #4
   bea2a:	d806      	bhi.n	bea3a <_strtod_l+0x102>
   bea2c:	e8df f007 	tbb	[pc, r7]
   bea30:	1714030a 	.word	0x1714030a
   bea34:	0a          	.byte	0x0a
   bea35:	00          	.byte	0x00
   bea36:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   bea3a:	0728      	lsls	r0, r5, #28
   bea3c:	d5c0      	bpl.n	be9c0 <_strtod_l+0x88>
   bea3e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   bea42:	e7bd      	b.n	be9c0 <_strtod_l+0x88>
   bea44:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   bea48:	9a19      	ldr	r2, [sp, #100]	; 0x64
   bea4a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   bea4e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   bea52:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   bea56:	e7f0      	b.n	bea3a <_strtod_l+0x102>
   bea58:	f8df b180 	ldr.w	fp, [pc, #384]	; bebdc <_strtod_l+0x2a4>
   bea5c:	e7ed      	b.n	bea3a <_strtod_l+0x102>
   bea5e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   bea62:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bea66:	e7e8      	b.n	bea3a <_strtod_l+0x102>
   bea68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bea6a:	1c5a      	adds	r2, r3, #1
   bea6c:	9217      	str	r2, [sp, #92]	; 0x5c
   bea6e:	785b      	ldrb	r3, [r3, #1]
   bea70:	2b30      	cmp	r3, #48	; 0x30
   bea72:	d0f9      	beq.n	bea68 <_strtod_l+0x130>
   bea74:	2b00      	cmp	r3, #0
   bea76:	d0a3      	beq.n	be9c0 <_strtod_l+0x88>
   bea78:	2301      	movs	r3, #1
   bea7a:	f04f 0900 	mov.w	r9, #0
   bea7e:	9304      	str	r3, [sp, #16]
   bea80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bea82:	9308      	str	r3, [sp, #32]
   bea84:	f8cd 901c 	str.w	r9, [sp, #28]
   bea88:	464f      	mov	r7, r9
   bea8a:	220a      	movs	r2, #10
   bea8c:	9817      	ldr	r0, [sp, #92]	; 0x5c
   bea8e:	7806      	ldrb	r6, [r0, #0]
   bea90:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   bea94:	b2d9      	uxtb	r1, r3
   bea96:	2909      	cmp	r1, #9
   bea98:	d92a      	bls.n	beaf0 <_strtod_l+0x1b8>
   bea9a:	9905      	ldr	r1, [sp, #20]
   bea9c:	462a      	mov	r2, r5
   bea9e:	f7ff ff18 	bl	be8d2 <strncmp>
   beaa2:	b398      	cbz	r0, beb0c <_strtod_l+0x1d4>
   beaa4:	2000      	movs	r0, #0
   beaa6:	4632      	mov	r2, r6
   beaa8:	463d      	mov	r5, r7
   beaaa:	9005      	str	r0, [sp, #20]
   beaac:	4603      	mov	r3, r0
   beaae:	2a65      	cmp	r2, #101	; 0x65
   beab0:	d001      	beq.n	beab6 <_strtod_l+0x17e>
   beab2:	2a45      	cmp	r2, #69	; 0x45
   beab4:	d118      	bne.n	beae8 <_strtod_l+0x1b0>
   beab6:	b91d      	cbnz	r5, beac0 <_strtod_l+0x188>
   beab8:	9a04      	ldr	r2, [sp, #16]
   beaba:	4302      	orrs	r2, r0
   beabc:	d09e      	beq.n	be9fc <_strtod_l+0xc4>
   beabe:	2500      	movs	r5, #0
   beac0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   beac4:	f108 0201 	add.w	r2, r8, #1
   beac8:	9217      	str	r2, [sp, #92]	; 0x5c
   beaca:	f898 2001 	ldrb.w	r2, [r8, #1]
   beace:	2a2b      	cmp	r2, #43	; 0x2b
   bead0:	d075      	beq.n	bebbe <_strtod_l+0x286>
   bead2:	2a2d      	cmp	r2, #45	; 0x2d
   bead4:	d07b      	beq.n	bebce <_strtod_l+0x296>
   bead6:	f04f 0c00 	mov.w	ip, #0
   beada:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   beade:	2909      	cmp	r1, #9
   beae0:	f240 8082 	bls.w	bebe8 <_strtod_l+0x2b0>
   beae4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   beae8:	2600      	movs	r6, #0
   beaea:	e09d      	b.n	bec28 <_strtod_l+0x2f0>
   beaec:	2300      	movs	r3, #0
   beaee:	e7c4      	b.n	bea7a <_strtod_l+0x142>
   beaf0:	2f08      	cmp	r7, #8
   beaf2:	bfd8      	it	le
   beaf4:	9907      	ldrle	r1, [sp, #28]
   beaf6:	f100 0001 	add.w	r0, r0, #1
   beafa:	bfda      	itte	le
   beafc:	fb02 3301 	mlale	r3, r2, r1, r3
   beb00:	9307      	strle	r3, [sp, #28]
   beb02:	fb02 3909 	mlagt	r9, r2, r9, r3
   beb06:	3701      	adds	r7, #1
   beb08:	9017      	str	r0, [sp, #92]	; 0x5c
   beb0a:	e7bf      	b.n	bea8c <_strtod_l+0x154>
   beb0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   beb0e:	195a      	adds	r2, r3, r5
   beb10:	9217      	str	r2, [sp, #92]	; 0x5c
   beb12:	5d5a      	ldrb	r2, [r3, r5]
   beb14:	2f00      	cmp	r7, #0
   beb16:	d037      	beq.n	beb88 <_strtod_l+0x250>
   beb18:	9005      	str	r0, [sp, #20]
   beb1a:	463d      	mov	r5, r7
   beb1c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   beb20:	2b09      	cmp	r3, #9
   beb22:	d912      	bls.n	beb4a <_strtod_l+0x212>
   beb24:	2301      	movs	r3, #1
   beb26:	e7c2      	b.n	beaae <_strtod_l+0x176>
   beb28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   beb2a:	1c5a      	adds	r2, r3, #1
   beb2c:	9217      	str	r2, [sp, #92]	; 0x5c
   beb2e:	785a      	ldrb	r2, [r3, #1]
   beb30:	3001      	adds	r0, #1
   beb32:	2a30      	cmp	r2, #48	; 0x30
   beb34:	d0f8      	beq.n	beb28 <_strtod_l+0x1f0>
   beb36:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   beb3a:	2b08      	cmp	r3, #8
   beb3c:	f200 84d9 	bhi.w	bf4f2 <_strtod_l+0xbba>
   beb40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   beb42:	9005      	str	r0, [sp, #20]
   beb44:	2000      	movs	r0, #0
   beb46:	9308      	str	r3, [sp, #32]
   beb48:	4605      	mov	r5, r0
   beb4a:	3a30      	subs	r2, #48	; 0x30
   beb4c:	f100 0301 	add.w	r3, r0, #1
   beb50:	d014      	beq.n	beb7c <_strtod_l+0x244>
   beb52:	9905      	ldr	r1, [sp, #20]
   beb54:	4419      	add	r1, r3
   beb56:	9105      	str	r1, [sp, #20]
   beb58:	462b      	mov	r3, r5
   beb5a:	eb00 0e05 	add.w	lr, r0, r5
   beb5e:	210a      	movs	r1, #10
   beb60:	4573      	cmp	r3, lr
   beb62:	d113      	bne.n	beb8c <_strtod_l+0x254>
   beb64:	182b      	adds	r3, r5, r0
   beb66:	2b08      	cmp	r3, #8
   beb68:	f105 0501 	add.w	r5, r5, #1
   beb6c:	4405      	add	r5, r0
   beb6e:	dc1c      	bgt.n	bebaa <_strtod_l+0x272>
   beb70:	9907      	ldr	r1, [sp, #28]
   beb72:	230a      	movs	r3, #10
   beb74:	fb03 2301 	mla	r3, r3, r1, r2
   beb78:	9307      	str	r3, [sp, #28]
   beb7a:	2300      	movs	r3, #0
   beb7c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   beb7e:	1c51      	adds	r1, r2, #1
   beb80:	9117      	str	r1, [sp, #92]	; 0x5c
   beb82:	7852      	ldrb	r2, [r2, #1]
   beb84:	4618      	mov	r0, r3
   beb86:	e7c9      	b.n	beb1c <_strtod_l+0x1e4>
   beb88:	4638      	mov	r0, r7
   beb8a:	e7d2      	b.n	beb32 <_strtod_l+0x1fa>
   beb8c:	2b08      	cmp	r3, #8
   beb8e:	dc04      	bgt.n	beb9a <_strtod_l+0x262>
   beb90:	9e07      	ldr	r6, [sp, #28]
   beb92:	434e      	muls	r6, r1
   beb94:	9607      	str	r6, [sp, #28]
   beb96:	3301      	adds	r3, #1
   beb98:	e7e2      	b.n	beb60 <_strtod_l+0x228>
   beb9a:	f103 0c01 	add.w	ip, r3, #1
   beb9e:	f1bc 0f10 	cmp.w	ip, #16
   beba2:	bfd8      	it	le
   beba4:	fb01 f909 	mulle.w	r9, r1, r9
   beba8:	e7f5      	b.n	beb96 <_strtod_l+0x25e>
   bebaa:	2d10      	cmp	r5, #16
   bebac:	bfdc      	itt	le
   bebae:	230a      	movle	r3, #10
   bebb0:	fb03 2909 	mlale	r9, r3, r9, r2
   bebb4:	e7e1      	b.n	beb7a <_strtod_l+0x242>
   bebb6:	2300      	movs	r3, #0
   bebb8:	9305      	str	r3, [sp, #20]
   bebba:	2301      	movs	r3, #1
   bebbc:	e77c      	b.n	beab8 <_strtod_l+0x180>
   bebbe:	f04f 0c00 	mov.w	ip, #0
   bebc2:	f108 0202 	add.w	r2, r8, #2
   bebc6:	9217      	str	r2, [sp, #92]	; 0x5c
   bebc8:	f898 2002 	ldrb.w	r2, [r8, #2]
   bebcc:	e785      	b.n	beada <_strtod_l+0x1a2>
   bebce:	f04f 0c01 	mov.w	ip, #1
   bebd2:	e7f6      	b.n	bebc2 <_strtod_l+0x28a>
   bebd4:	000cbf8c 	.word	0x000cbf8c
   bebd8:	000cbd40 	.word	0x000cbd40
   bebdc:	7ff00000 	.word	0x7ff00000
   bebe0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bebe2:	1c51      	adds	r1, r2, #1
   bebe4:	9117      	str	r1, [sp, #92]	; 0x5c
   bebe6:	7852      	ldrb	r2, [r2, #1]
   bebe8:	2a30      	cmp	r2, #48	; 0x30
   bebea:	d0f9      	beq.n	bebe0 <_strtod_l+0x2a8>
   bebec:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   bebf0:	2908      	cmp	r1, #8
   bebf2:	f63f af79 	bhi.w	beae8 <_strtod_l+0x1b0>
   bebf6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   bebfa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bebfc:	9206      	str	r2, [sp, #24]
   bebfe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bec00:	1c51      	adds	r1, r2, #1
   bec02:	9117      	str	r1, [sp, #92]	; 0x5c
   bec04:	7852      	ldrb	r2, [r2, #1]
   bec06:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   bec0a:	2e09      	cmp	r6, #9
   bec0c:	d937      	bls.n	bec7e <_strtod_l+0x346>
   bec0e:	9e06      	ldr	r6, [sp, #24]
   bec10:	1b89      	subs	r1, r1, r6
   bec12:	2908      	cmp	r1, #8
   bec14:	f644 661f 	movw	r6, #19999	; 0x4e1f
   bec18:	dc02      	bgt.n	bec20 <_strtod_l+0x2e8>
   bec1a:	4576      	cmp	r6, lr
   bec1c:	bfa8      	it	ge
   bec1e:	4676      	movge	r6, lr
   bec20:	f1bc 0f00 	cmp.w	ip, #0
   bec24:	d000      	beq.n	bec28 <_strtod_l+0x2f0>
   bec26:	4276      	negs	r6, r6
   bec28:	2d00      	cmp	r5, #0
   bec2a:	d14d      	bne.n	becc8 <_strtod_l+0x390>
   bec2c:	9904      	ldr	r1, [sp, #16]
   bec2e:	4301      	orrs	r1, r0
   bec30:	f47f aec6 	bne.w	be9c0 <_strtod_l+0x88>
   bec34:	2b00      	cmp	r3, #0
   bec36:	f47f aee1 	bne.w	be9fc <_strtod_l+0xc4>
   bec3a:	2a69      	cmp	r2, #105	; 0x69
   bec3c:	d027      	beq.n	bec8e <_strtod_l+0x356>
   bec3e:	dc24      	bgt.n	bec8a <_strtod_l+0x352>
   bec40:	2a49      	cmp	r2, #73	; 0x49
   bec42:	d024      	beq.n	bec8e <_strtod_l+0x356>
   bec44:	2a4e      	cmp	r2, #78	; 0x4e
   bec46:	f47f aed9 	bne.w	be9fc <_strtod_l+0xc4>
   bec4a:	499f      	ldr	r1, [pc, #636]	; (beec8 <_strtod_l+0x590>)
   bec4c:	a817      	add	r0, sp, #92	; 0x5c
   bec4e:	f000 ffa7 	bl	bfba0 <__match>
   bec52:	2800      	cmp	r0, #0
   bec54:	f43f aed2 	beq.w	be9fc <_strtod_l+0xc4>
   bec58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bec5a:	781b      	ldrb	r3, [r3, #0]
   bec5c:	2b28      	cmp	r3, #40	; 0x28
   bec5e:	d12d      	bne.n	becbc <_strtod_l+0x384>
   bec60:	499a      	ldr	r1, [pc, #616]	; (beecc <_strtod_l+0x594>)
   bec62:	aa1a      	add	r2, sp, #104	; 0x68
   bec64:	a817      	add	r0, sp, #92	; 0x5c
   bec66:	f000 ffaf 	bl	bfbc8 <__hexnan>
   bec6a:	2805      	cmp	r0, #5
   bec6c:	d126      	bne.n	becbc <_strtod_l+0x384>
   bec6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bec70:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   bec74:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   bec78:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   bec7c:	e6a0      	b.n	be9c0 <_strtod_l+0x88>
   bec7e:	210a      	movs	r1, #10
   bec80:	fb01 2e0e 	mla	lr, r1, lr, r2
   bec84:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   bec88:	e7b9      	b.n	bebfe <_strtod_l+0x2c6>
   bec8a:	2a6e      	cmp	r2, #110	; 0x6e
   bec8c:	e7db      	b.n	bec46 <_strtod_l+0x30e>
   bec8e:	4990      	ldr	r1, [pc, #576]	; (beed0 <_strtod_l+0x598>)
   bec90:	a817      	add	r0, sp, #92	; 0x5c
   bec92:	f000 ff85 	bl	bfba0 <__match>
   bec96:	2800      	cmp	r0, #0
   bec98:	f43f aeb0 	beq.w	be9fc <_strtod_l+0xc4>
   bec9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bec9e:	498d      	ldr	r1, [pc, #564]	; (beed4 <_strtod_l+0x59c>)
   beca0:	3b01      	subs	r3, #1
   beca2:	a817      	add	r0, sp, #92	; 0x5c
   beca4:	9317      	str	r3, [sp, #92]	; 0x5c
   beca6:	f000 ff7b 	bl	bfba0 <__match>
   becaa:	b910      	cbnz	r0, becb2 <_strtod_l+0x37a>
   becac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   becae:	3301      	adds	r3, #1
   becb0:	9317      	str	r3, [sp, #92]	; 0x5c
   becb2:	f8df b230 	ldr.w	fp, [pc, #560]	; beee4 <_strtod_l+0x5ac>
   becb6:	f04f 0a00 	mov.w	sl, #0
   becba:	e681      	b.n	be9c0 <_strtod_l+0x88>
   becbc:	4886      	ldr	r0, [pc, #536]	; (beed8 <_strtod_l+0x5a0>)
   becbe:	f7fe fe53 	bl	bd968 <nan>
   becc2:	ec5b ab10 	vmov	sl, fp, d0
   becc6:	e67b      	b.n	be9c0 <_strtod_l+0x88>
   becc8:	9b05      	ldr	r3, [sp, #20]
   becca:	9807      	ldr	r0, [sp, #28]
   beccc:	1af3      	subs	r3, r6, r3
   becce:	2f00      	cmp	r7, #0
   becd0:	bf08      	it	eq
   becd2:	462f      	moveq	r7, r5
   becd4:	2d10      	cmp	r5, #16
   becd6:	9306      	str	r3, [sp, #24]
   becd8:	46a8      	mov	r8, r5
   becda:	bfa8      	it	ge
   becdc:	f04f 0810 	movge.w	r8, #16
   bece0:	f7fe ff9a 	bl	bdc18 <__aeabi_ui2d>
   bece4:	2d09      	cmp	r5, #9
   bece6:	4682      	mov	sl, r0
   bece8:	468b      	mov	fp, r1
   becea:	dd13      	ble.n	bed14 <_strtod_l+0x3dc>
   becec:	4b7b      	ldr	r3, [pc, #492]	; (beedc <_strtod_l+0x5a4>)
   becee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   becf2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   becf6:	f7ff f809 	bl	bdd0c <__aeabi_dmul>
   becfa:	4682      	mov	sl, r0
   becfc:	4648      	mov	r0, r9
   becfe:	468b      	mov	fp, r1
   bed00:	f7fe ff8a 	bl	bdc18 <__aeabi_ui2d>
   bed04:	4602      	mov	r2, r0
   bed06:	460b      	mov	r3, r1
   bed08:	4650      	mov	r0, sl
   bed0a:	4659      	mov	r1, fp
   bed0c:	f7fe fe48 	bl	bd9a0 <__adddf3>
   bed10:	4682      	mov	sl, r0
   bed12:	468b      	mov	fp, r1
   bed14:	2d0f      	cmp	r5, #15
   bed16:	dc38      	bgt.n	bed8a <_strtod_l+0x452>
   bed18:	9b06      	ldr	r3, [sp, #24]
   bed1a:	2b00      	cmp	r3, #0
   bed1c:	f43f ae50 	beq.w	be9c0 <_strtod_l+0x88>
   bed20:	dd24      	ble.n	bed6c <_strtod_l+0x434>
   bed22:	2b16      	cmp	r3, #22
   bed24:	dc0b      	bgt.n	bed3e <_strtod_l+0x406>
   bed26:	496d      	ldr	r1, [pc, #436]	; (beedc <_strtod_l+0x5a4>)
   bed28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bed2c:	e9d1 0100 	ldrd	r0, r1, [r1]
   bed30:	4652      	mov	r2, sl
   bed32:	465b      	mov	r3, fp
   bed34:	f7fe ffea 	bl	bdd0c <__aeabi_dmul>
   bed38:	4682      	mov	sl, r0
   bed3a:	468b      	mov	fp, r1
   bed3c:	e640      	b.n	be9c0 <_strtod_l+0x88>
   bed3e:	9a06      	ldr	r2, [sp, #24]
   bed40:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   bed44:	4293      	cmp	r3, r2
   bed46:	db20      	blt.n	bed8a <_strtod_l+0x452>
   bed48:	4c64      	ldr	r4, [pc, #400]	; (beedc <_strtod_l+0x5a4>)
   bed4a:	f1c5 050f 	rsb	r5, r5, #15
   bed4e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   bed52:	4652      	mov	r2, sl
   bed54:	465b      	mov	r3, fp
   bed56:	e9d1 0100 	ldrd	r0, r1, [r1]
   bed5a:	f7fe ffd7 	bl	bdd0c <__aeabi_dmul>
   bed5e:	9b06      	ldr	r3, [sp, #24]
   bed60:	1b5d      	subs	r5, r3, r5
   bed62:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   bed66:	e9d4 2300 	ldrd	r2, r3, [r4]
   bed6a:	e7e3      	b.n	bed34 <_strtod_l+0x3fc>
   bed6c:	9b06      	ldr	r3, [sp, #24]
   bed6e:	3316      	adds	r3, #22
   bed70:	db0b      	blt.n	bed8a <_strtod_l+0x452>
   bed72:	9b05      	ldr	r3, [sp, #20]
   bed74:	1b9e      	subs	r6, r3, r6
   bed76:	4b59      	ldr	r3, [pc, #356]	; (beedc <_strtod_l+0x5a4>)
   bed78:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   bed7c:	e9d6 2300 	ldrd	r2, r3, [r6]
   bed80:	4650      	mov	r0, sl
   bed82:	4659      	mov	r1, fp
   bed84:	f7ff f8ec 	bl	bdf60 <__aeabi_ddiv>
   bed88:	e7d6      	b.n	bed38 <_strtod_l+0x400>
   bed8a:	9b06      	ldr	r3, [sp, #24]
   bed8c:	eba5 0808 	sub.w	r8, r5, r8
   bed90:	4498      	add	r8, r3
   bed92:	f1b8 0f00 	cmp.w	r8, #0
   bed96:	dd74      	ble.n	bee82 <_strtod_l+0x54a>
   bed98:	f018 030f 	ands.w	r3, r8, #15
   bed9c:	d00a      	beq.n	bedb4 <_strtod_l+0x47c>
   bed9e:	494f      	ldr	r1, [pc, #316]	; (beedc <_strtod_l+0x5a4>)
   beda0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   beda4:	4652      	mov	r2, sl
   beda6:	465b      	mov	r3, fp
   beda8:	e9d1 0100 	ldrd	r0, r1, [r1]
   bedac:	f7fe ffae 	bl	bdd0c <__aeabi_dmul>
   bedb0:	4682      	mov	sl, r0
   bedb2:	468b      	mov	fp, r1
   bedb4:	f038 080f 	bics.w	r8, r8, #15
   bedb8:	d04f      	beq.n	bee5a <_strtod_l+0x522>
   bedba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   bedbe:	dd22      	ble.n	bee06 <_strtod_l+0x4ce>
   bedc0:	2500      	movs	r5, #0
   bedc2:	462e      	mov	r6, r5
   bedc4:	9507      	str	r5, [sp, #28]
   bedc6:	9505      	str	r5, [sp, #20]
   bedc8:	2322      	movs	r3, #34	; 0x22
   bedca:	f8df b118 	ldr.w	fp, [pc, #280]	; beee4 <_strtod_l+0x5ac>
   bedce:	6023      	str	r3, [r4, #0]
   bedd0:	f04f 0a00 	mov.w	sl, #0
   bedd4:	9b07      	ldr	r3, [sp, #28]
   bedd6:	2b00      	cmp	r3, #0
   bedd8:	f43f adf2 	beq.w	be9c0 <_strtod_l+0x88>
   beddc:	9918      	ldr	r1, [sp, #96]	; 0x60
   bedde:	4620      	mov	r0, r4
   bede0:	f000 ffe0 	bl	bfda4 <_Bfree>
   bede4:	9905      	ldr	r1, [sp, #20]
   bede6:	4620      	mov	r0, r4
   bede8:	f000 ffdc 	bl	bfda4 <_Bfree>
   bedec:	4631      	mov	r1, r6
   bedee:	4620      	mov	r0, r4
   bedf0:	f000 ffd8 	bl	bfda4 <_Bfree>
   bedf4:	9907      	ldr	r1, [sp, #28]
   bedf6:	4620      	mov	r0, r4
   bedf8:	f000 ffd4 	bl	bfda4 <_Bfree>
   bedfc:	4629      	mov	r1, r5
   bedfe:	4620      	mov	r0, r4
   bee00:	f000 ffd0 	bl	bfda4 <_Bfree>
   bee04:	e5dc      	b.n	be9c0 <_strtod_l+0x88>
   bee06:	4b36      	ldr	r3, [pc, #216]	; (beee0 <_strtod_l+0x5a8>)
   bee08:	9304      	str	r3, [sp, #16]
   bee0a:	2300      	movs	r3, #0
   bee0c:	ea4f 1828 	mov.w	r8, r8, asr #4
   bee10:	4650      	mov	r0, sl
   bee12:	4659      	mov	r1, fp
   bee14:	4699      	mov	r9, r3
   bee16:	f1b8 0f01 	cmp.w	r8, #1
   bee1a:	dc21      	bgt.n	bee60 <_strtod_l+0x528>
   bee1c:	b10b      	cbz	r3, bee22 <_strtod_l+0x4ea>
   bee1e:	4682      	mov	sl, r0
   bee20:	468b      	mov	fp, r1
   bee22:	4b2f      	ldr	r3, [pc, #188]	; (beee0 <_strtod_l+0x5a8>)
   bee24:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   bee28:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   bee2c:	4652      	mov	r2, sl
   bee2e:	465b      	mov	r3, fp
   bee30:	e9d9 0100 	ldrd	r0, r1, [r9]
   bee34:	f7fe ff6a 	bl	bdd0c <__aeabi_dmul>
   bee38:	4b2a      	ldr	r3, [pc, #168]	; (beee4 <_strtod_l+0x5ac>)
   bee3a:	460a      	mov	r2, r1
   bee3c:	400b      	ands	r3, r1
   bee3e:	492a      	ldr	r1, [pc, #168]	; (beee8 <_strtod_l+0x5b0>)
   bee40:	428b      	cmp	r3, r1
   bee42:	4682      	mov	sl, r0
   bee44:	d8bc      	bhi.n	bedc0 <_strtod_l+0x488>
   bee46:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   bee4a:	428b      	cmp	r3, r1
   bee4c:	bf86      	itte	hi
   bee4e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; beeec <_strtod_l+0x5b4>
   bee52:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   bee56:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   bee5a:	2300      	movs	r3, #0
   bee5c:	9304      	str	r3, [sp, #16]
   bee5e:	e084      	b.n	bef6a <_strtod_l+0x632>
   bee60:	f018 0f01 	tst.w	r8, #1
   bee64:	d005      	beq.n	bee72 <_strtod_l+0x53a>
   bee66:	9b04      	ldr	r3, [sp, #16]
   bee68:	e9d3 2300 	ldrd	r2, r3, [r3]
   bee6c:	f7fe ff4e 	bl	bdd0c <__aeabi_dmul>
   bee70:	2301      	movs	r3, #1
   bee72:	9a04      	ldr	r2, [sp, #16]
   bee74:	3208      	adds	r2, #8
   bee76:	f109 0901 	add.w	r9, r9, #1
   bee7a:	ea4f 0868 	mov.w	r8, r8, asr #1
   bee7e:	9204      	str	r2, [sp, #16]
   bee80:	e7c9      	b.n	bee16 <_strtod_l+0x4de>
   bee82:	d0ea      	beq.n	bee5a <_strtod_l+0x522>
   bee84:	f1c8 0800 	rsb	r8, r8, #0
   bee88:	f018 020f 	ands.w	r2, r8, #15
   bee8c:	d00a      	beq.n	beea4 <_strtod_l+0x56c>
   bee8e:	4b13      	ldr	r3, [pc, #76]	; (beedc <_strtod_l+0x5a4>)
   bee90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   bee94:	4650      	mov	r0, sl
   bee96:	4659      	mov	r1, fp
   bee98:	e9d3 2300 	ldrd	r2, r3, [r3]
   bee9c:	f7ff f860 	bl	bdf60 <__aeabi_ddiv>
   beea0:	4682      	mov	sl, r0
   beea2:	468b      	mov	fp, r1
   beea4:	ea5f 1828 	movs.w	r8, r8, asr #4
   beea8:	d0d7      	beq.n	bee5a <_strtod_l+0x522>
   beeaa:	f1b8 0f1f 	cmp.w	r8, #31
   beeae:	dd1f      	ble.n	beef0 <_strtod_l+0x5b8>
   beeb0:	2500      	movs	r5, #0
   beeb2:	462e      	mov	r6, r5
   beeb4:	9507      	str	r5, [sp, #28]
   beeb6:	9505      	str	r5, [sp, #20]
   beeb8:	2322      	movs	r3, #34	; 0x22
   beeba:	f04f 0a00 	mov.w	sl, #0
   beebe:	f04f 0b00 	mov.w	fp, #0
   beec2:	6023      	str	r3, [r4, #0]
   beec4:	e786      	b.n	bedd4 <_strtod_l+0x49c>
   beec6:	bf00      	nop
   beec8:	000cbd3d 	.word	0x000cbd3d
   beecc:	000cbd54 	.word	0x000cbd54
   beed0:	000cbd34 	.word	0x000cbd34
   beed4:	000cbd37 	.word	0x000cbd37
   beed8:	000c0df1 	.word	0x000c0df1
   beedc:	000cc048 	.word	0x000cc048
   beee0:	000cc020 	.word	0x000cc020
   beee4:	7ff00000 	.word	0x7ff00000
   beee8:	7ca00000 	.word	0x7ca00000
   beeec:	7fefffff 	.word	0x7fefffff
   beef0:	f018 0310 	ands.w	r3, r8, #16
   beef4:	bf18      	it	ne
   beef6:	236a      	movne	r3, #106	; 0x6a
   beef8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bf2a8 <_strtod_l+0x970>
   beefc:	9304      	str	r3, [sp, #16]
   beefe:	4650      	mov	r0, sl
   bef00:	4659      	mov	r1, fp
   bef02:	2300      	movs	r3, #0
   bef04:	f018 0f01 	tst.w	r8, #1
   bef08:	d004      	beq.n	bef14 <_strtod_l+0x5dc>
   bef0a:	e9d9 2300 	ldrd	r2, r3, [r9]
   bef0e:	f7fe fefd 	bl	bdd0c <__aeabi_dmul>
   bef12:	2301      	movs	r3, #1
   bef14:	ea5f 0868 	movs.w	r8, r8, asr #1
   bef18:	f109 0908 	add.w	r9, r9, #8
   bef1c:	d1f2      	bne.n	bef04 <_strtod_l+0x5cc>
   bef1e:	b10b      	cbz	r3, bef24 <_strtod_l+0x5ec>
   bef20:	4682      	mov	sl, r0
   bef22:	468b      	mov	fp, r1
   bef24:	9b04      	ldr	r3, [sp, #16]
   bef26:	b1c3      	cbz	r3, bef5a <_strtod_l+0x622>
   bef28:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bef2c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bef30:	2b00      	cmp	r3, #0
   bef32:	4659      	mov	r1, fp
   bef34:	dd11      	ble.n	bef5a <_strtod_l+0x622>
   bef36:	2b1f      	cmp	r3, #31
   bef38:	f340 8124 	ble.w	bf184 <_strtod_l+0x84c>
   bef3c:	2b34      	cmp	r3, #52	; 0x34
   bef3e:	bfde      	ittt	le
   bef40:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bef44:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   bef48:	fa03 f202 	lslle.w	r2, r3, r2
   bef4c:	f04f 0a00 	mov.w	sl, #0
   bef50:	bfcc      	ite	gt
   bef52:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bef56:	ea02 0b01 	andle.w	fp, r2, r1
   bef5a:	2200      	movs	r2, #0
   bef5c:	2300      	movs	r3, #0
   bef5e:	4650      	mov	r0, sl
   bef60:	4659      	mov	r1, fp
   bef62:	f7ff f93b 	bl	be1dc <__aeabi_dcmpeq>
   bef66:	2800      	cmp	r0, #0
   bef68:	d1a2      	bne.n	beeb0 <_strtod_l+0x578>
   bef6a:	9b07      	ldr	r3, [sp, #28]
   bef6c:	9300      	str	r3, [sp, #0]
   bef6e:	9908      	ldr	r1, [sp, #32]
   bef70:	462b      	mov	r3, r5
   bef72:	463a      	mov	r2, r7
   bef74:	4620      	mov	r0, r4
   bef76:	f000 ff7d 	bl	bfe74 <__s2b>
   bef7a:	9007      	str	r0, [sp, #28]
   bef7c:	2800      	cmp	r0, #0
   bef7e:	f43f af1f 	beq.w	bedc0 <_strtod_l+0x488>
   bef82:	9b05      	ldr	r3, [sp, #20]
   bef84:	1b9e      	subs	r6, r3, r6
   bef86:	9b06      	ldr	r3, [sp, #24]
   bef88:	2b00      	cmp	r3, #0
   bef8a:	bfb4      	ite	lt
   bef8c:	4633      	movlt	r3, r6
   bef8e:	2300      	movge	r3, #0
   bef90:	930c      	str	r3, [sp, #48]	; 0x30
   bef92:	9b06      	ldr	r3, [sp, #24]
   bef94:	2500      	movs	r5, #0
   bef96:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   bef9a:	9312      	str	r3, [sp, #72]	; 0x48
   bef9c:	462e      	mov	r6, r5
   bef9e:	9b07      	ldr	r3, [sp, #28]
   befa0:	4620      	mov	r0, r4
   befa2:	6859      	ldr	r1, [r3, #4]
   befa4:	f000 febe 	bl	bfd24 <_Balloc>
   befa8:	9005      	str	r0, [sp, #20]
   befaa:	2800      	cmp	r0, #0
   befac:	f43f af0c 	beq.w	bedc8 <_strtod_l+0x490>
   befb0:	9b07      	ldr	r3, [sp, #28]
   befb2:	691a      	ldr	r2, [r3, #16]
   befb4:	3202      	adds	r2, #2
   befb6:	f103 010c 	add.w	r1, r3, #12
   befba:	0092      	lsls	r2, r2, #2
   befbc:	300c      	adds	r0, #12
   befbe:	f7ff fbec 	bl	be79a <memcpy>
   befc2:	ec4b ab10 	vmov	d0, sl, fp
   befc6:	aa1a      	add	r2, sp, #104	; 0x68
   befc8:	a919      	add	r1, sp, #100	; 0x64
   befca:	4620      	mov	r0, r4
   befcc:	f001 fa98 	bl	c0500 <__d2b>
   befd0:	ec4b ab18 	vmov	d8, sl, fp
   befd4:	9018      	str	r0, [sp, #96]	; 0x60
   befd6:	2800      	cmp	r0, #0
   befd8:	f43f aef6 	beq.w	bedc8 <_strtod_l+0x490>
   befdc:	2101      	movs	r1, #1
   befde:	4620      	mov	r0, r4
   befe0:	f000 ffe2 	bl	bffa8 <__i2b>
   befe4:	4606      	mov	r6, r0
   befe6:	2800      	cmp	r0, #0
   befe8:	f43f aeee 	beq.w	bedc8 <_strtod_l+0x490>
   befec:	9b19      	ldr	r3, [sp, #100]	; 0x64
   befee:	9904      	ldr	r1, [sp, #16]
   beff0:	2b00      	cmp	r3, #0
   beff2:	bfab      	itete	ge
   beff4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   beff6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   beff8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   beffa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   beffe:	bfac      	ite	ge
   bf000:	eb03 0902 	addge.w	r9, r3, r2
   bf004:	1ad7      	sublt	r7, r2, r3
   bf006:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bf008:	eba3 0801 	sub.w	r8, r3, r1
   bf00c:	4490      	add	r8, r2
   bf00e:	4ba1      	ldr	r3, [pc, #644]	; (bf294 <_strtod_l+0x95c>)
   bf010:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bf014:	4598      	cmp	r8, r3
   bf016:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bf01a:	f280 80c7 	bge.w	bf1ac <_strtod_l+0x874>
   bf01e:	eba3 0308 	sub.w	r3, r3, r8
   bf022:	2b1f      	cmp	r3, #31
   bf024:	eba2 0203 	sub.w	r2, r2, r3
   bf028:	f04f 0101 	mov.w	r1, #1
   bf02c:	f300 80b1 	bgt.w	bf192 <_strtod_l+0x85a>
   bf030:	fa01 f303 	lsl.w	r3, r1, r3
   bf034:	930d      	str	r3, [sp, #52]	; 0x34
   bf036:	2300      	movs	r3, #0
   bf038:	9308      	str	r3, [sp, #32]
   bf03a:	eb09 0802 	add.w	r8, r9, r2
   bf03e:	9b04      	ldr	r3, [sp, #16]
   bf040:	45c1      	cmp	r9, r8
   bf042:	4417      	add	r7, r2
   bf044:	441f      	add	r7, r3
   bf046:	464b      	mov	r3, r9
   bf048:	bfa8      	it	ge
   bf04a:	4643      	movge	r3, r8
   bf04c:	42bb      	cmp	r3, r7
   bf04e:	bfa8      	it	ge
   bf050:	463b      	movge	r3, r7
   bf052:	2b00      	cmp	r3, #0
   bf054:	bfc2      	ittt	gt
   bf056:	eba8 0803 	subgt.w	r8, r8, r3
   bf05a:	1aff      	subgt	r7, r7, r3
   bf05c:	eba9 0903 	subgt.w	r9, r9, r3
   bf060:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bf062:	2b00      	cmp	r3, #0
   bf064:	dd17      	ble.n	bf096 <_strtod_l+0x75e>
   bf066:	4631      	mov	r1, r6
   bf068:	461a      	mov	r2, r3
   bf06a:	4620      	mov	r0, r4
   bf06c:	f001 f85c 	bl	c0128 <__pow5mult>
   bf070:	4606      	mov	r6, r0
   bf072:	2800      	cmp	r0, #0
   bf074:	f43f aea8 	beq.w	bedc8 <_strtod_l+0x490>
   bf078:	4601      	mov	r1, r0
   bf07a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bf07c:	4620      	mov	r0, r4
   bf07e:	f000 ffa9 	bl	bffd4 <__multiply>
   bf082:	900b      	str	r0, [sp, #44]	; 0x2c
   bf084:	2800      	cmp	r0, #0
   bf086:	f43f ae9f 	beq.w	bedc8 <_strtod_l+0x490>
   bf08a:	9918      	ldr	r1, [sp, #96]	; 0x60
   bf08c:	4620      	mov	r0, r4
   bf08e:	f000 fe89 	bl	bfda4 <_Bfree>
   bf092:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bf094:	9318      	str	r3, [sp, #96]	; 0x60
   bf096:	f1b8 0f00 	cmp.w	r8, #0
   bf09a:	f300 808c 	bgt.w	bf1b6 <_strtod_l+0x87e>
   bf09e:	9b06      	ldr	r3, [sp, #24]
   bf0a0:	2b00      	cmp	r3, #0
   bf0a2:	dd08      	ble.n	bf0b6 <_strtod_l+0x77e>
   bf0a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bf0a6:	9905      	ldr	r1, [sp, #20]
   bf0a8:	4620      	mov	r0, r4
   bf0aa:	f001 f83d 	bl	c0128 <__pow5mult>
   bf0ae:	9005      	str	r0, [sp, #20]
   bf0b0:	2800      	cmp	r0, #0
   bf0b2:	f43f ae89 	beq.w	bedc8 <_strtod_l+0x490>
   bf0b6:	2f00      	cmp	r7, #0
   bf0b8:	dd08      	ble.n	bf0cc <_strtod_l+0x794>
   bf0ba:	9905      	ldr	r1, [sp, #20]
   bf0bc:	463a      	mov	r2, r7
   bf0be:	4620      	mov	r0, r4
   bf0c0:	f001 f88c 	bl	c01dc <__lshift>
   bf0c4:	9005      	str	r0, [sp, #20]
   bf0c6:	2800      	cmp	r0, #0
   bf0c8:	f43f ae7e 	beq.w	bedc8 <_strtod_l+0x490>
   bf0cc:	f1b9 0f00 	cmp.w	r9, #0
   bf0d0:	dd08      	ble.n	bf0e4 <_strtod_l+0x7ac>
   bf0d2:	4631      	mov	r1, r6
   bf0d4:	464a      	mov	r2, r9
   bf0d6:	4620      	mov	r0, r4
   bf0d8:	f001 f880 	bl	c01dc <__lshift>
   bf0dc:	4606      	mov	r6, r0
   bf0de:	2800      	cmp	r0, #0
   bf0e0:	f43f ae72 	beq.w	bedc8 <_strtod_l+0x490>
   bf0e4:	9a05      	ldr	r2, [sp, #20]
   bf0e6:	9918      	ldr	r1, [sp, #96]	; 0x60
   bf0e8:	4620      	mov	r0, r4
   bf0ea:	f001 f903 	bl	c02f4 <__mdiff>
   bf0ee:	4605      	mov	r5, r0
   bf0f0:	2800      	cmp	r0, #0
   bf0f2:	f43f ae69 	beq.w	bedc8 <_strtod_l+0x490>
   bf0f6:	68c3      	ldr	r3, [r0, #12]
   bf0f8:	930b      	str	r3, [sp, #44]	; 0x2c
   bf0fa:	2300      	movs	r3, #0
   bf0fc:	60c3      	str	r3, [r0, #12]
   bf0fe:	4631      	mov	r1, r6
   bf100:	f001 f8dc 	bl	c02bc <__mcmp>
   bf104:	2800      	cmp	r0, #0
   bf106:	da60      	bge.n	bf1ca <_strtod_l+0x892>
   bf108:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bf10a:	ea53 030a 	orrs.w	r3, r3, sl
   bf10e:	f040 8082 	bne.w	bf216 <_strtod_l+0x8de>
   bf112:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bf116:	2b00      	cmp	r3, #0
   bf118:	d17d      	bne.n	bf216 <_strtod_l+0x8de>
   bf11a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bf11e:	0d1b      	lsrs	r3, r3, #20
   bf120:	051b      	lsls	r3, r3, #20
   bf122:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bf126:	d976      	bls.n	bf216 <_strtod_l+0x8de>
   bf128:	696b      	ldr	r3, [r5, #20]
   bf12a:	b913      	cbnz	r3, bf132 <_strtod_l+0x7fa>
   bf12c:	692b      	ldr	r3, [r5, #16]
   bf12e:	2b01      	cmp	r3, #1
   bf130:	dd71      	ble.n	bf216 <_strtod_l+0x8de>
   bf132:	4629      	mov	r1, r5
   bf134:	2201      	movs	r2, #1
   bf136:	4620      	mov	r0, r4
   bf138:	f001 f850 	bl	c01dc <__lshift>
   bf13c:	4631      	mov	r1, r6
   bf13e:	4605      	mov	r5, r0
   bf140:	f001 f8bc 	bl	c02bc <__mcmp>
   bf144:	2800      	cmp	r0, #0
   bf146:	dd66      	ble.n	bf216 <_strtod_l+0x8de>
   bf148:	9904      	ldr	r1, [sp, #16]
   bf14a:	4a53      	ldr	r2, [pc, #332]	; (bf298 <_strtod_l+0x960>)
   bf14c:	465b      	mov	r3, fp
   bf14e:	2900      	cmp	r1, #0
   bf150:	f000 8081 	beq.w	bf256 <_strtod_l+0x91e>
   bf154:	ea02 010b 	and.w	r1, r2, fp
   bf158:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bf15c:	dc7b      	bgt.n	bf256 <_strtod_l+0x91e>
   bf15e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bf162:	f77f aea9 	ble.w	beeb8 <_strtod_l+0x580>
   bf166:	4b4d      	ldr	r3, [pc, #308]	; (bf29c <_strtod_l+0x964>)
   bf168:	4650      	mov	r0, sl
   bf16a:	4659      	mov	r1, fp
   bf16c:	2200      	movs	r2, #0
   bf16e:	f7fe fdcd 	bl	bdd0c <__aeabi_dmul>
   bf172:	460b      	mov	r3, r1
   bf174:	4303      	orrs	r3, r0
   bf176:	bf08      	it	eq
   bf178:	2322      	moveq	r3, #34	; 0x22
   bf17a:	4682      	mov	sl, r0
   bf17c:	468b      	mov	fp, r1
   bf17e:	bf08      	it	eq
   bf180:	6023      	streq	r3, [r4, #0]
   bf182:	e62b      	b.n	beddc <_strtod_l+0x4a4>
   bf184:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bf188:	fa02 f303 	lsl.w	r3, r2, r3
   bf18c:	ea03 0a0a 	and.w	sl, r3, sl
   bf190:	e6e3      	b.n	bef5a <_strtod_l+0x622>
   bf192:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bf196:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bf19a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bf19e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bf1a2:	fa01 f308 	lsl.w	r3, r1, r8
   bf1a6:	9308      	str	r3, [sp, #32]
   bf1a8:	910d      	str	r1, [sp, #52]	; 0x34
   bf1aa:	e746      	b.n	bf03a <_strtod_l+0x702>
   bf1ac:	2300      	movs	r3, #0
   bf1ae:	9308      	str	r3, [sp, #32]
   bf1b0:	2301      	movs	r3, #1
   bf1b2:	930d      	str	r3, [sp, #52]	; 0x34
   bf1b4:	e741      	b.n	bf03a <_strtod_l+0x702>
   bf1b6:	9918      	ldr	r1, [sp, #96]	; 0x60
   bf1b8:	4642      	mov	r2, r8
   bf1ba:	4620      	mov	r0, r4
   bf1bc:	f001 f80e 	bl	c01dc <__lshift>
   bf1c0:	9018      	str	r0, [sp, #96]	; 0x60
   bf1c2:	2800      	cmp	r0, #0
   bf1c4:	f47f af6b 	bne.w	bf09e <_strtod_l+0x766>
   bf1c8:	e5fe      	b.n	bedc8 <_strtod_l+0x490>
   bf1ca:	465f      	mov	r7, fp
   bf1cc:	d16e      	bne.n	bf2ac <_strtod_l+0x974>
   bf1ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bf1d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bf1d4:	b342      	cbz	r2, bf228 <_strtod_l+0x8f0>
   bf1d6:	4a32      	ldr	r2, [pc, #200]	; (bf2a0 <_strtod_l+0x968>)
   bf1d8:	4293      	cmp	r3, r2
   bf1da:	d128      	bne.n	bf22e <_strtod_l+0x8f6>
   bf1dc:	9b04      	ldr	r3, [sp, #16]
   bf1de:	4651      	mov	r1, sl
   bf1e0:	b1eb      	cbz	r3, bf21e <_strtod_l+0x8e6>
   bf1e2:	4b2d      	ldr	r3, [pc, #180]	; (bf298 <_strtod_l+0x960>)
   bf1e4:	403b      	ands	r3, r7
   bf1e6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bf1ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bf1ee:	d819      	bhi.n	bf224 <_strtod_l+0x8ec>
   bf1f0:	0d1b      	lsrs	r3, r3, #20
   bf1f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bf1f6:	fa02 f303 	lsl.w	r3, r2, r3
   bf1fa:	4299      	cmp	r1, r3
   bf1fc:	d117      	bne.n	bf22e <_strtod_l+0x8f6>
   bf1fe:	4b29      	ldr	r3, [pc, #164]	; (bf2a4 <_strtod_l+0x96c>)
   bf200:	429f      	cmp	r7, r3
   bf202:	d102      	bne.n	bf20a <_strtod_l+0x8d2>
   bf204:	3101      	adds	r1, #1
   bf206:	f43f addf 	beq.w	bedc8 <_strtod_l+0x490>
   bf20a:	4b23      	ldr	r3, [pc, #140]	; (bf298 <_strtod_l+0x960>)
   bf20c:	403b      	ands	r3, r7
   bf20e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bf212:	f04f 0a00 	mov.w	sl, #0
   bf216:	9b04      	ldr	r3, [sp, #16]
   bf218:	2b00      	cmp	r3, #0
   bf21a:	d1a4      	bne.n	bf166 <_strtod_l+0x82e>
   bf21c:	e5de      	b.n	beddc <_strtod_l+0x4a4>
   bf21e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bf222:	e7ea      	b.n	bf1fa <_strtod_l+0x8c2>
   bf224:	4613      	mov	r3, r2
   bf226:	e7e8      	b.n	bf1fa <_strtod_l+0x8c2>
   bf228:	ea53 030a 	orrs.w	r3, r3, sl
   bf22c:	d08c      	beq.n	bf148 <_strtod_l+0x810>
   bf22e:	9b08      	ldr	r3, [sp, #32]
   bf230:	b1db      	cbz	r3, bf26a <_strtod_l+0x932>
   bf232:	423b      	tst	r3, r7
   bf234:	d0ef      	beq.n	bf216 <_strtod_l+0x8de>
   bf236:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bf238:	9a04      	ldr	r2, [sp, #16]
   bf23a:	4650      	mov	r0, sl
   bf23c:	4659      	mov	r1, fp
   bf23e:	b1c3      	cbz	r3, bf272 <_strtod_l+0x93a>
   bf240:	f7ff fb5b 	bl	be8fa <sulp>
   bf244:	4602      	mov	r2, r0
   bf246:	460b      	mov	r3, r1
   bf248:	ec51 0b18 	vmov	r0, r1, d8
   bf24c:	f7fe fba8 	bl	bd9a0 <__adddf3>
   bf250:	4682      	mov	sl, r0
   bf252:	468b      	mov	fp, r1
   bf254:	e7df      	b.n	bf216 <_strtod_l+0x8de>
   bf256:	4013      	ands	r3, r2
   bf258:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bf25c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bf260:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bf264:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bf268:	e7d5      	b.n	bf216 <_strtod_l+0x8de>
   bf26a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bf26c:	ea13 0f0a 	tst.w	r3, sl
   bf270:	e7e0      	b.n	bf234 <_strtod_l+0x8fc>
   bf272:	f7ff fb42 	bl	be8fa <sulp>
   bf276:	4602      	mov	r2, r0
   bf278:	460b      	mov	r3, r1
   bf27a:	ec51 0b18 	vmov	r0, r1, d8
   bf27e:	f7fe fb8d 	bl	bd99c <__aeabi_dsub>
   bf282:	2200      	movs	r2, #0
   bf284:	2300      	movs	r3, #0
   bf286:	4682      	mov	sl, r0
   bf288:	468b      	mov	fp, r1
   bf28a:	f7fe ffa7 	bl	be1dc <__aeabi_dcmpeq>
   bf28e:	2800      	cmp	r0, #0
   bf290:	d0c1      	beq.n	bf216 <_strtod_l+0x8de>
   bf292:	e611      	b.n	beeb8 <_strtod_l+0x580>
   bf294:	fffffc02 	.word	0xfffffc02
   bf298:	7ff00000 	.word	0x7ff00000
   bf29c:	39500000 	.word	0x39500000
   bf2a0:	000fffff 	.word	0x000fffff
   bf2a4:	7fefffff 	.word	0x7fefffff
   bf2a8:	000cbd68 	.word	0x000cbd68
   bf2ac:	4631      	mov	r1, r6
   bf2ae:	4628      	mov	r0, r5
   bf2b0:	f001 f982 	bl	c05b8 <__ratio>
   bf2b4:	ec59 8b10 	vmov	r8, r9, d0
   bf2b8:	ee10 0a10 	vmov	r0, s0
   bf2bc:	2200      	movs	r2, #0
   bf2be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bf2c2:	4649      	mov	r1, r9
   bf2c4:	f7fe ff9e 	bl	be204 <__aeabi_dcmple>
   bf2c8:	2800      	cmp	r0, #0
   bf2ca:	d07a      	beq.n	bf3c2 <_strtod_l+0xa8a>
   bf2cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bf2ce:	2b00      	cmp	r3, #0
   bf2d0:	d04a      	beq.n	bf368 <_strtod_l+0xa30>
   bf2d2:	4b95      	ldr	r3, [pc, #596]	; (bf528 <_strtod_l+0xbf0>)
   bf2d4:	2200      	movs	r2, #0
   bf2d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bf2da:	f8df 924c 	ldr.w	r9, [pc, #588]	; bf528 <_strtod_l+0xbf0>
   bf2de:	f04f 0800 	mov.w	r8, #0
   bf2e2:	4b92      	ldr	r3, [pc, #584]	; (bf52c <_strtod_l+0xbf4>)
   bf2e4:	403b      	ands	r3, r7
   bf2e6:	930d      	str	r3, [sp, #52]	; 0x34
   bf2e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bf2ea:	4b91      	ldr	r3, [pc, #580]	; (bf530 <_strtod_l+0xbf8>)
   bf2ec:	429a      	cmp	r2, r3
   bf2ee:	f040 80b0 	bne.w	bf452 <_strtod_l+0xb1a>
   bf2f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bf2f6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bf2fa:	ec4b ab10 	vmov	d0, sl, fp
   bf2fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bf302:	f001 f881 	bl	c0408 <__ulp>
   bf306:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bf30a:	ec53 2b10 	vmov	r2, r3, d0
   bf30e:	f7fe fcfd 	bl	bdd0c <__aeabi_dmul>
   bf312:	4652      	mov	r2, sl
   bf314:	465b      	mov	r3, fp
   bf316:	f7fe fb43 	bl	bd9a0 <__adddf3>
   bf31a:	460b      	mov	r3, r1
   bf31c:	4983      	ldr	r1, [pc, #524]	; (bf52c <_strtod_l+0xbf4>)
   bf31e:	4a85      	ldr	r2, [pc, #532]	; (bf534 <_strtod_l+0xbfc>)
   bf320:	4019      	ands	r1, r3
   bf322:	4291      	cmp	r1, r2
   bf324:	4682      	mov	sl, r0
   bf326:	d960      	bls.n	bf3ea <_strtod_l+0xab2>
   bf328:	ee18 3a90 	vmov	r3, s17
   bf32c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bf330:	4293      	cmp	r3, r2
   bf332:	d104      	bne.n	bf33e <_strtod_l+0xa06>
   bf334:	ee18 3a10 	vmov	r3, s16
   bf338:	3301      	adds	r3, #1
   bf33a:	f43f ad45 	beq.w	bedc8 <_strtod_l+0x490>
   bf33e:	f8df b200 	ldr.w	fp, [pc, #512]	; bf540 <_strtod_l+0xc08>
   bf342:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bf346:	9918      	ldr	r1, [sp, #96]	; 0x60
   bf348:	4620      	mov	r0, r4
   bf34a:	f000 fd2b 	bl	bfda4 <_Bfree>
   bf34e:	9905      	ldr	r1, [sp, #20]
   bf350:	4620      	mov	r0, r4
   bf352:	f000 fd27 	bl	bfda4 <_Bfree>
   bf356:	4631      	mov	r1, r6
   bf358:	4620      	mov	r0, r4
   bf35a:	f000 fd23 	bl	bfda4 <_Bfree>
   bf35e:	4629      	mov	r1, r5
   bf360:	4620      	mov	r0, r4
   bf362:	f000 fd1f 	bl	bfda4 <_Bfree>
   bf366:	e61a      	b.n	bef9e <_strtod_l+0x666>
   bf368:	f1ba 0f00 	cmp.w	sl, #0
   bf36c:	d11b      	bne.n	bf3a6 <_strtod_l+0xa6e>
   bf36e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bf372:	b9f3      	cbnz	r3, bf3b2 <_strtod_l+0xa7a>
   bf374:	4b6c      	ldr	r3, [pc, #432]	; (bf528 <_strtod_l+0xbf0>)
   bf376:	2200      	movs	r2, #0
   bf378:	4640      	mov	r0, r8
   bf37a:	4649      	mov	r1, r9
   bf37c:	f7fe ff38 	bl	be1f0 <__aeabi_dcmplt>
   bf380:	b9d0      	cbnz	r0, bf3b8 <_strtod_l+0xa80>
   bf382:	4640      	mov	r0, r8
   bf384:	4649      	mov	r1, r9
   bf386:	4b6c      	ldr	r3, [pc, #432]	; (bf538 <_strtod_l+0xc00>)
   bf388:	2200      	movs	r2, #0
   bf38a:	f7fe fcbf 	bl	bdd0c <__aeabi_dmul>
   bf38e:	4680      	mov	r8, r0
   bf390:	4689      	mov	r9, r1
   bf392:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bf396:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bf39a:	9315      	str	r3, [sp, #84]	; 0x54
   bf39c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bf3a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bf3a4:	e79d      	b.n	bf2e2 <_strtod_l+0x9aa>
   bf3a6:	f1ba 0f01 	cmp.w	sl, #1
   bf3aa:	d102      	bne.n	bf3b2 <_strtod_l+0xa7a>
   bf3ac:	2f00      	cmp	r7, #0
   bf3ae:	f43f ad83 	beq.w	beeb8 <_strtod_l+0x580>
   bf3b2:	4b62      	ldr	r3, [pc, #392]	; (bf53c <_strtod_l+0xc04>)
   bf3b4:	2200      	movs	r2, #0
   bf3b6:	e78e      	b.n	bf2d6 <_strtod_l+0x99e>
   bf3b8:	f8df 917c 	ldr.w	r9, [pc, #380]	; bf538 <_strtod_l+0xc00>
   bf3bc:	f04f 0800 	mov.w	r8, #0
   bf3c0:	e7e7      	b.n	bf392 <_strtod_l+0xa5a>
   bf3c2:	4b5d      	ldr	r3, [pc, #372]	; (bf538 <_strtod_l+0xc00>)
   bf3c4:	4640      	mov	r0, r8
   bf3c6:	4649      	mov	r1, r9
   bf3c8:	2200      	movs	r2, #0
   bf3ca:	f7fe fc9f 	bl	bdd0c <__aeabi_dmul>
   bf3ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bf3d0:	4680      	mov	r8, r0
   bf3d2:	4689      	mov	r9, r1
   bf3d4:	b933      	cbnz	r3, bf3e4 <_strtod_l+0xaac>
   bf3d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bf3da:	900e      	str	r0, [sp, #56]	; 0x38
   bf3dc:	930f      	str	r3, [sp, #60]	; 0x3c
   bf3de:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bf3e2:	e7dd      	b.n	bf3a0 <_strtod_l+0xa68>
   bf3e4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bf3e8:	e7f9      	b.n	bf3de <_strtod_l+0xaa6>
   bf3ea:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bf3ee:	9b04      	ldr	r3, [sp, #16]
   bf3f0:	2b00      	cmp	r3, #0
   bf3f2:	d1a8      	bne.n	bf346 <_strtod_l+0xa0e>
   bf3f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bf3f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bf3fa:	0d1b      	lsrs	r3, r3, #20
   bf3fc:	051b      	lsls	r3, r3, #20
   bf3fe:	429a      	cmp	r2, r3
   bf400:	d1a1      	bne.n	bf346 <_strtod_l+0xa0e>
   bf402:	4640      	mov	r0, r8
   bf404:	4649      	mov	r1, r9
   bf406:	f7ff f803 	bl	be410 <__aeabi_d2lz>
   bf40a:	f7fe fc51 	bl	bdcb0 <__aeabi_l2d>
   bf40e:	4602      	mov	r2, r0
   bf410:	460b      	mov	r3, r1
   bf412:	4640      	mov	r0, r8
   bf414:	4649      	mov	r1, r9
   bf416:	f7fe fac1 	bl	bd99c <__aeabi_dsub>
   bf41a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bf41c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bf420:	ea43 030a 	orr.w	r3, r3, sl
   bf424:	4313      	orrs	r3, r2
   bf426:	4680      	mov	r8, r0
   bf428:	4689      	mov	r9, r1
   bf42a:	d055      	beq.n	bf4d8 <_strtod_l+0xba0>
   bf42c:	a336      	add	r3, pc, #216	; (adr r3, bf508 <_strtod_l+0xbd0>)
   bf42e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bf432:	f7fe fedd 	bl	be1f0 <__aeabi_dcmplt>
   bf436:	2800      	cmp	r0, #0
   bf438:	f47f acd0 	bne.w	beddc <_strtod_l+0x4a4>
   bf43c:	a334      	add	r3, pc, #208	; (adr r3, bf510 <_strtod_l+0xbd8>)
   bf43e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bf442:	4640      	mov	r0, r8
   bf444:	4649      	mov	r1, r9
   bf446:	f7fe fef1 	bl	be22c <__aeabi_dcmpgt>
   bf44a:	2800      	cmp	r0, #0
   bf44c:	f43f af7b 	beq.w	bf346 <_strtod_l+0xa0e>
   bf450:	e4c4      	b.n	beddc <_strtod_l+0x4a4>
   bf452:	9b04      	ldr	r3, [sp, #16]
   bf454:	b333      	cbz	r3, bf4a4 <_strtod_l+0xb6c>
   bf456:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bf458:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bf45c:	d822      	bhi.n	bf4a4 <_strtod_l+0xb6c>
   bf45e:	a32e      	add	r3, pc, #184	; (adr r3, bf518 <_strtod_l+0xbe0>)
   bf460:	e9d3 2300 	ldrd	r2, r3, [r3]
   bf464:	4640      	mov	r0, r8
   bf466:	4649      	mov	r1, r9
   bf468:	f7fe fecc 	bl	be204 <__aeabi_dcmple>
   bf46c:	b1a0      	cbz	r0, bf498 <_strtod_l+0xb60>
   bf46e:	4649      	mov	r1, r9
   bf470:	4640      	mov	r0, r8
   bf472:	f7fe ff0d 	bl	be290 <__aeabi_d2uiz>
   bf476:	2801      	cmp	r0, #1
   bf478:	bf38      	it	cc
   bf47a:	2001      	movcc	r0, #1
   bf47c:	f7fe fbcc 	bl	bdc18 <__aeabi_ui2d>
   bf480:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bf482:	4680      	mov	r8, r0
   bf484:	4689      	mov	r9, r1
   bf486:	bb23      	cbnz	r3, bf4d2 <_strtod_l+0xb9a>
   bf488:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bf48c:	9010      	str	r0, [sp, #64]	; 0x40
   bf48e:	9311      	str	r3, [sp, #68]	; 0x44
   bf490:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bf494:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bf498:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bf49a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bf49c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bf4a0:	1a9b      	subs	r3, r3, r2
   bf4a2:	9309      	str	r3, [sp, #36]	; 0x24
   bf4a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bf4a8:	eeb0 0a48 	vmov.f32	s0, s16
   bf4ac:	eef0 0a68 	vmov.f32	s1, s17
   bf4b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bf4b4:	f000 ffa8 	bl	c0408 <__ulp>
   bf4b8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bf4bc:	ec53 2b10 	vmov	r2, r3, d0
   bf4c0:	f7fe fc24 	bl	bdd0c <__aeabi_dmul>
   bf4c4:	ec53 2b18 	vmov	r2, r3, d8
   bf4c8:	f7fe fa6a 	bl	bd9a0 <__adddf3>
   bf4cc:	4682      	mov	sl, r0
   bf4ce:	468b      	mov	fp, r1
   bf4d0:	e78d      	b.n	bf3ee <_strtod_l+0xab6>
   bf4d2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bf4d6:	e7db      	b.n	bf490 <_strtod_l+0xb58>
   bf4d8:	a311      	add	r3, pc, #68	; (adr r3, bf520 <_strtod_l+0xbe8>)
   bf4da:	e9d3 2300 	ldrd	r2, r3, [r3]
   bf4de:	f7fe fe87 	bl	be1f0 <__aeabi_dcmplt>
   bf4e2:	e7b2      	b.n	bf44a <_strtod_l+0xb12>
   bf4e4:	2300      	movs	r3, #0
   bf4e6:	930a      	str	r3, [sp, #40]	; 0x28
   bf4e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bf4ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bf4ec:	6013      	str	r3, [r2, #0]
   bf4ee:	f7ff ba6b 	b.w	be9c8 <_strtod_l+0x90>
   bf4f2:	2a65      	cmp	r2, #101	; 0x65
   bf4f4:	f43f ab5f 	beq.w	bebb6 <_strtod_l+0x27e>
   bf4f8:	2a45      	cmp	r2, #69	; 0x45
   bf4fa:	f43f ab5c 	beq.w	bebb6 <_strtod_l+0x27e>
   bf4fe:	2301      	movs	r3, #1
   bf500:	f7ff bb94 	b.w	bec2c <_strtod_l+0x2f4>
   bf504:	f3af 8000 	nop.w
   bf508:	94a03595 	.word	0x94a03595
   bf50c:	3fdfffff 	.word	0x3fdfffff
   bf510:	35afe535 	.word	0x35afe535
   bf514:	3fe00000 	.word	0x3fe00000
   bf518:	ffc00000 	.word	0xffc00000
   bf51c:	41dfffff 	.word	0x41dfffff
   bf520:	94a03595 	.word	0x94a03595
   bf524:	3fcfffff 	.word	0x3fcfffff
   bf528:	3ff00000 	.word	0x3ff00000
   bf52c:	7ff00000 	.word	0x7ff00000
   bf530:	7fe00000 	.word	0x7fe00000
   bf534:	7c9fffff 	.word	0x7c9fffff
   bf538:	3fe00000 	.word	0x3fe00000
   bf53c:	bff00000 	.word	0xbff00000
   bf540:	7fefffff 	.word	0x7fefffff

000bf544 <strtod>:
   bf544:	460a      	mov	r2, r1
   bf546:	4601      	mov	r1, r0
   bf548:	4802      	ldr	r0, [pc, #8]	; (bf554 <strtod+0x10>)
   bf54a:	4b03      	ldr	r3, [pc, #12]	; (bf558 <strtod+0x14>)
   bf54c:	6800      	ldr	r0, [r0, #0]
   bf54e:	f7ff b9f3 	b.w	be938 <_strtod_l>
   bf552:	bf00      	nop
   bf554:	2003a248 	.word	0x2003a248
   bf558:	2003a2b4 	.word	0x2003a2b4

000bf55c <__register_exitproc>:
   bf55c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bf560:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bf61c <__register_exitproc+0xc0>
   bf564:	4606      	mov	r6, r0
   bf566:	f8d8 0000 	ldr.w	r0, [r8]
   bf56a:	461f      	mov	r7, r3
   bf56c:	460d      	mov	r5, r1
   bf56e:	4691      	mov	r9, r2
   bf570:	f7ff f900 	bl	be774 <__retarget_lock_acquire_recursive>
   bf574:	4b25      	ldr	r3, [pc, #148]	; (bf60c <__register_exitproc+0xb0>)
   bf576:	681c      	ldr	r4, [r3, #0]
   bf578:	b934      	cbnz	r4, bf588 <__register_exitproc+0x2c>
   bf57a:	4c25      	ldr	r4, [pc, #148]	; (bf610 <__register_exitproc+0xb4>)
   bf57c:	601c      	str	r4, [r3, #0]
   bf57e:	4b25      	ldr	r3, [pc, #148]	; (bf614 <__register_exitproc+0xb8>)
   bf580:	b113      	cbz	r3, bf588 <__register_exitproc+0x2c>
   bf582:	681b      	ldr	r3, [r3, #0]
   bf584:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bf588:	6863      	ldr	r3, [r4, #4]
   bf58a:	2b1f      	cmp	r3, #31
   bf58c:	dd07      	ble.n	bf59e <__register_exitproc+0x42>
   bf58e:	f8d8 0000 	ldr.w	r0, [r8]
   bf592:	f7ff f8f1 	bl	be778 <__retarget_lock_release_recursive>
   bf596:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bf59a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bf59e:	b34e      	cbz	r6, bf5f4 <__register_exitproc+0x98>
   bf5a0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bf5a4:	b988      	cbnz	r0, bf5ca <__register_exitproc+0x6e>
   bf5a6:	4b1c      	ldr	r3, [pc, #112]	; (bf618 <__register_exitproc+0xbc>)
   bf5a8:	b923      	cbnz	r3, bf5b4 <__register_exitproc+0x58>
   bf5aa:	f8d8 0000 	ldr.w	r0, [r8]
   bf5ae:	f7ff f8e2 	bl	be776 <__retarget_lock_release>
   bf5b2:	e7f0      	b.n	bf596 <__register_exitproc+0x3a>
   bf5b4:	f44f 7084 	mov.w	r0, #264	; 0x108
   bf5b8:	f7fc ffd0 	bl	bc55c <malloc>
   bf5bc:	2800      	cmp	r0, #0
   bf5be:	d0f4      	beq.n	bf5aa <__register_exitproc+0x4e>
   bf5c0:	2300      	movs	r3, #0
   bf5c2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bf5c6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bf5ca:	6863      	ldr	r3, [r4, #4]
   bf5cc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bf5d0:	2201      	movs	r2, #1
   bf5d2:	409a      	lsls	r2, r3
   bf5d4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bf5d8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bf5dc:	4313      	orrs	r3, r2
   bf5de:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bf5e2:	2e02      	cmp	r6, #2
   bf5e4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bf5e8:	bf02      	ittt	eq
   bf5ea:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bf5ee:	4313      	orreq	r3, r2
   bf5f0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bf5f4:	6863      	ldr	r3, [r4, #4]
   bf5f6:	f8d8 0000 	ldr.w	r0, [r8]
   bf5fa:	1c5a      	adds	r2, r3, #1
   bf5fc:	3302      	adds	r3, #2
   bf5fe:	6062      	str	r2, [r4, #4]
   bf600:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bf604:	f7ff f8b8 	bl	be778 <__retarget_lock_release_recursive>
   bf608:	2000      	movs	r0, #0
   bf60a:	e7c6      	b.n	bf59a <__register_exitproc+0x3e>
   bf60c:	2003e7ec 	.word	0x2003e7ec
   bf610:	2003e760 	.word	0x2003e760
   bf614:	00000000 	.word	0x00000000
   bf618:	000bc55d 	.word	0x000bc55d
   bf61c:	2003a2ac 	.word	0x2003a2ac

000bf620 <rshift>:
   bf620:	6903      	ldr	r3, [r0, #16]
   bf622:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bf626:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bf62a:	ea4f 1261 	mov.w	r2, r1, asr #5
   bf62e:	f100 0414 	add.w	r4, r0, #20
   bf632:	dd45      	ble.n	bf6c0 <rshift+0xa0>
   bf634:	f011 011f 	ands.w	r1, r1, #31
   bf638:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bf63c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bf640:	d10c      	bne.n	bf65c <rshift+0x3c>
   bf642:	f100 0710 	add.w	r7, r0, #16
   bf646:	4629      	mov	r1, r5
   bf648:	42b1      	cmp	r1, r6
   bf64a:	d334      	bcc.n	bf6b6 <rshift+0x96>
   bf64c:	1a9b      	subs	r3, r3, r2
   bf64e:	009b      	lsls	r3, r3, #2
   bf650:	1eea      	subs	r2, r5, #3
   bf652:	4296      	cmp	r6, r2
   bf654:	bf38      	it	cc
   bf656:	2300      	movcc	r3, #0
   bf658:	4423      	add	r3, r4
   bf65a:	e015      	b.n	bf688 <rshift+0x68>
   bf65c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bf660:	f1c1 0820 	rsb	r8, r1, #32
   bf664:	40cf      	lsrs	r7, r1
   bf666:	f105 0e04 	add.w	lr, r5, #4
   bf66a:	46a1      	mov	r9, r4
   bf66c:	4576      	cmp	r6, lr
   bf66e:	46f4      	mov	ip, lr
   bf670:	d815      	bhi.n	bf69e <rshift+0x7e>
   bf672:	1a9a      	subs	r2, r3, r2
   bf674:	0092      	lsls	r2, r2, #2
   bf676:	3a04      	subs	r2, #4
   bf678:	3501      	adds	r5, #1
   bf67a:	42ae      	cmp	r6, r5
   bf67c:	bf38      	it	cc
   bf67e:	2200      	movcc	r2, #0
   bf680:	18a3      	adds	r3, r4, r2
   bf682:	50a7      	str	r7, [r4, r2]
   bf684:	b107      	cbz	r7, bf688 <rshift+0x68>
   bf686:	3304      	adds	r3, #4
   bf688:	1b1a      	subs	r2, r3, r4
   bf68a:	42a3      	cmp	r3, r4
   bf68c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bf690:	bf08      	it	eq
   bf692:	2300      	moveq	r3, #0
   bf694:	6102      	str	r2, [r0, #16]
   bf696:	bf08      	it	eq
   bf698:	6143      	streq	r3, [r0, #20]
   bf69a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bf69e:	f8dc c000 	ldr.w	ip, [ip]
   bf6a2:	fa0c fc08 	lsl.w	ip, ip, r8
   bf6a6:	ea4c 0707 	orr.w	r7, ip, r7
   bf6aa:	f849 7b04 	str.w	r7, [r9], #4
   bf6ae:	f85e 7b04 	ldr.w	r7, [lr], #4
   bf6b2:	40cf      	lsrs	r7, r1
   bf6b4:	e7da      	b.n	bf66c <rshift+0x4c>
   bf6b6:	f851 cb04 	ldr.w	ip, [r1], #4
   bf6ba:	f847 cf04 	str.w	ip, [r7, #4]!
   bf6be:	e7c3      	b.n	bf648 <rshift+0x28>
   bf6c0:	4623      	mov	r3, r4
   bf6c2:	e7e1      	b.n	bf688 <rshift+0x68>

000bf6c4 <__hexdig_fun>:
   bf6c4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bf6c8:	2b09      	cmp	r3, #9
   bf6ca:	d802      	bhi.n	bf6d2 <__hexdig_fun+0xe>
   bf6cc:	3820      	subs	r0, #32
   bf6ce:	b2c0      	uxtb	r0, r0
   bf6d0:	4770      	bx	lr
   bf6d2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bf6d6:	2b05      	cmp	r3, #5
   bf6d8:	d801      	bhi.n	bf6de <__hexdig_fun+0x1a>
   bf6da:	3847      	subs	r0, #71	; 0x47
   bf6dc:	e7f7      	b.n	bf6ce <__hexdig_fun+0xa>
   bf6de:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bf6e2:	2b05      	cmp	r3, #5
   bf6e4:	d801      	bhi.n	bf6ea <__hexdig_fun+0x26>
   bf6e6:	3827      	subs	r0, #39	; 0x27
   bf6e8:	e7f1      	b.n	bf6ce <__hexdig_fun+0xa>
   bf6ea:	2000      	movs	r0, #0
   bf6ec:	4770      	bx	lr
	...

000bf6f0 <__gethex>:
   bf6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf6f4:	ed2d 8b02 	vpush	{d8}
   bf6f8:	b089      	sub	sp, #36	; 0x24
   bf6fa:	ee08 0a10 	vmov	s16, r0
   bf6fe:	9304      	str	r3, [sp, #16]
   bf700:	4bb4      	ldr	r3, [pc, #720]	; (bf9d4 <__gethex+0x2e4>)
   bf702:	681b      	ldr	r3, [r3, #0]
   bf704:	9301      	str	r3, [sp, #4]
   bf706:	4618      	mov	r0, r3
   bf708:	468b      	mov	fp, r1
   bf70a:	4690      	mov	r8, r2
   bf70c:	f7ff f8d9 	bl	be8c2 <strlen>
   bf710:	9b01      	ldr	r3, [sp, #4]
   bf712:	f8db 2000 	ldr.w	r2, [fp]
   bf716:	4403      	add	r3, r0
   bf718:	4682      	mov	sl, r0
   bf71a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bf71e:	9305      	str	r3, [sp, #20]
   bf720:	1c93      	adds	r3, r2, #2
   bf722:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bf726:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bf72a:	32fe      	adds	r2, #254	; 0xfe
   bf72c:	18d1      	adds	r1, r2, r3
   bf72e:	461f      	mov	r7, r3
   bf730:	f813 0b01 	ldrb.w	r0, [r3], #1
   bf734:	9100      	str	r1, [sp, #0]
   bf736:	2830      	cmp	r0, #48	; 0x30
   bf738:	d0f8      	beq.n	bf72c <__gethex+0x3c>
   bf73a:	f7ff ffc3 	bl	bf6c4 <__hexdig_fun>
   bf73e:	4604      	mov	r4, r0
   bf740:	2800      	cmp	r0, #0
   bf742:	d13a      	bne.n	bf7ba <__gethex+0xca>
   bf744:	9901      	ldr	r1, [sp, #4]
   bf746:	4652      	mov	r2, sl
   bf748:	4638      	mov	r0, r7
   bf74a:	f7ff f8c2 	bl	be8d2 <strncmp>
   bf74e:	4605      	mov	r5, r0
   bf750:	2800      	cmp	r0, #0
   bf752:	d168      	bne.n	bf826 <__gethex+0x136>
   bf754:	f817 000a 	ldrb.w	r0, [r7, sl]
   bf758:	eb07 060a 	add.w	r6, r7, sl
   bf75c:	f7ff ffb2 	bl	bf6c4 <__hexdig_fun>
   bf760:	2800      	cmp	r0, #0
   bf762:	d062      	beq.n	bf82a <__gethex+0x13a>
   bf764:	4633      	mov	r3, r6
   bf766:	7818      	ldrb	r0, [r3, #0]
   bf768:	2830      	cmp	r0, #48	; 0x30
   bf76a:	461f      	mov	r7, r3
   bf76c:	f103 0301 	add.w	r3, r3, #1
   bf770:	d0f9      	beq.n	bf766 <__gethex+0x76>
   bf772:	f7ff ffa7 	bl	bf6c4 <__hexdig_fun>
   bf776:	2301      	movs	r3, #1
   bf778:	fab0 f480 	clz	r4, r0
   bf77c:	0964      	lsrs	r4, r4, #5
   bf77e:	4635      	mov	r5, r6
   bf780:	9300      	str	r3, [sp, #0]
   bf782:	463a      	mov	r2, r7
   bf784:	4616      	mov	r6, r2
   bf786:	3201      	adds	r2, #1
   bf788:	7830      	ldrb	r0, [r6, #0]
   bf78a:	f7ff ff9b 	bl	bf6c4 <__hexdig_fun>
   bf78e:	2800      	cmp	r0, #0
   bf790:	d1f8      	bne.n	bf784 <__gethex+0x94>
   bf792:	9901      	ldr	r1, [sp, #4]
   bf794:	4652      	mov	r2, sl
   bf796:	4630      	mov	r0, r6
   bf798:	f7ff f89b 	bl	be8d2 <strncmp>
   bf79c:	b980      	cbnz	r0, bf7c0 <__gethex+0xd0>
   bf79e:	b94d      	cbnz	r5, bf7b4 <__gethex+0xc4>
   bf7a0:	eb06 050a 	add.w	r5, r6, sl
   bf7a4:	462a      	mov	r2, r5
   bf7a6:	4616      	mov	r6, r2
   bf7a8:	3201      	adds	r2, #1
   bf7aa:	7830      	ldrb	r0, [r6, #0]
   bf7ac:	f7ff ff8a 	bl	bf6c4 <__hexdig_fun>
   bf7b0:	2800      	cmp	r0, #0
   bf7b2:	d1f8      	bne.n	bf7a6 <__gethex+0xb6>
   bf7b4:	1bad      	subs	r5, r5, r6
   bf7b6:	00ad      	lsls	r5, r5, #2
   bf7b8:	e004      	b.n	bf7c4 <__gethex+0xd4>
   bf7ba:	2400      	movs	r4, #0
   bf7bc:	4625      	mov	r5, r4
   bf7be:	e7e0      	b.n	bf782 <__gethex+0x92>
   bf7c0:	2d00      	cmp	r5, #0
   bf7c2:	d1f7      	bne.n	bf7b4 <__gethex+0xc4>
   bf7c4:	7833      	ldrb	r3, [r6, #0]
   bf7c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bf7ca:	2b50      	cmp	r3, #80	; 0x50
   bf7cc:	d13b      	bne.n	bf846 <__gethex+0x156>
   bf7ce:	7873      	ldrb	r3, [r6, #1]
   bf7d0:	2b2b      	cmp	r3, #43	; 0x2b
   bf7d2:	d02c      	beq.n	bf82e <__gethex+0x13e>
   bf7d4:	2b2d      	cmp	r3, #45	; 0x2d
   bf7d6:	d02e      	beq.n	bf836 <__gethex+0x146>
   bf7d8:	1c71      	adds	r1, r6, #1
   bf7da:	f04f 0900 	mov.w	r9, #0
   bf7de:	7808      	ldrb	r0, [r1, #0]
   bf7e0:	f7ff ff70 	bl	bf6c4 <__hexdig_fun>
   bf7e4:	1e43      	subs	r3, r0, #1
   bf7e6:	b2db      	uxtb	r3, r3
   bf7e8:	2b18      	cmp	r3, #24
   bf7ea:	d82c      	bhi.n	bf846 <__gethex+0x156>
   bf7ec:	f1a0 0210 	sub.w	r2, r0, #16
   bf7f0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bf7f4:	f7ff ff66 	bl	bf6c4 <__hexdig_fun>
   bf7f8:	1e43      	subs	r3, r0, #1
   bf7fa:	b2db      	uxtb	r3, r3
   bf7fc:	2b18      	cmp	r3, #24
   bf7fe:	d91d      	bls.n	bf83c <__gethex+0x14c>
   bf800:	f1b9 0f00 	cmp.w	r9, #0
   bf804:	d000      	beq.n	bf808 <__gethex+0x118>
   bf806:	4252      	negs	r2, r2
   bf808:	4415      	add	r5, r2
   bf80a:	f8cb 1000 	str.w	r1, [fp]
   bf80e:	b1e4      	cbz	r4, bf84a <__gethex+0x15a>
   bf810:	9b00      	ldr	r3, [sp, #0]
   bf812:	2b00      	cmp	r3, #0
   bf814:	bf14      	ite	ne
   bf816:	2700      	movne	r7, #0
   bf818:	2706      	moveq	r7, #6
   bf81a:	4638      	mov	r0, r7
   bf81c:	b009      	add	sp, #36	; 0x24
   bf81e:	ecbd 8b02 	vpop	{d8}
   bf822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bf826:	463e      	mov	r6, r7
   bf828:	4625      	mov	r5, r4
   bf82a:	2401      	movs	r4, #1
   bf82c:	e7ca      	b.n	bf7c4 <__gethex+0xd4>
   bf82e:	f04f 0900 	mov.w	r9, #0
   bf832:	1cb1      	adds	r1, r6, #2
   bf834:	e7d3      	b.n	bf7de <__gethex+0xee>
   bf836:	f04f 0901 	mov.w	r9, #1
   bf83a:	e7fa      	b.n	bf832 <__gethex+0x142>
   bf83c:	230a      	movs	r3, #10
   bf83e:	fb03 0202 	mla	r2, r3, r2, r0
   bf842:	3a10      	subs	r2, #16
   bf844:	e7d4      	b.n	bf7f0 <__gethex+0x100>
   bf846:	4631      	mov	r1, r6
   bf848:	e7df      	b.n	bf80a <__gethex+0x11a>
   bf84a:	1bf3      	subs	r3, r6, r7
   bf84c:	3b01      	subs	r3, #1
   bf84e:	4621      	mov	r1, r4
   bf850:	2b07      	cmp	r3, #7
   bf852:	dc0b      	bgt.n	bf86c <__gethex+0x17c>
   bf854:	ee18 0a10 	vmov	r0, s16
   bf858:	f000 fa64 	bl	bfd24 <_Balloc>
   bf85c:	4604      	mov	r4, r0
   bf85e:	b940      	cbnz	r0, bf872 <__gethex+0x182>
   bf860:	4b5d      	ldr	r3, [pc, #372]	; (bf9d8 <__gethex+0x2e8>)
   bf862:	4602      	mov	r2, r0
   bf864:	21de      	movs	r1, #222	; 0xde
   bf866:	485d      	ldr	r0, [pc, #372]	; (bf9dc <__gethex+0x2ec>)
   bf868:	f7fc fea8 	bl	bc5bc <__assert_func>
   bf86c:	3101      	adds	r1, #1
   bf86e:	105b      	asrs	r3, r3, #1
   bf870:	e7ee      	b.n	bf850 <__gethex+0x160>
   bf872:	f100 0914 	add.w	r9, r0, #20
   bf876:	f04f 0b00 	mov.w	fp, #0
   bf87a:	f1ca 0301 	rsb	r3, sl, #1
   bf87e:	f8cd 9008 	str.w	r9, [sp, #8]
   bf882:	f8cd b000 	str.w	fp, [sp]
   bf886:	9306      	str	r3, [sp, #24]
   bf888:	42b7      	cmp	r7, r6
   bf88a:	d340      	bcc.n	bf90e <__gethex+0x21e>
   bf88c:	9802      	ldr	r0, [sp, #8]
   bf88e:	9b00      	ldr	r3, [sp, #0]
   bf890:	f840 3b04 	str.w	r3, [r0], #4
   bf894:	eba0 0009 	sub.w	r0, r0, r9
   bf898:	1080      	asrs	r0, r0, #2
   bf89a:	0146      	lsls	r6, r0, #5
   bf89c:	6120      	str	r0, [r4, #16]
   bf89e:	4618      	mov	r0, r3
   bf8a0:	f000 fb32 	bl	bff08 <__hi0bits>
   bf8a4:	1a30      	subs	r0, r6, r0
   bf8a6:	f8d8 6000 	ldr.w	r6, [r8]
   bf8aa:	42b0      	cmp	r0, r6
   bf8ac:	dd63      	ble.n	bf976 <__gethex+0x286>
   bf8ae:	1b87      	subs	r7, r0, r6
   bf8b0:	4639      	mov	r1, r7
   bf8b2:	4620      	mov	r0, r4
   bf8b4:	f000 fed6 	bl	c0664 <__any_on>
   bf8b8:	4682      	mov	sl, r0
   bf8ba:	b1a8      	cbz	r0, bf8e8 <__gethex+0x1f8>
   bf8bc:	1e7b      	subs	r3, r7, #1
   bf8be:	1159      	asrs	r1, r3, #5
   bf8c0:	f003 021f 	and.w	r2, r3, #31
   bf8c4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bf8c8:	f04f 0a01 	mov.w	sl, #1
   bf8cc:	fa0a f202 	lsl.w	r2, sl, r2
   bf8d0:	420a      	tst	r2, r1
   bf8d2:	d009      	beq.n	bf8e8 <__gethex+0x1f8>
   bf8d4:	4553      	cmp	r3, sl
   bf8d6:	dd05      	ble.n	bf8e4 <__gethex+0x1f4>
   bf8d8:	1eb9      	subs	r1, r7, #2
   bf8da:	4620      	mov	r0, r4
   bf8dc:	f000 fec2 	bl	c0664 <__any_on>
   bf8e0:	2800      	cmp	r0, #0
   bf8e2:	d145      	bne.n	bf970 <__gethex+0x280>
   bf8e4:	f04f 0a02 	mov.w	sl, #2
   bf8e8:	4639      	mov	r1, r7
   bf8ea:	4620      	mov	r0, r4
   bf8ec:	f7ff fe98 	bl	bf620 <rshift>
   bf8f0:	443d      	add	r5, r7
   bf8f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bf8f6:	42ab      	cmp	r3, r5
   bf8f8:	da4c      	bge.n	bf994 <__gethex+0x2a4>
   bf8fa:	ee18 0a10 	vmov	r0, s16
   bf8fe:	4621      	mov	r1, r4
   bf900:	f000 fa50 	bl	bfda4 <_Bfree>
   bf904:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bf906:	2300      	movs	r3, #0
   bf908:	6013      	str	r3, [r2, #0]
   bf90a:	27a3      	movs	r7, #163	; 0xa3
   bf90c:	e785      	b.n	bf81a <__gethex+0x12a>
   bf90e:	1e73      	subs	r3, r6, #1
   bf910:	9a05      	ldr	r2, [sp, #20]
   bf912:	9303      	str	r3, [sp, #12]
   bf914:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bf918:	4293      	cmp	r3, r2
   bf91a:	d019      	beq.n	bf950 <__gethex+0x260>
   bf91c:	f1bb 0f20 	cmp.w	fp, #32
   bf920:	d107      	bne.n	bf932 <__gethex+0x242>
   bf922:	9b02      	ldr	r3, [sp, #8]
   bf924:	9a00      	ldr	r2, [sp, #0]
   bf926:	f843 2b04 	str.w	r2, [r3], #4
   bf92a:	9302      	str	r3, [sp, #8]
   bf92c:	2300      	movs	r3, #0
   bf92e:	9300      	str	r3, [sp, #0]
   bf930:	469b      	mov	fp, r3
   bf932:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bf936:	f7ff fec5 	bl	bf6c4 <__hexdig_fun>
   bf93a:	9b00      	ldr	r3, [sp, #0]
   bf93c:	f000 000f 	and.w	r0, r0, #15
   bf940:	fa00 f00b 	lsl.w	r0, r0, fp
   bf944:	4303      	orrs	r3, r0
   bf946:	9300      	str	r3, [sp, #0]
   bf948:	f10b 0b04 	add.w	fp, fp, #4
   bf94c:	9b03      	ldr	r3, [sp, #12]
   bf94e:	e00d      	b.n	bf96c <__gethex+0x27c>
   bf950:	9b03      	ldr	r3, [sp, #12]
   bf952:	9a06      	ldr	r2, [sp, #24]
   bf954:	4413      	add	r3, r2
   bf956:	42bb      	cmp	r3, r7
   bf958:	d3e0      	bcc.n	bf91c <__gethex+0x22c>
   bf95a:	4618      	mov	r0, r3
   bf95c:	9901      	ldr	r1, [sp, #4]
   bf95e:	9307      	str	r3, [sp, #28]
   bf960:	4652      	mov	r2, sl
   bf962:	f7fe ffb6 	bl	be8d2 <strncmp>
   bf966:	9b07      	ldr	r3, [sp, #28]
   bf968:	2800      	cmp	r0, #0
   bf96a:	d1d7      	bne.n	bf91c <__gethex+0x22c>
   bf96c:	461e      	mov	r6, r3
   bf96e:	e78b      	b.n	bf888 <__gethex+0x198>
   bf970:	f04f 0a03 	mov.w	sl, #3
   bf974:	e7b8      	b.n	bf8e8 <__gethex+0x1f8>
   bf976:	da0a      	bge.n	bf98e <__gethex+0x29e>
   bf978:	1a37      	subs	r7, r6, r0
   bf97a:	4621      	mov	r1, r4
   bf97c:	ee18 0a10 	vmov	r0, s16
   bf980:	463a      	mov	r2, r7
   bf982:	f000 fc2b 	bl	c01dc <__lshift>
   bf986:	1bed      	subs	r5, r5, r7
   bf988:	4604      	mov	r4, r0
   bf98a:	f100 0914 	add.w	r9, r0, #20
   bf98e:	f04f 0a00 	mov.w	sl, #0
   bf992:	e7ae      	b.n	bf8f2 <__gethex+0x202>
   bf994:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bf998:	42a8      	cmp	r0, r5
   bf99a:	dd72      	ble.n	bfa82 <__gethex+0x392>
   bf99c:	1b45      	subs	r5, r0, r5
   bf99e:	42ae      	cmp	r6, r5
   bf9a0:	dc36      	bgt.n	bfa10 <__gethex+0x320>
   bf9a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bf9a6:	2b02      	cmp	r3, #2
   bf9a8:	d02a      	beq.n	bfa00 <__gethex+0x310>
   bf9aa:	2b03      	cmp	r3, #3
   bf9ac:	d02c      	beq.n	bfa08 <__gethex+0x318>
   bf9ae:	2b01      	cmp	r3, #1
   bf9b0:	d11c      	bne.n	bf9ec <__gethex+0x2fc>
   bf9b2:	42ae      	cmp	r6, r5
   bf9b4:	d11a      	bne.n	bf9ec <__gethex+0x2fc>
   bf9b6:	2e01      	cmp	r6, #1
   bf9b8:	d112      	bne.n	bf9e0 <__gethex+0x2f0>
   bf9ba:	9a04      	ldr	r2, [sp, #16]
   bf9bc:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bf9c0:	6013      	str	r3, [r2, #0]
   bf9c2:	2301      	movs	r3, #1
   bf9c4:	6123      	str	r3, [r4, #16]
   bf9c6:	f8c9 3000 	str.w	r3, [r9]
   bf9ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bf9cc:	2762      	movs	r7, #98	; 0x62
   bf9ce:	601c      	str	r4, [r3, #0]
   bf9d0:	e723      	b.n	bf81a <__gethex+0x12a>
   bf9d2:	bf00      	nop
   bf9d4:	000cbf8c 	.word	0x000cbf8c
   bf9d8:	000cbef4 	.word	0x000cbef4
   bf9dc:	000cbf05 	.word	0x000cbf05
   bf9e0:	1e71      	subs	r1, r6, #1
   bf9e2:	4620      	mov	r0, r4
   bf9e4:	f000 fe3e 	bl	c0664 <__any_on>
   bf9e8:	2800      	cmp	r0, #0
   bf9ea:	d1e6      	bne.n	bf9ba <__gethex+0x2ca>
   bf9ec:	ee18 0a10 	vmov	r0, s16
   bf9f0:	4621      	mov	r1, r4
   bf9f2:	f000 f9d7 	bl	bfda4 <_Bfree>
   bf9f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bf9f8:	2300      	movs	r3, #0
   bf9fa:	6013      	str	r3, [r2, #0]
   bf9fc:	2750      	movs	r7, #80	; 0x50
   bf9fe:	e70c      	b.n	bf81a <__gethex+0x12a>
   bfa00:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bfa02:	2b00      	cmp	r3, #0
   bfa04:	d1f2      	bne.n	bf9ec <__gethex+0x2fc>
   bfa06:	e7d8      	b.n	bf9ba <__gethex+0x2ca>
   bfa08:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bfa0a:	2b00      	cmp	r3, #0
   bfa0c:	d1d5      	bne.n	bf9ba <__gethex+0x2ca>
   bfa0e:	e7ed      	b.n	bf9ec <__gethex+0x2fc>
   bfa10:	1e6f      	subs	r7, r5, #1
   bfa12:	f1ba 0f00 	cmp.w	sl, #0
   bfa16:	d131      	bne.n	bfa7c <__gethex+0x38c>
   bfa18:	b127      	cbz	r7, bfa24 <__gethex+0x334>
   bfa1a:	4639      	mov	r1, r7
   bfa1c:	4620      	mov	r0, r4
   bfa1e:	f000 fe21 	bl	c0664 <__any_on>
   bfa22:	4682      	mov	sl, r0
   bfa24:	117b      	asrs	r3, r7, #5
   bfa26:	2101      	movs	r1, #1
   bfa28:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bfa2c:	f007 071f 	and.w	r7, r7, #31
   bfa30:	fa01 f707 	lsl.w	r7, r1, r7
   bfa34:	421f      	tst	r7, r3
   bfa36:	4629      	mov	r1, r5
   bfa38:	4620      	mov	r0, r4
   bfa3a:	bf18      	it	ne
   bfa3c:	f04a 0a02 	orrne.w	sl, sl, #2
   bfa40:	1b76      	subs	r6, r6, r5
   bfa42:	f7ff fded 	bl	bf620 <rshift>
   bfa46:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bfa4a:	2702      	movs	r7, #2
   bfa4c:	f1ba 0f00 	cmp.w	sl, #0
   bfa50:	d048      	beq.n	bfae4 <__gethex+0x3f4>
   bfa52:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bfa56:	2b02      	cmp	r3, #2
   bfa58:	d015      	beq.n	bfa86 <__gethex+0x396>
   bfa5a:	2b03      	cmp	r3, #3
   bfa5c:	d017      	beq.n	bfa8e <__gethex+0x39e>
   bfa5e:	2b01      	cmp	r3, #1
   bfa60:	d109      	bne.n	bfa76 <__gethex+0x386>
   bfa62:	f01a 0f02 	tst.w	sl, #2
   bfa66:	d006      	beq.n	bfa76 <__gethex+0x386>
   bfa68:	f8d9 0000 	ldr.w	r0, [r9]
   bfa6c:	ea4a 0a00 	orr.w	sl, sl, r0
   bfa70:	f01a 0f01 	tst.w	sl, #1
   bfa74:	d10e      	bne.n	bfa94 <__gethex+0x3a4>
   bfa76:	f047 0710 	orr.w	r7, r7, #16
   bfa7a:	e033      	b.n	bfae4 <__gethex+0x3f4>
   bfa7c:	f04f 0a01 	mov.w	sl, #1
   bfa80:	e7d0      	b.n	bfa24 <__gethex+0x334>
   bfa82:	2701      	movs	r7, #1
   bfa84:	e7e2      	b.n	bfa4c <__gethex+0x35c>
   bfa86:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bfa88:	f1c3 0301 	rsb	r3, r3, #1
   bfa8c:	9315      	str	r3, [sp, #84]	; 0x54
   bfa8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bfa90:	2b00      	cmp	r3, #0
   bfa92:	d0f0      	beq.n	bfa76 <__gethex+0x386>
   bfa94:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bfa98:	f104 0314 	add.w	r3, r4, #20
   bfa9c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bfaa0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bfaa4:	f04f 0c00 	mov.w	ip, #0
   bfaa8:	4618      	mov	r0, r3
   bfaaa:	f853 2b04 	ldr.w	r2, [r3], #4
   bfaae:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   bfab2:	d01c      	beq.n	bfaee <__gethex+0x3fe>
   bfab4:	3201      	adds	r2, #1
   bfab6:	6002      	str	r2, [r0, #0]
   bfab8:	2f02      	cmp	r7, #2
   bfaba:	f104 0314 	add.w	r3, r4, #20
   bfabe:	d13f      	bne.n	bfb40 <__gethex+0x450>
   bfac0:	f8d8 2000 	ldr.w	r2, [r8]
   bfac4:	3a01      	subs	r2, #1
   bfac6:	42b2      	cmp	r2, r6
   bfac8:	d10a      	bne.n	bfae0 <__gethex+0x3f0>
   bfaca:	1171      	asrs	r1, r6, #5
   bfacc:	2201      	movs	r2, #1
   bface:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bfad2:	f006 061f 	and.w	r6, r6, #31
   bfad6:	fa02 f606 	lsl.w	r6, r2, r6
   bfada:	421e      	tst	r6, r3
   bfadc:	bf18      	it	ne
   bfade:	4617      	movne	r7, r2
   bfae0:	f047 0720 	orr.w	r7, r7, #32
   bfae4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bfae6:	601c      	str	r4, [r3, #0]
   bfae8:	9b04      	ldr	r3, [sp, #16]
   bfaea:	601d      	str	r5, [r3, #0]
   bfaec:	e695      	b.n	bf81a <__gethex+0x12a>
   bfaee:	4299      	cmp	r1, r3
   bfaf0:	f843 cc04 	str.w	ip, [r3, #-4]
   bfaf4:	d8d8      	bhi.n	bfaa8 <__gethex+0x3b8>
   bfaf6:	68a3      	ldr	r3, [r4, #8]
   bfaf8:	459b      	cmp	fp, r3
   bfafa:	db19      	blt.n	bfb30 <__gethex+0x440>
   bfafc:	6861      	ldr	r1, [r4, #4]
   bfafe:	ee18 0a10 	vmov	r0, s16
   bfb02:	3101      	adds	r1, #1
   bfb04:	f000 f90e 	bl	bfd24 <_Balloc>
   bfb08:	4681      	mov	r9, r0
   bfb0a:	b918      	cbnz	r0, bfb14 <__gethex+0x424>
   bfb0c:	4b1a      	ldr	r3, [pc, #104]	; (bfb78 <__gethex+0x488>)
   bfb0e:	4602      	mov	r2, r0
   bfb10:	2184      	movs	r1, #132	; 0x84
   bfb12:	e6a8      	b.n	bf866 <__gethex+0x176>
   bfb14:	6922      	ldr	r2, [r4, #16]
   bfb16:	3202      	adds	r2, #2
   bfb18:	f104 010c 	add.w	r1, r4, #12
   bfb1c:	0092      	lsls	r2, r2, #2
   bfb1e:	300c      	adds	r0, #12
   bfb20:	f7fe fe3b 	bl	be79a <memcpy>
   bfb24:	4621      	mov	r1, r4
   bfb26:	ee18 0a10 	vmov	r0, s16
   bfb2a:	f000 f93b 	bl	bfda4 <_Bfree>
   bfb2e:	464c      	mov	r4, r9
   bfb30:	6923      	ldr	r3, [r4, #16]
   bfb32:	1c5a      	adds	r2, r3, #1
   bfb34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bfb38:	6122      	str	r2, [r4, #16]
   bfb3a:	2201      	movs	r2, #1
   bfb3c:	615a      	str	r2, [r3, #20]
   bfb3e:	e7bb      	b.n	bfab8 <__gethex+0x3c8>
   bfb40:	6922      	ldr	r2, [r4, #16]
   bfb42:	455a      	cmp	r2, fp
   bfb44:	dd0b      	ble.n	bfb5e <__gethex+0x46e>
   bfb46:	2101      	movs	r1, #1
   bfb48:	4620      	mov	r0, r4
   bfb4a:	f7ff fd69 	bl	bf620 <rshift>
   bfb4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bfb52:	3501      	adds	r5, #1
   bfb54:	42ab      	cmp	r3, r5
   bfb56:	f6ff aed0 	blt.w	bf8fa <__gethex+0x20a>
   bfb5a:	2701      	movs	r7, #1
   bfb5c:	e7c0      	b.n	bfae0 <__gethex+0x3f0>
   bfb5e:	f016 061f 	ands.w	r6, r6, #31
   bfb62:	d0fa      	beq.n	bfb5a <__gethex+0x46a>
   bfb64:	4453      	add	r3, sl
   bfb66:	f1c6 0620 	rsb	r6, r6, #32
   bfb6a:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bfb6e:	f000 f9cb 	bl	bff08 <__hi0bits>
   bfb72:	42b0      	cmp	r0, r6
   bfb74:	dbe7      	blt.n	bfb46 <__gethex+0x456>
   bfb76:	e7f0      	b.n	bfb5a <__gethex+0x46a>
   bfb78:	000cbef4 	.word	0x000cbef4

000bfb7c <L_shift>:
   bfb7c:	f1c2 0208 	rsb	r2, r2, #8
   bfb80:	0092      	lsls	r2, r2, #2
   bfb82:	b570      	push	{r4, r5, r6, lr}
   bfb84:	f1c2 0620 	rsb	r6, r2, #32
   bfb88:	6843      	ldr	r3, [r0, #4]
   bfb8a:	6804      	ldr	r4, [r0, #0]
   bfb8c:	fa03 f506 	lsl.w	r5, r3, r6
   bfb90:	432c      	orrs	r4, r5
   bfb92:	40d3      	lsrs	r3, r2
   bfb94:	6004      	str	r4, [r0, #0]
   bfb96:	f840 3f04 	str.w	r3, [r0, #4]!
   bfb9a:	4288      	cmp	r0, r1
   bfb9c:	d3f4      	bcc.n	bfb88 <L_shift+0xc>
   bfb9e:	bd70      	pop	{r4, r5, r6, pc}

000bfba0 <__match>:
   bfba0:	b530      	push	{r4, r5, lr}
   bfba2:	6803      	ldr	r3, [r0, #0]
   bfba4:	3301      	adds	r3, #1
   bfba6:	f811 4b01 	ldrb.w	r4, [r1], #1
   bfbaa:	b914      	cbnz	r4, bfbb2 <__match+0x12>
   bfbac:	6003      	str	r3, [r0, #0]
   bfbae:	2001      	movs	r0, #1
   bfbb0:	bd30      	pop	{r4, r5, pc}
   bfbb2:	f813 2b01 	ldrb.w	r2, [r3], #1
   bfbb6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bfbba:	2d19      	cmp	r5, #25
   bfbbc:	bf98      	it	ls
   bfbbe:	3220      	addls	r2, #32
   bfbc0:	42a2      	cmp	r2, r4
   bfbc2:	d0f0      	beq.n	bfba6 <__match+0x6>
   bfbc4:	2000      	movs	r0, #0
   bfbc6:	e7f3      	b.n	bfbb0 <__match+0x10>

000bfbc8 <__hexnan>:
   bfbc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bfbcc:	680b      	ldr	r3, [r1, #0]
   bfbce:	115e      	asrs	r6, r3, #5
   bfbd0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bfbd4:	f013 031f 	ands.w	r3, r3, #31
   bfbd8:	b087      	sub	sp, #28
   bfbda:	bf18      	it	ne
   bfbdc:	3604      	addne	r6, #4
   bfbde:	2500      	movs	r5, #0
   bfbe0:	1f37      	subs	r7, r6, #4
   bfbe2:	4690      	mov	r8, r2
   bfbe4:	6802      	ldr	r2, [r0, #0]
   bfbe6:	9301      	str	r3, [sp, #4]
   bfbe8:	4682      	mov	sl, r0
   bfbea:	f846 5c04 	str.w	r5, [r6, #-4]
   bfbee:	46b9      	mov	r9, r7
   bfbf0:	463c      	mov	r4, r7
   bfbf2:	9502      	str	r5, [sp, #8]
   bfbf4:	46ab      	mov	fp, r5
   bfbf6:	7851      	ldrb	r1, [r2, #1]
   bfbf8:	1c53      	adds	r3, r2, #1
   bfbfa:	9303      	str	r3, [sp, #12]
   bfbfc:	b341      	cbz	r1, bfc50 <__hexnan+0x88>
   bfbfe:	4608      	mov	r0, r1
   bfc00:	9205      	str	r2, [sp, #20]
   bfc02:	9104      	str	r1, [sp, #16]
   bfc04:	f7ff fd5e 	bl	bf6c4 <__hexdig_fun>
   bfc08:	2800      	cmp	r0, #0
   bfc0a:	d14f      	bne.n	bfcac <__hexnan+0xe4>
   bfc0c:	9904      	ldr	r1, [sp, #16]
   bfc0e:	9a05      	ldr	r2, [sp, #20]
   bfc10:	2920      	cmp	r1, #32
   bfc12:	d818      	bhi.n	bfc46 <__hexnan+0x7e>
   bfc14:	9b02      	ldr	r3, [sp, #8]
   bfc16:	459b      	cmp	fp, r3
   bfc18:	dd13      	ble.n	bfc42 <__hexnan+0x7a>
   bfc1a:	454c      	cmp	r4, r9
   bfc1c:	d206      	bcs.n	bfc2c <__hexnan+0x64>
   bfc1e:	2d07      	cmp	r5, #7
   bfc20:	dc04      	bgt.n	bfc2c <__hexnan+0x64>
   bfc22:	462a      	mov	r2, r5
   bfc24:	4649      	mov	r1, r9
   bfc26:	4620      	mov	r0, r4
   bfc28:	f7ff ffa8 	bl	bfb7c <L_shift>
   bfc2c:	4544      	cmp	r4, r8
   bfc2e:	d950      	bls.n	bfcd2 <__hexnan+0x10a>
   bfc30:	2300      	movs	r3, #0
   bfc32:	f1a4 0904 	sub.w	r9, r4, #4
   bfc36:	f844 3c04 	str.w	r3, [r4, #-4]
   bfc3a:	f8cd b008 	str.w	fp, [sp, #8]
   bfc3e:	464c      	mov	r4, r9
   bfc40:	461d      	mov	r5, r3
   bfc42:	9a03      	ldr	r2, [sp, #12]
   bfc44:	e7d7      	b.n	bfbf6 <__hexnan+0x2e>
   bfc46:	2929      	cmp	r1, #41	; 0x29
   bfc48:	d156      	bne.n	bfcf8 <__hexnan+0x130>
   bfc4a:	3202      	adds	r2, #2
   bfc4c:	f8ca 2000 	str.w	r2, [sl]
   bfc50:	f1bb 0f00 	cmp.w	fp, #0
   bfc54:	d050      	beq.n	bfcf8 <__hexnan+0x130>
   bfc56:	454c      	cmp	r4, r9
   bfc58:	d206      	bcs.n	bfc68 <__hexnan+0xa0>
   bfc5a:	2d07      	cmp	r5, #7
   bfc5c:	dc04      	bgt.n	bfc68 <__hexnan+0xa0>
   bfc5e:	462a      	mov	r2, r5
   bfc60:	4649      	mov	r1, r9
   bfc62:	4620      	mov	r0, r4
   bfc64:	f7ff ff8a 	bl	bfb7c <L_shift>
   bfc68:	4544      	cmp	r4, r8
   bfc6a:	d934      	bls.n	bfcd6 <__hexnan+0x10e>
   bfc6c:	f1a8 0204 	sub.w	r2, r8, #4
   bfc70:	4623      	mov	r3, r4
   bfc72:	f853 1b04 	ldr.w	r1, [r3], #4
   bfc76:	f842 1f04 	str.w	r1, [r2, #4]!
   bfc7a:	429f      	cmp	r7, r3
   bfc7c:	d2f9      	bcs.n	bfc72 <__hexnan+0xaa>
   bfc7e:	1b3b      	subs	r3, r7, r4
   bfc80:	f023 0303 	bic.w	r3, r3, #3
   bfc84:	3304      	adds	r3, #4
   bfc86:	3401      	adds	r4, #1
   bfc88:	3e03      	subs	r6, #3
   bfc8a:	42b4      	cmp	r4, r6
   bfc8c:	bf88      	it	hi
   bfc8e:	2304      	movhi	r3, #4
   bfc90:	4443      	add	r3, r8
   bfc92:	2200      	movs	r2, #0
   bfc94:	f843 2b04 	str.w	r2, [r3], #4
   bfc98:	429f      	cmp	r7, r3
   bfc9a:	d2fb      	bcs.n	bfc94 <__hexnan+0xcc>
   bfc9c:	683b      	ldr	r3, [r7, #0]
   bfc9e:	b91b      	cbnz	r3, bfca8 <__hexnan+0xe0>
   bfca0:	4547      	cmp	r7, r8
   bfca2:	d127      	bne.n	bfcf4 <__hexnan+0x12c>
   bfca4:	2301      	movs	r3, #1
   bfca6:	603b      	str	r3, [r7, #0]
   bfca8:	2005      	movs	r0, #5
   bfcaa:	e026      	b.n	bfcfa <__hexnan+0x132>
   bfcac:	3501      	adds	r5, #1
   bfcae:	2d08      	cmp	r5, #8
   bfcb0:	f10b 0b01 	add.w	fp, fp, #1
   bfcb4:	dd06      	ble.n	bfcc4 <__hexnan+0xfc>
   bfcb6:	4544      	cmp	r4, r8
   bfcb8:	d9c3      	bls.n	bfc42 <__hexnan+0x7a>
   bfcba:	2300      	movs	r3, #0
   bfcbc:	f844 3c04 	str.w	r3, [r4, #-4]
   bfcc0:	2501      	movs	r5, #1
   bfcc2:	3c04      	subs	r4, #4
   bfcc4:	6822      	ldr	r2, [r4, #0]
   bfcc6:	f000 000f 	and.w	r0, r0, #15
   bfcca:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bfcce:	6022      	str	r2, [r4, #0]
   bfcd0:	e7b7      	b.n	bfc42 <__hexnan+0x7a>
   bfcd2:	2508      	movs	r5, #8
   bfcd4:	e7b5      	b.n	bfc42 <__hexnan+0x7a>
   bfcd6:	9b01      	ldr	r3, [sp, #4]
   bfcd8:	2b00      	cmp	r3, #0
   bfcda:	d0df      	beq.n	bfc9c <__hexnan+0xd4>
   bfcdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bfce0:	f1c3 0320 	rsb	r3, r3, #32
   bfce4:	fa22 f303 	lsr.w	r3, r2, r3
   bfce8:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bfcec:	401a      	ands	r2, r3
   bfcee:	f846 2c04 	str.w	r2, [r6, #-4]
   bfcf2:	e7d3      	b.n	bfc9c <__hexnan+0xd4>
   bfcf4:	3f04      	subs	r7, #4
   bfcf6:	e7d1      	b.n	bfc9c <__hexnan+0xd4>
   bfcf8:	2004      	movs	r0, #4
   bfcfa:	b007      	add	sp, #28
   bfcfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bfd00 <__ascii_mbtowc>:
   bfd00:	b082      	sub	sp, #8
   bfd02:	b901      	cbnz	r1, bfd06 <__ascii_mbtowc+0x6>
   bfd04:	a901      	add	r1, sp, #4
   bfd06:	b142      	cbz	r2, bfd1a <__ascii_mbtowc+0x1a>
   bfd08:	b14b      	cbz	r3, bfd1e <__ascii_mbtowc+0x1e>
   bfd0a:	7813      	ldrb	r3, [r2, #0]
   bfd0c:	600b      	str	r3, [r1, #0]
   bfd0e:	7812      	ldrb	r2, [r2, #0]
   bfd10:	1e10      	subs	r0, r2, #0
   bfd12:	bf18      	it	ne
   bfd14:	2001      	movne	r0, #1
   bfd16:	b002      	add	sp, #8
   bfd18:	4770      	bx	lr
   bfd1a:	4610      	mov	r0, r2
   bfd1c:	e7fb      	b.n	bfd16 <__ascii_mbtowc+0x16>
   bfd1e:	f06f 0001 	mvn.w	r0, #1
   bfd22:	e7f8      	b.n	bfd16 <__ascii_mbtowc+0x16>

000bfd24 <_Balloc>:
   bfd24:	b570      	push	{r4, r5, r6, lr}
   bfd26:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bfd28:	4604      	mov	r4, r0
   bfd2a:	460d      	mov	r5, r1
   bfd2c:	b976      	cbnz	r6, bfd4c <_Balloc+0x28>
   bfd2e:	2010      	movs	r0, #16
   bfd30:	f7fc fc14 	bl	bc55c <malloc>
   bfd34:	4602      	mov	r2, r0
   bfd36:	6260      	str	r0, [r4, #36]	; 0x24
   bfd38:	b920      	cbnz	r0, bfd44 <_Balloc+0x20>
   bfd3a:	4b18      	ldr	r3, [pc, #96]	; (bfd9c <_Balloc+0x78>)
   bfd3c:	4818      	ldr	r0, [pc, #96]	; (bfda0 <_Balloc+0x7c>)
   bfd3e:	2166      	movs	r1, #102	; 0x66
   bfd40:	f7fc fc3c 	bl	bc5bc <__assert_func>
   bfd44:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bfd48:	6006      	str	r6, [r0, #0]
   bfd4a:	60c6      	str	r6, [r0, #12]
   bfd4c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bfd4e:	68f3      	ldr	r3, [r6, #12]
   bfd50:	b183      	cbz	r3, bfd74 <_Balloc+0x50>
   bfd52:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bfd54:	68db      	ldr	r3, [r3, #12]
   bfd56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bfd5a:	b9b8      	cbnz	r0, bfd8c <_Balloc+0x68>
   bfd5c:	2101      	movs	r1, #1
   bfd5e:	fa01 f605 	lsl.w	r6, r1, r5
   bfd62:	1d72      	adds	r2, r6, #5
   bfd64:	0092      	lsls	r2, r2, #2
   bfd66:	4620      	mov	r0, r4
   bfd68:	f7fe fd47 	bl	be7fa <_calloc_r>
   bfd6c:	b160      	cbz	r0, bfd88 <_Balloc+0x64>
   bfd6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bfd72:	e00e      	b.n	bfd92 <_Balloc+0x6e>
   bfd74:	2221      	movs	r2, #33	; 0x21
   bfd76:	2104      	movs	r1, #4
   bfd78:	4620      	mov	r0, r4
   bfd7a:	f7fe fd3e 	bl	be7fa <_calloc_r>
   bfd7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bfd80:	60f0      	str	r0, [r6, #12]
   bfd82:	68db      	ldr	r3, [r3, #12]
   bfd84:	2b00      	cmp	r3, #0
   bfd86:	d1e4      	bne.n	bfd52 <_Balloc+0x2e>
   bfd88:	2000      	movs	r0, #0
   bfd8a:	bd70      	pop	{r4, r5, r6, pc}
   bfd8c:	6802      	ldr	r2, [r0, #0]
   bfd8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bfd92:	2300      	movs	r3, #0
   bfd94:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bfd98:	e7f7      	b.n	bfd8a <_Balloc+0x66>
   bfd9a:	bf00      	nop
   bfd9c:	000cbca0 	.word	0x000cbca0
   bfda0:	000cbfa0 	.word	0x000cbfa0

000bfda4 <_Bfree>:
   bfda4:	b570      	push	{r4, r5, r6, lr}
   bfda6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bfda8:	4605      	mov	r5, r0
   bfdaa:	460c      	mov	r4, r1
   bfdac:	b976      	cbnz	r6, bfdcc <_Bfree+0x28>
   bfdae:	2010      	movs	r0, #16
   bfdb0:	f7fc fbd4 	bl	bc55c <malloc>
   bfdb4:	4602      	mov	r2, r0
   bfdb6:	6268      	str	r0, [r5, #36]	; 0x24
   bfdb8:	b920      	cbnz	r0, bfdc4 <_Bfree+0x20>
   bfdba:	4b09      	ldr	r3, [pc, #36]	; (bfde0 <_Bfree+0x3c>)
   bfdbc:	4809      	ldr	r0, [pc, #36]	; (bfde4 <_Bfree+0x40>)
   bfdbe:	218a      	movs	r1, #138	; 0x8a
   bfdc0:	f7fc fbfc 	bl	bc5bc <__assert_func>
   bfdc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bfdc8:	6006      	str	r6, [r0, #0]
   bfdca:	60c6      	str	r6, [r0, #12]
   bfdcc:	b13c      	cbz	r4, bfdde <_Bfree+0x3a>
   bfdce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bfdd0:	6862      	ldr	r2, [r4, #4]
   bfdd2:	68db      	ldr	r3, [r3, #12]
   bfdd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bfdd8:	6021      	str	r1, [r4, #0]
   bfdda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bfdde:	bd70      	pop	{r4, r5, r6, pc}
   bfde0:	000cbca0 	.word	0x000cbca0
   bfde4:	000cbfa0 	.word	0x000cbfa0

000bfde8 <__multadd>:
   bfde8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bfdec:	690d      	ldr	r5, [r1, #16]
   bfdee:	4607      	mov	r7, r0
   bfdf0:	460c      	mov	r4, r1
   bfdf2:	461e      	mov	r6, r3
   bfdf4:	f101 0c14 	add.w	ip, r1, #20
   bfdf8:	2000      	movs	r0, #0
   bfdfa:	f8dc 3000 	ldr.w	r3, [ip]
   bfdfe:	b299      	uxth	r1, r3
   bfe00:	fb02 6101 	mla	r1, r2, r1, r6
   bfe04:	0c1e      	lsrs	r6, r3, #16
   bfe06:	0c0b      	lsrs	r3, r1, #16
   bfe08:	fb02 3306 	mla	r3, r2, r6, r3
   bfe0c:	b289      	uxth	r1, r1
   bfe0e:	3001      	adds	r0, #1
   bfe10:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bfe14:	4285      	cmp	r5, r0
   bfe16:	f84c 1b04 	str.w	r1, [ip], #4
   bfe1a:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bfe1e:	dcec      	bgt.n	bfdfa <__multadd+0x12>
   bfe20:	b30e      	cbz	r6, bfe66 <__multadd+0x7e>
   bfe22:	68a3      	ldr	r3, [r4, #8]
   bfe24:	42ab      	cmp	r3, r5
   bfe26:	dc19      	bgt.n	bfe5c <__multadd+0x74>
   bfe28:	6861      	ldr	r1, [r4, #4]
   bfe2a:	4638      	mov	r0, r7
   bfe2c:	3101      	adds	r1, #1
   bfe2e:	f7ff ff79 	bl	bfd24 <_Balloc>
   bfe32:	4680      	mov	r8, r0
   bfe34:	b928      	cbnz	r0, bfe42 <__multadd+0x5a>
   bfe36:	4602      	mov	r2, r0
   bfe38:	4b0c      	ldr	r3, [pc, #48]	; (bfe6c <__multadd+0x84>)
   bfe3a:	480d      	ldr	r0, [pc, #52]	; (bfe70 <__multadd+0x88>)
   bfe3c:	21b5      	movs	r1, #181	; 0xb5
   bfe3e:	f7fc fbbd 	bl	bc5bc <__assert_func>
   bfe42:	6922      	ldr	r2, [r4, #16]
   bfe44:	3202      	adds	r2, #2
   bfe46:	f104 010c 	add.w	r1, r4, #12
   bfe4a:	0092      	lsls	r2, r2, #2
   bfe4c:	300c      	adds	r0, #12
   bfe4e:	f7fe fca4 	bl	be79a <memcpy>
   bfe52:	4621      	mov	r1, r4
   bfe54:	4638      	mov	r0, r7
   bfe56:	f7ff ffa5 	bl	bfda4 <_Bfree>
   bfe5a:	4644      	mov	r4, r8
   bfe5c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bfe60:	3501      	adds	r5, #1
   bfe62:	615e      	str	r6, [r3, #20]
   bfe64:	6125      	str	r5, [r4, #16]
   bfe66:	4620      	mov	r0, r4
   bfe68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bfe6c:	000cbef4 	.word	0x000cbef4
   bfe70:	000cbfa0 	.word	0x000cbfa0

000bfe74 <__s2b>:
   bfe74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bfe78:	460c      	mov	r4, r1
   bfe7a:	4615      	mov	r5, r2
   bfe7c:	461f      	mov	r7, r3
   bfe7e:	2209      	movs	r2, #9
   bfe80:	3308      	adds	r3, #8
   bfe82:	4606      	mov	r6, r0
   bfe84:	fb93 f3f2 	sdiv	r3, r3, r2
   bfe88:	2100      	movs	r1, #0
   bfe8a:	2201      	movs	r2, #1
   bfe8c:	429a      	cmp	r2, r3
   bfe8e:	db09      	blt.n	bfea4 <__s2b+0x30>
   bfe90:	4630      	mov	r0, r6
   bfe92:	f7ff ff47 	bl	bfd24 <_Balloc>
   bfe96:	b940      	cbnz	r0, bfeaa <__s2b+0x36>
   bfe98:	4602      	mov	r2, r0
   bfe9a:	4b19      	ldr	r3, [pc, #100]	; (bff00 <__s2b+0x8c>)
   bfe9c:	4819      	ldr	r0, [pc, #100]	; (bff04 <__s2b+0x90>)
   bfe9e:	21ce      	movs	r1, #206	; 0xce
   bfea0:	f7fc fb8c 	bl	bc5bc <__assert_func>
   bfea4:	0052      	lsls	r2, r2, #1
   bfea6:	3101      	adds	r1, #1
   bfea8:	e7f0      	b.n	bfe8c <__s2b+0x18>
   bfeaa:	9b08      	ldr	r3, [sp, #32]
   bfeac:	6143      	str	r3, [r0, #20]
   bfeae:	2d09      	cmp	r5, #9
   bfeb0:	f04f 0301 	mov.w	r3, #1
   bfeb4:	6103      	str	r3, [r0, #16]
   bfeb6:	dd16      	ble.n	bfee6 <__s2b+0x72>
   bfeb8:	f104 0909 	add.w	r9, r4, #9
   bfebc:	46c8      	mov	r8, r9
   bfebe:	442c      	add	r4, r5
   bfec0:	f818 3b01 	ldrb.w	r3, [r8], #1
   bfec4:	4601      	mov	r1, r0
   bfec6:	3b30      	subs	r3, #48	; 0x30
   bfec8:	220a      	movs	r2, #10
   bfeca:	4630      	mov	r0, r6
   bfecc:	f7ff ff8c 	bl	bfde8 <__multadd>
   bfed0:	45a0      	cmp	r8, r4
   bfed2:	d1f5      	bne.n	bfec0 <__s2b+0x4c>
   bfed4:	f1a5 0408 	sub.w	r4, r5, #8
   bfed8:	444c      	add	r4, r9
   bfeda:	1b2d      	subs	r5, r5, r4
   bfedc:	1963      	adds	r3, r4, r5
   bfede:	42bb      	cmp	r3, r7
   bfee0:	db04      	blt.n	bfeec <__s2b+0x78>
   bfee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bfee6:	340a      	adds	r4, #10
   bfee8:	2509      	movs	r5, #9
   bfeea:	e7f6      	b.n	bfeda <__s2b+0x66>
   bfeec:	f814 3b01 	ldrb.w	r3, [r4], #1
   bfef0:	4601      	mov	r1, r0
   bfef2:	3b30      	subs	r3, #48	; 0x30
   bfef4:	220a      	movs	r2, #10
   bfef6:	4630      	mov	r0, r6
   bfef8:	f7ff ff76 	bl	bfde8 <__multadd>
   bfefc:	e7ee      	b.n	bfedc <__s2b+0x68>
   bfefe:	bf00      	nop
   bff00:	000cbef4 	.word	0x000cbef4
   bff04:	000cbfa0 	.word	0x000cbfa0

000bff08 <__hi0bits>:
   bff08:	0c03      	lsrs	r3, r0, #16
   bff0a:	041b      	lsls	r3, r3, #16
   bff0c:	b9d3      	cbnz	r3, bff44 <__hi0bits+0x3c>
   bff0e:	0400      	lsls	r0, r0, #16
   bff10:	2310      	movs	r3, #16
   bff12:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bff16:	bf04      	itt	eq
   bff18:	0200      	lsleq	r0, r0, #8
   bff1a:	3308      	addeq	r3, #8
   bff1c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bff20:	bf04      	itt	eq
   bff22:	0100      	lsleq	r0, r0, #4
   bff24:	3304      	addeq	r3, #4
   bff26:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bff2a:	bf04      	itt	eq
   bff2c:	0080      	lsleq	r0, r0, #2
   bff2e:	3302      	addeq	r3, #2
   bff30:	2800      	cmp	r0, #0
   bff32:	db05      	blt.n	bff40 <__hi0bits+0x38>
   bff34:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bff38:	f103 0301 	add.w	r3, r3, #1
   bff3c:	bf08      	it	eq
   bff3e:	2320      	moveq	r3, #32
   bff40:	4618      	mov	r0, r3
   bff42:	4770      	bx	lr
   bff44:	2300      	movs	r3, #0
   bff46:	e7e4      	b.n	bff12 <__hi0bits+0xa>

000bff48 <__lo0bits>:
   bff48:	6803      	ldr	r3, [r0, #0]
   bff4a:	f013 0207 	ands.w	r2, r3, #7
   bff4e:	4601      	mov	r1, r0
   bff50:	d00b      	beq.n	bff6a <__lo0bits+0x22>
   bff52:	07da      	lsls	r2, r3, #31
   bff54:	d423      	bmi.n	bff9e <__lo0bits+0x56>
   bff56:	0798      	lsls	r0, r3, #30
   bff58:	bf49      	itett	mi
   bff5a:	085b      	lsrmi	r3, r3, #1
   bff5c:	089b      	lsrpl	r3, r3, #2
   bff5e:	2001      	movmi	r0, #1
   bff60:	600b      	strmi	r3, [r1, #0]
   bff62:	bf5c      	itt	pl
   bff64:	600b      	strpl	r3, [r1, #0]
   bff66:	2002      	movpl	r0, #2
   bff68:	4770      	bx	lr
   bff6a:	b298      	uxth	r0, r3
   bff6c:	b9a8      	cbnz	r0, bff9a <__lo0bits+0x52>
   bff6e:	0c1b      	lsrs	r3, r3, #16
   bff70:	2010      	movs	r0, #16
   bff72:	b2da      	uxtb	r2, r3
   bff74:	b90a      	cbnz	r2, bff7a <__lo0bits+0x32>
   bff76:	3008      	adds	r0, #8
   bff78:	0a1b      	lsrs	r3, r3, #8
   bff7a:	071a      	lsls	r2, r3, #28
   bff7c:	bf04      	itt	eq
   bff7e:	091b      	lsreq	r3, r3, #4
   bff80:	3004      	addeq	r0, #4
   bff82:	079a      	lsls	r2, r3, #30
   bff84:	bf04      	itt	eq
   bff86:	089b      	lsreq	r3, r3, #2
   bff88:	3002      	addeq	r0, #2
   bff8a:	07da      	lsls	r2, r3, #31
   bff8c:	d403      	bmi.n	bff96 <__lo0bits+0x4e>
   bff8e:	085b      	lsrs	r3, r3, #1
   bff90:	f100 0001 	add.w	r0, r0, #1
   bff94:	d005      	beq.n	bffa2 <__lo0bits+0x5a>
   bff96:	600b      	str	r3, [r1, #0]
   bff98:	4770      	bx	lr
   bff9a:	4610      	mov	r0, r2
   bff9c:	e7e9      	b.n	bff72 <__lo0bits+0x2a>
   bff9e:	2000      	movs	r0, #0
   bffa0:	4770      	bx	lr
   bffa2:	2020      	movs	r0, #32
   bffa4:	4770      	bx	lr
	...

000bffa8 <__i2b>:
   bffa8:	b510      	push	{r4, lr}
   bffaa:	460c      	mov	r4, r1
   bffac:	2101      	movs	r1, #1
   bffae:	f7ff feb9 	bl	bfd24 <_Balloc>
   bffb2:	4602      	mov	r2, r0
   bffb4:	b928      	cbnz	r0, bffc2 <__i2b+0x1a>
   bffb6:	4b05      	ldr	r3, [pc, #20]	; (bffcc <__i2b+0x24>)
   bffb8:	4805      	ldr	r0, [pc, #20]	; (bffd0 <__i2b+0x28>)
   bffba:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bffbe:	f7fc fafd 	bl	bc5bc <__assert_func>
   bffc2:	2301      	movs	r3, #1
   bffc4:	6144      	str	r4, [r0, #20]
   bffc6:	6103      	str	r3, [r0, #16]
   bffc8:	bd10      	pop	{r4, pc}
   bffca:	bf00      	nop
   bffcc:	000cbef4 	.word	0x000cbef4
   bffd0:	000cbfa0 	.word	0x000cbfa0

000bffd4 <__multiply>:
   bffd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bffd8:	4691      	mov	r9, r2
   bffda:	690a      	ldr	r2, [r1, #16]
   bffdc:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bffe0:	429a      	cmp	r2, r3
   bffe2:	bfb8      	it	lt
   bffe4:	460b      	movlt	r3, r1
   bffe6:	460c      	mov	r4, r1
   bffe8:	bfbc      	itt	lt
   bffea:	464c      	movlt	r4, r9
   bffec:	4699      	movlt	r9, r3
   bffee:	6927      	ldr	r7, [r4, #16]
   bfff0:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bfff4:	68a3      	ldr	r3, [r4, #8]
   bfff6:	6861      	ldr	r1, [r4, #4]
   bfff8:	eb07 060a 	add.w	r6, r7, sl
   bfffc:	42b3      	cmp	r3, r6
   bfffe:	b085      	sub	sp, #20
   c0000:	bfb8      	it	lt
   c0002:	3101      	addlt	r1, #1
   c0004:	f7ff fe8e 	bl	bfd24 <_Balloc>
   c0008:	b930      	cbnz	r0, c0018 <__multiply+0x44>
   c000a:	4602      	mov	r2, r0
   c000c:	4b44      	ldr	r3, [pc, #272]	; (c0120 <__multiply+0x14c>)
   c000e:	4845      	ldr	r0, [pc, #276]	; (c0124 <__multiply+0x150>)
   c0010:	f240 115d 	movw	r1, #349	; 0x15d
   c0014:	f7fc fad2 	bl	bc5bc <__assert_func>
   c0018:	f100 0514 	add.w	r5, r0, #20
   c001c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   c0020:	462b      	mov	r3, r5
   c0022:	2200      	movs	r2, #0
   c0024:	4543      	cmp	r3, r8
   c0026:	d321      	bcc.n	c006c <__multiply+0x98>
   c0028:	f104 0314 	add.w	r3, r4, #20
   c002c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   c0030:	f109 0314 	add.w	r3, r9, #20
   c0034:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   c0038:	9202      	str	r2, [sp, #8]
   c003a:	1b3a      	subs	r2, r7, r4
   c003c:	3a15      	subs	r2, #21
   c003e:	f022 0203 	bic.w	r2, r2, #3
   c0042:	3204      	adds	r2, #4
   c0044:	f104 0115 	add.w	r1, r4, #21
   c0048:	428f      	cmp	r7, r1
   c004a:	bf38      	it	cc
   c004c:	2204      	movcc	r2, #4
   c004e:	9201      	str	r2, [sp, #4]
   c0050:	9a02      	ldr	r2, [sp, #8]
   c0052:	9303      	str	r3, [sp, #12]
   c0054:	429a      	cmp	r2, r3
   c0056:	d80c      	bhi.n	c0072 <__multiply+0x9e>
   c0058:	2e00      	cmp	r6, #0
   c005a:	dd03      	ble.n	c0064 <__multiply+0x90>
   c005c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   c0060:	2b00      	cmp	r3, #0
   c0062:	d05a      	beq.n	c011a <__multiply+0x146>
   c0064:	6106      	str	r6, [r0, #16]
   c0066:	b005      	add	sp, #20
   c0068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c006c:	f843 2b04 	str.w	r2, [r3], #4
   c0070:	e7d8      	b.n	c0024 <__multiply+0x50>
   c0072:	f8b3 a000 	ldrh.w	sl, [r3]
   c0076:	f1ba 0f00 	cmp.w	sl, #0
   c007a:	d024      	beq.n	c00c6 <__multiply+0xf2>
   c007c:	f104 0e14 	add.w	lr, r4, #20
   c0080:	46a9      	mov	r9, r5
   c0082:	f04f 0c00 	mov.w	ip, #0
   c0086:	f85e 2b04 	ldr.w	r2, [lr], #4
   c008a:	f8d9 1000 	ldr.w	r1, [r9]
   c008e:	fa1f fb82 	uxth.w	fp, r2
   c0092:	b289      	uxth	r1, r1
   c0094:	fb0a 110b 	mla	r1, sl, fp, r1
   c0098:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   c009c:	f8d9 2000 	ldr.w	r2, [r9]
   c00a0:	4461      	add	r1, ip
   c00a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c00a6:	fb0a c20b 	mla	r2, sl, fp, ip
   c00aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   c00ae:	b289      	uxth	r1, r1
   c00b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   c00b4:	4577      	cmp	r7, lr
   c00b6:	f849 1b04 	str.w	r1, [r9], #4
   c00ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c00be:	d8e2      	bhi.n	c0086 <__multiply+0xb2>
   c00c0:	9a01      	ldr	r2, [sp, #4]
   c00c2:	f845 c002 	str.w	ip, [r5, r2]
   c00c6:	9a03      	ldr	r2, [sp, #12]
   c00c8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   c00cc:	3304      	adds	r3, #4
   c00ce:	f1b9 0f00 	cmp.w	r9, #0
   c00d2:	d020      	beq.n	c0116 <__multiply+0x142>
   c00d4:	6829      	ldr	r1, [r5, #0]
   c00d6:	f104 0c14 	add.w	ip, r4, #20
   c00da:	46ae      	mov	lr, r5
   c00dc:	f04f 0a00 	mov.w	sl, #0
   c00e0:	f8bc b000 	ldrh.w	fp, [ip]
   c00e4:	f8be 2002 	ldrh.w	r2, [lr, #2]
   c00e8:	fb09 220b 	mla	r2, r9, fp, r2
   c00ec:	4492      	add	sl, r2
   c00ee:	b289      	uxth	r1, r1
   c00f0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   c00f4:	f84e 1b04 	str.w	r1, [lr], #4
   c00f8:	f85c 2b04 	ldr.w	r2, [ip], #4
   c00fc:	f8be 1000 	ldrh.w	r1, [lr]
   c0100:	0c12      	lsrs	r2, r2, #16
   c0102:	fb09 1102 	mla	r1, r9, r2, r1
   c0106:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   c010a:	4567      	cmp	r7, ip
   c010c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   c0110:	d8e6      	bhi.n	c00e0 <__multiply+0x10c>
   c0112:	9a01      	ldr	r2, [sp, #4]
   c0114:	50a9      	str	r1, [r5, r2]
   c0116:	3504      	adds	r5, #4
   c0118:	e79a      	b.n	c0050 <__multiply+0x7c>
   c011a:	3e01      	subs	r6, #1
   c011c:	e79c      	b.n	c0058 <__multiply+0x84>
   c011e:	bf00      	nop
   c0120:	000cbef4 	.word	0x000cbef4
   c0124:	000cbfa0 	.word	0x000cbfa0

000c0128 <__pow5mult>:
   c0128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c012c:	4615      	mov	r5, r2
   c012e:	f012 0203 	ands.w	r2, r2, #3
   c0132:	4606      	mov	r6, r0
   c0134:	460f      	mov	r7, r1
   c0136:	d007      	beq.n	c0148 <__pow5mult+0x20>
   c0138:	4c25      	ldr	r4, [pc, #148]	; (c01d0 <__pow5mult+0xa8>)
   c013a:	3a01      	subs	r2, #1
   c013c:	2300      	movs	r3, #0
   c013e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   c0142:	f7ff fe51 	bl	bfde8 <__multadd>
   c0146:	4607      	mov	r7, r0
   c0148:	10ad      	asrs	r5, r5, #2
   c014a:	d03d      	beq.n	c01c8 <__pow5mult+0xa0>
   c014c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   c014e:	b97c      	cbnz	r4, c0170 <__pow5mult+0x48>
   c0150:	2010      	movs	r0, #16
   c0152:	f7fc fa03 	bl	bc55c <malloc>
   c0156:	4602      	mov	r2, r0
   c0158:	6270      	str	r0, [r6, #36]	; 0x24
   c015a:	b928      	cbnz	r0, c0168 <__pow5mult+0x40>
   c015c:	4b1d      	ldr	r3, [pc, #116]	; (c01d4 <__pow5mult+0xac>)
   c015e:	481e      	ldr	r0, [pc, #120]	; (c01d8 <__pow5mult+0xb0>)
   c0160:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   c0164:	f7fc fa2a 	bl	bc5bc <__assert_func>
   c0168:	e9c0 4401 	strd	r4, r4, [r0, #4]
   c016c:	6004      	str	r4, [r0, #0]
   c016e:	60c4      	str	r4, [r0, #12]
   c0170:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   c0174:	f8d8 4008 	ldr.w	r4, [r8, #8]
   c0178:	b94c      	cbnz	r4, c018e <__pow5mult+0x66>
   c017a:	f240 2171 	movw	r1, #625	; 0x271
   c017e:	4630      	mov	r0, r6
   c0180:	f7ff ff12 	bl	bffa8 <__i2b>
   c0184:	2300      	movs	r3, #0
   c0186:	f8c8 0008 	str.w	r0, [r8, #8]
   c018a:	4604      	mov	r4, r0
   c018c:	6003      	str	r3, [r0, #0]
   c018e:	f04f 0900 	mov.w	r9, #0
   c0192:	07eb      	lsls	r3, r5, #31
   c0194:	d50a      	bpl.n	c01ac <__pow5mult+0x84>
   c0196:	4639      	mov	r1, r7
   c0198:	4622      	mov	r2, r4
   c019a:	4630      	mov	r0, r6
   c019c:	f7ff ff1a 	bl	bffd4 <__multiply>
   c01a0:	4639      	mov	r1, r7
   c01a2:	4680      	mov	r8, r0
   c01a4:	4630      	mov	r0, r6
   c01a6:	f7ff fdfd 	bl	bfda4 <_Bfree>
   c01aa:	4647      	mov	r7, r8
   c01ac:	106d      	asrs	r5, r5, #1
   c01ae:	d00b      	beq.n	c01c8 <__pow5mult+0xa0>
   c01b0:	6820      	ldr	r0, [r4, #0]
   c01b2:	b938      	cbnz	r0, c01c4 <__pow5mult+0x9c>
   c01b4:	4622      	mov	r2, r4
   c01b6:	4621      	mov	r1, r4
   c01b8:	4630      	mov	r0, r6
   c01ba:	f7ff ff0b 	bl	bffd4 <__multiply>
   c01be:	6020      	str	r0, [r4, #0]
   c01c0:	f8c0 9000 	str.w	r9, [r0]
   c01c4:	4604      	mov	r4, r0
   c01c6:	e7e4      	b.n	c0192 <__pow5mult+0x6a>
   c01c8:	4638      	mov	r0, r7
   c01ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c01ce:	bf00      	nop
   c01d0:	000cc110 	.word	0x000cc110
   c01d4:	000cbca0 	.word	0x000cbca0
   c01d8:	000cbfa0 	.word	0x000cbfa0

000c01dc <__lshift>:
   c01dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c01e0:	460c      	mov	r4, r1
   c01e2:	6849      	ldr	r1, [r1, #4]
   c01e4:	6923      	ldr	r3, [r4, #16]
   c01e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
   c01ea:	68a3      	ldr	r3, [r4, #8]
   c01ec:	4607      	mov	r7, r0
   c01ee:	4691      	mov	r9, r2
   c01f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
   c01f4:	f108 0601 	add.w	r6, r8, #1
   c01f8:	42b3      	cmp	r3, r6
   c01fa:	db0b      	blt.n	c0214 <__lshift+0x38>
   c01fc:	4638      	mov	r0, r7
   c01fe:	f7ff fd91 	bl	bfd24 <_Balloc>
   c0202:	4605      	mov	r5, r0
   c0204:	b948      	cbnz	r0, c021a <__lshift+0x3e>
   c0206:	4602      	mov	r2, r0
   c0208:	4b2a      	ldr	r3, [pc, #168]	; (c02b4 <__lshift+0xd8>)
   c020a:	482b      	ldr	r0, [pc, #172]	; (c02b8 <__lshift+0xdc>)
   c020c:	f240 11d9 	movw	r1, #473	; 0x1d9
   c0210:	f7fc f9d4 	bl	bc5bc <__assert_func>
   c0214:	3101      	adds	r1, #1
   c0216:	005b      	lsls	r3, r3, #1
   c0218:	e7ee      	b.n	c01f8 <__lshift+0x1c>
   c021a:	2300      	movs	r3, #0
   c021c:	f100 0114 	add.w	r1, r0, #20
   c0220:	f100 0210 	add.w	r2, r0, #16
   c0224:	4618      	mov	r0, r3
   c0226:	4553      	cmp	r3, sl
   c0228:	db37      	blt.n	c029a <__lshift+0xbe>
   c022a:	6920      	ldr	r0, [r4, #16]
   c022c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   c0230:	f104 0314 	add.w	r3, r4, #20
   c0234:	f019 091f 	ands.w	r9, r9, #31
   c0238:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   c023c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   c0240:	d02f      	beq.n	c02a2 <__lshift+0xc6>
   c0242:	f1c9 0e20 	rsb	lr, r9, #32
   c0246:	468a      	mov	sl, r1
   c0248:	f04f 0c00 	mov.w	ip, #0
   c024c:	681a      	ldr	r2, [r3, #0]
   c024e:	fa02 f209 	lsl.w	r2, r2, r9
   c0252:	ea42 020c 	orr.w	r2, r2, ip
   c0256:	f84a 2b04 	str.w	r2, [sl], #4
   c025a:	f853 2b04 	ldr.w	r2, [r3], #4
   c025e:	4298      	cmp	r0, r3
   c0260:	fa22 fc0e 	lsr.w	ip, r2, lr
   c0264:	d8f2      	bhi.n	c024c <__lshift+0x70>
   c0266:	1b03      	subs	r3, r0, r4
   c0268:	3b15      	subs	r3, #21
   c026a:	f023 0303 	bic.w	r3, r3, #3
   c026e:	3304      	adds	r3, #4
   c0270:	f104 0215 	add.w	r2, r4, #21
   c0274:	4290      	cmp	r0, r2
   c0276:	bf38      	it	cc
   c0278:	2304      	movcc	r3, #4
   c027a:	f841 c003 	str.w	ip, [r1, r3]
   c027e:	f1bc 0f00 	cmp.w	ip, #0
   c0282:	d001      	beq.n	c0288 <__lshift+0xac>
   c0284:	f108 0602 	add.w	r6, r8, #2
   c0288:	3e01      	subs	r6, #1
   c028a:	4638      	mov	r0, r7
   c028c:	612e      	str	r6, [r5, #16]
   c028e:	4621      	mov	r1, r4
   c0290:	f7ff fd88 	bl	bfda4 <_Bfree>
   c0294:	4628      	mov	r0, r5
   c0296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c029a:	f842 0f04 	str.w	r0, [r2, #4]!
   c029e:	3301      	adds	r3, #1
   c02a0:	e7c1      	b.n	c0226 <__lshift+0x4a>
   c02a2:	3904      	subs	r1, #4
   c02a4:	f853 2b04 	ldr.w	r2, [r3], #4
   c02a8:	f841 2f04 	str.w	r2, [r1, #4]!
   c02ac:	4298      	cmp	r0, r3
   c02ae:	d8f9      	bhi.n	c02a4 <__lshift+0xc8>
   c02b0:	e7ea      	b.n	c0288 <__lshift+0xac>
   c02b2:	bf00      	nop
   c02b4:	000cbef4 	.word	0x000cbef4
   c02b8:	000cbfa0 	.word	0x000cbfa0

000c02bc <__mcmp>:
   c02bc:	b530      	push	{r4, r5, lr}
   c02be:	6902      	ldr	r2, [r0, #16]
   c02c0:	690c      	ldr	r4, [r1, #16]
   c02c2:	1b12      	subs	r2, r2, r4
   c02c4:	d10e      	bne.n	c02e4 <__mcmp+0x28>
   c02c6:	f100 0314 	add.w	r3, r0, #20
   c02ca:	3114      	adds	r1, #20
   c02cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   c02d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   c02d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   c02d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   c02dc:	42a5      	cmp	r5, r4
   c02de:	d003      	beq.n	c02e8 <__mcmp+0x2c>
   c02e0:	d305      	bcc.n	c02ee <__mcmp+0x32>
   c02e2:	2201      	movs	r2, #1
   c02e4:	4610      	mov	r0, r2
   c02e6:	bd30      	pop	{r4, r5, pc}
   c02e8:	4283      	cmp	r3, r0
   c02ea:	d3f3      	bcc.n	c02d4 <__mcmp+0x18>
   c02ec:	e7fa      	b.n	c02e4 <__mcmp+0x28>
   c02ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c02f2:	e7f7      	b.n	c02e4 <__mcmp+0x28>

000c02f4 <__mdiff>:
   c02f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c02f8:	460c      	mov	r4, r1
   c02fa:	4606      	mov	r6, r0
   c02fc:	4611      	mov	r1, r2
   c02fe:	4620      	mov	r0, r4
   c0300:	4690      	mov	r8, r2
   c0302:	f7ff ffdb 	bl	c02bc <__mcmp>
   c0306:	1e05      	subs	r5, r0, #0
   c0308:	d110      	bne.n	c032c <__mdiff+0x38>
   c030a:	4629      	mov	r1, r5
   c030c:	4630      	mov	r0, r6
   c030e:	f7ff fd09 	bl	bfd24 <_Balloc>
   c0312:	b930      	cbnz	r0, c0322 <__mdiff+0x2e>
   c0314:	4b3a      	ldr	r3, [pc, #232]	; (c0400 <__mdiff+0x10c>)
   c0316:	4602      	mov	r2, r0
   c0318:	f240 2132 	movw	r1, #562	; 0x232
   c031c:	4839      	ldr	r0, [pc, #228]	; (c0404 <__mdiff+0x110>)
   c031e:	f7fc f94d 	bl	bc5bc <__assert_func>
   c0322:	2301      	movs	r3, #1
   c0324:	e9c0 3504 	strd	r3, r5, [r0, #16]
   c0328:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c032c:	bfa4      	itt	ge
   c032e:	4643      	movge	r3, r8
   c0330:	46a0      	movge	r8, r4
   c0332:	4630      	mov	r0, r6
   c0334:	f8d8 1004 	ldr.w	r1, [r8, #4]
   c0338:	bfa6      	itte	ge
   c033a:	461c      	movge	r4, r3
   c033c:	2500      	movge	r5, #0
   c033e:	2501      	movlt	r5, #1
   c0340:	f7ff fcf0 	bl	bfd24 <_Balloc>
   c0344:	b920      	cbnz	r0, c0350 <__mdiff+0x5c>
   c0346:	4b2e      	ldr	r3, [pc, #184]	; (c0400 <__mdiff+0x10c>)
   c0348:	4602      	mov	r2, r0
   c034a:	f44f 7110 	mov.w	r1, #576	; 0x240
   c034e:	e7e5      	b.n	c031c <__mdiff+0x28>
   c0350:	f8d8 7010 	ldr.w	r7, [r8, #16]
   c0354:	6926      	ldr	r6, [r4, #16]
   c0356:	60c5      	str	r5, [r0, #12]
   c0358:	f104 0914 	add.w	r9, r4, #20
   c035c:	f108 0514 	add.w	r5, r8, #20
   c0360:	f100 0e14 	add.w	lr, r0, #20
   c0364:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   c0368:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   c036c:	f108 0210 	add.w	r2, r8, #16
   c0370:	46f2      	mov	sl, lr
   c0372:	2100      	movs	r1, #0
   c0374:	f859 3b04 	ldr.w	r3, [r9], #4
   c0378:	f852 bf04 	ldr.w	fp, [r2, #4]!
   c037c:	fa1f f883 	uxth.w	r8, r3
   c0380:	fa11 f18b 	uxtah	r1, r1, fp
   c0384:	0c1b      	lsrs	r3, r3, #16
   c0386:	eba1 0808 	sub.w	r8, r1, r8
   c038a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   c038e:	eb03 4328 	add.w	r3, r3, r8, asr #16
   c0392:	fa1f f888 	uxth.w	r8, r8
   c0396:	1419      	asrs	r1, r3, #16
   c0398:	454e      	cmp	r6, r9
   c039a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   c039e:	f84a 3b04 	str.w	r3, [sl], #4
   c03a2:	d8e7      	bhi.n	c0374 <__mdiff+0x80>
   c03a4:	1b33      	subs	r3, r6, r4
   c03a6:	3b15      	subs	r3, #21
   c03a8:	f023 0303 	bic.w	r3, r3, #3
   c03ac:	3304      	adds	r3, #4
   c03ae:	3415      	adds	r4, #21
   c03b0:	42a6      	cmp	r6, r4
   c03b2:	bf38      	it	cc
   c03b4:	2304      	movcc	r3, #4
   c03b6:	441d      	add	r5, r3
   c03b8:	4473      	add	r3, lr
   c03ba:	469e      	mov	lr, r3
   c03bc:	462e      	mov	r6, r5
   c03be:	4566      	cmp	r6, ip
   c03c0:	d30e      	bcc.n	c03e0 <__mdiff+0xec>
   c03c2:	f10c 0203 	add.w	r2, ip, #3
   c03c6:	1b52      	subs	r2, r2, r5
   c03c8:	f022 0203 	bic.w	r2, r2, #3
   c03cc:	3d03      	subs	r5, #3
   c03ce:	45ac      	cmp	ip, r5
   c03d0:	bf38      	it	cc
   c03d2:	2200      	movcc	r2, #0
   c03d4:	441a      	add	r2, r3
   c03d6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   c03da:	b17b      	cbz	r3, c03fc <__mdiff+0x108>
   c03dc:	6107      	str	r7, [r0, #16]
   c03de:	e7a3      	b.n	c0328 <__mdiff+0x34>
   c03e0:	f856 8b04 	ldr.w	r8, [r6], #4
   c03e4:	fa11 f288 	uxtah	r2, r1, r8
   c03e8:	1414      	asrs	r4, r2, #16
   c03ea:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   c03ee:	b292      	uxth	r2, r2
   c03f0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   c03f4:	f84e 2b04 	str.w	r2, [lr], #4
   c03f8:	1421      	asrs	r1, r4, #16
   c03fa:	e7e0      	b.n	c03be <__mdiff+0xca>
   c03fc:	3f01      	subs	r7, #1
   c03fe:	e7ea      	b.n	c03d6 <__mdiff+0xe2>
   c0400:	000cbef4 	.word	0x000cbef4
   c0404:	000cbfa0 	.word	0x000cbfa0

000c0408 <__ulp>:
   c0408:	b082      	sub	sp, #8
   c040a:	ed8d 0b00 	vstr	d0, [sp]
   c040e:	9b01      	ldr	r3, [sp, #4]
   c0410:	4912      	ldr	r1, [pc, #72]	; (c045c <__ulp+0x54>)
   c0412:	4019      	ands	r1, r3
   c0414:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   c0418:	2900      	cmp	r1, #0
   c041a:	dd05      	ble.n	c0428 <__ulp+0x20>
   c041c:	2200      	movs	r2, #0
   c041e:	460b      	mov	r3, r1
   c0420:	ec43 2b10 	vmov	d0, r2, r3
   c0424:	b002      	add	sp, #8
   c0426:	4770      	bx	lr
   c0428:	4249      	negs	r1, r1
   c042a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   c042e:	ea4f 5021 	mov.w	r0, r1, asr #20
   c0432:	f04f 0200 	mov.w	r2, #0
   c0436:	f04f 0300 	mov.w	r3, #0
   c043a:	da04      	bge.n	c0446 <__ulp+0x3e>
   c043c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   c0440:	fa41 f300 	asr.w	r3, r1, r0
   c0444:	e7ec      	b.n	c0420 <__ulp+0x18>
   c0446:	f1a0 0114 	sub.w	r1, r0, #20
   c044a:	291e      	cmp	r1, #30
   c044c:	bfda      	itte	le
   c044e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   c0452:	fa20 f101 	lsrle.w	r1, r0, r1
   c0456:	2101      	movgt	r1, #1
   c0458:	460a      	mov	r2, r1
   c045a:	e7e1      	b.n	c0420 <__ulp+0x18>
   c045c:	7ff00000 	.word	0x7ff00000

000c0460 <__b2d>:
   c0460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c0462:	6905      	ldr	r5, [r0, #16]
   c0464:	f100 0714 	add.w	r7, r0, #20
   c0468:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   c046c:	1f2e      	subs	r6, r5, #4
   c046e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   c0472:	4620      	mov	r0, r4
   c0474:	f7ff fd48 	bl	bff08 <__hi0bits>
   c0478:	f1c0 0320 	rsb	r3, r0, #32
   c047c:	280a      	cmp	r0, #10
   c047e:	f8df c07c 	ldr.w	ip, [pc, #124]	; c04fc <__b2d+0x9c>
   c0482:	600b      	str	r3, [r1, #0]
   c0484:	dc14      	bgt.n	c04b0 <__b2d+0x50>
   c0486:	f1c0 0e0b 	rsb	lr, r0, #11
   c048a:	fa24 f10e 	lsr.w	r1, r4, lr
   c048e:	42b7      	cmp	r7, r6
   c0490:	ea41 030c 	orr.w	r3, r1, ip
   c0494:	bf34      	ite	cc
   c0496:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c049a:	2100      	movcs	r1, #0
   c049c:	3015      	adds	r0, #21
   c049e:	fa04 f000 	lsl.w	r0, r4, r0
   c04a2:	fa21 f10e 	lsr.w	r1, r1, lr
   c04a6:	ea40 0201 	orr.w	r2, r0, r1
   c04aa:	ec43 2b10 	vmov	d0, r2, r3
   c04ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c04b0:	42b7      	cmp	r7, r6
   c04b2:	bf3a      	itte	cc
   c04b4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c04b8:	f1a5 0608 	subcc.w	r6, r5, #8
   c04bc:	2100      	movcs	r1, #0
   c04be:	380b      	subs	r0, #11
   c04c0:	d017      	beq.n	c04f2 <__b2d+0x92>
   c04c2:	f1c0 0c20 	rsb	ip, r0, #32
   c04c6:	fa04 f500 	lsl.w	r5, r4, r0
   c04ca:	42be      	cmp	r6, r7
   c04cc:	fa21 f40c 	lsr.w	r4, r1, ip
   c04d0:	ea45 0504 	orr.w	r5, r5, r4
   c04d4:	bf8c      	ite	hi
   c04d6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   c04da:	2400      	movls	r4, #0
   c04dc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   c04e0:	fa01 f000 	lsl.w	r0, r1, r0
   c04e4:	fa24 f40c 	lsr.w	r4, r4, ip
   c04e8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   c04ec:	ea40 0204 	orr.w	r2, r0, r4
   c04f0:	e7db      	b.n	c04aa <__b2d+0x4a>
   c04f2:	ea44 030c 	orr.w	r3, r4, ip
   c04f6:	460a      	mov	r2, r1
   c04f8:	e7d7      	b.n	c04aa <__b2d+0x4a>
   c04fa:	bf00      	nop
   c04fc:	3ff00000 	.word	0x3ff00000

000c0500 <__d2b>:
   c0500:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   c0504:	4689      	mov	r9, r1
   c0506:	2101      	movs	r1, #1
   c0508:	ec57 6b10 	vmov	r6, r7, d0
   c050c:	4690      	mov	r8, r2
   c050e:	f7ff fc09 	bl	bfd24 <_Balloc>
   c0512:	4604      	mov	r4, r0
   c0514:	b930      	cbnz	r0, c0524 <__d2b+0x24>
   c0516:	4602      	mov	r2, r0
   c0518:	4b25      	ldr	r3, [pc, #148]	; (c05b0 <__d2b+0xb0>)
   c051a:	4826      	ldr	r0, [pc, #152]	; (c05b4 <__d2b+0xb4>)
   c051c:	f240 310a 	movw	r1, #778	; 0x30a
   c0520:	f7fc f84c 	bl	bc5bc <__assert_func>
   c0524:	f3c7 550a 	ubfx	r5, r7, #20, #11
   c0528:	f3c7 0313 	ubfx	r3, r7, #0, #20
   c052c:	bb35      	cbnz	r5, c057c <__d2b+0x7c>
   c052e:	2e00      	cmp	r6, #0
   c0530:	9301      	str	r3, [sp, #4]
   c0532:	d028      	beq.n	c0586 <__d2b+0x86>
   c0534:	4668      	mov	r0, sp
   c0536:	9600      	str	r6, [sp, #0]
   c0538:	f7ff fd06 	bl	bff48 <__lo0bits>
   c053c:	9900      	ldr	r1, [sp, #0]
   c053e:	b300      	cbz	r0, c0582 <__d2b+0x82>
   c0540:	9a01      	ldr	r2, [sp, #4]
   c0542:	f1c0 0320 	rsb	r3, r0, #32
   c0546:	fa02 f303 	lsl.w	r3, r2, r3
   c054a:	430b      	orrs	r3, r1
   c054c:	40c2      	lsrs	r2, r0
   c054e:	6163      	str	r3, [r4, #20]
   c0550:	9201      	str	r2, [sp, #4]
   c0552:	9b01      	ldr	r3, [sp, #4]
   c0554:	61a3      	str	r3, [r4, #24]
   c0556:	2b00      	cmp	r3, #0
   c0558:	bf14      	ite	ne
   c055a:	2202      	movne	r2, #2
   c055c:	2201      	moveq	r2, #1
   c055e:	6122      	str	r2, [r4, #16]
   c0560:	b1d5      	cbz	r5, c0598 <__d2b+0x98>
   c0562:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   c0566:	4405      	add	r5, r0
   c0568:	f8c9 5000 	str.w	r5, [r9]
   c056c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   c0570:	f8c8 0000 	str.w	r0, [r8]
   c0574:	4620      	mov	r0, r4
   c0576:	b003      	add	sp, #12
   c0578:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c0580:	e7d5      	b.n	c052e <__d2b+0x2e>
   c0582:	6161      	str	r1, [r4, #20]
   c0584:	e7e5      	b.n	c0552 <__d2b+0x52>
   c0586:	a801      	add	r0, sp, #4
   c0588:	f7ff fcde 	bl	bff48 <__lo0bits>
   c058c:	9b01      	ldr	r3, [sp, #4]
   c058e:	6163      	str	r3, [r4, #20]
   c0590:	2201      	movs	r2, #1
   c0592:	6122      	str	r2, [r4, #16]
   c0594:	3020      	adds	r0, #32
   c0596:	e7e3      	b.n	c0560 <__d2b+0x60>
   c0598:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   c059c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   c05a0:	f8c9 0000 	str.w	r0, [r9]
   c05a4:	6918      	ldr	r0, [r3, #16]
   c05a6:	f7ff fcaf 	bl	bff08 <__hi0bits>
   c05aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   c05ae:	e7df      	b.n	c0570 <__d2b+0x70>
   c05b0:	000cbef4 	.word	0x000cbef4
   c05b4:	000cbfa0 	.word	0x000cbfa0

000c05b8 <__ratio>:
   c05b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c05bc:	4688      	mov	r8, r1
   c05be:	4669      	mov	r1, sp
   c05c0:	4681      	mov	r9, r0
   c05c2:	f7ff ff4d 	bl	c0460 <__b2d>
   c05c6:	a901      	add	r1, sp, #4
   c05c8:	4640      	mov	r0, r8
   c05ca:	ec55 4b10 	vmov	r4, r5, d0
   c05ce:	f7ff ff47 	bl	c0460 <__b2d>
   c05d2:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c05d6:	f8d8 2010 	ldr.w	r2, [r8, #16]
   c05da:	eba3 0c02 	sub.w	ip, r3, r2
   c05de:	e9dd 3200 	ldrd	r3, r2, [sp]
   c05e2:	1a9b      	subs	r3, r3, r2
   c05e4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   c05e8:	ec51 0b10 	vmov	r0, r1, d0
   c05ec:	2b00      	cmp	r3, #0
   c05ee:	bfd6      	itet	le
   c05f0:	460a      	movle	r2, r1
   c05f2:	462a      	movgt	r2, r5
   c05f4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   c05f8:	468b      	mov	fp, r1
   c05fa:	462f      	mov	r7, r5
   c05fc:	bfd4      	ite	le
   c05fe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   c0602:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   c0606:	4620      	mov	r0, r4
   c0608:	ee10 2a10 	vmov	r2, s0
   c060c:	465b      	mov	r3, fp
   c060e:	4639      	mov	r1, r7
   c0610:	f7fd fca6 	bl	bdf60 <__aeabi_ddiv>
   c0614:	ec41 0b10 	vmov	d0, r0, r1
   c0618:	b003      	add	sp, #12
   c061a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c061e <__copybits>:
   c061e:	3901      	subs	r1, #1
   c0620:	b570      	push	{r4, r5, r6, lr}
   c0622:	1149      	asrs	r1, r1, #5
   c0624:	6914      	ldr	r4, [r2, #16]
   c0626:	3101      	adds	r1, #1
   c0628:	f102 0314 	add.w	r3, r2, #20
   c062c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   c0630:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c0634:	1f05      	subs	r5, r0, #4
   c0636:	42a3      	cmp	r3, r4
   c0638:	d30c      	bcc.n	c0654 <__copybits+0x36>
   c063a:	1aa3      	subs	r3, r4, r2
   c063c:	3b11      	subs	r3, #17
   c063e:	f023 0303 	bic.w	r3, r3, #3
   c0642:	3211      	adds	r2, #17
   c0644:	42a2      	cmp	r2, r4
   c0646:	bf88      	it	hi
   c0648:	2300      	movhi	r3, #0
   c064a:	4418      	add	r0, r3
   c064c:	2300      	movs	r3, #0
   c064e:	4288      	cmp	r0, r1
   c0650:	d305      	bcc.n	c065e <__copybits+0x40>
   c0652:	bd70      	pop	{r4, r5, r6, pc}
   c0654:	f853 6b04 	ldr.w	r6, [r3], #4
   c0658:	f845 6f04 	str.w	r6, [r5, #4]!
   c065c:	e7eb      	b.n	c0636 <__copybits+0x18>
   c065e:	f840 3b04 	str.w	r3, [r0], #4
   c0662:	e7f4      	b.n	c064e <__copybits+0x30>

000c0664 <__any_on>:
   c0664:	f100 0214 	add.w	r2, r0, #20
   c0668:	6900      	ldr	r0, [r0, #16]
   c066a:	114b      	asrs	r3, r1, #5
   c066c:	4298      	cmp	r0, r3
   c066e:	b510      	push	{r4, lr}
   c0670:	db11      	blt.n	c0696 <__any_on+0x32>
   c0672:	dd0a      	ble.n	c068a <__any_on+0x26>
   c0674:	f011 011f 	ands.w	r1, r1, #31
   c0678:	d007      	beq.n	c068a <__any_on+0x26>
   c067a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   c067e:	fa24 f001 	lsr.w	r0, r4, r1
   c0682:	fa00 f101 	lsl.w	r1, r0, r1
   c0686:	428c      	cmp	r4, r1
   c0688:	d10b      	bne.n	c06a2 <__any_on+0x3e>
   c068a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   c068e:	4293      	cmp	r3, r2
   c0690:	d803      	bhi.n	c069a <__any_on+0x36>
   c0692:	2000      	movs	r0, #0
   c0694:	bd10      	pop	{r4, pc}
   c0696:	4603      	mov	r3, r0
   c0698:	e7f7      	b.n	c068a <__any_on+0x26>
   c069a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   c069e:	2900      	cmp	r1, #0
   c06a0:	d0f5      	beq.n	c068e <__any_on+0x2a>
   c06a2:	2001      	movs	r0, #1
   c06a4:	e7f6      	b.n	c0694 <__any_on+0x30>

000c06a6 <__ascii_wctomb>:
   c06a6:	b149      	cbz	r1, c06bc <__ascii_wctomb+0x16>
   c06a8:	2aff      	cmp	r2, #255	; 0xff
   c06aa:	bf85      	ittet	hi
   c06ac:	238a      	movhi	r3, #138	; 0x8a
   c06ae:	6003      	strhi	r3, [r0, #0]
   c06b0:	700a      	strbls	r2, [r1, #0]
   c06b2:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   c06b6:	bf98      	it	ls
   c06b8:	2001      	movls	r0, #1
   c06ba:	4770      	bx	lr
   c06bc:	4608      	mov	r0, r1
   c06be:	4770      	bx	lr

000c06c0 <dynalib_user>:
   c06c0:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   c06d0:	0000 0000 6e55 6e6b 776f 206e 7974 6570     ....Unknown type
   c06e0:	4e00 544f 5059 0045 4c46 414f 3354 0032     .NOTYPE.FLOAT32.
   c06f0:	4955 544e 0038 5453 4952 474e 4200 4f4f     UINT8.STRING.BOO
   c0700:	004c 4e49 3154 0036 4f43 504d 454c 3658     L.INT16.COMPLEX6
   c0710:	0034 4c46 414f 3154 0036 4c46 414f 3654     4.FLOAT16.FLOAT6
   c0720:	0034 4f43 504d 454c 3158 3832 5500 4e49     4.COMPLEX128.UIN
   c0730:	3654 0034 4552 4f53 5255 4543 5600 5241     T64.RESOURCE.VAR
   c0740:	4149 544e 5500 4e49 3354 0032               IANT.UINT32.

000c074c <CSWTCH.24>:
   c074c:	06e1 000c 06e8 000c 0746 000c 06f0 000c     ........F.......
   c075c:	072e 000c 06f6 000c 06fd 000c 0702 000c     ................
   c076c:	0708 000c 06f1 000c 0712 000c 071a 000c     ................
   c077c:	0722 000c 072d 000c 0734 000c 073d 000c     "...-...4...=...
   c078c:	0745 000c 694d 6b6b 6c65 4820 7375 6574     E...Mikkel Huste
   c079c:	0064 6157 6c6c 5f79 6168 646e 6973 6e67     d.Wally_handsign
   c07ac:	6554 7473 6d5f 6c75 6974 6c70 4f65 6a62     Test_multipleObj
   c07bc:	6365 7374 6900 616d 6567 6100 2500 322e     ects.image.a.%.2
   c07cc:	2066 6543 736c 7569 2073 6e69 4320 706f     f Celsius in Cop
   c07dc:	6e65 6168 6567 206e 000a 6f76 6469 7b20     enhagen ..void {
   c07ec:	6e61 6e6f 6d79 756f 7d73 3a3a 6965 615f     anonymous}::ei_a
   c07fc:	696c 6e67 6465 665f 6572 2865 6f76 6469     ligned_free(void
   c080c:	292a 2f00 6f68 656d 6b2f 6c75 7574 2f6c     *)./home/kultul/
   c081c:	6f43 6564 775f 726f 736b 6170 6563 502f     Code_workspace/P
   c082c:	7261 6974 6c63 5f65 6f49 572f 6c61 796c     article_Io/Wally
   c083c:	465f 4d4f 4d4f 2f4c 696c 2f62 6157 6c6c     _FOMOML/lib/Wall
   c084c:	5f79 6168 646e 6973 6e67 6554 7473 6d5f     y_handsignTest_m
   c085c:	6c75 6974 6c70 4f65 6a62 6365 7374 695f     ultipleObjects_i
   c086c:	666e 7265 6e65 6963 676e 732f 6372 652f     nferencing/src/e
   c087c:	6764 2d65 6d69 7570 736c 2d65 6473 2f6b     dge-impulse-sdk/
   c088c:	6c63 7361 6973 6966 7265 652f 5f69 6c61     classifier/ei_al
   c089c:	6769 656e 5f64 616d 6c6c 636f 682e 2800     igned_malloc.h.(
   c08ac:	6c61 6769 206e 2026 6128 696c 6e67 2d20     align & (align -
   c08bc:	3120 2929 3d20 203d 0030 6f76 6469 202a      1)) == 0.void* 
   c08cc:	617b 6f6e 796e 6f6d 7375 3a7d 653a 5f69     {anonymous}::ei_
   c08dc:	6c61 6769 656e 5f64 6163 6c6c 636f 7328     aligned_calloc(s
   c08ec:	7a69 5f65 2c74 7320 7a69 5f65 2974 4600     ize_t, size_t).F
   c08fc:	6961 656c 2064 6f74 6120 6c6c 636f 7461     ailed to allocat
   c090c:	2065 4654 694c 6574 6120 6572 616e 2820     e TFLite arena (
   c091c:	7265 6f72 2072 6f63 6564 2520 2964 000a     error code %d)..
   c092c:	2a28 6e69 7570 2974 3e2d 7974 6570 3d20     (*input)->type =
   c093c:	203d 6d69 7570 736c 2d65 743e 6c66 7469     = impulse->tflit
   c094c:	5f65 6e69 7570 5f74 6164 6174 7974 6570     e_input_datatype
   c095c:	4500 5f49 4d49 5550 534c 5f45 5245 4f52     .EI_IMPULSE_ERRO
   c096c:	2052 6e69 6566 6572 636e 5f65 6674 696c     R inference_tfli
   c097c:	6574 735f 7465 7075 6328 6e6f 7473 6520     te_setup(const e
   c098c:	5f69 6d69 7570 736c 5f65 2a74 202c 6975     i_impulse_t*, ui
   c099c:	746e 3436 745f 2c2a 5420 4c66 7469 5465     nt64_t*, TfLiteT
   c09ac:	6e65 6f73 2a72 2c2a 5420 4c66 7469 5465     ensor**, TfLiteT
   c09bc:	6e65 6f73 2a72 2c2a 5420 4c66 7469 5465     ensor**, TfLiteT
   c09cc:	6e65 6f73 2a72 2c2a 5420 4c66 7469 5465     ensor**, TfLiteT
   c09dc:	6e65 6f73 2a72 2c2a 6520 5f69 6e75 7169     ensor**, ei_uniq
   c09ec:	6575 705f 7274 745f 2926 2f00 6f68 656d     ue_ptr_t&)./home
   c09fc:	6b2f 6c75 7574 2f6c 6f43 6564 775f 726f     /kultul/Code_wor
   c0a0c:	736b 6170 6563 502f 7261 6974 6c63 5f65     kspace/Particle_
   c0a1c:	6f49 572f 6c61 796c 465f 4d4f 4d4f 2f4c     Io/Wally_FOMOML/
   c0a2c:	696c 2f62 6157 6c6c 5f79 6168 646e 6973     lib/Wally_handsi
   c0a3c:	6e67 6554 7473 6d5f 6c75 6974 6c70 4f65     gnTest_multipleO
   c0a4c:	6a62 6365 7374 695f 666e 7265 6e65 6963     bjects_inferenci
   c0a5c:	676e 732f 6372 652f 6764 2d65 6d69 7570     ng/src/edge-impu
   c0a6c:	736c 2d65 6473 2f6b 6c63 7361 6973 6966     lse-sdk/classifi
   c0a7c:	7265 692f 666e 7265 6e65 6963 676e 655f     er/inferencing_e
   c0a8c:	676e 6e69 7365 742f 6c66 7469 5f65 6f65     ngines/tflite_eo
   c0a9c:	2e6e 0068 2a28 756f 7074 7475 2d29 743e     n.h.(*output)->t
   c0aac:	7079 2065 3d3d 6920 706d 6c75 6573 3e2d     ype == impulse->
   c0abc:	6674 696c 6574 6f5f 7475 7570 5f74 6164     tflite_output_da
   c0acc:	6174 7974 6570 2800 6f2a 7475 7570 5f74     tatype.(*output_
   c0adc:	6373 726f 7365 2d29 743e 7079 2065 3d3d     scores)->type ==
   c0aec:	6920 706d 6c75 6573 3e2d 6674 696c 6574      impulse->tflite
   c0afc:	6f5f 7475 7570 5f74 6164 6174 7974 6570     _output_datatype
   c0b0c:	2800 6f2a 7475 7570 5f74 616c 6562 736c     .(*output_labels
   c0b1c:	2d29 743e 7079 2065 3d3d 6920 706d 6c75     )->type == impul
   c0b2c:	6573 3e2d 6674 696c 6574 6f5f 7475 7570     se->tflite_outpu
   c0b3c:	5f74 6164 6174 7974 6570 2800 692a 706e     t_datatype.(*inp
   c0b4c:	7475 2d29 703e 7261 6d61 2e73 6373 6c61     ut)->params.scal
   c0b5c:	2065 3d3d 6920 706d 6c75 6573 3e2d 6674     e == impulse->tf
   c0b6c:	696c 6574 695f 706e 7475 735f 6163 656c     lite_input_scale
   c0b7c:	2800 692a 706e 7475 2d29 703e 7261 6d61     .(*input)->param
   c0b8c:	2e73 657a 6f72 705f 696f 746e 3d20 203d     s.zero_point == 
   c0b9c:	6d69 7570 736c 2d65 743e 6c66 7469 5f65     impulse->tflite_
   c0bac:	6e69 7570 5f74 657a 6f72 6f70 6e69 0074     input_zeropoint.
   c0bbc:	2a28 756f 7074 7475 2d29 703e 7261 6d61     (*output)->param
   c0bcc:	2e73 6373 6c61 2065 3d3d 6920 706d 6c75     s.scale == impul
   c0bdc:	6573 3e2d 6674 696c 6574 6f5f 7475 7570     se->tflite_outpu
   c0bec:	5f74 6373 6c61 0065 2a28 756f 7074 7475     t_scale.(*output
   c0bfc:	2d29 703e 7261 6d61 2e73 657a 6f72 705f     )->params.zero_p
   c0c0c:	696f 746e 3d20 203d 6d69 7570 736c 2d65     oint == impulse-
   c0c1c:	743e 6c66 7469 5f65 756f 7074 7475 7a5f     >tflite_output_z
   c0c2c:	7265 706f 696f 746e 4500 6764 2065 6d49     eropoint.Edge Im
   c0c3c:	7570 736c 2065 6e49 6566 6572 636e 6e69     pulse Inferencin
   c0c4c:	2067 6544 6f6d 6800 6f6f 2d6b 6572 7073     g Demo.hook-resp
   c0c5c:	6e6f 6573 6c2f 636f 6c61 745f 6d65 0070     onse/local_temp.
   c0c6c:	7247 7961 6373 6c61 0065 6576 7463 726f     Grayscale.vector
   c0c7c:	3a3a 4d5f 725f 6165 6c6c 636f 695f 736e     ::_M_realloc_ins
   c0c8c:	7265 0074 6576 7463 726f 3a3a 4d5f 645f     ert.vector::_M_d
   c0c9c:	6665 7561 746c 615f 7070 6e65 0064 7250     efault_append.Pr
   c0cac:	6465 6369 6974 6e6f 2073 7428 6d69 3a65     edictions (time:
   c0cbc:	2520 2064 736d 292e 0a3a 4500 5252 203a      %d ms.):..ERR: 
   c0ccc:	6143 6e6e 746f 7220 6e75 5320 4453 6d20     Cannot run SSD m
   c0cdc:	646f 6c65 202c 4945 435f 414c 5353 4649     odel, EI_CLASSIF
   c0cec:	4549 5f52 4e45 4241 454c 445f 5445 4345     IER_ENABLE_DETEC
   c0cfc:	4954 4e4f 505f 534f 5054 4f52 4543 5353     TION_POSTPROCESS
   c0d0c:	4f5f 2050 7369 6420 7369 6261 656c 0a64     _OP is disabled.
   c0d1c:	4500 5252 203a 4f59 4f4c 3576 6d20 646f     .ERR: YOLOv5 mod
   c0d2c:	6c65 2073 7261 2065 6f6e 2074 7573 7070     els are not supp
   c0d3c:	726f 6574 2064 7375 6e69 2067 4f45 204e     orted using EON 
   c0d4c:	6f43 706d 6c69 7265 202c 7375 2065 7566     Compiler, use fu
   c0d5c:	6c6c 5420 4c46 7469 2065 2528 2964 000a     ll TFLite (%d)..
   c0d6c:	5245 3a52 5920 4c4f 584f 6d20 646f 6c65     ERR: YOLOX model
   c0d7c:	2073 7261 2065 6f6e 2074 7573 7070 726f     s are not suppor
   c0d8c:	6574 2064 7375 6e69 2067 4f45 204e 6f43     ted using EON Co
   c0d9c:	706d 6c69 7265 202c 7375 2065 7566 6c6c     mpiler, use full
   c0dac:	5420 4c46 7469 2065 2528 2964 000a 5245      TFLite (%d)..ER
   c0dbc:	3a52 5520 736e 7075 6f70 7472 6465 6f20     R: Unsupported o
   c0dcc:	6a62 6365 2074 6564 6574 7463 6f69 206e     bject detection 
   c0ddc:	616c 7473 6c20 7961 7265 2820 6425 0a29     last layer (%d).
   c0dec:	2500 3a73 0009 5453 5441 5355 203a 546b     .%s:..STATUS: kT
   c0dfc:	4c66 7469 2065 7954 6570 3d20 4620 6f6c     fLite Type = Flo
   c0e0c:	7461 3233 000a 5453 5441 5355 203a 546b     at32..STATUS: kT
   c0e1c:	4c66 7469 2065 7954 6570 3d20 4920 746e     fLite Type = Int
   c0e2c:	0a38 5300 4154 5554 3a53 6b20 6654 694c     8..STATUS: kTfLi
   c0e3c:	6574 5420 7079 2065 203d 4955 746e 0a38     te Type = UInt8.
   c0e4c:	4500 5252 203a 6143 6e6e 746f 6820 6e61     .ERR: Cannot han
   c0e5c:	6c64 2065 6e69 7570 2074 7974 6570 2820     dle input type (
   c0e6c:	6425 0a29 5100 6175 746e 7a69 6465 6620     %d)..Quantized f
   c0e7c:	6165 7574 6572 3a73 0a20 2000 4600 6f6c     eatures: .. .Flo
   c0e8c:	7461 6620 6165 7574 6572 3a73 0a20 4500     at features: ..E
   c0e9c:	5252 524f 6120 6363 7275 6465 6420 7275     RROR accured dur
   c0eac:	6e69 2067 6e69 6566 6572 636e 6e69 3a67     ing inferencing:
   c0ebc:	2520 0064 4328 616c 7373 6669 6369 7461      %d.(Classificat
   c0ecc:	6f69 3a6e 2520 2064 736d 292e 4e00 206f     ion: %d ms.).No 
   c0edc:	626f 656a 7463 2073 6f66 6e75 0a64 0000     objects found...
   c0eec:	36a2 0002 0790 000c 079e 000c 0003 0000     .6..............
   c0efc:	0900 0000 0900 0000 0001 0000 0900 0000     ................
   c0f0c:	0030 0000 0030 0000 0001 0000 0000 3f80     0...0..........?
   c0f1c:	0001 0000 0000 0000 0001 0000 9b78 2003     ............x.. 
   c0f2c:	0001 000a 0000 3f00 0102 0002 0048 0000     .......?....H...
	...
   c0f48:	0109 0000 8081 3b80 0000 c300 0109 0000     .......;........
   c0f58:	0000 3b80 0000 c300 0002 0000 0001 0000     ...;............
   c0f68:	0003 0000 07c1 000c 0240 0000 0004 0000     ........@.......
   c0f78:	83b1 000b 83bd 000b 8195 000b 83cd 000b     ................
   c0f88:	8411 000b 9b74 2003 5245 3a52 4620 6961     ....t.. ERR: Fai
   c0f98:	656c 2064 6f74 6120 6c6c 636f 7461 2065     led to allocate 
   c0fa8:	6570 7372 7369 6574 746e 6220 6675 6566     persistent buffe
   c0fb8:	2072 666f 7320 7a69 2065 6425 202c 6f64     r of size %d, do
   c0fc8:	7365 6e20 746f 6620 7469 6920 206e 6574     es not fit in te
   c0fd8:	736e 726f 6120 6572 616e 6120 646e 7220     nsor arena and r
   c0fe8:	6165 6863 6465 4520 5f49 414d 5f58 564f     eached EI_MAX_OV
   c0ff8:	5245 4c46 574f 425f 4655 4546 5f52 4f43     ERFLOW_BUFFER_CO
   c1008:	4e55 0a54 4500 5252 203a 6146 6c69 6465     UNT..ERR: Failed
   c1018:	7420 206f 6c61 6f6c 6163 6574 7020 7265      to allocate per
   c1028:	6973 7473 6e65 2074 7562 6666 7265 6f20     sistent buffer o
   c1038:	2066 6973 657a 2520 0a64 4500 5252 203a     f size %d..ERR: 
   c1048:	6146 6c69 6465 7420 206f 6c61 6f6c 6163     Failed to alloca
   c1058:	6574 7320 7263 7461 6863 6220 6675 6566     te scratch buffe
   c1068:	2072 666f 7320 7a69 2065 6425 202c 6572     r of size %d, re
   c1078:	6361 6568 2064 4945 4d5f 5841 535f 5243     ached EI_MAX_SCR
   c1088:	5441 4843 425f 4655 4546 5f52 4f43 4e55     ATCH_BUFFER_COUN
   c1098:	0a54 4500 5252 203a 6146 6c69 6465 7420     T..ERR: Failed t
   c10a8:	206f 6c61 6f6c 6163 6574 7320 7263 7461     o allocate scrat
   c10b8:	6863 6220 6675 6566 2072 666f 7320 7a69     ch buffer of siz
   c10c8:	2065 6425 000a 5245 3a52 6620 6961 656c     e %d..ERR: faile
   c10d8:	2064 6f74 6120 6c6c 636f 7461 2065 6574     d to allocate te
   c10e8:	736e 726f 6120 6572 616e 000a 5245 3a52     nsor arena..ERR:
   c10f8:	7420 6e65 6f73 2072 7261 6e65 2061 7369      tensor arena is
   c1108:	7420 6f6f 7320 616d 6c6c 202c 6f64 7365      too small, does
   c1118:	6e20 746f 6620 7469 6d20 646f 6c65 2d20      not fit model -
   c1128:	6520 6576 206e 6977 6874 756f 2074 6373      even without sc
   c1138:	6172 6374 2068 7562 6666 7265 0a73 0000     ratch buffers...

000c1148 <_ZN12_GLOBAL__N_1L11quant0_zeroE>:
   c1148:	0001 0000 ff80 ffff                         ........

000c1150 <_ZN12_GLOBAL__N_1L11quant2_zeroE>:
   c1150:	0010 0000 0000 0000 0000 0000 0000 0000     ................
	...

000c1194 <_ZN12_GLOBAL__N_1L11quant3_zeroE>:
   c1194:	0010 0000 0000 0000 0000 0000 0000 0000     ................
	...

000c11d8 <_ZN12_GLOBAL__N_1L11quant4_zeroE>:
   c11d8:	0010 0000 0000 0000 0000 0000 0000 0000     ................
	...

000c121c <_ZN12_GLOBAL__N_1L11quant5_zeroE>:
   c121c:	0010 0000 0000 0000 0000 0000 0000 0000     ................
	...

000c1260 <_ZN12_GLOBAL__N_1L11quant6_zeroE>:
   c1260:	0008 0000 0000 0000 0000 0000 0000 0000     ................
	...

000c1284 <_ZN12_GLOBAL__N_1L11quant7_zeroE>:
   c1284:	0008 0000 0000 0000 0000 0000 0000 0000     ................
	...

000c12a8 <_ZN12_GLOBAL__N_1L11quant8_zeroE>:
   c12a8:	0030 0000 0000 0000 0000 0000 0000 0000     0...............
	...

000c136c <_ZN12_GLOBAL__N_1L11quant9_zeroE>:
   c136c:	0030 0000 0000 0000 0000 0000 0000 0000     0...............
	...

000c1430 <_ZN12_GLOBAL__N_1L12quant0_scaleE>:
   c1430:	0001 0000 8081 3b80                         .......;

000c1438 <_ZN12_GLOBAL__N_1L12quant10_zeroE>:
   c1438:	0030 0000 0000 0000 0000 0000 0000 0000     0...............
	...

000c14fc <_ZN12_GLOBAL__N_1L12quant11_zeroE>:
   c14fc:	0030 0000 0000 0000 0000 0000 0000 0000     0...............
	...

000c15c0 <_ZN12_GLOBAL__N_1L12quant12_zeroE>:
   c15c0:	0008 0000 0000 0000 0000 0000 0000 0000     ................
	...

000c15e4 <_ZN12_GLOBAL__N_1L12quant13_zeroE>:
   c15e4:	0008 0000 0000 0000 0000 0000 0000 0000     ................
	...

000c1608 <_ZN12_GLOBAL__N_1L12quant14_zeroE>:
   c1608:	0030 0000 0000 0000 0000 0000 0000 0000     0...............
	...

000c16cc <_ZN12_GLOBAL__N_1L12quant15_zeroE>:
   c16cc:	0030 0000 0000 0000 0000 0000 0000 0000     0...............
	...

000c1790 <_ZN12_GLOBAL__N_1L12quant16_zeroE>:
   c1790:	0030 0000 0000 0000 0000 0000 0000 0000     0...............
	...

000c1854 <_ZN12_GLOBAL__N_1L12quant17_zeroE>:
   c1854:	0030 0000 0000 0000 0000 0000 0000 0000     0...............
	...

000c1918 <_ZN12_GLOBAL__N_1L12quant18_zeroE>:
   c1918:	0008 0000 0000 0000 0000 0000 0000 0000     ................
	...

000c193c <_ZN12_GLOBAL__N_1L12quant19_zeroE>:
   c193c:	0008 0000 0000 0000 0000 0000 0000 0000     ................
	...

000c1960 <_ZN12_GLOBAL__N_1L12quant20_zeroE>:
   c1960:	0030 0000 0000 0000 0000 0000 0000 0000     0...............
	...

000c1a24 <_ZN12_GLOBAL__N_1L12quant21_zeroE>:
   c1a24:	0030 0000 0000 0000 0000 0000 0000 0000     0...............
	...

000c1ae8 <_ZN12_GLOBAL__N_1L12quant22_zeroE>:
   c1ae8:	0030 0000 0000 0000 0000 0000 0000 0000     0...............
	...

000c1bac <_ZN12_GLOBAL__N_1L12quant23_zeroE>:
   c1bac:	0030 0000 0000 0000 0000 0000 0000 0000     0...............
	...

000c1c70 <_ZN12_GLOBAL__N_1L12quant24_zeroE>:
   c1c70:	0010 0000 0000 0000 0000 0000 0000 0000     ................
	...

000c1cb4 <_ZN12_GLOBAL__N_1L12quant25_zeroE>:
   c1cb4:	0010 0000 0000 0000 0000 0000 0000 0000     ................
	...

000c1cf8 <_ZN12_GLOBAL__N_1L12quant26_zeroE>:
   c1cf8:	0060 0000 0000 0000 0000 0000 0000 0000     `...............
	...

000c1e7c <_ZN12_GLOBAL__N_1L12quant27_zeroE>:
   c1e7c:	0060 0000 0000 0000 0000 0000 0000 0000     `...............
	...

000c2000 <_ZN12_GLOBAL__N_1L12quant28_zeroE>:
   c2000:	0060 0000 0000 0000 0000 0000 0000 0000     `...............
	...

000c2184 <_ZN12_GLOBAL__N_1L12quant29_zeroE>:
   c2184:	0060 0000 0000 0000 0000 0000 0000 0000     `...............
	...

000c2308 <_ZN12_GLOBAL__N_1L12quant2_scaleE>:
   c2308:	0010 0000 d85d 3d1e f810 3e51 ae89 3d38     ....]..=..Q>..8=
   c2318:	4c72 3ceb c752 3ba7 555a 3bdb 6504 3cc8     rL.<R..;ZU.;.e.<
   c2328:	7cc9 3bbe 7677 3d01 58ab 3c0e 45e6 3dc2     .|.;wv.=.X.<.E.=
   c2338:	bad4 3e2f 5d3b 3d78 6cbb 3b85 1037 3e25     ../>;]x=.l.;7.%>
   c2348:	4f58 3c19                                   XO.<

000c234c <_ZN12_GLOBAL__N_1L12quant30_zeroE>:
   c234c:	0010 0000 0000 0000 0000 0000 0000 0000     ................
	...

000c2390 <_ZN12_GLOBAL__N_1L12quant31_zeroE>:
   c2390:	0010 0000 0000 0000 0000 0000 0000 0000     ................
	...

000c23d4 <_ZN12_GLOBAL__N_1L12quant32_zeroE>:
   c23d4:	0060 0000 0000 0000 0000 0000 0000 0000     `...............
	...

000c2558 <_ZN12_GLOBAL__N_1L12quant33_zeroE>:
   c2558:	0060 0000 0000 0000 0000 0000 0000 0000     `...............
	...

000c26dc <_ZN12_GLOBAL__N_1L12quant34_zeroE>:
   c26dc:	0060 0000 0000 0000 0000 0000 0000 0000     `...............
	...

000c2860 <_ZN12_GLOBAL__N_1L12quant35_zeroE>:
   c2860:	0060 0000 0000 0000 0000 0000 0000 0000     `...............
	...

000c29e4 <_ZN12_GLOBAL__N_1L12quant36_zeroE>:
   c29e4:	0010 0000 0000 0000 0000 0000 0000 0000     ................
	...

000c2a28 <_ZN12_GLOBAL__N_1L12quant37_zeroE>:
   c2a28:	0010 0000 0000 0000 0000 0000 0000 0000     ................
	...

000c2a6c <_ZN12_GLOBAL__N_1L12quant38_zeroE>:
   c2a6c:	0060 0000 0000 0000 0000 0000 0000 0000     `...............
	...

000c2bf0 <_ZN12_GLOBAL__N_1L12quant39_zeroE>:
   c2bf0:	0060 0000 0000 0000 0000 0000 0000 0000     `...............
	...

000c2d74 <_ZN12_GLOBAL__N_1L12quant3_scaleE>:
   c2d74:	0010 0000 77d5 391f cadc 3a52 67f2 3939     .....w.9..R:.g99
   c2d84:	38ac 38ec 6fc2 37a8 318c 37dc 2e33 38c9     .8.8.o.7.1.73..8
   c2d94:	3c06 37bf f870 3901 e793 380e 08f0 39c3     .<.7p..9...8...9
   c2da4:	6b40 3a30 5693 3979 f2ae 3785 b5ee 3a25     @k0:.Vy9...7..%:
   c2db4:	e942 3819                                   B..8

000c2db8 <_ZN12_GLOBAL__N_1L12quant40_zeroE>:
   c2db8:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000c2e3c <_ZN12_GLOBAL__N_1L12quant41_zeroE>:
   c2e3c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000c2ec0 <_ZN12_GLOBAL__N_1L12quant42_zeroE>:
   c2ec0:	0002 0000 0000 0000 0000 0000               ............

000c2ecc <_ZN12_GLOBAL__N_1L12quant43_zeroE>:
   c2ecc:	0002 0000 0000 0000 0000 0000               ............

000c2ed8 <_ZN12_GLOBAL__N_1L12quant44_zeroE>:
   c2ed8:	0001 0000 ff80 ffff                         ........

000c2ee0 <_ZN12_GLOBAL__N_1L12quant45_zeroE>:
   c2ee0:	0001 0000 ff80 ffff                         ........

000c2ee8 <_ZN12_GLOBAL__N_1L12quant46_zeroE>:
   c2ee8:	0001 0000 0010 0000                         ........

000c2ef0 <_ZN12_GLOBAL__N_1L12quant47_zeroE>:
   c2ef0:	0001 0000 ff80 ffff                         ........

000c2ef8 <_ZN12_GLOBAL__N_1L12quant48_zeroE>:
   c2ef8:	0001 0000 ff80 ffff                         ........

000c2f00 <_ZN12_GLOBAL__N_1L12quant49_zeroE>:
   c2f00:	0001 0000 ff80 ffff                         ........

000c2f08 <_ZN12_GLOBAL__N_1L12quant4_scaleE>:
   c2f08:	0010 0000 53c2 3b92 c151 3c06 2ec6 3bd6     .....S.;Q..<...;
   c2f18:	a3c9 3be3 19bf 3d08 0220 3ce4 14b7 3bdb     ...;...= ..<...;
   c2f28:	2fbf 3cb9 c527 3c30 7f5c 3d14 490a 3c31     ./.<'.0<\..=.I1<
   c2f38:	b887 3c01 cf5c 3b89 e8b3 3c17 e66f 3c0a     ...<\..;...<o..<
   c2f48:	0e2d 3cf1                                   -..<

000c2f4c <_ZN12_GLOBAL__N_1L12quant50_zeroE>:
   c2f4c:	0001 0000 ffec ffff                         ........

000c2f54 <_ZN12_GLOBAL__N_1L12quant51_zeroE>:
   c2f54:	0001 0000 ff80 ffff                         ........

000c2f5c <_ZN12_GLOBAL__N_1L12quant52_zeroE>:
   c2f5c:	0001 0000 ff80 ffff                         ........

000c2f64 <_ZN12_GLOBAL__N_1L12quant53_zeroE>:
   c2f64:	0001 0000 fff4 ffff                         ........

000c2f6c <_ZN12_GLOBAL__N_1L12quant54_zeroE>:
   c2f6c:	0001 0000 fff7 ffff                         ........

000c2f74 <_ZN12_GLOBAL__N_1L12quant55_zeroE>:
   c2f74:	0001 0000 ff80 ffff                         ........

000c2f7c <_ZN12_GLOBAL__N_1L12quant56_zeroE>:
   c2f7c:	0001 0000 ff80 ffff                         ........

000c2f84 <_ZN12_GLOBAL__N_1L12quant57_zeroE>:
   c2f84:	0001 0000 ff80 ffff                         ........

000c2f8c <_ZN12_GLOBAL__N_1L12quant58_zeroE>:
   c2f8c:	0001 0000 fff7 ffff                         ........

000c2f94 <_ZN12_GLOBAL__N_1L12quant59_zeroE>:
   c2f94:	0001 0000 ff80 ffff                         ........

000c2f9c <_ZN12_GLOBAL__N_1L12quant5_scaleE>:
   c2f9c:	0010 0000 59fd 38dc ece7 394a 4459 3921     .....Y.8..J9YD!9
   c2fac:	663d 392b f392 3a4c ad45 3a2b f47e 3924     =f+9..L:E.+:~.$9
   c2fbc:	6f3f 3a0b 18f6 3985 9ea9 3a5f 7c44 3985     ?o.:...9.._:D|.9
   c2fcc:	5823 3943 8691 38cf c1cf 3964 2ad2 3951     #XC9...8..d9.*Q9
   c2fdc:	8022 3a35                                   ".5:

000c2fe0 <_ZN12_GLOBAL__N_1L12quant60_zeroE>:
   c2fe0:	0001 0000 ff80 ffff                         ........

000c2fe8 <_ZN12_GLOBAL__N_1L12quant61_zeroE>:
   c2fe8:	0001 0000 ffdc ffff                         ........

000c2ff0 <_ZN12_GLOBAL__N_1L12quant62_zeroE>:
   c2ff0:	0001 0000 fffa ffff                         ........

000c2ff8 <_ZN12_GLOBAL__N_1L12quant63_zeroE>:
   c2ff8:	0001 0000 ff80 ffff                         ........

000c3000 <_ZN12_GLOBAL__N_1L12quant64_zeroE>:
   c3000:	0001 0000 ff80 ffff                         ........

000c3008 <_ZN12_GLOBAL__N_1L12quant65_zeroE>:
   c3008:	0001 0000 000c 0000                         ........

000c3010 <_ZN12_GLOBAL__N_1L12quant66_zeroE>:
   c3010:	0001 0000 fffd ffff                         ........

000c3018 <_ZN12_GLOBAL__N_1L12quant67_zeroE>:
   c3018:	0001 0000 ff80 ffff                         ........

000c3020 <_ZN12_GLOBAL__N_1L12quant68_zeroE>:
   c3020:	0001 0000 ff80 ffff                         ........

000c3028 <_ZN12_GLOBAL__N_1L12quant69_zeroE>:
   c3028:	0001 0000 ffe9 ffff                         ........

000c3030 <_ZN12_GLOBAL__N_1L12quant6_scaleE>:
   c3030:	0008 0000 4fdb 3bf1 7525 3c1d 4a8b 3bf1     .....O.;%u.<.J.;
   c3040:	9b35 3c23 0651 3c13 0d92 3bdd 69eb 3bf9     5.#<Q..<...;.i.;
   c3050:	6afe 3c3b                                   .j;<

000c3054 <_ZN12_GLOBAL__N_1L12quant70_zeroE>:
   c3054:	0001 0000 ff80 ffff                         ........

000c305c <_ZN12_GLOBAL__N_1L12quant7_scaleE>:
   c305c:	0008 0000 b196 3935 1cd5 396d ad96 3935     ......59..m9..59
   c306c:	5f2f 3976 66e1 395d 709e 3926 cb3c 393b     /_v9.f]9.p&9<.;9
   c307c:	1d5c 398d                                   \..9

000c3080 <_ZN12_GLOBAL__N_1L12quant8_scaleE>:
   c3080:	0030 0000 839a 3b97 73a0 3b96 2f8b 3b36     0......;.s.;./6;
   c3090:	5e4b 3b51 3693 3a30 e225 3b45 937c 3ba9     K^Q;.60:%.E;|..;
   c30a0:	dbf3 3b0d b87d 3b4e 5207 3bb0 5f66 3b50     ...;}.N;.R.;f_P;
   c30b0:	92e0 3b54 91ac 3b12 1ef1 3b73 602e 3b49     ..T;...;..s;.`I;
   c30c0:	dc06 3b53 c12f 3b1c 1c90 3a5e 9018 3b1f     ..S;/..;..^:...;
   c30d0:	748f 3b64 9bfd 3b85 de87 3b03 9046 3b97     .td;...;...;F..;
   c30e0:	1f7f 3b52 729d 3ba3 4f09 3bfb 21f4 3b4e     ..R;.r.;.O.;.!N;
   c30f0:	85d0 3c11 25d8 3b27 5380 3a32 3c77 3b55     ...<.%';.S2:w<U;
   c3100:	f4ec 3c03 0e6e 3b81 e744 3b7d e125 3b4f     ...<n..;D.};%.O;
   c3110:	9565 3b5d f463 3b89 a996 3bdc 5978 3b84     e.];c..;...;xY.;
   c3120:	20cd 3bad 65f5 3b50 683a 3b54 85c4 3b5a     . .;.eP;:hT;..Z;
   c3130:	f06e 3b9c 7870 3b92 b7e5 3b15 7b00 3b39     n..;px.;...;.{9;
   c3140:	9aa8 3b60                                   ..`;

000c3144 <_ZN12_GLOBAL__N_1L12quant9_scaleE>:
   c3144:	0030 0000 f8de 39d1 7ff4 39d0 7a4a 397c     0......9...9Jz|9
   c3154:	12f4 3991 3368 3874 1db0 3989 00c3 39eb     ...9h3t8...9...9
   c3164:	9796 3944 3d4b 398f 5974 39f4 6256 3990     ..D9K=.9tY.9Vb.9
   c3174:	4b8c 3993 1e82 394b 762c 39a8 892d 398b     .K.9..K9,v.9-..9
   c3184:	ccd8 3992 3c11 3959 e76c 3899 205a 395d     ...9.<Y9l..8Z ]9
   c3194:	4cb6 399e 28c7 39b9 bf72 3936 0a6d 39d2     .L.9.(.9r.69m..9
   c31a4:	98d4 3991 8295 39e2 2295 3a2e d4fc 398e     ...9...9.".:...9
   c31b4:	ab4d 3a49 a347 3967 2109 3877 c10f 3993     M.I:G.g9.!w8...9
   c31c4:	de7b 3a36 d984 39b2 eed6 39af 0ada 3990     {.6:...9...9...9
   c31d4:	89c3 3999 2e5e 39bf e65e 3a18 69d2 39b7     ...9^..9^..:.i.9
   c31e4:	eceb 39ef 66e1 3990 2dfe 3993 6ac7 3997     ...9.f.9.-.9.j.9
   c31f4:	7d8a 39d9 fb8a 39ca 7bcb 394f 8596 3980     .}.9...9.{O9...9
   c3204:	a191 399b 0000 0000 0000 0000               ...9........

000c3210 <_ZN12_GLOBAL__N_1L12tensor_data1E>:
	...
   c321c:	0001 0000 0000 0000 0001 0000 0000 0000     ................
   c322c:	0000 0000                                   ....

000c3230 <_ZN12_GLOBAL__N_1L12tensor_data2E>:
   c3230:	92aa 42e2 10db 7f1f 6913 f5a1 6881 0e17     ...B.....i...h..
   c3240:	f3ff fee8 24d0 7f5f a2f4 78b1 3a7e eb02     .....$_....x~:..
   c3250:	9bf2 d581 c519 14fe ff81 aa0c c0ef f918     ................
   c3260:	1c81 a9fe fb15 4fef cd7f f038 ccdc 2ca7     .......O..8....,
   c3270:	f621 4b7f 1dfd e703 e1eb ca34 7fa9 c3e6     !..K......4.....
   c3280:	eb60 f633 7ff1 faf4 f955 5718 db0c e381     `.3.....U..W....
   c3290:	280c 0712 0aed a341 ac23 d27f 31d7 81f7     .(....A.#....1..
   c32a0:	0672 4fb2 4f05 f718 6b7f 3efe 245d e4e2     r..O.O...k.>]$..
   c32b0:	2c2f 8162 baf0 aa51 15e4 8981 f211 fcc1     /,b...Q.........

000c32c0 <_ZN12_GLOBAL__N_1L12tensor_data3E>:
   c32c0:	0809 0000 014a 0000 ffd6 ffff 03fd 0000     ....J...........
   c32d0:	002e 0001 ceed 0000 1bab 0000 522f 0000     ............/R..
   c32e0:	1bd0 0000 34f6 0000 0694 0000 ff4b ffff     .....4......K...
   c32f0:	1b5b 0000 419d 0000 0060 0000 55f5 0000     [....A..`....U..

000c3300 <_ZN12_GLOBAL__N_1L12tensor_data4E>:
   c3300:	fd04 0404 0bf0 100a f6fc f802 f800 0002     ................
   c3310:	fa07 0302 ff0f e50b 0af8 54fe 14fb 0003     ...........T....
   c3320:	fb02 03fb f301 0bfe 0301 f8ff fb04 00ff     ................
   c3330:	f40c 0103 e97f eb81 7f7f fcff e66d eeff     ............m...
   c3340:	7f81 fd7f a6ad 9af0 9712 7f7f 7f7f 7f7f     ................
   c3350:	fc14 fdfa 7ff5 f603 f4fd fcfc fc0d f8f4     ................
   c3360:	0100 f300 10f1 0739 f8f6 00ff fff9 f5fd     ......9.........
   c3370:	f215 81fb f009 7ff8 01fb f402 c5f9 dbf7     ................
   c3380:	ff01 fcfd fb02 fe02 02fe 03fe fa04 f4fa     ................

000c3390 <_ZN12_GLOBAL__N_1L12tensor_data5E>:
   c3390:	55f9 0000 fd99 ffff 0034 0000 0c9d 0000     .U......4.......
   c33a0:	fa54 ffff 0195 0000 27d9 0000 08f2 0000     T........'......
   c33b0:	00ed 0000 010d 0000 f5ae ffff 0b93 0000     ................
   c33c0:	01bf 0000 feb3 ffff fe7a ffff fc40 ffff     ........z...@...

000c33d0 <_ZN12_GLOBAL__N_1L12tensor_data6E>:
   c33d0:	f3f4 c1f1 dce9 ec0f 0626 fbe2 7f70 9bee     ........&...p...
   c33e0:	c47f 11d9 46d3 d4b9 52d9 ccde 05f8 eebf     .....F...R......
   c33f0:	a0de 2b28 c72f ebb2 aa1d 811a e92c 1ab6     ..(+/.......,...
   c3400:	0f25 100f 46f6 eacd 2e7f 1709 f303 150d     %....F..........
   c3410:	d8a5 81e6 28f4 8934 ee1e d7d0 2084 e7d5     .....(4...... ..
   c3420:	2f56 e947 cf2b 8781 b3ed 2e40 30c4 d53f     V/G.+.....@..0?.
   c3430:	2868 b881 b41c a602 12db 5c87 ab5d 4706     h(.........\]..G
   c3440:	0081 e264 05c2 c3fd 3dcf e455 e63e 1e20     ..d......=U.>. .

000c3450 <_ZN12_GLOBAL__N_1L12tensor_data7E>:
   c3450:	e3dd ffff f3e5 ffff 2fa7 0000 d90f ffff     ........./......
   c3460:	5b0c 0000 214c 0000 ddc5 ffff 2a82 0000     .[..L!.......*..

000c3470 <_ZN12_GLOBAL__N_1L12tensor_data8E>:
   c3470:	1ed7 f204 d6ad 1e81 b853 cdcb af7f 185d     ........S.....].
   c3480:	7a96 81d2 e834 26e6 1b2e 0266 7869 f17f     .z..4..&..f.ix..
   c3490:	81b3 0444 8bc8 e1fc e97f 3e4b f9b6 ee00     ..D.......K>....
   c34a0:	2418 e67f dd2a 1bd7 071f dc81 60d8 b262     .$..*........`b.
   c34b0:	7ffe 16e3 6635 3d2a 7ff6 5eb1 9211 7e2b     ....5f*=...^..+~
   c34c0:	8103 e3fe 86b3 acc8 b181 316a c0f9 3b68     ..........j1..h;
   c34d0:	2fe5 5281 cc25 69b2 8159 4b5b 1e07 c525     ./.R%..iY.[K..%.
   c34e0:	63eb 81e0 8fe1 bae2 7027 f220 bd20 8166     .c......'p . .f.
   c34f0:	8188 59c2 11c7 48eb 8ee2 5781 4abe 48ce     ...Y...H...W.J.H
   c3500:	b1a3 56cd 46fc 7ffa 813b 8260 c30b e220     ...V.F..;.`... .
   c3510:	4dfb 0d1e 7f2d f44e 6f1c df2d bc25 815c     .M..-.N..o-.%.\.
   c3520:	0c14 126e 7ff6 d825 be92 b022 645c 81c2     ..n...%...".\d..
   c3530:	a8a5 aa25 636c 81d0 077f f2c6 210d f8c1     ..%.lc.......!..
   c3540:	dd84 ea81 e1cc fd15 1f4d c9fa ea81 5e54     ........M.....T^
   c3550:	a281 3702 8ab7 fe0d 696f 812b 0f1a a9bc     ...7....oi+.....
   c3560:	bba1 ba2b 5f4c 81ca 282f 7ffa b903 0909     ..+.L_../(......
   c3570:	7fe2 1dfa 401a 2dee 7fde 1db5 dc19 fee4     .....@.-........
   c3580:	9a81 66cb 0bfb 6c12 7fcb f6e3 6d49 4534     ...f...l....Im4E
   c3590:	1548 d706 e381 6261 72bb 151b 6a81 99ea     H.....ab.r...j..
   c35a0:	2920 1c1f 4f7f 3d67 bbe9 f022 2409 7fa0      )...Og=.."..$..
   c35b0:	bab3 7fb2 fbde 4708 0e7f 6737 f6d0 f1fa     .......G..7g....
   c35c0:	0bd4 81b5 9038 5707 fb1d fe5d 7f24 065d     ....8..W..].$.].
   c35d0:	e4e2 7fb6 0b32 dad6 7f42 8d73 c32e 8c11     ....2...B.s.....
   c35e0:	81df 23d5 25f4 71c2 2c26 fe7b 7558 e47f     ...#.%.q&,{.Xu..

000c35f0 <_ZN12_GLOBAL__N_1L12tensor_data9E>:
   c35f0:	04f6 0000 fe2a ffff fe0c ffff 05cb 0000     ....*...........
   c3600:	43b2 0000 09b5 0000 fde6 ffff 12a6 0000     .C..............
   c3610:	0618 0000 059c 0000 0100 0000 0cb2 0000     ................
   c3620:	04b1 0000 027c 0000 fc4e ffff 0223 0000     ....|...N...#...
   c3630:	0e3f 0000 31da 0000 0e8d 0000 fc53 ffff     ?....1......S...
   c3640:	04dc 0000 fa94 ffff ffa5 ffff 0ac7 0000     ................
   c3650:	fec9 ffff fca3 ffff 07dd 0000 ffbd ffff     ................
   c3660:	0de3 0000 40fd 0000 0a85 0000 ffc9 ffff     .....@..........
   c3670:	0240 0000 ff6f ffff 0a3f 0000 004d 0000     @...o...?...M...
   c3680:	027c 0000 ff13 ffff 04c9 0000 04ed 0000     |...............
   c3690:	07f4 0000 08d6 0000 00d4 0000 fef4 ffff     ................
   c36a0:	02d5 0000 0a0c 0000 05ae 0000 ff5f ffff     ............_...

000c36b0 <_ZN12_GLOBAL__N_1L13quant10_scaleE>:
   c36b0:	0030 0000 be71 3b5e c0ff 3b65 9b90 3bec     0...q.^;..e;...;
   c36c0:	5047 3bdf ec36 3cfe ecd7 3bd4 debb 3bfc     GP.;6..<...;...;
   c36d0:	de8c 3b89 14da 3b98 7ddc 3b4b 4e82 3b49     ...;...;.}K;.NI;
   c36e0:	8aa0 3b17 b95e 3b65 bb64 3b32 0357 3c1e     ...;^.e;d.2;W..<
   c36f0:	cafc 3c02 2151 3ba4 4fd8 3c74 3421 3bae     ...<Q!.;.Ot<!4.;
   c3700:	38ff 3bc7 2611 3b9f 0771 3c93 ad3e 3bc9     .8.;.&.;q..<>..;
   c3710:	7379 3c22 329f 3bd5 afd5 3b6c 9364 3b29     ys"<.2.;..l;d.);
   c3720:	eb87 3b62 9980 3bec 42fd 3cfc f496 3c17     ..b;...;.B.<...<
   c3730:	ee93 3b5e 7786 3b98 d8d4 3bc4 7eed 3bd1     ..^;.w.;...;.~.;
   c3740:	ec38 3b2c 8676 3b68 8a1f 3b2c 4aa0 3bad     8.,;v.h;..,;.J.;
   c3750:	8e32 3b51 355b 3bca 7334 3bce 350a 3b41     2.Q;[5.;4s.;.5A;
   c3760:	3b46 3b5e 2ae8 3b5c 8d98 3c4c 85e3 3b4d     F;^;.*\;..L<..M;
   c3770:	a665 3c13                                   e..<

000c3774 <_ZN12_GLOBAL__N_1L13quant11_scaleE>:
   c3774:	0030 0000 b68c 38a7 fdbd 38ac 26d3 3932     0......8...8.&29
   c3784:	245a 3928 f11a 3a3f 51f3 3920 6572 393e     Z$(9..?:.Q 9re>9
   c3794:	9d70 38cf 044c 38e5 379d 3899 9274 3897     p..8L..8.7.8t..8
   c37a4:	3424 3864 f7ff 38ac 931e 3886 f2f6 396d     $4d8...8...8..m9
   c37b4:	f570 3944 2923 38f7 f3d6 39b7 2a43 3903     p.D9#).8...9C*.9
   c37c4:	00c0 3916 a8c3 38ef 6892 39dd d9c8 3917     ...9...8.h.9...9
   c37d4:	a1d8 3974 867e 3920 3616 38b2 5c73 387f     ..t9~. 9.6.8s\.8
   c37e4:	db81 38aa 2545 3932 f02e 3a3d d3b5 3964     ...8E%29..=:..d9
   c37f4:	dac9 38a7 98e2 38e5 36d6 3914 bcef 391d     ...8...8.6.9...9
   c3804:	335e 3882 13ed 38af e981 3881 7a73 3902     ^3.8...8...8sz.9
   c3814:	c86e 389d 4045 3918 71d9 391b 7941 3891     n..8E@.9.q.9Ay.8
   c3824:	53c8 38a7 c5f4 38a5 0436 399a bf2a 389a     .S.8...86..9*..8
   c3834:	57f0 395e                                   .W^9

000c3838 <_ZN12_GLOBAL__N_1L13quant12_scaleE>:
   c3838:	0008 0000 165d 3c24 34f1 3baa 2083 3bcc     ....].$<.4.;. .;
   c3848:	b9cf 3bc7 b526 3c01 33d2 3bda 1af8 3c0d     ...;&..<.3.;...<
   c3858:	6d1c 3bd6                                   .m.;

000c385c <_ZN12_GLOBAL__N_1L13quant13_scaleE>:
   c385c:	0008 0000 18a4 3977 27dd 3900 b215 3919     ......w9.'.9...9
   c386c:	61bd 3916 530c 3943 4b29 3924 7cf1 3954     .a.9.SC9)K$9.|T9
   c387c:	7348 3921                                   Hs!9

000c3880 <_ZN12_GLOBAL__N_1L13quant14_scaleE>:
   c3880:	0030 0000 7b4d 3b45 399f 3b12 0db3 3a72     0...M{E;.9.;..r:
   c3890:	0ede 3b1d 84b5 3b4f 67a2 3b62 30aa 3af7     ...;..O;.gb;.0.:
   c38a0:	d65e 3a95 51bd 3b09 05ba 3b41 b360 3b69     ^..:.Q.;..A;`.i;
   c38b0:	c728 3b5f 1b26 3a4d 5fb7 3b6b c0f3 3b6c     (._;&.M:._k;..l;
   c38c0:	0527 3a4b 9a87 3b88 cfd3 3b53 3684 3b71     '.K:...;..S;.6q;
   c38d0:	ee85 3b31 9434 3b23 1de1 3b4f 540e 3ba6     ..1;4.#;..O;.T.;
   c38e0:	e351 3a05 940d 3b0a faeb 3b13 1cd8 3a88     Q..:...;...;...:
   c38f0:	8660 3b5b 6d6c 3afb 4bef 3b00 449c 3be6     `.[;lm.:.K.;.D.;
   c3900:	9a28 3bb8 a87e 3b4c abb4 3b67 f96b 3b63     (..;~.L;..g;k.c;
   c3910:	a834 3b6e a2ce 3b46 e1e0 3b6d b515 3b76     4.n;..F;..m;..v;
   c3920:	9805 3b2d 452c 3b2c 8fee 3b42 cb64 3b51     ..-;,E,;..B;d.Q;
   c3930:	f1f7 3b20 e5a8 3b0a 79d7 3b4c d8b4 3ba8     .. ;...;.yL;...;
   c3940:	ec22 3aee                                   "..:

000c3944 <_ZN12_GLOBAL__N_1L13quant15_scaleE>:
   c3944:	0030 0000 463d 394c 4137 3917 611e 387a     0...=FL97A.9.az8
   c3954:	75da 3922 a806 3956 3142 396a b150 38ff     .u"9..V9B1j9P..8
   c3964:	fdc5 389a 0aea 390e a966 3947 bd3e 3971     ...8...9f.G9>.q9
   c3974:	79a6 3967 293a 3854 7851 3973 e5b3 3974     .yg9:)T8Qxs9..t9
   c3984:	00dc 3852 4d67 398d 18f3 395b 8289 3979     ..R8gM.9..[9..y9
   c3994:	0d4f 3938 349c 3929 3da9 3956 0cac 39ac     O.89.4)9.=V9...9
   c39a4:	7e47 380a 5850 390f 11f8 3919 cb65 388c     G~.8PX.9...9e..8
   c39b4:	136b 3963 09b1 3902 b5a9 3904 3040 39ee     k.c9...9...9@0.9
   c39c4:	f3af 39be b2a0 3953 a3b2 396f d0dd 396b     ...9..S9..o9..k9
   c39d4:	ddb7 3976 77e8 394d 1091 3976 317b 397f     ..v9.wM9..v9{1.9
   c39e4:	909d 3933 321c 3932 4129 3949 02c0 3959     ..39.229)AI9..Y9
   c39f4:	7b2e 3926 acba 390f 825e 3953 a77e 39ae     .{&9...9^.S9~..9
   c3a04:	23fb 38f7                                   .#.8

000c3a08 <_ZN12_GLOBAL__N_1L13quant16_scaleE>:
   c3a08:	0030 0000 0631 3c30 3dd8 3bdd 9485 3ceb     0...1.0<.=.;...<
   c3a18:	9080 3c25 8079 3c18 01c2 3c2c 4b70 3c1d     ..%<y..<..,<pK.<
   c3a28:	1ce5 3c2b 2aaa 3b87 ffe1 3c54 043a 3c23     ..+<.*.;..T<:.#<
   c3a38:	8263 3d46 d0fd 3c6f 1002 3cd5 dac4 3c85     c.F=..o<...<...<
   c3a48:	0d1b 3cb3 c143 3bf1 fcfb 3b47 ff30 3c09     ...<C..;..G;0..<
   c3a58:	ccbb 3c4a 0fcc 3c33 8c50 3c23 8051 3b72     ..J<..3<P.#<Q.r;
   c3a68:	3079 3c80 4ae7 3bd1 1b20 3c5a f795 3c96     y0.<.J.; .Z<...<
   c3a78:	4f8a 3c00 d5ce 3c0b 5b5d 3c8c 234e 3bcc     .O.<...<][.<N#.;
   c3a88:	0185 3ba8 e53d 3bb0 1c1f 3c10 a1c2 3bcb     ...;=..;...<...;
   c3a98:	d883 3c36 06e5 3d90 3332 3c7c 37b4 3bd9     ..6<...=23|<.7.;
   c3aa8:	a87f 3bfa f865 3bd5 6098 3bc2 e311 3c4b     ...;e..;.`.;..K<
   c3ab8:	84ca 3c05 8176 3c6e 5b17 3b53 6686 3b31     ...<v.n<.[S;.f1;
   c3ac8:	3d06 3bd0                                   .=.;

000c3acc <_ZN12_GLOBAL__N_1L13quant17_scaleE>:
   c3acc:	0030 0000 892e 3984 94f7 3926 60c5 3a31     0......9..&9.`1:
   c3adc:	5212 3979 a65c 3965 82d4 3981 de06 396c     .Ry9\.e9...9..l9
   c3aec:	d682 3980 8b8b 38cb 6049 39a0 7bd3 3975     ...9...8I`.9.{u9
   c3afc:	7742 3a95 914f 39b4 6c6e 3a20 91b8 39c9     Bw.:O..9nl :...9
   c3b0c:	d0a5 3a06 06f9 3936 9451 3896 ce97 394f     ...:..69Q..8..O9
   c3b1c:	b23f 3998 d2ac 3986 48c1 3976 96d4 38b6     ?..9...9.Hv9...8
   c3b2c:	09bf 39c1 95c3 391d 3891 39a4 56b7 39e3     ...9...9.8.9.V.9
   c3b3c:	3888 3941 9349 3952 5c68 39d3 b42f 3919     .8A9I.R9h\.9/..9
   c3b4c:	ff47 38fc 311f 3905 0332 3959 52a4 3919     G..8.1.92.Y9.R.9
   c3b5c:	ac0e 3989 e33b 3ad8 e44a 39bd 8d55 3923     ...9;..:J..9U.#9
   c3b6c:	bb1b 393c 1b67 3921 5acd 3912 83d1 3999     ..<9g.!9.Z.9...9
   c3b7c:	1040 3949 94ad 39b3 2375 389f 9277 3885     @.I9...9u#.8w..8
   c3b8c:	ca8f 391c                                   ...9

000c3b90 <_ZN12_GLOBAL__N_1L13quant18_scaleE>:
   c3b90:	0008 0000 f68f 3b86 b5a9 3b8f 179a 3bc3     .......;...;...;
   c3ba0:	b238 3b8d 6e1a 3bb2 ee2b 3bbf 36bc 3b60     8..;.n.;+..;.6`;
   c3bb0:	9ec3 3b6d                                   ..m;

000c3bb4 <_ZN12_GLOBAL__N_1L13quant19_scaleE>:
   c3bb4:	0008 0000 3d14 38cb 68e7 38d8 e498 3912     .....=.8.h.8...9
   c3bc4:	60b5 38d5 58ed 3906 8324 3910 d1df 38a8     .`.8.X.9$..9...8
   c3bd4:	e9fc 38b2                                   ...8

000c3bd8 <_ZN12_GLOBAL__N_1L13quant20_scaleE>:
   c3bd8:	0030 0000 00c1 3b2c c4ad 3b85 f3a9 3b54     0.....,;...;..T;
   c3be8:	4b67 3b3f 3706 3b1a cc73 3b1e a3ef 3b22     gK?;.7.;s..;..";
   c3bf8:	0898 3ade 576c 3b3e ff06 3b77 4bac 3b06     ...:lW>;..w;.K.;
   c3c08:	02d5 3b0d 777e 3b53 7a96 3b4e 02dc 3b40     ...;~wS;.zN;..@;
   c3c18:	9430 3af8 99b1 3b29 a930 3b1d 0a26 3aec     0..:..);0..;&..:
   c3c28:	8d91 3b74 0b8f 3b65 3807 3b2f 37d0 3b1a     ..t;..e;.8/;.7.;
   c3c38:	2a32 3af2 3544 3b28 661e 3b2f 2021 3b52     2*.:D5(;.f/;! R;
   c3c48:	c0be 3b52 59ad 3aaf 12c9 3b6c d758 3af3     ..R;.Y.:..l;X..:
   c3c58:	0f1d 3b00 01c2 3b1d 27cf 3b10 cd4e 3b17     ...;...;.'.;N..;
   c3c68:	b019 3b68 df88 3b1b 0d50 3b44 8beb 3b2e     ..h;...;P.D;...;
   c3c78:	aa9b 3b05 418f 3b59 5dda 3a9e 4864 3ac9     ...;.AY;.].:dH.:
   c3c88:	1215 3b56 0a47 3acf 812a 3b3d aefd 3b29     ..V;G..:*.=;..);
   c3c98:	7600 3b3f                                   .v?;

000c3c9c <_ZN12_GLOBAL__N_1L13quant21_scaleE>:
   c3c9c:	0030 0000 d5dd 394e db98 39a0 09d6 3980     0.....N9...9...9
   c3cac:	08a4 3966 71f4 3939 f503 393e 93a9 3943     ..f9.q99..>9..C9
   c3cbc:	7fb7 3905 e341 3964 1beb 3995 7dee 3921     ...9A.d9...9.}!9
   c3ccc:	913d 3929 4a84 397e 4b06 3978 e540 3966     =.)9.J~9.Kx9@.f9
   c3cdc:	759a 3915 f23f 394b 96c4 393d eb8d 390d     .u.9?.K9..=9...9
   c3cec:	09f0 3993 b6f2 3989 b3dc 3952 72e7 3939     ...9...9..R9.r99
   c3cfc:	9a59 3911 45a3 394a eb48 3952 ad9e 397c     Y..9.EJ9H.R9..|9
   c3d0c:	6ec2 397d dc52 38d2 f0be 398d 9c60 3912     .n}9R..8...9`..9
   c3d1c:	fe0d 3919 cd6e 393c 593b 392d 8b24 3936     ...9n.<9;Y-9$.69
   c3d2c:	e7a4 398b 706e 393b c131 396b e4e5 3951     ...9np;91.k9..Q9
   c3d3c:	bc3e 3920 a05c 3982 7004 38be 0b73 38f2     >. 9\..9.p.8s..8
   c3d4c:	b60c 3980 f7d0 38f8 e19b 3963 0bdb 394c     ...9...8..c9..L9
   c3d5c:	3bde 3966                                   .;f9

000c3d60 <_ZN12_GLOBAL__N_1L13quant22_scaleE>:
   c3d60:	0030 0000 dffb 3b8a 9ab3 3b93 4c77 3b5b     0......;...;wL[;
   c3d70:	032d 3bda 0d44 3b9e 7047 3b79 31b9 3b19     -..;D..;Gpy;.1.;
   c3d80:	09d9 3c5d e967 3bae 1a0a 3b2c 9161 3b49     ..]<g..;..,;a.I;
   c3d90:	2609 3b93 cfc1 3b76 1ff6 3b8a 2409 3b21     .&.;..v;...;.$!;
   c3da0:	a645 3b82 2c36 3bb7 7550 3b57 4acc 3bce     E..;6,.;PuW;.J.;
   c3db0:	79b5 3b1e 840c 3b5f 50a5 3b31 f4d6 3b7b     .y.;.._;.P1;..{;
   c3dc0:	e602 3b94 0aee 3b5d f06c 3b58 99ad 3b58     ...;..];l.X;..X;
   c3dd0:	cbc8 3ae9 18f1 3c12 078f 3b8f fdc7 3b43     ...:...<...;..C;
   c3de0:	582a 3c5e f701 3bb4 a97d 3bea 823d 3b78     *X^<...;}..;=.x;
   c3df0:	fc99 3b83 40e1 3b74 c2d8 3b2f 30ad 3b9e     ...;.@t;../;.0.;
   c3e00:	3161 3b93 ad38 3b1c 9959 3bfb 9e06 3c24     a1.;8..;Y..;..$<
   c3e10:	022d 3b66 0168 3bdd 702a 3b5b a865 3b21     -.f;h..;*p[;e.!;
   c3e20:	7064 3b69                                   dpi;

000c3e24 <_ZN12_GLOBAL__N_1L13quant23_scaleE>:
   c3e24:	0030 0000 211a 38d1 4653 38de 1e78 38a5     0....!.8SF.8x..8
   c3e34:	2688 3924 01e8 38ee d006 38bb b147 3866     .&$9...8...8G.f8
   c3e44:	6dd1 39a6 b2c0 3903 951d 3881 c4ce 3897     .m.9...9...8...8
   c3e54:	96a4 38dd d5a7 38b9 fff1 38cf a8b7 3872     ...8...8...8..r8
   c3e64:	be26 38c4 eb14 3909 3a36 38a2 536d 391b     &..8...96:.8mS.9
   c3e74:	a535 386e 4b55 38a8 81fe 3885 b556 38bd     5.n8UK.8...8V..8
   c3e84:	393d 38e0 6ea1 38a6 57a9 38a3 1658 38a3     =9.8.n.8.W.8X..8
   c3e94:	08df 3830 016b 395c 62b9 38d7 91e7 3893     ..08k.\9.b.8...8
   c3ea4:	6989 39a7 4182 3908 afce 3930 1ccb 38bb     .i.9.A.9..09...8
   c3eb4:	c1a7 38c6 e892 38b7 5679 3884 373b 38ee     ...8...8yV.8;7.8
   c3ec4:	a7ba 38dd efc4 386b 7073 393d e4ee 3977     ...8..k8sp=9..w9
   c3ed4:	2ed1 38ad 6776 3926 3959 38a5 7008 3873     ...8vg&9Y9.8.ps8
   c3ee4:	c40f 38af                                   ...8

000c3ee8 <_ZN12_GLOBAL__N_1L13quant24_scaleE>:
   c3ee8:	0010 0000 6079 3bb3 84d5 3bb6 eedd 3bd6     ....y`.;...;...;
   c3ef8:	5233 3bd8 d7c8 3b68 1ddd 3bee dd95 3ba3     3R.;..h;...;...;
   c3f08:	c39c 3bb5 5075 3ba6 b435 3b85 2f37 3bf7     ...;uP.;5..;7/.;
   c3f18:	06f2 3bc0 df4b 3bb7 9373 3b6f c35d 3b8f     ...;K..;s.o;]..;
   c3f28:	c1ed 3bce                                   ...;

000c3f2c <_ZN12_GLOBAL__N_1L13quant25_scaleE>:
   c3f2c:	0010 0000 0f6a 3907 6d0d 3909 d4fb 3921     ....j..9.m.9..!9
   c3f3c:	e087 3922 5127 38af 49b0 3933 c323 38f6     .."9'Q.8.I39#..8
   c3f4c:	db91 3908 7323 38fa 57a7 38c9 1d87 393a     ...9#s.8.W.8..:9
   c3f5c:	95cb 3910 71ea 390a 62f9 38b4 7d89 38d8     ...9.q.9.b.8.}.8
   c3f6c:	ad1f 391b                                   ...9

000c3f70 <_ZN12_GLOBAL__N_1L13quant26_scaleE>:
   c3f70:	0060 0000 8f8a 3b9a 06af 3b02 1513 3b9f     `......;...;...;
   c3f80:	3e1e 3b9b 7dbc 3afd 1786 3a97 927c 3b8a     .>.;.}.:...:|..;
   c3f90:	335f 3afc 9944 3a96 cfdb 3b3c a819 3a74     _3.:D..:..<;..t:
   c3fa0:	c871 3af5 965a 3b44 0fe7 3bce 5d96 3b1d     q..:Z.D;...;.].;
   c3fb0:	9d1f 3b2c 0674 3b81 44bb 3b22 4182 3b25     ..,;t..;.D";.A%;
   c3fc0:	16c9 3aa7 ece0 3b7f ef2f 3afc fbbd 3b1c     ...:...;/..:...;
   c3fd0:	7ee7 3b40 0413 3aa3 8bdd 3b29 caec 3b50     .~@;...:..);..P;
   c3fe0:	aec7 3b44 0151 3b14 c672 3b89 b23f 3b2a     ..D;Q..;r..;?.*;
   c3ff0:	ae48 3b0a 3230 3b81 ddc6 3ab7 061e 3b44     H..;02.;...:..D;
   c4000:	6c02 3b4c f3aa 3b37 256d 3b82 23d4 3b13     .lL;..7;m%.;.#.;
   c4010:	b82f 3b5e 916e 3a77 ee5d 3b48 8b7b 3b32     /.^;n.w:].H;{.2;
   c4020:	3094 3b12 88bf 3b12 b138 3ab5 e59b 3b04     .0.;...;8..:...;
   c4030:	bb27 3acd 3bdb 3ba2 2111 3b83 1228 3b94     '..:.;.;.!.;(..;
   c4040:	83ff 3b17 9b53 3b4d 9284 3b16 0cf4 3b0f     ...;S.M;...;...;
   c4050:	1eb9 3bbe 4476 3b1f fb72 3a4b 3238 3b22     ...;vD.;r.K:82";
   c4060:	8892 3b5c b971 3b33 8ce8 3ade 2224 3b39     ..\;q.3;...:$"9;
   c4070:	8b0e 3b93 872a 3a98 ad4e 3a8f e277 3b80     ...;*..:N..:w..;
   c4080:	05a6 3b39 5a63 3b03 2d71 3adc 6255 3b95     ..9;cZ.;q-.:Ub.;
   c4090:	4e78 3b27 239b 3b6b 8d3f 3b22 8bb6 3b71     xN';.#k;?.";..q;
   c40a0:	9209 3b61 59ab 3b30 ff4e 3aff e6c4 3b35     ..a;.Y0;N..:..5;
   c40b0:	313e 3b27 9ab0 3b1e 9ae6 3b3a 53c3 3ab2     >1';...;..:;.S.:
   c40c0:	55b1 3aa8 f0ff 3b16 e619 3ab3 53a1 3b03     .U.:...;...:.S.;
   c40d0:	83a5 3b83 f37e 3b8c eaf6 3b77 ee02 3b3a     ...;~..;..w;..:;
   c40e0:	e6f6 3ac2 323f 3b2e c6f2 3b00 c22d 3af1     ...:?2.;...;-..:
   c40f0:	0f6e 3b24                                   n.$;

000c40f4 <_ZN12_GLOBAL__N_1L13quant27_scaleE>:
   c40f4:	0060 0000 afc2 3961 dc93 38bd 49f8 3968     `.....a9...8.Ih9
   c4104:	aead 3962 124b 38b9 9f19 385c 5729 394a     ..b9K..8..\8)WJ9
   c4114:	2119 38b8 e6bd 385b d98b 3909 9f18 3832     .!.8..[8...9..28
   c4124:	719c 38b3 86c9 390f 71a8 3996 c83d 38e5     .q.8...9.q.9=..8
   c4134:	0c1b 38fc 666f 393c f0fa 38ec 4db0 38f1     ...8of<9...8.M.8
   c4144:	faeb 3873 d93d 393a aa37 38b8 395d 38e5     ..s8=.:97..8]9.8
   c4154:	8a0d 390c 085f 386e 917c 38f7 7001 3918     ...9_.n8|..8.p.9
   c4164:	989e 390f 1d40 38d8 2d3a 3949 3f57 38f9     ...9@..8:-I9W?.8
   c4174:	7fbf 38ca a64b 393c 3d30 3886 1d7b 390f     ...8K.<90=.8{..9
   c4184:	3f18 3915 4d2c 3906 0977 393e d9d6 38d6     .?.9,M.9w.>9...8
   c4194:	9af8 3922 bf40 3834 b2a7 3912 5a97 3902     .."9@.48...9.Z.9
   c41a4:	76a6 38d5 f764 38d5 a6db 3884 0db2 38c2     .v.8d..8...8...8
   c41b4:	33c8 3896 e404 396c 78e8 393f 35d7 3958     .3.8..l9.x?9.5X9
   c41c4:	3d7c 38dd 1c8b 3916 dce1 38db e136 38d0     |=.8...9...86..8
   c41d4:	ce07 398a 8f2a 38e8 ecea 3814 d5f2 38ec     ...9*..8...8...8
   c41e4:	0266 3921 370d 3903 7b5f 38a2 2a02 3907     f.!9.7.9_{.8.*.9
   c41f4:	7091 3957 b7eb 385e cb5a 3851 31e2 393c     .pW9..^8Z.Q8.1<9
   c4204:	1534 3907 cc9a 38bf bfde 38a0 20b8 395a     4..9...8...8. Z9
   c4214:	4c3a 38f4 ac3c 392b 5adc 38ed 59a8 3930     :L.8<.+9.Z.8.Y09
   c4224:	afd3 3924 c06b 3900 e6b2 38ba cdf3 3904     ..$9k..9...8...9
   c4234:	218d 38f4 9743 38e7 3d13 3908 31e9 3882     .!.8C..8.=.9.1.8
   c4244:	cc94 3875 66d7 38dc 57a7 3883 c2bc 38bf     ..u8.f.8.W.8...8
   c4254:	08d9 3940 d06c 394d 009e 3935 79c0 3908     ..@9l.M9..59.y.9
   c4264:	4bd5 388e 5ba9 38fe 09b3 38bc 816c 38b0     .K.8.[.8...8l..8
   c4274:	8ec2 38ef                                   ...8

000c4278 <_ZN12_GLOBAL__N_1L13quant28_scaleE>:
   c4278:	0060 0000 0cf3 3bb1 9bb8 3c40 49e6 3c12     `......;..@<.I.<
   c4288:	3773 3bdc 94d2 3c2d e645 3c83 af8e 3baf     s7.;..-<E..<...;
   c4298:	7ec7 3c26 485c 3c6b 3a10 3c39 2ef6 3c1e     .~&<\Hk<.:9<...<
   c42a8:	ae20 3c07 5e1a 3b99 7de3 3bd5 59fc 3c03      ..<.^.;.}.;.Y.<
   c42b8:	210b 3c11 d9e1 3c32 d654 3c39 af8d 3ba3     .!.<..2<T.9<...;
   c42c8:	39d1 3c66 6fe2 3c22 dca5 3c32 54da 3bc0     .9f<.o"<..2<.T.;
   c42d8:	5a16 3c26 4e04 3da4 d689 3bef 9b55 3c3a     .Z&<.N.=...;U.:<
   c42e8:	e71d 3bfc 1b2a 3c82 17ce 3c0e d718 3bf6     ...;*..<...<...;
   c42f8:	73b2 3c46 aceb 3b75 d133 3c99 6f20 3beb     .sF<..u;3..< o.;
   c4308:	c254 3bf4 f1c9 3c3e 933b 3b91 5af1 3c28     T..;..><;..;.Z(<
   c4318:	de66 3b94 d5bb 3ca7 28b6 3c12 d976 3c15     f..;...<.(.<v..<
   c4328:	54a7 3baa 5f4c 3bbb 870c 3c27 ef1a 3be6     .T.;L_.;..'<...;
   c4338:	64a3 3c64 692e 3c05 e025 3c88 6b2e 3c49     .dd<.i.<%..<.kI<
   c4348:	2088 3c0e 6b5f 3bc0 5f4b 3c69 1612 3c4c     . .<_k.;K_i<..L<
   c4358:	99bb 3c2b 5b66 3be5 7ae4 3c79 38d9 3c60     ..+<f[.;.zy<.8`<
   c4368:	7b1b 3c36 e6ba 3c5b a472 3c20 bd43 3bdc     .{6<..[<r. <C..;
   c4378:	c473 3bcf e4fe 3c5b 95da 3ca3 c25a 3baf     s..;..[<...<Z..;
   c4388:	b56b 3bcb 30fd 3c0d 787d 3c51 6dfb 3bfc     k..;.0.<}xQ<.m.;
   c4398:	c760 3c31 6bcf 3ca0 40c3 3be4 8f91 3bd8     `.1<.k.<.@.;...;
   c43a8:	1d77 3c19 aa63 3b74 228b 3c0c 164c 3bc5     w..<c.t;.".<L..;
   c43b8:	bd68 3bef ed76 3b9d 4a87 3c68 ebb8 3ba0     h..;v..;.Jh<...;
   c43c8:	a00a 3c50 9b1d 3ba5 60ca 3c6c 1268 3bd3     ..P<...;.`l<h..;
   c43d8:	b295 3c38 cd3c 3bd8 8f1a 3c21 8a80 3be6     ..8<<..;..!<...;
   c43e8:	29ed 3c0f d3e6 3c4a 49ec 3be4 2045 3b90     .).<..J<.I.;E .;
   c43f8:	1894 3c3a                                   ..:<

000c43fc <_ZN12_GLOBAL__N_1L13quant29_scaleE>:
   c43fc:	0060 0000 4f05 3905 05d0 3991 4b24 395c     `....O.9...9$K\9
   c440c:	cf66 3925 b250 3982 a008 39c6 47f3 3904     f.%9P..9...9.G.9
   c441c:	b8e4 397a 276d 39b1 7703 398b 34a6 396e     ..z9m'.9.w.9.4n9
   c442c:	5182 394c f41b 38e6 bf2a 3920 ccc7 3945     .QL9...8*. 9..E9
   c443c:	8c1d 395a aa13 3986 ecac 398b 7dd2 38f6     ..Z9...9...9.}.8
   c444c:	58b6 39ad 9c70 3974 ac28 3986 d074 3910     .X.9p.t9(..9t..9
   c445c:	81a3 397a 6c73 3af7 957c 3934 8101 398c     ..z9sl.:|.49...9
   c446c:	6bc2 393e ecac 39c3 f9af 3955 db2d 3939     .k>9...9..U9-.99
   c447c:	6c32 3995 faab 38b8 a16e 39e7 449d 3931     2l.9...8n..9.D19
   c448c:	4a09 3938 c51c 398f 3811 38db 85f0 397d     .J89...9.8.8..}9
   c449c:	2dc7 38e0 bd56 39fc 192a 395c a7d9 3961     .-.8V..9*.\9..a9
   c44ac:	3fbd 3900 148e 390d 46d9 397c e135 392d     .?.9...9.F|95.-9
   c44bc:	f772 39ab e6ac 3948 1e56 39ce a80b 3997     r..9..H9V..9...9
   c44cc:	06d3 3956 e169 3910 b730 39af aa38 3999     ..V9i..90..98..9
   c44dc:	3481 3981 b13e 392c d803 39bb d376 39a8     .4.9>.,9...9v..9
   c44ec:	65ba 3989 929e 39a5 e894 3971 3427 3926     .e.9...9..q9'4&9
   c44fc:	6fc6 391c 9150 39a5 571e 39f6 561a 3904     .o.9P..9.W.9.V.9
   c450c:	6172 3919 9e1a 3954 b816 399d 108d 393e     ra.9..T9...9..>9
   c451c:	db64 3985 934a 39f1 dc6f 392b 0ebc 3923     d..9J..9o.+9..#9
   c452c:	92c6 3966 3802 38b8 06d8 3953 651e 3914     ..f9.8.8..S9.e.9
   c453c:	8291 3934 d203 38ed e6cc 39ae 53e8 38f2     ..49...8...9.S.8
   c454c:	151d 399d 620e 38f9 fa92 39b1 ecbb 391e     ...9.b.8...9...9
   c455c:	1101 398b 3d2a 3923 49f1 3973 9576 392d     ...9*=#9.Is9v.-9
   c456c:	967a 3957 b7a4 3998 e355 392b 0971 38d9     z.W9...9U.+9q..8
   c457c:	1e8e 398c                                   ...9

000c4580 <_ZN12_GLOBAL__N_1L13quant30_scaleE>:
   c4580:	0010 0000 0f7f 3b75 eebb 3b09 35ae 3b19     ......u;...;.5.;
   c4590:	16f6 3b28 4908 3b50 78b3 3bbd 0f62 3b16     ..(;.IP;.x.;b..;
   c45a0:	1e6d 3b3b d7b6 3ba3 951e 3b8e 60d7 3b8d     m.;;...;...;.`.;
   c45b0:	a011 3b3a a6b5 3b67 6391 3b87 f2a9 3b4c     ..:;..g;.c.;..L;
   c45c0:	e33b 3b4c                                   ;.L;

000c45c4 <_ZN12_GLOBAL__N_1L13quant31_scaleE>:
   c45c4:	0010 0000 8424 38b8 b5cf 384f b73d 3866     ....$..8..O8=.f8
   c45d4:	1f91 387d d39a 389c a930 390e f90c 3861     ..}8...80..9..a8
   c45e4:	e3b6 388c ba4c 38f6 b664 38d6 e629 38d4     ...8L..8d..8)..8
   c45f4:	8491 388c 6b73 38ae e13b 38cb 504f 389a     ...8sk.8;..8OP.8
   c4604:	44b1 389a                                   .D.8

000c4608 <_ZN12_GLOBAL__N_1L13quant32_scaleE>:
   c4608:	0060 0000 fb85 3ac8 4d0a 3abb e5df 3afc     `......:.M.:...:
   c4618:	8561 3b11 126b 3b15 9588 3aab 6277 3aa4     a..;k..;...:wb.:
   c4628:	ee52 3b04 1b66 3b19 417a 3a97 5029 3b32     R..;f..;zA.:)P2;
   c4638:	e56f 3ab8 125a 3b11 d193 3b03 0234 3ad4     o..:Z..;...;4..:
   c4648:	ddcb 3afe 64ab 3b22 5547 3a91 da3c 3ab9     ...:.d";GU.:<..:
   c4658:	cd26 3b2d a078 3abd ef14 3a42 7679 3a98     &.-;x..:..B:yv.:
   c4668:	6e0a 3b17 fc69 3b20 0ed2 3ac2 75fd 3a94     .n.;i. ;...:.u.:
   c4678:	232a 3afa 4e63 3b14 e841 3b16 d202 3aa5     *#.:cN.;A..;...:
   c4688:	1405 3adf 1b70 3aa9 8c61 3b0e 229c 3b11     ...:p..:a..;.".;
   c4698:	ccc8 3afc 9210 3b11 fd35 3ad3 0d2c 3b0a     ...:...;5..:,..;
   c46a8:	ea7c 3b19 d5e7 3b18 86e3 3b01 a410 3b2d     |..;...;...;..-;
   c46b8:	86d2 3b52 3bb2 3b3e 66fd 3b0c 5726 3abb     ..R;.;>;.f.;&W.:
   c46c8:	0b01 3af8 09a5 3b00 c8ba 3b23 a681 3add     ...:...;..#;...:
   c46d8:	a882 3aeb 63c1 3b0a 3820 3b42 525c 3b38     ...:.c.; 8B;\R8;
   c46e8:	6572 3b10 fabe 3b13 bed9 3af3 6290 3ac7     re.;...;...:.b.:
   c46f8:	e1f1 3b47 bfd8 3b47 502d 3b0b e71d 3ae7     ..G;..G;-P.;...:
   c4708:	d461 3b24 4312 3b04 ae5e 3aab e407 3ac5     a.$;.C.;^..:...:
   c4718:	2b2a 3b0d 8a51 3ab9 34a3 3b41 0bcb 3ab9     *+.;Q..:.4A;...:
   c4728:	04b0 3aba 3bfc 3aeb 612e 3ac0 a4c3 3b0c     ...:.;.:.a.:...;
   c4738:	9151 3ac7 7ecc 3b16 29cd 3aed 5a8f 3b09     Q..:.~.;.).:.Z.;
   c4748:	6e45 3ae0 2ad7 3ae7 ac87 3ae5 1e74 3aa2     En.:.*.:...:t..:
   c4758:	523e 3ae8 fc91 3ae4 eb81 3acf d7de 3b56     >R.:...:...:..V;
   c4768:	57cb 3b61 caf6 3a2c fdaf 3b51 cb75 3b52     .Wa;..,:..Q;u.R;
   c4778:	128f 3b35 c2d6 3a9a c22d 3ac5 1696 3b45     ..5;...:-..:..E;
   c4788:	3dc8 3b04                                   .=.;

000c478c <_ZN12_GLOBAL__N_1L13quant33_scaleE>:
   c478c:	0060 0000 081d 38cf f037 38c0 413d 3902     `......87..8=A.9
   c479c:	e6a2 3915 8f09 3919 bf9b 38b0 5511 38a9     ...9...9...8.U.8
   c47ac:	ee91 3908 b71b 391d ceeb 389b ae15 3937     ...9...9...8..79
   c47bc:	7614 38be 7025 3915 c940 3907 63c1 38da     .v.8%p.9@..9.c.8
   c47cc:	44c8 3903 47ed 3927 b516 3895 723f 38bf     .D.9.G'9...8?r.8
   c47dc:	084f 3933 5590 38c3 cd11 3848 0d37 389d     O.39.U.8..H87..8
   c47ec:	fcd3 391b d4d3 3925 e60f 38c7 ede5 3898     ...9..%9...8...8
   c47fc:	d540 3900 c51a 3918 7303 391b cfac 38aa     @..9...9.s.9...8
   c480c:	cadc 38e5 326d 38ae d6bb 3912 80e4 3915     ...8m2.8...9...9
   c481c:	3451 3902 f3b3 3915 5e9b 38da 34e0 390e     Q4.9...9.^.8.4.9
   c482c:	8c6c 391e 6f84 391d 6ce8 3905 ddfc 3932     l..9.o.9.l.9..29
   c483c:	dcf3 3958 f576 3943 a0ce 3910 faa0 38c0     ..X9v.C9...9...8
   c484c:	8234 38ff e430 3903 b6b3 3928 5258 38e4     4..80..9..(9XR.8
   c485c:	c048 38f2 8e10 390e 109b 3948 de94 393d     H..8...9..H9..=9
   c486c:	be09 3914 6ef1 3918 14ef 38fb 62d8 38cd     ...9.n.9...8.b.8
   c487c:	e60f 394d c2ef 394d 8199 390f e1f3 38ee     ..M9..M9...9...8
   c488c:	ca69 3929 3e2a 3908 d930 38b0 d8cc 38cb     i.)9*>.90..8...8
   c489c:	6ae2 3911 1fed 38bf 054f 3947 9d98 38be     .j.9...8O.G9...8
   c48ac:	9dfb 38bf 507e 38f2 2b7c 38c6 e070 3910     ...8~P.8|+.8p..9
   c48bc:	9302 38cd 0661 391b 4d2b 38f4 7ce2 390d     ...8a..9+M.8.|.9
   c48cc:	2f88 38e7 2002 38ee 9631 38ec ff99 38a6     ./.8. .81..8...8
   c48dc:	504d 38ef e0ef 38eb 2d8d 38d6 4f42 395d     MP.8...8.-.8BO]9
   c48ec:	2016 3968 fe59 3831 4fb0 3958 23a7 3959     . h9Y.18.OX9.#Y9
   c48fc:	85be 393a 6b49 389f b5ed 38cb 052c 394b     ..:9Ik.8...8,.K9
   c490c:	38b7 3908                                   .8.9

000c4910 <_ZN12_GLOBAL__N_1L13quant34_scaleE>:
   c4910:	0060 0000 d83a 3c3f a6bc 3c0a 38d5 3bd0     `...:.?<...<.8.;
   c4920:	1fec 3bdc 459a 3c3c cd91 3c50 9e0a 3c3c     ...;.E<<..P<..<<
   c4930:	862c 3c02 ae58 3c17 f73c 3bc2 a235 3ba7     ,..<X..<<..;5..;
   c4940:	3ca5 3c8a b578 3c33 b890 3bcd 2a74 3bfb     .<.<x.3<...;t*.;
   c4950:	059a 3bc8 44a7 3bb4 b899 3c1f 7498 3bf8     ...;.D.;...<.t.;
   c4960:	3974 3bc8 d921 3bf7 df9c 3c62 9108 3c21     t9.;!..;..b<..!<
   c4970:	0165 3c29 e194 3cc7 88c4 3c03 73c1 3c45     e.)<...<...<.sE<
   c4980:	8722 3bca 971b 3c14 f69f 3b8e 59ee 3c47     "..;...<...;.YG<
   c4990:	aad2 3c39 a910 3bfb d69a 3c0e e17c 3c40     ..9<...;...<|.@<
   c49a0:	9ea9 3c9e 767f 3bf7 4b53 3c9a 1862 3c7e     ...<.v.;SK.<b.~<
   c49b0:	3618 3bc1 d6f7 3c09 1a9a 3c10 c9ba 3c2c     .6.;...<...<..,<
   c49c0:	d6d1 3bbd 2d5d 3bcc 9516 3b97 575c 3c52     ...;]-.;...;\WR<
   c49d0:	9334 3bbe d10e 3bf9 d01b 3ba2 6cf1 3be4     4..;...;...;.l.;
   c49e0:	7cbf 3bc3 753b 3c11 70e6 3be6 82b3 3c0e     .|.;;u.<.p.;...<
   c49f0:	1d75 3c0e ec2f 3c0b fc64 3bfd 41c4 3bc7     u..</..<d..;.A.;
   c4a00:	caaf 3bc3 876a 3c08 efd6 3bfd 29a8 3bf7     ...;j..<...;.).;
   c4a10:	ab01 3ba7 6363 3bf2 8828 3c12 f50f 3bef     ...;cc.;(..<...;
   c4a20:	ea3e 3c18 9f31 3c2b 76ce 3c20 36f5 3c1a     >..<1.+<.v <.6.<
   c4a30:	2764 3bd7 8d2b 3ba1 fab7 3c14 c1f1 3c4f     d'.;+..;...<..O<
   c4a40:	7e58 3bcb ccb0 3c02 4358 3c1b 6c98 3c13     X~.;...<XC.<.l.<
   c4a50:	e088 3c33 a717 3c3e 97c6 3ba8 7961 3c26     ..3<..><...;ay&<
   c4a60:	8fca 3bfe 9127 3b82 81a6 3be6 1944 3bf1     ...;'..;...;D..;
   c4a70:	444f 3c20 0efc 3c0f e71b 3c1e 80ba 3bc0     OD <...<...<...;
   c4a80:	ebb2 3c5c 9465 3c0e fa19 3c2b 5922 3bae     ..\<e..<..+<"Y.;
   c4a90:	89b5 3c56                                   ..V<

000c4a94 <_ZN12_GLOBAL__N_1L13quant35_scaleE>:
   c4a94:	0060 0000 56f0 3968 eb0a 3927 2c87 38fc     `....Vh9..'9.,.8
   c4aa4:	4b67 3905 0341 3964 e0a8 397c 6e5c 3964     gK.9A.d9..|9\nd9
   c4ab4:	134e 391e b2bc 3937 1e9a 38ec 04a1 38cb     N..9..79...8...8
   c4ac4:	6a8e 39a7 a466 3959 251c 38f9 175a 3918     .j.9f.Y9.%.8Z..9
   c4ad4:	3e30 38f2 51cf 38da 6f73 3941 7331 3916     0>.8.Q.8soA91s.9
   c4ae4:	7cfc 38f2 150d 3916 6196 3989 ab9b 3943     .|.8...9.a.9..C9
   c4af4:	adf2 394c 128f 39f2 4c7c 391f 217b 396f     ..L9...9|L.9{!o9
   c4b04:	4722 38f5 f47b 3933 23ef 38ad 6e47 3971     "G.8{.39.#.8Gnq9
   c4b14:	dbba 3960 6405 3918 fd28 392c 9830 3969     ..`9.d.9(.,90.i9
   c4b24:	1a00 39c0 d953 3915 dced 39ba dd77 3999     ...9S..9...9w..9
   c4b34:	fea8 38e9 ef69 3926 858c 392e 42ad 3951     ...8i.&9...9.BQ9
   c4b44:	e928 38e5 467e 38f7 9425 38b7 bd93 397e     (..8~F.8%..8..~9
   c4b54:	cd4f 38e6 4633 3917 2e08 38c5 5230 390a     O..83F.9...80R.9
   c4b64:	c04c 38ec 2958 3930 8a9f 390b 978b 392c     L..8X)09...9..,9
   c4b74:	1cee 392c 752f 3929 cc84 3919 5104 38f1     ..,9/u)9...9.Q.8
   c4b84:	1eaf 38ed 5908 3925 c4ea 3919 aacc 3915     ...8.Y%9...9...9
   c4b94:	0f48 38cb c6a9 3912 764d 3931 4dd1 3911     H..8...9Mv19.M.9
   c4ba4:	3150 3939 d920 394f 55ce 3942 c442 393a     P199 .O9.UB9B.:9
   c4bb4:	48d5 3902 a6ed 38c3 6d1d 3934 9c8b 397b     .H.9...8.m49..{9
   c4bc4:	7287 38f6 68b5 391e 094c 393c 8af5 3932     .r.8.h.9L.<9..29
   c4bd4:	d88d 3959 e565 3966 2e07 38cc 9d25 3949     ..Y9e.f9...8%.I9
   c4be4:	25c5 391a 209b 389e 94c4 390b fec3 3911     .%.9. .8...9...9
   c4bf4:	18a6 3942 4171 392d 71bd 3940 2301 38e9     ..B9qA-9.q@9.#.8
   c4c04:	c6cc 3985 acf9 392c 4738 3950 2663 38d3     ...9..,98GP9c&.8
   c4c14:	e959 3981                                   Y..9

000c4c18 <_ZN12_GLOBAL__N_1L13quant36_scaleE>:
   c4c18:	0010 0000 8cf0 3b1c 6fde 3b4e 895e 3b3f     .......;.oN;^.?;
   c4c28:	3894 3b41 6904 3b3f 3ace 3b31 9aaf 3b0d     .8A;.i?;.:1;...;
   c4c38:	9630 3b10 5950 3b7c 9933 3b4e 49ff 3b21     0..;PY|;3.N;.I!;
   c4c48:	abbd 3b1a 2cec 3b3a f6b4 3b1e c892 3b8c     ...;.,:;...;...;
   c4c58:	c881 3b46                                   ..F;

000c4c5c <_ZN12_GLOBAL__N_1L13quant37_scaleE>:
   c4c5c:	0010 0000 bf27 386b 6f56 389b 373e 3890     ....'.k8Vo.8>7.8
   c4c6c:	7beb 3891 1ee2 3890 718c 3885 3d44 3855     .{.8...8.q.8D=U8
   c4c7c:	bb03 3859 00fd 38be 8e75 389b e1e1 3872     ..Y8...8u..8..r8
   c4c8c:	ea86 3868 2ddf 388c 6170 386f 00dc 38d4     ..h8.-.8pao8...8
   c4c9c:	ac0d 3895                                   ...8

000c4ca0 <_ZN12_GLOBAL__N_1L13quant38_scaleE>:
   c4ca0:	0060 0000 d04f 3ae9 d247 3b20 c9dc 3aed     `...O..:G. ;...:
   c4cb0:	b85a 3ad1 13c1 3aca cc88 3b1c f906 3af1     Z..:...:...;...:
   c4cc0:	a9b4 3b18 a0a7 3b14 4f1e 3b31 a2f1 3ac7     ...;...;.O1;...:
   c4cd0:	6b8e 3b19 8028 3ad5 3277 3a94 9cd0 3a9f     .k.;(..:w2.:...:
   c4ce0:	d24c 3b05 a6fd 3b61 d995 3b15 34f1 3afd     L..;..a;...;.4.:
   c4cf0:	ed3a 3abc 3113 3aff 3c83 3aed 8396 3aac     :..:.1.:.<.:...:
   c4d00:	6284 3aff d831 3b46 6808 3b26 766e 3aef     .b.:1.F;.h&;nv.:
   c4d10:	0d78 3af3 b032 3afb 0fb0 3b07 2909 3ad9     x..:2..:...;.).:
   c4d20:	1ff2 3b40 94bd 3b29 7efa 3ae0 a0f0 3ac7     ..@;..);.~.:...:
   c4d30:	19c9 3ad1 bcc9 3b20 50fe 3ab7 b51c 3abd     ...:.. ;.P.:...:
   c4d40:	0baa 3acf 8e6e 3b16 051f 3adb d77a 3af4     ...:n..;...:z..:
   c4d50:	e221 3ac6 d610 3af4 36e3 3aeb 2c84 3b16     !..:...:.6.:.,.;
   c4d60:	9f6c 3b03 b7e9 3a8e 46b0 3ad7 3209 3b03     l..;...:.F.:.2.;
   c4d70:	c224 3adc 7d48 3a8f 75a3 3ad7 8e42 3b14     $..:H}.:.u.:B..;
   c4d80:	d50d 3af5 2012 3b00 0ec1 3ae9 30cb 3af6     ...:. .;...:.0.:
   c4d90:	a027 3b0e 5711 3b27 ba8c 3b0b 356b 3b25     '..;.W';...;k5%;
   c4da0:	d5a2 3ad7 b261 3aa3 12a7 3abd b0a3 3a89     ...:a..:...:...:
   c4db0:	a755 3afb cda9 3aeb 7f31 3b0b 1fab 3b00     U..:...:1..;...;
   c4dc0:	d2f7 3afc 9976 3ad5 4776 3adb 371b 3ad6     ...:v..:vG.:.7.:
   c4dd0:	82c3 3a9f d7e0 3aca 0f5f 3b20 657d 3afb     ...:...:_. ;}e.:
   c4de0:	1cdb 3b01 8981 3a52 cc3f 3ae6 032b 3b1a     ...;..R:?..:+..;
   c4df0:	11b7 3ac1 bdd1 3af2 cc25 3b00 6bad 3ac0     ...:...:%..;.k.:
   c4e00:	637d 3b13 eb12 3b06 a5ac 3b3b e1d6 3b19     }c.;...;..;;...;
   c4e10:	acb8 3ae8 d3ca 3ae4 88ef 3aa5 ba96 3b4a     ...:...:...:..J;
   c4e20:	1fe0 3b00                                   ...;

000c4e24 <_ZN12_GLOBAL__N_1L13quant39_scaleE>:
   c4e24:	0060 0000 b481 390c 8f24 3941 18d9 390f     `......9$.A9...9
   c4e34:	6977 38fc 3692 38f3 b7c6 393c 9d75 3911     wi.8.6.8..<9u..9
   c4e44:	bd67 3937 e20f 3932 6733 3955 4692 38f0     g.79..293gU9.F.8
   c4e54:	a6b7 3938 7b24 3900 5d71 38b2 1aae 38c0     ..89${.9q].8...8
   c4e64:	101e 3921 cb30 3987 5ab1 3934 6023 3918     ..!90..9.Z49#`.9
   c4e74:	62bc 38e3 91ec 3919 c3ca 390e a1c9 38cf     .b.8...9...9...8
   c4e84:	afad 3919 528c 396f 47f1 3948 1ac1 3910     ...9.Ro9.GH9...9
   c4e94:	43d1 3912 7632 3917 8e1e 3922 aef0 3902     .C.92v.9.."9...9
   c4ea4:	3c1e 3967 1a17 394c 190d 3907 4428 38f0     .<g9..L9...9(D.8
   c4eb4:	aa9f 38fb 7546 3941 a222 38dc 534e 38e4     ...8FuA9"..8NS.8
   c4ec4:	3166 38f9 345a 3935 cd70 3903 5770 3913     f1.8Z459p..9pW.9
   c4ed4:	5e82 38ef 5696 3913 8c4a 390d be81 3934     .^.8.V.9J..9..49
   c4ee4:	6aa9 391e c560 38ab 8cac 3901 e701 391d     .j.9`..8...9...9
   c4ef4:	d93f 3904 b2ec 38ac a8ec 3901 cbeb 3932     ?..9...8...9..29
   c4f04:	f009 3913 350b 391a 4007 390c 273e 3914     ...9.5.9.@.9>'.9
   c4f14:	a8c7 392b 67a3 3949 2c35 3928 d6ea 3946     ..+9.gI95,(9..F9
   c4f24:	e2b1 3901 0516 38c5 8fc7 38e3 b80e 38a5     ...9...8...8...8
   c4f34:	70dc 3917 e706 390d e4c5 3927 348f 391a     .p.9...9..'9.4.9
   c4f44:	252d 3918 8a5e 3900 f55d 3903 e93d 3900     -%.9^..9]..9=..9
   c4f54:	fb53 38bf 229e 38f4 a48f 3940 493d 3917     S..8.".8..@9=I.9
   c4f64:	654a 391b 6532 387d e3e4 390a 5d31 3939     Je.92e}8...91]99
   c4f74:	5f1a 38e8 13e2 3912 0426 391b 9743 38e7     ._.8...9&..9C..8
   c4f84:	6455 3931 620c 3922 d880 3961 3513 3939     Ud19.b"9..a9.599
   c4f94:	0508 390c b451 3909 3b6e 38c7 ff5d 3973     ...9Q..9n;.8].s9
   c4fa4:	34cf 391a                                   .4.9

000c4fa8 <_ZN12_GLOBAL__N_1L13quant40_scaleE>:
   c4fa8:	0020 0000 9d0f 3aeb 588f 3afa e987 3af2      ......:.X.:...:
   c4fb8:	6717 3aef aa1e 3add eb4c 3aee 426e 3ade     .g.:...:L..:nB.:
   c4fc8:	be9a 3aec 0fb9 3b02 bb11 3aef 814b 3ae8     ...:...;...:K..:
   c4fd8:	4f05 3ae4 dbaa 3b19 336f 3b0c 7393 3aea     .O.:...;o3.;.s.:
   c4fe8:	0ffe 3afb 32c2 3aec f41b 3b04 633b 3aee     ...:.2.:...;;c.:
   c4ff8:	e8d9 3aeb d548 3b08 c394 3b00 785c 3b13     ...:H..;...;\x.;
   c5008:	37a7 3af1 2f41 3af7 6122 3b22 69ec 3af2     .7.:A/.:"a";.i.:
   c5018:	8d03 3aeb 6cf3 3af6 50ab 3b02 2353 3b05     ...:.l.:.P.;S#.;
   c5028:	6189 3af1                                   .a.:

000c502c <_ZN12_GLOBAL__N_1L13quant41_scaleE>:
   c502c:	0020 0000 6e55 381a 1655 3824 3702 381f      ...Un.8U.$8.7.8
   c503c:	ea22 381c 49ca 3811 98fe 381c ad9f 3811     "..8.I.8...8...8
   c504c:	2c1d 381b 7ed4 382a 212d 381d 64c1 3818     .,.8.~*8-!.8.d.8
   c505c:	a4a2 3815 b0a9 3849 c982 3837 ab5a 3819     ...8..I8..78Z..8
   c506c:	8e90 3824 d074 381a 4963 382e 3fcf 381c     ..$8t..8cI.8.?.8
   c507c:	a002 381a 5f53 3833 cb6d 3828 50f7 3841     ...8S_38m.(8.PA8
   c508c:	1aa0 381e 03e1 3822 dc50 3854 e35e 381e     ...8.."8P.T8^..8
   c509c:	63d1 381a 8486 3821 d3f7 382a 8749 382e     .c.8..!8..*8I..8
   c50ac:	3614 381e                                   .6.8

000c50b0 <_ZN12_GLOBAL__N_1L13quant42_scaleE>:
   c50b0:	0002 0000 2b7c 3b72 9acf 3b60               ....|+r;..`;

000c50bc <_ZN12_GLOBAL__N_1L13quant43_scaleE>:
   c50bc:	0002 0000 0094 38e5 6467 38d4               .......8gd.8

000c50c8 <_ZN12_GLOBAL__N_1L13quant44_scaleE>:
   c50c8:	0001 0000 c0c1 3cc0                         .......<

000c50d0 <_ZN12_GLOBAL__N_1L13quant45_scaleE>:
   c50d0:	0001 0000 c0c1 3cc0                         .......<

000c50d8 <_ZN12_GLOBAL__N_1L13quant46_scaleE>:
   c50d8:	0001 0000 62bf 3db1                         .....b.=

000c50e0 <_ZN12_GLOBAL__N_1L13quant47_scaleE>:
   c50e0:	0001 0000 c0c1 3cc0                         .......<

000c50e8 <_ZN12_GLOBAL__N_1L13quant48_scaleE>:
   c50e8:	0001 0000 c0c1 3cc0                         .......<

000c50f0 <_ZN12_GLOBAL__N_1L13quant49_scaleE>:
   c50f0:	0001 0000 c0c1 3cc0                         .......<

000c50f8 <_ZN12_GLOBAL__N_1L13quant50_scaleE>:
   c50f8:	0001 0000 671d 3d84                         .....g.=

000c5100 <_ZN12_GLOBAL__N_1L13quant51_scaleE>:
   c5100:	0001 0000 c0c1 3cc0                         .......<

000c5108 <_ZN12_GLOBAL__N_1L13quant52_scaleE>:
   c5108:	0001 0000 c0c1 3cc0                         .......<

000c5110 <_ZN12_GLOBAL__N_1L13quant53_scaleE>:
   c5110:	0001 0000 60d4 3d6e                         .....`n=

000c5118 <_ZN12_GLOBAL__N_1L13quant54_scaleE>:
   c5118:	0001 0000 ebe0 3d99                         .......=

000c5120 <_ZN12_GLOBAL__N_1L13quant55_scaleE>:
   c5120:	0001 0000 c0c1 3cc0                         .......<

000c5128 <_ZN12_GLOBAL__N_1L13quant56_scaleE>:
   c5128:	0001 0000 c0c1 3cc0                         .......<

000c5130 <_ZN12_GLOBAL__N_1L13quant57_scaleE>:
   c5130:	0001 0000 c0c1 3cc0                         .......<

000c5138 <_ZN12_GLOBAL__N_1L13quant58_scaleE>:
   c5138:	0001 0000 e734 3d3a                         ....4.:=

000c5140 <_ZN12_GLOBAL__N_1L13quant59_scaleE>:
   c5140:	0001 0000 c0c1 3cc0                         .......<

000c5148 <_ZN12_GLOBAL__N_1L13quant60_scaleE>:
   c5148:	0001 0000 c0c1 3cc0                         .......<

000c5150 <_ZN12_GLOBAL__N_1L13quant61_scaleE>:
   c5150:	0001 0000 ab8c 3d4b                         ......K=

000c5158 <_ZN12_GLOBAL__N_1L13quant62_scaleE>:
   c5158:	0001 0000 da41 3d83                         ....A..=

000c5160 <_ZN12_GLOBAL__N_1L13quant63_scaleE>:
   c5160:	0001 0000 04bd 3c9b                         .......<

000c5168 <_ZN12_GLOBAL__N_1L13quant64_scaleE>:
   c5168:	0001 0000 c0c1 3cc0                         .......<

000c5170 <_ZN12_GLOBAL__N_1L13quant65_scaleE>:
   c5170:	0001 0000 a50d 3d03                         .......=

000c5178 <_ZN12_GLOBAL__N_1L13quant66_scaleE>:
   c5178:	0001 0000 0e72 3d9a                         ....r..=

000c5180 <_ZN12_GLOBAL__N_1L13quant67_scaleE>:
   c5180:	0001 0000 cb0c 3ca7                         .......<

000c5188 <_ZN12_GLOBAL__N_1L13quant68_scaleE>:
   c5188:	0001 0000 1495 3cf2                         .......<

000c5190 <_ZN12_GLOBAL__N_1L13quant69_scaleE>:
   c5190:	0001 0000 5b98 3d86                         .....[.=

000c5198 <_ZN12_GLOBAL__N_1L13quant70_scaleE>:
   c5198:	0001 0000 0000 3b80                         .......;

000c51a0 <_ZN12_GLOBAL__N_1L13tensor_data10E>:
   c51a0:	98d5 ebef c37f bf47 aeaf c9e8 1e75 813e     ......G.....u.>.
   c51b0:	eb3d d504 68c1 0ef5 4bde d93a bd50 d80f     =....h...K:.P...
   c51c0:	aea0 4b2e 4a15 bf6d ec81 471d 8130 4b56     ...K.Jm....G0.VK
   c51d0:	81c3 2fb2 72ac c335 2dbd 8d48 587f ad69     .../.r5..-H..Xi.
   c51e0:	b4aa cd20 61b7 78ba 66a8 8358 d15f 8109     .. ..a.x.fX._...
   c51f0:	a5c0 7a4c 6e71 b97f c882 5c3b 7458 4258     ..Lzqn....;\XtXB
   c5200:	c300 5eb6 e9d8 fb27 195b b436 3617 f1d9     ...^..'.[.6..6..
   c5210:	f1a8 e11c 1fdd fab7 2db4 a416 3922 ba7f     .........-.."9..
   c5220:	0b08 2ef7 3a52 fd31 61ec 2037 2327 890e     ....R:1..a7 '#..
   c5230:	9982 abec aeaf 876a 8181 ad4c 305b ba83     ......j...L.[0..
   c5240:	817f adc3 799a 09d3 5be3 d663 b296 cd01     .....y...[c.....
   c5250:	81ad 4c81 5723 a905 ec3e 7746 7257 817b     ...L#W..>.FwWr{.
   c5260:	8481 8f81 7fe8 817f 3d67 817f 7f67 9643     ........g=..g.C.
   c5270:	a133 8181 7f81 7f81 7f81 817f 7f81 8af6     3...............
   c5280:	9081 7f2c 7f7f 81f0 a56a 7f7f fa7f 5f7f     ..,.....j......_
   c5290:	c6cd 7f82 d852 e433 1d4f c515 4211 cf51     ....R.3.O....BQ.
   c52a0:	04e5 bcec 0fbd eebd 3582 ab1f 23c6 ab7d     .........5...#}.
   c52b0:	04ca 4c3a 4453 e3e3 7f2d 1349 d139 0c10     ..:LSD..-.I.9...
   c52c0:	dd8c 1814 e2db cc19 d121 cd10 1a00 f1d3     ........!.......
   c52d0:	eda9 db57 2cee f2c1 30ed f84e 3823 faf9     ..W..,...0N.#8..
   c52e0:	ae06 25d7 060b dac8 f90e 2d28 391a bd0d     ...%......(-.9..
   c52f0:	d49f bee5 2364 bd34 1169 b9e0 3300 b981     ....d#4.i....3..
   c5300:	0b21 ba2a 2be1 33c9 37c3 e54e 0323 e0e8     !.*..+.3.7N.#...
   c5310:	e3c3 30bf 0b1a be9f dc13 4b56 912e 0917     ...0......VK....
   c5320:	ddd5 f7d0 f1ef e213 0ebb e6f5 13ff e626     ..............&.
   c5330:	271a c6fa fae0 e2f9 03c0 e819 c004 e331     .'............1.
   c5340:	0dae 2915 0d12 e1ca 2cfe 121c fe13 1e04     ...).....,......

000c5350 <_ZN12_GLOBAL__N_1L13tensor_data11E>:
   c5350:	34ce 0000 1857 0000 1275 0000 019e 0000     .4..W...u.......
   c5360:	fcb5 ffff fb97 ffff fc4e ffff 810e 0000     ........N.......
   c5370:	f8ee ffff 079e 0000 1b35 0000 e8c3 0000     ........5.......
   c5380:	0849 0000 0ccc 0000 0021 0000 2c18 0000     I.......!....,..
   c5390:	ff38 ffff 30b4 0000 0748 0000 1d7e 0000     8....0..H...~...
   c53a0:	2e00 0000 ff7f ffff 0fc4 0000 dcdc ffff     ................
   c53b0:	2801 0000 05d3 0000 021f 0000 3852 0000     .(..........R8..
   c53c0:	005d 0000 fbe6 ffff dae1 ffff 2a52 0000     ]...........R*..
   c53d0:	1400 0000 06d4 0000 ff37 ffff 1176 0000     ........7...v...
   c53e0:	dbd6 ffff 1749 0000 fc8d ffff 4280 0000     ....I........B..
   c53f0:	fb74 ffff fbcc ffff 16b4 0000 0692 0000     t...............
   c5400:	0206 0000 fab6 ffff 047f 0000 004b 0000     ............K...

000c5410 <_ZN12_GLOBAL__N_1L13tensor_data12E>:
   c5410:	fcd7 0d1f f1e1 0607 fad9 c7c1 c1e7 e0f5     ................
   c5420:	d72d 2926 1ef1 0ed9 d800 f237 eefb 0813     -.&)......7.....
   c5430:	2351 8124 fe12 e0ee ef01 2d2b 0324 0119     Q#$.......+-$...
   c5440:	2602 e740 2cf3 e3d0 1700 a6f2 5809 3def     .&@..,.......X.=
   c5450:	12f3 c9e7 b208 15e6 f3bd 90fe f0e6 cf1d     ................
   c5460:	4c2e 04d5 e57f 2c05 28e4 e5b1 ec6e e7e3     .L.....,.(..n...
   c5470:	ebfe 0fbf 2dfb 061c 2ef7 1cfe a241 c213     .....-......A...
   c5480:	a725 2014 35e7 19fc 3ef1 bae7 020e b713     %.. .5...>......
   c5490:	aad1 e421 176a c6f7 1b00 1c53 117f 1613     ..!.j.....S.....
   c54a0:	19f9 2aba d910 98ba ec0f 02dd 1903 5023     ...*..........#P
   c54b0:	0df6 16dd 9804 c61b f8b1 f37f 02d6 11c0     ................
   c54c0:	b1ff f40a d6e9 67e7 dad1 1201 0428 28d6     .......g....(..(
   c54d0:	d1e5 0af9 e820 f7f5 e41a b13a 1f06 0a08     .... .....:.....
   c54e0:	e7f1 ef0b ccfb ed03 f410 2e29 1421 19f2     ..........).!...
   c54f0:	fff4 0001 56bd e725 ec1c eaed 0cb5 0b7f     .....V%.........
   c5500:	eb29 11ff d81a 811f e719 73f8 43b1 bd19     )..........s.C..
   c5510:	a601 ff0e 3ddf d1da 4ec1 00e8 31ea ddda     .....=...N...1..
   c5520:	351a f91f f6d9 dad2 db12 f9d4 36df 1457     .5...........6W.
   c5530:	ea37 f516 ecdd 14dc 03d7 7fd9 ddd7 39fe     7..............9
   c5540:	2c0d 2311 ae24 13ec 2716 05c2 d70b 240d     .,.#$....'.....$
   c5550:	0d03 fff2 030e f9fe f3f9 3a2b dbfe f24b     ..........+:..K.
   c5560:	08e5 44fa 2021 2206 0416 fa4a 6e7a 303c     ...D! ."..J.zn<0
   c5570:	2d2c 00f2 e918 e8a7 ff0e 41e1 e621 eedf     ,-.........A!...
   c5580:	0b26 a026 25b4 382a 25df 7f54 e3c2 3c91     &.&..%*8.%T....<

000c5590 <_ZN12_GLOBAL__N_1L13tensor_data13E>:
   c5590:	1eea 0000 3849 0000 eb63 ffff 1f6d 0000     ....I8..c...m...
   c55a0:	fd11 ffff 110a 0000 cf91 ffff b833 ffff     ............3...

000c55b0 <_ZN12_GLOBAL__N_1L13tensor_data14E>:
   c55b0:	7f36 b6be 5107 460a b63b 812a 46c1 d4a0     6....Q.F;.*..F..
   c55c0:	7fdb 2c7c 046a 0c39 2a68 3da1 9df9 df81     ..|,j.9.h*.=....
   c55d0:	1edc ba09 63de 367f 5314 b881 6036 e524     .....c.6.S..6`$.
   c55e0:	7ff6 434b 0251 a70f f27f 18d6 0c18 0b67     ..KCQ.........g.
   c55f0:	7f3e 5738 507b a966 713b a481 5914 4405     >.8W{Pf.;q...Y.D
   c5600:	d1c2 cc15 e2fd 7fd2 9510 ed81 f216 f728     ..............(.
   c5610:	88e7 e490 1c81 1fc9 09fa 6a94 e981 ec05     ...........j....
   c5620:	d3c5 f981 ff23 c1f1 960f 0d81 e890 fbe1     ....#...........
   c5630:	c27f 48f2 18aa 6a1d 7be7 e87f f4c9 eae2     ...H...j.{......
   c5640:	8108 462d c5fd ac3c ce7f 24bf 0a9d 672f     ..-F..<....$../g
   c5650:	81e1 4e55 aaf3 b301 cff7 e2f9 fb7f 162f     ..UN........../.
   c5660:	1e81 30ae 332c 96a3 d9a5 0948 7f96 cd76     ...0,3....H...v.
   c5670:	43e9 d6f7 7fd5 0776 98d6 c581 edd6 d7e5     .C....v.........
   c5680:	42ed 7ffb 24b1 04d7 810c 4f25 c814 8608     .B...$....%O....
   c5690:	7f12 2c3b e769 c310 1166 efcc 814f 19a2     ..;,i...f...O...
   c56a0:	fa1b 8120 ea14 ee12 e22e 3d00 19f5 7f07     .. ........=....
   c56b0:	c3a5 c911 7fbb 623c 2ce4 d129 7f23 438c     ......<b.,).#..C
   c56c0:	7f23 cdb4 3017 41bf 810a 4229 baea b224     #....0.A..)B..$.
   c56d0:	e7ee fbb9 c981 0ded 81cb 4c43 a8d7 d1fc     ..........CL....
   c56e0:	19b4 b640 a881 58c5 8141 4365 a9ea 9ee2     ..@....XA.eC....
   c56f0:	3a01 260e f381 11c5 7f64 8fb3 193d 15fc     .:.&....d...=...
   c5700:	def2 0ff4 0e7f 182d 1f7f 195b edb7 7943     ......-...[...Cy
   c5710:	333e 0fe6 8f54 1c81 1232 1617 8156 cb01     >3..T...2...V...
   c5720:	dc38 7ff8 3722 4613 a0b3 3e28 09c6 b17f     8..."7.F..(>....

000c5730 <_ZN12_GLOBAL__N_1L13tensor_data15E>:
   c5730:	0ba8 0000 1677 0000 3f24 0000 07ab 0000     ....w...$?......
   c5740:	0956 0000 f8fc ffff 19a0 0000 32a1 0000     V............2..
   c5750:	0f6b 0000 fbc8 ffff 0e01 0000 f7ae ffff     k...............
   c5760:	4996 0000 f89f ffff 0817 0000 5205 0000     .I...........R..
   c5770:	fe47 ffff 083e 0000 005b 0000 0e64 0000     G...>...[...d...
   c5780:	10f8 0000 0e73 0000 025f 0000 841f 0000     ....s..._.......
   c5790:	1731 0000 0fca 0000 3d2a 0000 06e4 0000     1.......*=......
   c57a0:	188b 0000 17b8 0000 027d 0000 04c0 0000     ........}.......
   c57b0:	044e 0000 0687 0000 ff11 ffff 0155 0000     N...........U...
   c57c0:	f4e5 ffff fd58 ffff 0930 0000 0c64 0000     ....X...0...d...
   c57d0:	12f9 0000 0a01 0000 0eba 0000 135d 0000     ............]...
   c57e0:	14a9 0000 0d5d 0000 07f0 0000 1a5e 0000     ....].......^...

000c57f0 <_ZN12_GLOBAL__N_1L13tensor_data16E>:
   c57f0:	cd06 0407 a6ed 3ddd fbde 0af8 0130 03f2     .......=....0...
   c5800:	0e5c 061f ebfd 15b5 f1fd e5fb 48c3 87f4     \............H..
   c5810:	0237 c4ce e4fa ef07 2ff3 050f 42f1 ee7f     7......../...B..
   c5820:	9b81 7fe6 50c2 7fa8 111e fd0a 1736 d3fe     .....P......6...
   c5830:	36da 031f 7f0a 7f06 dd7f 28ce 8a47 bbfc     .6.........(G...
   c5840:	044a 81e2 0f1c c3c2 fa85 86aa 3622 7332     J..........."62s
   c5850:	f6ed 0809 1bea 2f26 df0c 0502 01ed 0402     ......&/........
   c5860:	1dc2 e1bf e9fd 157f feca 0c06 2a16 140c     .............*..
   c5870:	f700 48e1 0709 4111 e21c e021 24fb f2e0     ...H...A..!..$..
   c5880:	eaf4 fde3 9620 be7f 05f2 261e 127f e002     .... ......&....
   c5890:	e8e9 3124 c73f 0d2e 7fbe f1b3 9c7f 8126     ..$1?.........&.
   c58a0:	05da 0aad c30b 08d7 7f74 8110 c8bc 55fd     ........t......U
   c58b0:	8162 007f 567f cac1 7f22 817f 7f9f 7f7f     b....V..".......
   c58c0:	7f7f 7f7f 777f 0404 9771 7881 7f2a fa7f     .....w..q..x*...
   c58d0:	7f81 727f 7f81 8281 2e21 e081 817f 4bf5     ...r....!......K
   c58e0:	1910 f9d6 7fd0 5390 b773 3f0f 0ada bf0e     .......Ss..?....
   c58f0:	0215 1481 9818 fcda f243 7fe4 daba dd18     ........C.......
   c5900:	11e5 e45b 0029 adfc fe6b 3625 67c5 a86a     ..[.)...k.%6.gj.
   c5910:	18fe de05 c3ff 01f7 0202 0604 faf4 0000     ................
   c5920:	16cd d80e f101 f85d 009b f030 0008 1d04     ......]...0.....
   c5930:	f1f3 1ab8 f300 3115 f2dd 0406 17ee 0ff5     .......1........
   c5940:	e62c dcdc 301a a671 e37f 08f6 ecb7 bae7     ,....0q.........
   c5950:	6df2 170c 230d dfeb 3abe 0052 119e f5e3     .m...#...:R.....
   c5960:	f7e5 fcd5 e638 7f01 ff81 3ef0 3d1f 810d     ....8......>.=..
   c5970:	19f8 e903 fdec daf7 e9eb 04f3 f512 0df0     ................
   c5980:	2836 f1e9 f3ff f0cf eb1b f615 03f0 0df8     6(..............
   c5990:	ea18 c6e3 09fb 111c f1ef 1602 0fec d547     ..............G.

000c59a0 <_ZN12_GLOBAL__N_1L13tensor_data17E>:
   c59a0:	001a 0000 2d0d 0000 ffe9 ffff fecf ffff     .....-..........
   c59b0:	0107 0000 f9df ffff 0433 0000 f47b ffff     ........3...{...
   c59c0:	ee64 ffff ffbd ffff e79a ffff ff8d ffff     d...............
   c59d0:	fefc ffff fc23 ffff f6c3 ffff 1152 0000     ....#.......R...
   c59e0:	1a7e 0000 04af 0000 fe0d ffff efbb ffff     ~...............
   c59f0:	e47e ffff fa5a ffff 4439 0000 ef63 ffff     ~...Z...9D..c...
   c5a00:	f687 ffff ff05 ffff 15d3 0000 e342 ffff     ............B...
   c5a10:	fbac ffff fff8 ffff e04e ffff 240c 0000     ........N....$..
   c5a20:	151b 0000 ff15 ffff 0f1e 0000 01d6 0000     ................
   c5a30:	fff2 ffff fd47 ffff 2648 0000 039f 0000     ....G...H&......
   c5a40:	1ea9 0000 f5b6 ffff 0961 0000 1126 0000     ........a...&...
   c5a50:	fd3d ffff 29fb 0000 ff8e ffff 0147 0000     =....)......G...

000c5a60 <_ZN12_GLOBAL__N_1L13tensor_data18E>:
   c5a60:	d2ce bdf0 f801 555e a899 0fda fbc2 21c0     ......^U.......!
   c5a70:	0da5 7f10 de40 5f12 4b46 0616 bfa8 c4ac     ....@.._FK......
   c5a80:	66c9 d21c e523 fb5c 091c 9003 df23 a6dc     .f..#.\.....#...
   c5a90:	34f5 e9ed 3cbc d5eb 44e4 0fee 2b3b 04d0     .4...<...D..;+..
   c5aa0:	8bef d050 0e7f 18bd fd3b 3eb1 f424 1e47     ..P.....;..>$.G.
   c5ab0:	eee3 f103 6afe e4f4 243e 07f7 1169 3de4     .....j..>$..i..=
   c5ac0:	dae5 0878 d35a 19f2 fedc 2ff5 d70a 81d1     ..x.Z....../....
   c5ad0:	98cc 14e8 179c dfd5 0fd0 cbfe 08d8 f3e2     ................
   c5ae0:	f9ff f817 e01c 08cc de21 ce20 cfd2 cfbc     ........!. .....
   c5af0:	1334 0a3d d913 4726 e7cb e229 38b8 30ee     4.=...&G..)..8.0
   c5b00:	2747 1ed9 c294 f97f 0105 dec9 3dca bd6b     G'...........=k.
   c5b10:	9006 29e5 b4f7 4af4 c8b2 f93e bf9e f53d     ...)...J..>...=.
   c5b20:	ed13 e444 f305 f9fc fcc2 03eb b829 9f25     ..D.........).%.
   c5b30:	302b ddf3 2207 0612 03fe ed36 1516 f381     +0..."....6.....
   c5b40:	eee9 0b01 fa2f 011e f4da 1bc0 a1f0 1100     ..../...........
   c5b50:	d01b 1d37 0e1f 001b fab8 17d0 0620 d30a     ..7......... ...
   c5b60:	495c eff7 c950 ab7f 27ef 2a08 0d08 d3dd     \I..P....'.*....
   c5b70:	d4f2 05d9 1a2a 0344 19b6 1d1c ef2e fa4a     ....*.D.......J.
   c5b80:	33ce 5086 1d32 172c f7ee b042 eca1 23e6     .3.P2.,...B....#
   c5b90:	1f8e 5ffd 2f1b aca5 e5ff 521e dae7 06d8     ..._./.....R....
   c5ba0:	4c23 ebd8 faf4 0a50 404c c781 6cda e1cb     #L....P.L@...l..
   c5bb0:	4a21 12b0 3a10 4277 5029 03a9 00d2 d1ba     !J...:wB)P......
   c5bc0:	2820 626c 0b50 187f 5c64 5cd1 28be b8fd      (lbP...d\.\.(..
   c5bd0:	c416 13e7 5c01 55c5 34c3 b4fc e852 da32     .....\.U.4..R.2.

000c5be0 <_ZN12_GLOBAL__N_1L13tensor_data19E>:
   c5be0:	0e2f 0000 fc0b ffff 5efb 0000 ed30 ffff     /........^..0...
   c5bf0:	14bb 0000 c5dc ffff 08e3 0000 c3f2 ffff     ................

000c5c00 <_ZN12_GLOBAL__N_1L13tensor_data20E>:
   c5c00:	183b df7f 693e d1be ac0c 0081 142f fc18     ;...>i....../...
   c5c10:	f581 ecd4 1a33 d5b5 4428 af7f 90f2 edf7     ....3...(D......
   c5c20:	1281 e3d0 092a c2d3 1b9c f8c8 230d 81ac     ....*........#..
   c5c30:	81d6 2e8c 0a63 3201 81bd b0a3 c0b6 5c16     ....c..2.......\
   c5c40:	205a f9fa ae61 0d81 35dd 55c9 d7c8 e67f     Z ..a....5.U....
   c5c50:	7ae8 3f26 eb7f 37fb e1b1 f8ec 66b3 fd7f     .z&?...7.....f..
   c5c60:	2546 2a81 def4 f2b9 df3d 05bb 8109 eae1     F%.*....=.......
   c5c70:	ad03 0e4e 8e7f 19c4 ced3 7ffe 533c 1db0     ..N.........<S..
   c5c80:	1f73 12df 9a4d e881 7f39 4b3a 452f ac1c     s...M...9.:K/E..
   c5c90:	f81c 0507 087f f91a 7f0d 0a1c 0f8a e217     ................
   c5ca0:	10d6 813f 2511 6bec 41db 8125 2e23 6af9     ..?..%.k.A%.#..j
   c5cb0:	b6bd 159f 7e81 e378 2560 1381 d409 eeb2     .....~x.`%......
   c5cc0:	30c8 0501 43eb 6081 c893 0f81 beca 6749     .0...C.`......Ig
   c5cd0:	f735 dad6 ed6e d37f bd7f 5c1b 1e01 65eb     5...n......\...e
   c5ce0:	3f25 ef33 c17f df31 f9f4 d6e1 09c1 e07f     %?3...1.........
   c5cf0:	812e b6c5 ff8d c50a 1905 f1f7 0781 f2e8     ................
   c5d00:	c430 4ec3 acf5 816d 7f3a 2131 e93f eae8     0..N..m.:.1!?...
   c5d10:	da84 f87f 6ce8 0f64 4de0 f17f b6be 1dd8     .....ld..M......
   c5d20:	019e e862 7ff0 1650 b0ea 81fe aed9 2e4c     ..b...P.......L.
   c5d30:	f52e ca5b 3e38 0b81 62ed da81 05ed 5a04     ..[.8>...b.....Z
   c5d40:	cf3c 2115 030a 7f08 65de fb7f 5610 1cae     <..!.....e...V..
   c5d50:	8139 e696 0d8e a914 acf1 b61a d07f 260d     9..............&
   c5d60:	7f00 1d6f 36ff 0cb2 2ddb 5912 418d 1581     ..o..6...-.Y.A..
   c5d70:	d9d6 2a39 8981 fde5 3ef1 9527 1e81 3aeb     ..9*.....>'....:

000c5d80 <_ZN12_GLOBAL__N_1L13tensor_data21E>:
   c5d80:	08f5 0000 fbec ffff 03f4 0000 f821 ffff     ............!...
   c5d90:	10d9 0000 fd2a ffff 0f84 0000 ee14 ffff     ....*...........
   c5da0:	0581 0000 0256 0000 0b3a 0000 127e 0000     ....V...:...~...
   c5db0:	0278 0000 fe3f ffff 0399 0000 15e9 0000     x...?...........
   c5dc0:	f72b ffff 10e9 0000 19f7 0000 0377 0000     +...........w...
   c5dd0:	fc5e ffff 0a98 0000 fc17 ffff 16bd 0000     ^...............
   c5de0:	0964 0000 07b3 0000 058e 0000 fcb7 ffff     d...............
   c5df0:	22b0 0000 fe99 ffff 0cd4 0000 f716 ffff     ."..............
   c5e00:	fcf3 ffff 131f 0000 fa95 ffff 0790 0000     ................
   c5e10:	0a1f 0000 03cc 0000 0208 0000 1450 0000     ............P...
   c5e20:	0822 0000 25e9 0000 edb0 ffff 0684 0000     "....%..........
   c5e30:	1b55 0000 00de 0000 0ac0 0000 0a4c 0000     U...........L...

000c5e40 <_ZN12_GLOBAL__N_1L13tensor_data22E>:
   c5e40:	3ea7 6581 3aad 45cf b9c3 cd3e a444 d5ce     .>.e.:.E..>.D...
   c5e50:	4e42 9752 8163 a355 d3b3 7f3a c69e 3ba0     BNR.c.U...:....;
   c5e60:	a04f 8b45 8fa7 db5b a9e8 af6c 3261 cdc1     O.E...[...l.a2..
   c5e70:	5289 77b4 71bc 57d1 9f83 b05e 8c65 beb5     .R.w.q.W..^.e...
   c5e80:	6f63 817f 8e76 895c b5aa 7a4c b520 688f     co..v.\...Lz ..h
   c5e90:	8165 8d64 8197 b972 609c 9c7f 58e2 abac     e.d...r..`...X..
   c5ea0:	2cc0 2504 37f7 35e6 e4cb e42e da20 f8e8     .,.%.7.5.... ...
   c5eb0:	371f e43c d01f d622 e8c6 1a15 e05f 0eb8     .7<..."....._...
   c5ec0:	ae26 e02b d3eb dd26 dc8b db2b 2cbc d5ed     &.+...&...+..,..
   c5ed0:	5884 75c0 65be 5490 959b aa4e 9754 9ba5     .X.u.e.T..N.T...
   c5ee0:	5c64 90d1 8770 ad6d aca0 735c a381 6b97     d\..p.m...\s...k
   c5ef0:	1b68 8b5c 8792 b264 9a8b 8159 467f 9f9c     h.\...d...Y..F..
   c5f00:	7f81 7fa2 7f81 7f81 8181 817f 817f 8181     ................
   c5f10:	7f7f 88cf 837f 817f 818c 7a7f 810a 7f81     ...........z....
   c5f20:	247f 817f 8881 817f 7f81 836b 7fd0 8181     .$........k.....
   c5f30:	37af 28ba 21c6 33c6 decb c234 c532 ebcb     .7.(.!.3..4.2...
   c5f40:	3c46 e4db cb1b d12e ca81 322e b861 11b5     F<.........2a...
   c5f50:	0736 d330 e1e1 c832 c2d4 bd1a 46ab c6f0     6.0...2......F..
   c5f60:	1ece 2cfc 37e4 0ad1 d5ce d017 cd1a c4e6     ...,.7..........
   c5f70:	243d e8b3 d315 e123 d2dd 0a22 d7b6 40de     =$....#..."....@
   c5f80:	2e2b d42e cabe d01f ca9c a527 2243 efc9     +.........'.C"..
   c5f90:	2bb2 3bb6 29c0 29cc cecc be32 b831 c3c6     .+.;.).)..2.1...
   c5fa0:	3751 eaa2 e018 d234 c9c8 292a a7fe 4ab9     Q7....4...*)...J
   c5fb0:	3934 d13a cebc be24 3fd2 aa2e 3fde cfc5     49:...$..?...?..
   c5fc0:	0fe6 08c6 00d7 19de edeb db1d e618 feea     ................
   c5fd0:	1631 07c0 f70f f710 ebce 1713 df38 11f6     1...........8...
   c5fe0:	250c f816 f5f4 e511 f20f d603 27d1 e1fb     .%...........'..

000c5ff0 <_ZN12_GLOBAL__N_1L13tensor_data23E>:
   c5ff0:	3ec1 0000 fbe2 ffff 419e 0000 fcae ffff     .>.......A......
   c6000:	3541 0000 f801 ffff 801e 0000 019e 0000     A5..............
   c6010:	2c8c 0000 85bf 0000 0258 0000 5868 0000     .,......X...hX..
   c6020:	fd97 ffff 3369 0000 78c8 0000 58c0 0000     ....i3...x...X..
   c6030:	fd21 ffff f220 ffff 0b62 0000 a020 0000     !... ...b... ...
   c6040:	fc73 ffff 4b7b 0000 06e4 0000 3d44 0000     s...{K......D=..
   c6050:	3d83 0000 7653 0000 f953 ffff f8f3 ffff     .=..Sv..S.......
   c6060:	fbf1 ffff 3643 0000 5438 0000 fe52 ffff     ....C6..8T..R...
   c6070:	fbc7 ffff 055d 0000 03b1 0000 3dd5 0000     ....]........=..
   c6080:	2961 0000 71aa 0000 ff3d ffff 3fb6 0000     a)...q..=....?..
   c6090:	6617 0000 0357 0000 01f5 0000 3e0b 0000     .f..W........>..
   c60a0:	fe16 ffff feeb ffff 8435 0000 4c2d 0000     ........5...-L..

000c60b0 <_ZN12_GLOBAL__N_1L13tensor_data24E>:
   c60b0:	211c de19 4542 38df 75f3 3602 24e0 31f6     .!..BE.8.u.6.$.1
   c60c0:	5726 ba2c 50b3 31f5 3139 3321 cfc9 58f8     &W,..P.191!3...X
   c60d0:	0ae0 32b1 8138 11da d80f ff3a c9fb edbd     ...28.....:.....
   c60e0:	ffcb d7ae 5807 10ca e0f0 21d7 f13a e3e4     .....X.....!:...
   c60f0:	e2e1 10f9 2ac0 d393 dcc9 452d e8e8 d62c     .....*....-E..,.
   c6100:	c609 30e0 c90a d97f 1de6 f1d0 381f 1019     ...0.........8..
   c6110:	fe06 e13f b2ee 1d19 4f68 13ba cc73 5b7f     ..?.....hO..s..[
   c6120:	e7c0 1ee2 b250 9ae4 dd0e b722 2c27 11d0     ....P.....".',..
   c6130:	ea21 2e37 0bc3 e700 1a23 f245 a51c c85e     !.7.....#.E...^.
   c6140:	082a e6e7 7125 f20f ce27 ec18 00d4 2d08     *...%q..'......-
   c6150:	bbdb 8b27 fff6 ece4 54d7 447f d4f2 2819     ..'......T.D...(
   c6160:	e43b 2459 c3d9 2602 121e ffef 0f18 eaf9     ;.Y$...&........
   c6170:	f471 ce07 5e62 0f34 ea43 1f91 e734 f415     q...b^4.C...4...
   c6180:	819f 93df 15ef d6db 7fa2 7c8f c2c7 5a1b     ...........|...Z
   c6190:	c62d de0e 12fc 17e5 f5cc 3dfb 6ed3 c5e1     -..........=.n..
   c61a0:	00ff 07c5 36f3 e40e 373d 5928 ea33 f81e     .....6..=7(Y3...
   c61b0:	7fd9 24ee fe0c f3bd 0121 e1c1 23f6 f114     ...$....!....#..
   c61c0:	01da 0d2c 08d0 02ad f157 2d1c 09ed 21d6     ..,.....W..-...!
   c61d0:	0b41 4616 e506 c66d 4505 6d7d 2e2c 41cf     A..F..m..E}m,..A
   c61e0:	d32e 5eaf c42e 3adc 5fad f755 3277 fedc     ...^...:._U.w2..
   c61f0:	c268 fd81 256b 06ff 3c12 e33d 794a ff22     h...k%...<=.Jy".
   c6200:	fb9e 1ae7 c9c3 2e18 6d4d b3cc 0e9b f0ef     ........Mm......
   c6210:	64b3 7400 26d3 271b a4ea b2df 2421 09fd     .d.t.&.'....!$..
   c6220:	08ed ec13 ca01 0a7f 2d08 f116 4639 ffe5     .........-..9F..
   c6230:	acf6 c832 c941 de45 8de6 0b1f 05df 1c1b     ..2.A.E.........
   c6240:	0a01 63dc 200a 1eed f33e e3c9 e781 90cd     ...c. ..>.......
   c6250:	c107 5702 1cf7 1171 020b 7142 bbf9 4edb     ...W..q...Bq...N
   c6260:	db14 c117 572a 32d8 d80e eade d112 eb75     ....*W.2......u.
   c6270:	8e06 2d25 2abb d63f afe3 53e6 4a3b e1d5     ..%-.*?....S;J..
   c6280:	27ce 7ffc d6e1 e0c9 01e0 6e24 5841 0ebb     .'........$nAX..
   c6290:	14f1 f7e8 1b14 d5bd 2933 f63f f9db c931     ........3)?...1.
   c62a0:	7fbd 30fc f501 1e11 2dd2 5c05 0923 f6de     ...0.....-.\#...
   c62b0:	0947 19fb d1f4 13d7 fdac f11a 2f0f 1f1c     G............/..
   c62c0:	2ee0 25ee 371e 0501 160f bd81 1249 d0f6     ...%.7......I...
   c62d0:	1b02 d4d1 f9f4 0366 0e2c 24ea 1ffa 30f8     ......f.,..$...0
   c62e0:	fa19 fed0 5329 1167 e31f 003f efc9 0452     ....)Sg...?...R.
   c62f0:	fbc3 1423 cdc6 0608 e0e0 1181 9f48 2518     ..#.........H..%
   c6300:	6436 8b55 2cdf aedb ec01 e01f 0c08 4beb     6dU..,.........K
   c6310:	4e42 e322 e1cd 061f 11e2 003f f02b dbd9     BN".......?.+...
   c6320:	92c7 9dd0 1a08 0737 1381 bc7b 2e31 017b     ......7...{.1.{.
   c6330:	206e 9ff5 b14c fd77 08b5 0eee 98d9 0d95     n ..L.w.........
   c6340:	ec33 3cb8 ce1b b551 3bfa 2740 e439 c56f     3..<..Q..;@'9.o.
   c6350:	1345 03cc 11d7 e8ab 3de4 3434 bcf9 d611     E........=44....
   c6360:	8a3f 0c19 c755 f91c 7ff9 02a4 e4c2 059f     ?...U...........
   c6370:	347f f054 0cb4 40e8 cef6 e96f d2cb 37c4     .4T....@..o....7
   c6380:	10c1 0e28 055b 21ff 4819 2ff0 f631 eae0     ..(.[..!.H./1...
   c6390:	2406 da00 d71c d0d3 c032 39dc 05df 0711     .$......2..9....
   c63a0:	02c6 fd7f 10a6 f336 eed2 fd10 e6e1 08f8     ......6.........

000c63b0 <_ZN12_GLOBAL__N_1L13tensor_data25E>:
   c63b0:	ec28 ffff 2b9e 0000 b005 ffff 0521 0000     (....+......!...
   c63c0:	3488 0000 c5b4 ffff 566a ffff ddd6 ffff     .4......jV......
   c63d0:	eb3e ffff 19e9 0000 c487 ffff cd8c ffff     >...............
   c63e0:	149d 0000 d332 ffff f13d ffff f80f ffff     ....2...=.......

000c63f0 <_ZN12_GLOBAL__N_1L13tensor_data26E>:
   c63f0:	0b2e 3c07 eb81 2958 513d 25ef 0012 4d22     ...<..X)=Q.%.."M
   c6400:	24e6 009b 717f 0904 10e0 29cb 69c7 dcc8     .$...q.....).i..
   c6410:	40cf f94c 6049 2b0a fa1f e526 8130 11f1     .@L.I`.+..&.0...
   c6420:	da7f 0c18 2022 10ea 1c2e e3c5 34d2 38da     ...." .......4.8
   c6430:	f1b4 2a09 f899 e2a3 2bf3 cfff 24f3 7fdb     ...*.....+...$..
   c6440:	0cb1 0926 167f ff0f 29d7 12e3 3dca d4a7     ..&......)...=..
   c6450:	2081 20dc b7f4 0c47 e504 25d6 0709 11d5     . . ..G....%....
   c6460:	7007 8e43 344c 0b7f 1036 3cfc 1565 f6e5     .pC.L4..6..<e...
   c6470:	dfd0 47b1 59bc bac0 cb15 246b 297f 118f     ...G.Y....k$.)..
   c6480:	81e2 58e6 b3ce 3df4 2b27 3f0e 0daa e1fd     ...X...='+.?....
   c6490:	c8de 449a 6c81 b524 b40b d84a 6219 4db3     ...D.l$...J..b.M
   c64a0:	9dd0 27d3 53f6 051b 0008 9d2d 6202 7f99     ...'.S....-..b..
   c64b0:	a9e8 64b2 819a 3405 4558 58e3 bdf6 f3e6     ...d...4XE.X....
   c64c0:	e5b7 fdd7 06ec 161b 7feb e6fd 2021 f70c     ............! ..
   c64d0:	e498 c5d8 57e7 9de4 bd7f 0244 c163 a0a4     .....W....D.c...
   c64e0:	81f8 d055 d7c5 3b03 c50e d2a5 d94a d4dc     ..U....;....J...
   c64f0:	e5ee df14 1615 ecf4 8138 f025 03f4 acbb     ........8.%.....
   c6500:	00fb c92d f913 06d4 cd61 4619 bd64 81f6     ..-.....a..Fd...
   c6510:	fb45 81d5 ee0b d773 3c21 3ff9 4100 89f3     E.....s.!<.?.A..
   c6520:	d7e9 bfe9 2582 f8ef ce29 8117 e4f4 f3f2     .....%..).......
   c6530:	450b a740 0243 57ca 8192 a526 61db efed     .E@.C..W..&..a..
   c6540:	a0fe 0281 2d68 625a aaa8 13f5 aa60 23da     ....h-Zb....`..#
   c6550:	f13e f758 09fd 1a49 751f 1823 0103 007f     >.X...I..u#.....
   c6560:	c584 4302 1f3f 0c12 0fe7 a3f9 4804 7f42     ...C?........HB.
   c6570:	fa11 182e a911 b719 7d14 4a81 c7f2 b549     .........}.J..I.
   c6580:	ca7a 7f63 1927 2cef 4d85 d043 16ee f54b     z.c.'..,.MC...K.
   c6590:	15e7 2c0b 76c7 26ed d9c6 1cb0 1000 812c     ...,.v.&......,.
   c65a0:	ff1d d0f4 04ce 0fac e391 d0bf 24b1 7feb     .............$..
   c65b0:	16b5 0214 f417 0281 dff7 f005 d205 e6b5     ................
   c65c0:	91e1 5fe4 06e5 0d7f 3949 4591 e721 50c6     ..._....I9.E!..P
   c65d0:	cc20 11b6 2381 e234 0afc dc0e 3fe4 52eb      ....#4......?.R
   c65e0:	f281 5f0b 07e4 fbc5 d3e6 e209 c7e2 5eef     ..._...........^
   c65f0:	a882 08a3 bb9a f2f5 417f b6c6 3421 eb20     .........A..!4 .
   c6600:	04ee 2f9e a781 0026 0a8e bcd2 59df 4b40     .../..&......Y@K
   c6610:	3a2d 1f0a dab7 012b 8120 26e6 f8ed 522f     -:....+. ..&../R
   c6620:	0122 eeb8 1281 e458 2a12 edf1 410a 431d     ".....X..*...A.C
   c6630:	fef3 42cb e37f 4624 0fa3 a6ab f416 2202     ...B..$F......."
   c6640:	3981 b2fe ae29 d5de e6f4 29e0 af3b 8d08     .9..)......);...
   c6650:	7933 a62c cc82 d081 a4cb 412d 84b8 0863     3y,.......-A..c.
   c6660:	ddf6 4efa 4500 d93e 22df e51f 7fe9 7526     ...N.E>.."....&u
   c6670:	2a63 7956 bbc9 25f2 489e e0ea eec2 fd7f     c*Vy...%.H......
   c6680:	f3e9 3e0e 76a2 2f03 19ce 0c8e 2a14 8131     ...>.v./.....*1.
   c6690:	a012 e621 237f 0948 a3e7 e99e f1f6 21fd     ..!..#H........!
   c66a0:	8ec5 01d1 1a74 74ea a5ab a381 ee72 48b4     ....t..t....r..H
   c66b0:	c4dd 9bae 4625 0f51 81d6 58be 4ad1 751b     ....%FQ....X.J.u
   c66c0:	c2fc 04bd 3c81 cae3 c83c cb23 0bfe 37dd     .....<..<.#....7
   c66d0:	a417 0bf6 a956 60ee e0f3 3926 c7c8 813a     ....V..`..&9..:.
   c66e0:	e9b1 4ff1 06f6 1c2f 7ff7 6152 4bdf 63fe     ...O../...Ra.K.c
   c66f0:	f728 a3ab c321 3308 ae2e 1500 00c2 81d1     (...!..3........
   c6700:	1a31 1f03 e2f5 3830 7fdc 24dd eadd 5147     1.....08...$..GQ
   c6710:	0507 0a0a f181 d2f5 0e34 3519 c9f2 010d     ........4..5....
   c6720:	f809 81ef 75eb cc35 0104 c831 5a48 14dc     .....u5...1.HZ..
   c6730:	e61f a305 9059 dcfc 0626 ce7f 082d 5de5     ....Y...&...-..]
   c6740:	becb e435 81d9 9815 60f9 4b9d f3d6 b01a     ..5......`.K....
   c6750:	4a42 fb2c d781 9da5 07f1 3b2b c2b8 0b36     BJ,.......+;..6.
   c6760:	1311 4bdf 1ad9 e622 7f06 3417 fbfc 2e00     ...K.."....4....
   c6770:	9925 5eb1 38ad 37f1 067f 2942 d9e1 5724     %..^.8.7..B)..$W
   c6780:	2128 8a6f 026c edfc d963 7ffa bb44 ba78     (!o.l...c...D.x.
   c6790:	b954 bd11 1725 7ff2 593e 3efb 0c30 f858     T...%...>Y.>0.X.
   c67a0:	27ca d417 a5fb 0afd 0bfc 9092 cf81 f341     .'............A.
   c67b0:	e034 1921 e803 cb07 7f22 42f3 ddf5 d8f3     4.!....."..B....
   c67c0:	3944 e10a 81ab d3ef edc4 1ae6 cfbf 5559     D9............YU
   c67d0:	5cee 21dd 7fc3 16d5 0bc9 26d1 23e6 9f46     .\.!.......&.#F.
   c67e0:	f21b 81bf d1f5 f84a a7fa 21e3 3ed7 e022     ......J....!.>".
   c67f0:	0dcb f00d b63c 6712 eb81 cfaa 64d8 403a     ....<..g.....d:@
   c6800:	eab9 f5e0 2742 b5cd c382 d707 6c81 2acc     ....B'.......l.*
   c6810:	3df0 1df4 7fd6 15ef 10c3 2ce8 2ce7 b02d     .=.........,.,-.
   c6820:	de16 e2d9 a911 a53b 1b01 6ffe e1be 81eb     ......;....o....
   c6830:	8114 56ee fded 4d0f 1e33 0c32 19c2 f4fa     ...V...M3.2.....
   c6840:	5002 8a64 1244 5be0 6a33 5037 946a 8120     .Pd.D..[3j7Pj. .
   c6850:	122b dd2f 005c d49b aa81 30ff 40e1 f99e     +./.\......0.@..
   c6860:	aee6 dc29 ec4f 2220 5e9c ce81 6815 39ef     ..).O. ".^...h.9
   c6870:	0c0f 084c e8c7 b793 46fd 3ede 6a20 f181     ..L......F.> j..
   c6880:	e304 dcee 8f2c c928 5a4e f069 ef1f 7fb5     ....,.(.NZi.....
   c6890:	09fe 58da 04a6 1e5e 3c4c 7224 1e7f 0dbc     ...X..^.L<$r....
   c68a0:	30e6 20e9 7fd1 10f5 1eda 29d8 36f3 c219     .0. .......).6..
   c68b0:	6cb2 3cbf f384 1e00 2e28 d4db d63c 3581     .l.<....(...<..5
   c68c0:	707f 7e91 4c50 2d55 0e32 e25f 2760 0f44     .p.~PLU-2._.`'D.
   c68d0:	d414 c506 814a c31d 3339 e97e f50b 74d2     ....J...93~....t
   c68e0:	3bdb 1afe c6fa ffdd f881 0a35 2d66 d6b3     .;........5.f-..
   c68f0:	17ae fd51 2c3d 81f4 40b5 cfc1 9ff4 371a     ..Q.=,...@.....7
   c6900:	5152 fcdf ed1f 7f4e 7e90 d6c1 1dca 7b6c     RQ....N..~....l{
   c6910:	6f34 a6df cff4 9877 1422 43ab eb7f cb44     4o....w."..C..D.
   c6920:	e606 2415 17fd 92db da45 0867 b121 81c4     ...$....E.g.!...
   c6930:	a381 f7d6 5ef6 005c 4f61 7870 6a3a 01ad     .....^\.aOpx:j..
   c6940:	067d b468 e940 57e1 7719 0dc7 3dd0 0b7f     }.h.@..W.w...=..
   c6950:	43ae 04db 521a 1513 2252 e47f 38e6 effb     .C...R..R"...8..
   c6960:	c80c d41d 8129 dd1a f630 da3f d624 45d7     ....)...0.?.$..E
   c6970:	4ca7 fc25 e167 0822 b1c6 b268 7f45 8564     .L%.g."...h.E.d.
   c6980:	22e3 1bef 7fe1 25f2 07cf 12dc 3bfa b119     .".....%.....;..
   c6990:	bb31 0a18 007f 173b a9fa ee8a f8fb 14c8     1.....;.........
   c69a0:	45f0 ecea c0f8 20a1 0ab0 81a8 ae94 0bf1     .E..... ........
   c69b0:	304b 2244 a181 0a0a 2bee dfe8 aae3 f21c     K0D".....+......
   c69c0:	90ee 4a81 d3d3 6efd 3855 3a16 4cb6 f0e3     ...J...nU8.:.L..
   c69d0:	fb5b ed74 d917 320c 5412 3d04 0e0d f87f     [.t....2.T.=....
   c69e0:	cfc9 eaed fc7f 472d ece3 c88d 0f15 1fbb     ......-G........

000c69f0 <_ZN12_GLOBAL__N_1L13tensor_data27E>:
   c69f0:	0598 0000 1eef 0000 015d 0000 067d 0000     ........]...}...
   c6a00:	1daa 0000 4793 0000 0090 0000 0e10 0000     .....G..........
   c6a10:	407e 0000 fb46 ffff 4fb7 0000 1619 0000     ~@..F....O......
   c6a20:	08eb 0000 02ae 0000 1414 0000 026c 0000     ............l...
   c6a30:	0cb1 0000 15bc 0000 ff5c ffff 3dbc 0000     ........\....=..
   c6a40:	0503 0000 2306 0000 f5e2 ffff 083d 0000     .....#......=...
   c6a50:	cd35 ffff 06af 0000 0de3 0000 0acd 0000     5...............
   c6a60:	2067 0000 0592 0000 1441 0000 16ae 0000     g ......A.......
   c6a70:	0862 0000 32ee 0000 0eb4 0000 113c 0000     b....2......<...
   c6a80:	12e1 0000 08d0 0000 1254 0000 0a10 0000     ........T.......
   c6a90:	5773 0000 07bf 0000 0c00 0000 089e 0000     sW..............
   c6aa0:	0f43 0000 34fa 0000 1cea 0000 2938 0000     C....4......8)..
   c6ab0:	0535 0000 fb8b ffff 07c9 0000 1900 0000     5...............
   c6ac0:	0de9 0000 f0fe ffff 1c05 0000 00a2 0000     ................
   c6ad0:	0c3d 0000 6202 0000 05e2 0000 06b0 0000     =....b..........
   c6ae0:	0d03 0000 2bc4 0000 13fe 0000 fee8 ffff     .....+..........
   c6af0:	4455 0000 438e 0000 08e8 0000 11ed 0000     UD...C..........
   c6b00:	2202 0000 1917 0000 0927 0000 07c7 0000     ."......'.......
   c6b10:	f2b5 ffff 16f0 0000 08b4 0000 1006 0000     ................
   c6b20:	0228 0000 2298 0000 1187 0000 1b38 0000     (...."......8...
   c6b30:	1095 0000 0443 0000 2152 0000 3db8 0000     ....C...R!...=..
   c6b40:	ff1b ffff 2dde 0000 1cf7 0000 08c4 0000     .....-..........
   c6b50:	fd33 ffff 0cc8 0000 0715 0000 3262 0000     3...........b2..
   c6b60:	1153 0000 13c1 0000 18ab 0000 15d2 0000     S...............

000c6b70 <_ZN12_GLOBAL__N_1L13tensor_data28E>:
   c6b70:	facb eef9 f45f ef22 08f4 d5f8 08e8 e6fe     ...._.".........
   c6b80:	0ceb ec08 1aff 3524 df05 f6e8 fb17 081f     ......$5........
   c6b90:	00e6 d400 cb00 f8dc 0704 e025 2adf eed2     ..........%..*..
   c6ba0:	0cf3 30f3 02b6 f22d fbf7 ea01 eef2 caee     ...0..-.........
   c6bb0:	e7ef d9d3 13ee fd06 0919 0a05 07ea eb7f     ................
   c6bc0:	0b8b f198 ebee 121c ece0 d913 17fe 04d4     ................
   c6bd0:	1ae3 ac27 f6da cb7f f9fa fcd9 f5b9 38a7     ..'............8
   c6be0:	4ef4 e363 7ff5 7f77 f526 352f 277f e87f     .Nc...w.&./5.'..
   c6bf0:	ed81 cd9f 9be1 c37f 81e8 d4f1 d943 f8da     ............C...
   c6c00:	082e 7f13 209b f2af faa6 18f8 81f1 b385     ..... ..........
   c6c10:	f9cd a0fa 0af7 75cc fb81 eb11 bd81 b1fd     .......u........
   c6c20:	0581 ce22 4f6a 20cf f981 e81d 780d afb0     ..".jO. .....x..
   c6c30:	ffc7 edfb f739 ea2e 15e9 f2f3 0003 ddfe     ....9...........
   c6c40:	03f2 ebfd 07fd 271d ed01 e8ff 0607 0d18     .......'........
   c6c50:	fef9 3bf6 c7fc 01dd 00fe e712 e6eb eacd     ...;............
   c6c60:	03fa 1efa f9f8 ee0f f030 ee04 f8f1 e6cc     ........0.......
   c6c70:	dcf0 e37f 0df3 0709 0915 1706 14f1 f1d7     ................
   c6c80:	039f f18a e002 e714 dadf 250e 1209 09d4     ...........%....
   c6c90:	ffaa be21 642d f4e1 effe dce2 1f81 4310     ..!.-d.........C
   c6ca0:	2dee 116f ed21 f374 2026 1141 fff7 f4fb     .-o.!.t.& A.....
   c6cb0:	f29d e34b 81fa 81c9 f4ed d25c 7fa8 bb9c     ..K.......\.....
   c6cc0:	3c3a d30c 3e81 e746 de12 f425 f506 9c4b     :<...>F...%...K.
   c6cd0:	11df c4e2 f5ec 0f81 7f42 ba12 c88c d1be     ........B.......
   c6ce0:	fbb8 c5e4 1b1e 3c9d 7fd4 b655 fc7f fbd2     .......<..U.....
   c6cf0:	7f41 7f7f 8181 ca5a 7f7f c2ac 7fa7 7fe1     A.....Z.........
   c6d00:	817f 7f7f b37f a15f 8181 7f7f 7f97 7ff0     ......_.........
   c6d10:	7fcf 887f 707f ee0f f07f 8181 e17f 7f7f     .....p..........
   c6d20:	817f 9c7f 7f6f 7f81 7f81 7f81 6f98 8157     ....o........oW.
   c6d30:	7f7f 7fef 818e 81f4 7c09 497f 8101 8158     .........|.I..X.
   c6d40:	7f5f 7f7f 4a7f 7f81 2dab e1f3 eda2 ea81     _....J...-......
   c6d50:	e681 a61e 3901 02cf f1dd 7ff8 1686 3315     .....9.........3
   c6d60:	39e7 095e e50e f553 172a 0029 fef4 f715     .9^...S.*.).....
   c6d70:	e2b7 7f50 95f9 a2be e4e2 cb19 bcb0 a4a0     ..P.............
   c6d80:	422b e9fa 0778 d459 e15d dc33 e100 d381     +B..x.Y.].3.....
   c6d90:	fac7 bfc7 fde4 ff93 9e29 7f0b daa5 00c5     ........).......
   c6da0:	f396 aebc 1ffe 23b2 b4e7 7f7f dfdc f7be     .......#........
   c6db0:	e2ed f1f1 0225 13f9 05f7 e11c 0734 e5fa     ....%.......4...
   c6dc0:	fffc e3d4 f3fc ed17 f204 09f8 f401 04e6     ................
   c6dd0:	0100 e504 d5fd f3f1 08e6 011a 090c 08ca     ................
   c6de0:	08e5 e9e9 def0 f626 eb07 f203 18f6 fffc     ......&.........
   c6df0:	f0d9 1969 1219 fdf7 f5f8 ddff 20ed e7e1     ..i.......... ..
   c6e00:	07ea f0a2 f9f4 ec20 090b ee00 ebf7 fcdb     ...... .........
   c6e10:	c6d9 862a 03d7 7f2a 43cc e57f 1fb7 447f     ..*...*..C.....D
   c6e20:	def9 c865 d3f0 0a7f 0012 1528 06f7 d6a6     ..e.......(.....
   c6e30:	e6cd f99f 8ca2 bc29 86ec 7dda e311 05cf     ......)....}....
   c6e40:	f519 f2f5 243a dbd5 c7cc d02e 277f 0856     ....:$.......'V.
   c6e50:	d7ae d4e6 187f 0dd5 de10 df17 e4e7 27fc     ...............'
   c6e60:	ebbe bcb1 8122 06f1 06e2 f434 810b 7fbd     ....".....4.....
   c6e70:	10f3 f1f0 f915 0d00 feec 350b 0539 e1fa     ...........59...
   c6e80:	0cfb de00 f4f5 fa12 05fb fdf3 fffa 02e5     ................
   c6e90:	0510 06fa c7f7 ebee 0fde 0001 f60a 0eca     ................
   c6ea0:	02ea edf2 dafb f71a f133 f00a 10fb 0df2     ........3.......
   c6eb0:	edef 1ce5 0519 fef0 d5d6 f0fc 1be8 f851     ..............Q.
   c6ec0:	fffd fcb7 03f7 f926 0306 0df6 e700 f9e6     ......&.........

000c6ed0 <_ZN12_GLOBAL__N_1L13tensor_data29E>:
   c6ed0:	23ca 0000 fbc8 ffff edb2 ffff 195e 0000     .#..........^...
   c6ee0:	0376 0000 0587 0000 fff2 ffff fd87 ffff     v...............
   c6ef0:	0781 0000 f128 ffff 02dd 0000 fcfb ffff     ....(...........
   c6f00:	2487 0000 f42f ffff f6f5 ffff eac1 ffff     .$../...........
   c6f10:	015a 0000 fde4 ffff d1d0 ffff fedb ffff     Z...............
   c6f20:	f591 ffff 0487 0000 e7fa ffff fe11 ffff     ................
   c6f30:	0039 0000 1ae0 0000 dc5b ffff eee6 ffff     9.......[.......
   c6f40:	0088 0000 f44d ffff fe9d ffff fb53 ffff     ....M.......S...
   c6f50:	33a6 0000 ff99 ffff f70d ffff 05a0 0000     .3..............
   c6f60:	0053 0000 28db 0000 0726 0000 298c 0000     S....(..&....)..
   c6f70:	fb3a ffff 12fd 0000 0472 0000 1a12 0000     :.......r.......
   c6f80:	0789 0000 0234 0000 1740 0000 0070 0000     ....4...@...p...
   c6f90:	e96e ffff ffe1 ffff f41a ffff 00e7 0000     n...............
   c6fa0:	013e 0000 f47b ffff fd00 ffff 07c3 0000     >...{...........
   c6fb0:	0445 0000 07d7 0000 046e 0000 03e5 0000     E.......n.......
   c6fc0:	0494 0000 01d6 0000 02fe 0000 206f 0000     ............o ..
   c6fd0:	177e 0000 fb80 ffff 3564 0000 21c2 0000     ~.......d5...!..
   c6fe0:	0232 0000 04e2 0000 1d22 0000 fd61 ffff     2......."...a...
   c6ff0:	0046 0000 043a 0000 eff5 ffff 022c 0000     F...:.......,...
   c7000:	3f95 0000 1dde 0000 27b6 0000 2591 0000     .?.......'...%..
   c7010:	260a 0000 fa57 ffff 198f 0000 197a 0000     .&..W.......z...
   c7020:	fc16 ffff f755 ffff 2247 0000 ea1e ffff     ....U...G"......
   c7030:	200a 0000 fe80 ffff e8ed ffff ff22 ffff     . .........."...
   c7040:	feb5 ffff 0954 0000 44e9 0000 f8c8 ffff     ....T....D......

000c7050 <_ZN12_GLOBAL__N_1L13tensor_data30E>:
   c7050:	2517 140d b5fa f9f6 b1ed f607 be41 2533     .%..........A.3%
   c7060:	dab1 0a24 114a 16bb 4af7 417f 4e14 d142     ..$.J....J.A.NB.
   c7070:	fe08 e905 1b24 fcf5 0f72 e61a f9f2 d00b     ....$...r.......
   c7080:	d521 fd5d ffb6 222d dbff 1804 29fd fabd     !.]...-".....)..
   c7090:	ff16 243e e10e 1718 290f 240e e537 1629     ..>$.....).$7.).
   c70a0:	32ea 2724 09ca 44fb 0313 ebab 0a1a 3c73     .2$'...D......s<
   c70b0:	2111 eace d3f8 b066 d0b8 cbbd db04 c3f4     .!....f.........
   c70c0:	edd6 e8d9 9df7 d671 1500 4604 03c3 17d2     ......q....F....
   c70d0:	1bd8 0207 33e4 52c9 0b19 d600 c23f 29f2     .....3.R....?..)
   c70e0:	049f 8a30 26db 3841 131d 0ac0 f8c9 e8f5     ..0..&A8........
   c70f0:	141c 0272 81c9 0402 461a 1de6 d9c2 d974     ..r......F....t.
   c7100:	e926 ba33 b6e8 14e6 d7e4 fa24 bf40 41df     &.3.......$.@..A
   c7110:	f50b fa0a 2946 17d3 33cb e60d f91d 2115     ....F)...3.....!
   c7120:	e01f fd81 dcec 20ef f3fd 11d2 f0e0 40f7     ....... .......@
   c7130:	e1ee 0cff 1cd8 efe5 0b48 2203 390c fd07     ........H..".9..
   c7140:	01b4 16eb 30e5 cb13 1828 2529 fff0 3de9     .....0..(.)%...=
   c7150:	062d 01d8 f509 def5 3719 4c21 fcc7 dee4     -........7!L....
   c7160:	2a22 f236 ddfe cdf7 dcf1 47f8 fb08 ce57     "*6........G..W.
   c7170:	e120 90e1 de00 e373 7c19 eeb8 e7fe 43f2      .....s..|.....C
   c7180:	2339 16ed 1bca 1018 50d3 fc32 f3de 37c5     9#.......P2....7
   c7190:	f5ff e524 cf07 3ddf 0d03 0feb cd39 24fa     ..$....=....9..$
   c71a0:	df31 de1c 2e64 0323 ec07 d7f4 32e5 fe44     1...d.#......2D.
   c71b0:	ece9 e47b e9e6 1ed6 bd13 b90a d70d fe7f     ..{.............
   c71c0:	d5f9 d0e0 dfe5 5454 2bd7 03c7 b510 16ec     ......TT.+......
   c71d0:	4be1 111d 10f1 efdd d812 f900 2f1a 11ec     .K.........../..
   c71e0:	d7fd b4e7 e125 14b5 e1dd 1aeb 7fd5 f2c8     ....%...........
   c71f0:	daff e0fd 2b4f fae4 060b d117 fcc8 ea3e     ....O+........>.
   c7200:	f013 f9ba 17be 132b 3507 19ec aede 03e5     ......+..5......
   c7210:	1e39 f3ba 05fe b501 42f5 4941 13d4 23b9     9........BAI...#
   c7220:	410e b416 b238 b7d9 d2cc edc7 09ff de2b     .A..8.........+.
   c7230:	f303 ed27 ecf3 01eb 0422 fcf2 e4ec ee16     ..'.....".......
   c7240:	02ee ded0 08e7 09ec d015 ea40 2803 4707     ..........@..(.G
   c7250:	acf9 0c17 e7d9 06e0 fdd3 12e6 1700 18be     ................
   c7260:	0cea f133 b915 14ff cfe7 df04 1925 2c13     ..3.........%..,
   c7270:	05d9 ec6e e5f8 140b 1cfb 0a1e f201 2a7f     ..n............*
   c7280:	f4ec 22e9 4023 5c06 d906 0ef4 f705 18e1     ..."#@.\........
   c7290:	ca1a 0e4e 6cda 97c8 baeb 3da8 0f09 61de     ..N..l.....=...a
   c72a0:	230a d61b e5a4 c2b5 c50b 41fb 3781 dde4     .#.........A.7..
   c72b0:	5532 fcec d2fd f60c 24c6 e222 3213 009c     2U.......$"..2..
   c72c0:	043b 85b1 0f4d f3dd e81a e615 daf2 0229     ;...M.........).
   c72d0:	be3d c2bb 0b96 abfc 96dd 9116 0e62 37af     =...........b..7
   c72e0:	57d7 a215 d93d fcf7 4ac1 5cb0 c937 993d     .W..=....J.\7.=.
   c72f0:	f8fd 40c0 f6e3 f522 069d 3d56 befb e1fb     ...@.."...V=....
   c7300:	f7f8 0407 ebc8 d8de 2c4e 47f8 23fc 1d18     ........N,.G.#..
   c7310:	81c8 7126 0e02 0fcf f100 b403 4319 5e4e     ..&q.........CN^
   c7320:	2aef 0fd5 d71e cd25 2af3 f1a9 0c3b d906     .*....%..*..;...
   c7330:	d854 f06f e2c6 034c e5ed e2aa de21 e363     T.o...L.....!.c.
   c7340:	f9f8 e4b6 1728 32b5 0efd 2501 fb4a f058     ....(..2...%J.X.
   c7350:	c3f6 030a 00f2 ff16 f8f6 2b2b 1a0c f6d9     ..........++....
   c7360:	0248 0209 bdf8 ecdb e3e8 0842 2aec e607     H.........B..*..
   c7370:	02ee fbfe edd3 e115 29f7 d61f ec0f ef14     .........)......
   c7380:	0322 042c 0600 fcd4 64ee f9ca c0f2 f7c9     ".,......d......
   c7390:	dea8 0eee 0ff9 ee20 81e6 9a2c 0806 0dc7     ...... ...,.....
   c73a0:	f3e5 34fd bf44 2fd4 5ad5 e70c ffca c602     ...4D../.Z......
   c73b0:	e0e5 10e6 15fe 2901 04d2 3342 34e3 d21b     .......)..B3.4..
   c73c0:	25ef d3ee 2103 0204 17ef 1008 f71c fb0a     .%...!..........
   c73d0:	ebf1 3300 f5e8 0019 e5f2 0611 2a0e 2afe     ...3.........*.*
   c73e0:	0ad9 1aef 147f fdf0 ec0b 0f24 ffdd 0550     ..........$...P.
   c73f0:	1208 0143 fe17 11f0 8503 88d7 f5e7 0327     ..C...........'.
   c7400:	1cfc d3fe 0e24 00cd 6804 1b26 2132 1fee     ....$....h&.2!..
   c7410:	2513 f810 11ea edd6 063c 11e0 0a12 c7fd     .%......<.......
   c7420:	05df f911 ee1b dced ee12 2ba5 31e7 0ef8     ...........+.1..
   c7430:	1511 03e9 ff08 fd07 f523 dc39 fbe5 1b0d     ........#.9.....
   c7440:	0810 e506 f0ed 1efb 04f0 f5f8 d6ef 05fd     ................
   c7450:	ebf8 dfac f4c4 ee29 1be8 0f1b ea35 0aad     ......).....5...
   c7460:	1af4 f7fc 0405 81b7 1cea 130b e02a 250f     ............*..%
   c7470:	cf18 0109 25bd 010c ea48 ceee 0f19 f20b     .....%..H.......
   c7480:	3ad9 be18 1a0a de12 112f 023e c017 16dc     .:....../.>.....
   c7490:	6713 0492 ed09 0e3e 2fc9 16ef 02d6 00ee     .g....>../......
   c74a0:	f331 ece1 0fee 5bad ffda dc01 fe10 b6fb     1......[........
   c74b0:	cef4 a881 e1f9 219f 1232 faf0 382f de8f     .......!2.../8..
   c74c0:	f5f2 faee fbe9 4a38 d11e 050b 1bd4 264f     ......8J......O&
   c74d0:	2218 ebda e415 240b dc38 fc10 f603 11f9     .".....$8.......
   c74e0:	d008 10e9 3d06 3a08 d9d8 f181 eb52 f924     .....=.:....R.$.
   c74f0:	b6f3 fa4b f625 17f7 c603 1c0e 022d f61e     ..K.%.......-...
   c7500:	fac1 5fce ed48 bb28 1b0e e2d6 3c15 0a4e     ..._H.(......<N.
   c7510:	f7f8 1e1d 1579 1e1e f003 fcfb cbde c029     ....y.........).
   c7520:	d916 de23 0f09 940c 23fa 16d9 4417 2309     ..#......#...D.#
   c7530:	1af4 19b6 0d1c 0ef9 451e 2ce1 eccc d041     .........E.,..A.
   c7540:	2e13 0c38 d5e1 10f9 312e 17f4 230d ea31     ..8......1...#1.
   c7550:	44f5 2cfb d914 d4cc ef05 0d14 322f 35e5     .D.,......../2.5
   c7560:	20da fd03 d5f1 2c40 d310 f3f4 161b e705     . ....@,........
   c7570:	5f13 237f fd13 edd4 3224 33bb bf13 d778     ._.#....$2.3..x.
   c7580:	e5f3 0213 3b1f eee2 ebf4 3109 0f31 2f3b     .....;.....11.;/
   c7590:	3afa 1d0d d1cd 2718 ecb6 0c45 fbb0 e944     .:.....'..E...D.
   c75a0:	1fd0 1bc3 1ae0 149d 04c9 8ece fd15 4724     ..............$G
   c75b0:	1cc6 f313 bee8 d9f1 e121 e233 2ff3 1abb     ........!.3../..
   c75c0:	cefa 1f59 1cef 25e7 23ce 2cfd 4630 33f4     ..Y....%.#.,0F.3
   c75d0:	d814 c2fe 3634 234d 26d1 1211 f815 1225     ....46M#.&....%.
   c75e0:	7fb8 8304 0657 0e03 ef94 feeb 0ded 182d     ....W.........-.
   c75f0:	d442 1b21 0c1c faf5 1a12 ebc4 4646 e9fc     B.!.........FF..
   c7600:	11f2 2eaf e10b 170d da44 215a e224 4cd1     ........D.Z!$..L
   c7610:	333d b3f9 473b 304b 2b57 0bee 81d7 d421     =3..;GK0W+....!.
   c7620:	f2d8 fbed c9f6 2dde 02ed 11f8 c0f9 1adb     .......-........
   c7630:	2620 21b9 e8ea faf6 86ff 95c4 0feb 1f86      &.!............
   c7640:	d052 192d f2c6 edf2 5c24 bb0e e2d5 e525     R.-.....$\....%.

000c7650 <_ZN12_GLOBAL__N_1L13tensor_data31E>:
   c7650:	907e ffff fa7f ffff fe61 ffff bcb6 ffff     ~.......a.......
   c7660:	4053 0000 c868 ffff 597e 0000 cef7 ffff     S@..h...~Y......
   c7670:	3ae5 0000 de35 ffff 39e7 0000 3733 0000     .:..5....9..37..
   c7680:	de62 ffff 80aa ffff f5ee ffff 22a8 0000     b............"..

000c7690 <_ZN12_GLOBAL__N_1L13tensor_data32E>:
   c7690:	33d5 dbfb c2e7 dac9 cf40 d123 8c5e 810e     .3......@.#.^...
   c76a0:	35a1 a1a6 0fae 32f9 0bdd d260 7f26 3610     .5.....2..`.&..6
   c76b0:	f8cb 0eaa dafb e424 7fad 0942 4128 6fd5     ......$...B.(A.o
   c76c0:	b6c4 d702 0da5 81c6 11f9 b630 dab2 d189     ..........0.....
   c76d0:	f752 22fd efc5 1e81 3616 2600 fa11 abd7     R..".....6.&....
   c76e0:	3096 e8a4 ce42 b7eb da59 dd1a 920f 9c81     .0..B...Y.......
   c76f0:	e3f6 0bd6 45a3 d532 d0e1 e47f fdfa 0c86     .....E2.........
   c7700:	5eed b97f 473b cefa 3d2b e6a8 fc40 3c18     .^..;G..+=..@..<
   c7710:	0ec8 0015 1136 7f60 efb8 b4cf 611f cebd     ....6.`......a..
   c7720:	2927 0e6b de8f 839b 0b4c 227f 84d6 e431     ')k.....L.."..1.
   c7730:	83ee b208 428c 1b21 c6e4 23f9 2de4 1781     .....B!....#.-..
   c7740:	c07d 57fd db9a f938 637f 23c1 a21d 62f5     }..W..8..c.#...b
   c7750:	bcc7 ed7f ea35 330f dd35 3d55 09f3 0eb5     ....5..35.U=....
   c7760:	dc01 151b 0415 247f 048e 0d09 7fe0 b45c     .......$......\.
   c7770:	ac7b 027f 414e 4571 534f 2c4c de51 cf2a     {...NAqEOSL,Q.*.
   c7780:	7df1 de01 7f19 40bb f3dc fcdb 6dc6 d9ee     .}.....@.....m..
   c7790:	3fd2 d368 5319 f702 09fa 27f6 0851 7f50     .?h..S.....'Q.P.
   c77a0:	7206 814a d420 b40c 4fc0 37ec ecbb ce6f     .rJ. ....O.7..o.
   c77b0:	faa2 9ab8 5b7f b3d3 5333 4b7a 6ffa efcc     .....[..3SzK.o..
   c77c0:	7f23 3c4a e02f f1fd 6ee9 632e 4431 2bc5     #.J</....n.c1D.+
   c77d0:	026a 50fe f8b6 35d9 c5dc d481 d058 f81f     j..P...5....X...
   c77e0:	b79c 76de 0fdb 3d81 f001 1929 29d0 10b7     ...v...=..)..)..
   c77f0:	01ff d6c9 f27f 3bd0 5537 4728 14e0 26f9     .......;7U(G...&
   c7800:	1ec1 19e8 380b 4b57 7ff4 e9f6 25ff eacf     .....8WK.....%..
   c7810:	b21c fa29 207f dd44 1832 1d2b 20c1 ebfa     ..).. D.2.+.. ..
   c7820:	bb7f 1d58 fa09 65d3 e279 04d5 ca73 3659     ..X....ey...s.Y6
   c7830:	1b31 4d63 f04f f4c2 3d05 7f0e bc15 c514     1.cMO....=......
   c7840:	2ad3 0ac0 73eb 9a07 9f16 087d e23e 667f     .*...s....}.>..f
   c7850:	18d3 81b4 a91a cafb 4aab 16cf 13e7 47e2     .........J.....G
   c7860:	605d 24c0 4d2a e5cd 2628 3a0b 1581 4ee5     ]`.$*M..(&.:...N
   c7870:	4be1 bd81 d54d 0f1c 32d2 fdbb 3e08 7bf1     .K..M....2...>.{
   c7880:	881c 2162 a743 17aa f5e6 df13 34bb 7f19     ..b!C........4..
   c7890:	4ace 2c05 388a 420d 8117 af14 2821 2d3e     .J.,.8.B....!(>-
   c78a0:	f4bb 5848 1203 15c3 c7cf f008 02f1 7f0c     ..HX............
   c78b0:	0aeb aea9 fb2f 34ff f517 e708 dcc9 7fe1     ..../..4........
   c78c0:	fd43 f613 1802 efb2 81ea 08d4 ecfd ee2a     C.............*.
   c78d0:	1f09 f488 7f24 2bf3 16e3 2030 150c 30bc     ....$..+..0 ...0
   c78e0:	2029 d236 812e e919 3fa2 eac0 13f2 284f     ) 6......?....O(
   c78f0:	7fd1 cb1a 0f1d 9549 f80d 2a9e afca 13a7     ......I....*....
   c7900:	2964 848b dbf8 c912 f404 d8fe 024d b181     d)..........M...
   c7910:	1bd7 adb8 f0d5 8113 fdfa dc0b 5124 4723     ............$Q#G
   c7920:	9fdc 7ff2 e7fe f3bd ccfb c043 f5c0 1f00     ..........C.....
   c7930:	4beb 81e9 141a e211 0b36 11d4 ed4a 0eed     .K......6...J...
   c7940:	3605 1603 1f7f 170b 2704 af0c de8e fb00     .6.......'......
   c7950:	f355 251a f1e9 1dff d21e 031c 057f e5c8     U..%............
   c7960:	a213 24c4 a1d8 2600 e422 1e13 7fa9 de1f     ...$...&".......
   c7970:	b8e5 491f 0505 38a9 d115 f53a 5114 7f3f     ...I...8..:..Q?.
   c7980:	d1e4 4518 f604 0a31 bf05 d981 e135 0dbf     ...E..1.....5...
   c7990:	58b8 e6ee 3406 87fc e31b c827 8133 0ad0     .X...4....'.3...
   c79a0:	05ca da32 0508 7c7f d9e0 1af3 1fd2 1bc5     ..2....|........
   c79b0:	1045 1fc1 8126 f6d1 23ae f4ce b11c d08b     E...&....#......
   c79c0:	4bd2 71e0 2ad7 a8cc a4cc d308 2d06 7ff0     .K.q.*.......-..
   c79d0:	fb88 fd1d 251b 0633 a20c ccd8 ca9c f981     .....%3.........
   c79e0:	bdcd 81c4 fdde 4f0a c32e 1cd3 1edf 693a     .......O......:i
   c79f0:	cd02 fe01 38cc ec32 b6f3 1c3b eef1 2981     .....82...;....)
   c7a00:	e4f4 18df e841 4d3f bace db81 e23d 22e2     ....A.?M....=.."
   c7a10:	ea4a efc7 1581 f693 f6f3 18d9 e869 1338     J...........i.8.
   c7a20:	06cf d91c 1d7f 252a 2adc 0001 4dc0 e296     ......*%.*...M..
   c7a30:	0614 ef00 f725 c6d2 8128 f8cb d9bd 3bde     ....%...(......;
   c7a40:	dcb4 07fb 390c d899 7f52 0faf 05e7 02ea     .....9..R.......
   c7a50:	cd0b 07fb da81 0a18 2bfa 37f7 d8f4 2322     .........+.7.."#
   c7a60:	1918 00bb dbd9 bc81 07ef 5525 d446 4061     ..........%UF.a@
   c7a70:	e42a dc3a 27f1 7c26 7fc3 6422 240e 653e     *.:..'&|.."d.$>e
   c7a80:	810e f6ed 11b3 ec2c eef9 f201 78d8 266d     ......,......xm&
   c7a90:	f9f6 e081 3116 eb1a 96f9 0035 db42 71bb     .....1....5.B..q
   c7aa0:	f8e9 4d3c f358 605e f3d2 a281 7c16 f8a1     ..<MX.^`.....|..
   c7ab0:	81c3 90e3 8daf e842 cbf2 6c27 d6ae 62b9     ......B...'l...b
   c7ac0:	a6d4 eea1 7fad 83f1 e59a 8cde ef0c 3ab8     ...............:
   c7ad0:	307f f31b 10b9 c8d0 a0b9 f3dd d831 be41     .0..........1.A.
   c7ae0:	091d eb22 d202 1adb 7ff0 09eb 25f7 ec3a     .."..........%:.
   c7af0:	f434 42f0 1988 9eec 7f62 4714 c239 0d04     4..B....b..G9...
   c7b00:	b67f 6647 cda9 e936 0f7f 34bf bf52 0f1e     ..Gf..6....4R...
   c7b10:	de01 5f2e f936 4e81 f74e 0326 c0e2 52c0     ..._6..NN.&....R
   c7b20:	164b 8152 b849 30b5 73f5 10d7 a71a c918     K.R.I..0.s......
   c7b30:	0d57 271a e781 fe2c ccb1 de0b be19 1205     W..'..,.........
   c7b40:	7f49 188e 483c e8f6 f0ea 4e38 3385 5432     I...<H....8N.32T
   c7b50:	dab1 dafb 03d1 0852 1eb8 2963 81c6 52eb     ......R...c)...R
   c7b60:	7fbc 1aed aec4 5834 ba36 49fe 2df1 61f0     ......4X6..I.-.a
   c7b70:	3473 20c8 1ebf e881 f0f0 00c0 a52c 4613     s4. ........,..F
   c7b80:	e2b1 407d 98ee cfcd 25e7 1011 7fae 53ca     ..}@.....%.....S
   c7b90:	5e3d 811c 18eb e554 0c08 0fd4 cc4f 0707     =^....T.....O...
   c7ba0:	ba29 8713 2566 7ff9 1e71 cbe0 08e9 bca3     )...f%..q.......
   c7bb0:	2e44 0640 967f 2a21 6801 13e7 dfeb a81c     D.@...!*.h......
   c7bc0:	4ac5 1e08 434d 747f 3503 bff6 6e99 b0c7     .J..MC.t.5...n..
   c7bd0:	930b 6bfe 9402 1f9c 39a1 edc2 5181 cfee     ...k.....9...Q..
   c7be0:	318c f9e3 c9e3 d7cc 28e2 af0f a181 35b8     .1.......(.....5
   c7bf0:	4ee6 744d df14 1132 0efd b1e2 5711 c881     .NMt..2......W..
   c7c00:	32e6 ea7f e68f 1617 e421 2e15 18c0 fff9     .2......!.......
   c7c10:	a9ea 1589 1229 0fef 8ff1 8c84 ed7f 2901     ....)..........)
   c7c20:	151a 8804 ba08 30cd e67f 9e27 e503 be2b     .......0..'...+.
   c7c30:	3ffb 1014 29d6 7828 cc02 7ff5 062c 4ddd     .?...)(x....,..M
   c7c40:	05d8 31f5 2e4a 8be6 1be6 13ee 81a3 e6d0     ...1J...........
   c7c50:	39ed e30a fc81 30a6 2fda 4c50 e5f9 fe42     .9.....0./PL..B.
   c7c60:	2a6f 236f a581 0f14 aff4 b2e6 b90e f5ed     o*o#............
   c7c70:	81dc 9d13 260a 0bed ec4d 3b04 390a 29d7     .....&..M..;.9.)
   c7c80:	b6d5 bbf4 707f 2dec 3a5b 2da1 71ec 1fa3     .....p.-[:.-.q..

000c7c90 <_ZN12_GLOBAL__N_1L13tensor_data33E>:
   c7c90:	1e75 0000 0e52 0000 04c3 0000 fa8c ffff     u...R...........
   c7ca0:	1244 0000 23e2 0000 28ae 0000 085b 0000     D....#...(..[...
   c7cb0:	ff97 ffff 28ed 0000 044d 0000 ebd2 ffff     .....(..M.......
   c7cc0:	0d65 0000 0d65 0000 0341 0000 fdfd ffff     e...e...A.......
   c7cd0:	0e58 0000 28fb 0000 fe69 ffff 006f 0000     X....(..i...o...
   c7ce0:	186c 0000 472a 0000 2d92 0000 f951 ffff     l...*G...-..Q...
   c7cf0:	f22b ffff fa2f ffff 3074 0000 ff49 ffff     +.../...t0..I...
   c7d00:	06be 0000 045f 0000 2710 0000 f57d ffff     ...._....'..}...
   c7d10:	24b8 0000 0d85 0000 125d 0000 eccb ffff     .$......].......
   c7d20:	0357 0000 e8aa ffff 0045 0000 0848 0000     W.......E...H...
   c7d30:	0c3f 0000 0787 0000 0875 0000 fe3c ffff     ?.......u...<...
   c7d40:	051c 0000 0adf 0000 19ba 0000 133d 0000     ............=...
   c7d50:	12a4 0000 0cbd 0000 18d0 0000 0e4b 0000     ............K...
   c7d60:	f491 ffff 0775 0000 0540 0000 0af6 0000     ....u...@.......
   c7d70:	09d7 0000 0da7 0000 2063 0000 0443 0000     ........c ..C...
   c7d80:	fc6f ffff 1452 0000 140b 0000 0f29 0000     o...R.......)...
   c7d90:	114d 0000 2260 0000 e9af ffff 0c26 0000     M...`"......&...
   c7da0:	1bf7 0000 fd60 ffff 1d69 0000 0939 0000     ....`...i...9...
   c7db0:	0e33 0000 1174 0000 0fa4 0000 0bff 0000     3...t...........
   c7dc0:	fd0f ffff 0bc9 0000 0afc 0000 116d 0000     ............m...
   c7dd0:	0e88 0000 0f0d 0000 250a 0000 0452 0000     .........%..R...
   c7de0:	0bac 0000 19d1 0000 028d 0000 fc66 ffff     ............f...
   c7df0:	584d 0000 fec9 ffff 036b 0000 fae8 ffff     MX......k.......
   c7e00:	2b58 0000 1206 0000 004a 0000 fc84 ffff     X+......J.......

000c7e10 <_ZN12_GLOBAL__N_1L13tensor_data34E>:
   c7e10:	7f1b 03f2 05dd 2d25 b83c 26b5 f8f6 be22     ......%-<..&..".
   c7e20:	0c9a 1710 3e2e 5046 f10d 0bd7 19f6 f20d     .....>FP........
   c7e30:	0dd2 4dd9 32f0 fefa dd1e 27fa c3a2 dc08     ...M.2.....'....
   c7e40:	abe5 05f8 371f f9f1 afb8 81c8 fe81 0b9b     .....7..........
   c7e50:	2aed e725 23f2 0023 02c4 0c24 cffe 1cc0     .*%..##...$.....
   c7e60:	9bfa e32b d0ac 10fa 0792 2cc4 fd4b fb4a     ..+........,K.J.
   c7e70:	ebdf 55f8 54f4 04e4 1c42 4281 bbe4 7fab     ...U.T..B..B....
   c7e80:	4785 5528 127f 7f5a 091f 3a14 7f0e 81ee     .G(U..Z....:....
   c7e90:	5a4e 1dfe 7440 86d8 fa7f 7f53 a0cf b97f     NZ..@t....S.....
   c7ea0:	81ec ecaf 7f1d 81e4 22fd b38a 82c7 67ca     .........".....g
   c7eb0:	5ee2 eb7b 7f10 047f 219f abd9 c414 7ffa     .^{......!......
   c7ec0:	9df2 b77f ce81 444b 5956 0bbc e87f 197f     ......KDVY......
   c7ed0:	a216 07f6 f4e9 34ee 4720 13ac 29f1 a213     .......4 G...)..
   c7ee0:	0cdc 1a06 2c29 552b db0d 3a19 1d0e d6ea     ....),+U...:....
   c7ef0:	b7d2 32d9 03f8 1b08 25ff 38f0 e0d3 01fb     ...2.....%.8....
   c7f00:	b81d 1321 f6f5 030b a230 aff6 0cbb ffb9     ..!.....0.......
   c7f10:	0e2c f0b3 f2ef 0cff d3ed 12f3 e208 fcc3     ,...............
   c7f20:	90ff f017 d2ec ebff f8ab 2bf4 2a11 f918     ...........+.*..
   c7f30:	f951 6c4b ca03 2e7f 81df 7f81 82ff 26d2     Q.Kl...........&
   c7f40:	c5b5 1446 fca4 bf86 42ea 7f81 4eb2 667f     ..F......B...N.f
   c7f50:	451e 7f13 4d84 bce4 813b 4318 ae81 8106     .E...M..;..C....
   c7f60:	9d83 0e81 ba7f e95b f581 00b0 abd6 3edb     ......[........>
   c7f70:	e59b a766 27d0 81dd 3f81 be7f 4b58 d89e     ..f..'...?..XK..
   c7f80:	9a7f 70df e9d2 5515 15fa 22c0 9f01 ee5a     ...p...U..."..Z.
   c7f90:	1381 7fc9 81b7 8182 0a3e 26c9 81c0 69cc     ........>..&...i
   c7fa0:	8181 7f7f 8125 4a81 7f81 430f e4ba 5c9e     ....%..J...C...\
   c7fb0:	4f81 e47f 7f24 8f7f 18d5 2a13 81cd 9abf     .O..$......*....
   c7fc0:	88f4 7f96 491f a62d 191a f24e d1f6 7f81     .....I-...N.....
   c7fd0:	81f6 7f7f 501d b1a7 3ff7 8197 7f7f da45     .....P...?....E.
   c7fe0:	00b9 3cad 8d99 7f7f 7f7f 8181 bcb0 7f52     ...<..........R.
   c7ff0:	fe35 4c57 e701 2703 71d2 3e99 fa07 5881     5.WL...'.q.>...X
   c8000:	d315 ff12 02a1 d0b1 27f4 fc6e 637f 8e0b     .........'n..c..
   c8010:	81e1 71f0 0d81 d5da 73f8 6513 ede3 a6f8     ...q.....s.e....
   c8020:	a77f f7a3 a22d 1381 f768 3981 bff8 460e     ....-...h..9...F
   c8030:	d07f f4d4 facd d0de 8182 d1fd db00 d681     ................
   c8040:	81ba 7fe9 0d90 f30e f6e4 3303 7ff3 ee1b     ...........3....
   c8050:	911e eb2d 120e 3522 d5d7 de11 040a 2d0e     ..-..."5.......-
   c8060:	14fe 1bfd 29f6 e60e 350c f9f7 09e3 2509     .....)...5.....%
   c8070:	f3e7 00ef 1737 e7fa 1200 d3f1 d5e8 f7ed     ....7...........
   c8080:	28ef 1fdd f5f6 eeea f404 1ff1 01ea 011f     .(..............
   c8090:	28e3 e5a6 0013 470d 0ce2 fd15 e3da 02e2     .(.....G........
   c80a0:	f206 e5ea 1cc1 e8ea 23a9 1bf9 f6f9 ed06     .........#......
   c80b0:	0ed2 f77f 437f 0ee7 1281 dfb6 df7f 26ba     .....C.........&
   c80c0:	3e20 d2fd 1108 e630 bb46 1efa 5bf5 29f9      >....0.F....[.)
   c80d0:	16ab f315 3357 8111 f8eb f681 f7e0 cad7     ....W3..........
   c80e0:	d1f4 53e0 b46e b7e0 7ffe 0fcf 814f 4b41     ...Sn.......O.AK
   c80f0:	10e1 10a4 fb7f 5509 1aa3 c5ea b7fd ecd1     .......U........
   c8100:	a7fc c9e8 7fbe fd19 384a 201d e7ea 03fb     ........J8. ....
   c8110:	5e0e e21b fa04 30ec 4c0b 050f 0908 3807     .^.....0.L.....8
   c8120:	03e9 16f9 21ef e709 3a04 170c 0e07 a9ed     .....!...:......
   c8130:	e6cf ebf5 e926 fdf7 f7f9 fefd edd8 02ed     ....&...........
   c8140:	210d 02ee f3e5 07fc 070d 3e00 1fda fb1e     .!.........>....
   c8150:	0821 1497 fe15 4310 edfa fdfa f2f6 0703     !......C........
   c8160:	d1f8 fbed 1dc6 db01 21a7 1504 0cf4 eaf0     .........!......

000c8170 <_ZN12_GLOBAL__N_1L13tensor_data35E>:
   c8170:	01da 0000 f824 ffff f488 ffff ea98 ffff     ....$...........
   c8180:	00e5 0000 0e47 0000 0198 0000 0052 0000     ....G.......R...
   c8190:	fe77 ffff f22b ffff 2d27 0000 f62f ffff     w...+...'-../...
   c81a0:	fbd9 ffff 2d40 0000 1f37 0000 ea43 ffff     ....@-..7...C...
   c81b0:	3d52 0000 0ad2 0000 e938 ffff fe80 ffff     R=......8.......
   c81c0:	fbb0 ffff 0142 0000 087e 0000 f7e3 ffff     ....B...~.......
   c81d0:	0333 0000 ed0b ffff fd36 ffff e9ee ffff     3.......6.......
   c81e0:	ff0a ffff db4f ffff ff85 ffff fa40 ffff     ....O.......@...
   c81f0:	30a0 0000 fd87 ffff f862 ffff ffb6 ffff     .0......b.......
   c8200:	fdbf ffff f9f0 ffff ffaf ffff 25fd 0000     .............%..
   c8210:	fd9d ffff fd16 ffff 0680 0000 e97d ffff     ............}...
   c8220:	3251 0000 414f 0000 04d0 0000 3a51 0000     Q2..OA......Q:..
   c8230:	0165 0000 371b 0000 3304 0000 ed4c ffff     e....7...3..L...
   c8240:	fbcc ffff 04a8 0000 ff52 ffff 2bc3 0000     ........R....+..
   c8250:	f894 ffff 01ca 0000 46ce 0000 1ae5 0000     .........F......
   c8260:	2028 0000 3be9 0000 24f5 0000 d395 ffff     ( ...;...$......
   c8270:	0227 0000 0d6e 0000 f206 ffff 07cf 0000     '...n...........
   c8280:	f058 ffff f56b ffff 0624 0000 0ee5 0000     X...k...$.......
   c8290:	39af 0000 fec8 ffff fedf ffff 2dff 0000     .9...........-..
   c82a0:	fc2a ffff 02ac 0000 2336 0000 fccb ffff     *.......6#......
   c82b0:	00c6 0000 4306 0000 fce9 ffff 0831 0000     .....C......1...
   c82c0:	464b 0000 0ba8 0000 ec3e ffff f143 ffff     KF......>...C...
   c82d0:	fd82 ffff e82c ffff 2f52 0000 00a2 0000     ....,...R/......
   c82e0:	f6d9 ffff 01a7 0000 ecba ffff f056 ffff     ............V...

000c82f0 <_ZN12_GLOBAL__N_1L13tensor_data36E>:
   c82f0:	2997 eb31 f5c8 fbc0 07d0 e0fc 2a2c d521     .)1.........,*!.
   c8300:	fb0e 0c5c d402 4c7f 1e33 1c08 84bc 0ba9     ..\....L3.......
   c8310:	cfd8 1314 1e02 1404 fef7 0dbb ecb3 4dfb     ...............M
   c8320:	14e5 ebcf 01f2 c917 04a0 4cf0 1b3b 00fe     ...........L;...
   c8330:	c8e0 16d9 c0d4 e804 0101 ddbc 06cc 15d9     ................
   c8340:	3ecd b450 330d 300f f721 eafe dfdd 11cf     .>P..3.0!.......
   c8350:	0d25 cb22 e7b9 0ef4 1be7 c82c f2fb dabb     %.".......,.....
   c8360:	06f6 10c0 affa 2402 b9fc d5fc 9e44 ac6c     .......$....D.l.
   c8370:	1a2f 2bf4 3c28 daed 0c1d f2f4 3711 d281     /..+(<.......7..
   c8380:	c6d1 ecf2 ce2d 29e1 0401 10e2 3412 a3f8     ....-..).....4..
   c8390:	f5ee ffbf f5fb fdb7 e5dd b208 180f b123     ..............#.
   c83a0:	e2e3 e8b0 d51e 0ae4 eeb3 2dc8 3217 2dc6     ...........-.2.-
   c83b0:	e44e 130a be1c ff39 f5ff f7fe e6c5 e80e     N.....9.........
   c83c0:	caab 32e2 d7fe 25df c6fd e508 25db 7fca     ...2...%.....%..
   c83d0:	6fd3 1ee1 faf3 eff9 4fa6 174f 08bc f4f3     .o.......OO.....
   c83e0:	0e1d cbe0 f627 3ae7 ff2f fe26 2610 0ae2     ....'..:/.&..&..
   c83f0:	0b45 f803 2c24 f6cd 3022 2a46 ba15 3d39     E...$,.."0F*..9=
   c8400:	f257 13d2 23c9 4219 1112 1aed 37d2 27fb     W....#.B.....7.'
   c8410:	fdfe 06e9 fc13 c30a 35f0 3726 f424 28d0     .........5&7$..(
   c8420:	d800 1118 7f08 da24 1409 04f1 dc3d f63e     ......$.....=.>.
   c8430:	20ef eae1 3417 0624 e5be 16e1 1ce0 011b     . ...4$.........
   c8440:	d4eb e8f9 b127 d5db 510f fee4 f4f8 06d2     ....'....Q......
   c8450:	271b fdde fff0 ba07 d8de f825 f706 ebde     .'........%.....
   c8460:	00eb 06cb e2f1 ed21 1304 ee19 1d2c 3be0     ......!.....,..;
   c8470:	0c24 0cde 191b 0acf 4fe3 f459 fdfb d009     $........OY.....
   c8480:	f408 31e0 d416 5033 f7be 1181 c7d7 0d0c     ...1..3P........
   c8490:	d5bf 380d 2612 1911 d4db e42e 03f8 33dd     ...8.&.........3
   c84a0:	34db 150b f327 16b1 e930 fb09 f328 0d15     .4..'...0...(...
   c84b0:	10cf 0bdb 20ce 35da be23 cdd8 cc1d 06f1     ..... .5#.......
   c84c0:	55da 05b9 1cdd cb19 002d 0b1b e4c3 1a1f     .U......-.......
   c84d0:	27ab fa23 e92f cf42 1ded dff4 ef22 d8ed     .'#./.B....."...
   c84e0:	dbf9 1b35 ec81 2fb6 fcd4 062b ac31 2ef0     ..5..../..+.1...
   c84f0:	6f3d 22ef 0df6 ea2d 61e6 e143 47ff fe31     =o."..-..aC..G1.
   c8500:	0fff 18eb d414 a11c cb24 bac3 6c42 efd4     ........$...Bl..
   c8510:	d952 c2bd e8cc f9c1 10eb d7e7 d112 f3ec     R...............
   c8520:	e879 a916 16b4 f923 27d4 f719 1ef2 5d0d     y.....#..'.....]
   c8530:	f42e 22a2 8bdf 5b6a 4cc8 4df7 b286 3932     ..."..j[.L.M..29
   c8540:	c202 0a04 e8f4 cabf 32c4 1856 1c1e d060     .........2V...`.
   c8550:	0d1f b80f 0a11 4626 1405 f1cb c9fb 0fa8     ......&F........
   c8560:	8927 46e5 0722 b4e8 3450 fe06 3d99 fda9     '..F"...P4...=..
   c8570:	0320 3405 1330 cbf7 1ce2 2968 ea3c b52f      ..40.....h)<./.
   c8580:	cafd 3dae be11 1538 41de 2927 14df 7fe1     ...=..8..A')....
   c8590:	551d c9c7 fbf1 0629 1ccd ccd4 15e0 f512     .U....).........
   c85a0:	cbce 49d8 7ff2 2d13 0cf9 1914 2d37 f151     ...I...-....7-Q.
   c85b0:	224d 0fe4 01fe 1c07 02c8 cb14 d20c e249     M"............I.
   c85c0:	ba24 e0a3 09ca f8fc 0a21 0492 6efd e812     $.......!....n..
   c85d0:	faec 0bdc efe1 1d91 490d 36e4 34c0 bf05     .........I.6.4..
   c85e0:	d4eb aa3c eb28 0e04 4efc 2fac e632 11d7     ..<.(....N./2...
   c85f0:	4fff 28dc e8da 1ea8 e39e 0202 1ed5 5b24     .O.(..........$[
   c8600:	d6fe 090b 0024 f000 43de 1efa f3f0 dbd8     ....$....C......
   c8610:	d1e6 beea 14db 062b dcfd 051c d8de fa07     ......+.........
   c8620:	ecea 4832 f201 63be 18dc defe ffd6 380a     ..2H...c.......8
   c8630:	c7d8 fad8 0cd2 0708 cbe8 e98a 1dd8 d3bd     ................
   c8640:	fee5 e6da 01f8 1a0e 3703 f9c3 81b0 ca16     .........7......
   c8650:	14f2 2fbb dbd9 3b48 34f0 5ee0 e8e0 7f15     .../..H;.4.^....
   c8660:	110c 0a49 1019 9b1c f7e2 f919 f411 2d2d     ..I...........--
   c8670:	02de 8202 e91e ede1 13ef e524 01fe 0f10     ..........$.....
   c8680:	5127 fb1b accf fc01 fbf8 e840 39b8 e8c3     'Q........@..9..
   c8690:	f754 0be5 20b4 2c2c 56f7 e2e2 16e7 f0da     T.... ,,.V......
   c86a0:	db34 0247 ec1a d5ee 11c4 0402 1c45 fbcf     4.G.........E...
   c86b0:	ff47 f8dd ded5 0545 ee02 f7e4 eb9d f802     G.....E.........
   c86c0:	e8b9 0e16 1b2c fc0e 4add fd28 bfd3 eae7     ....,....J(.....
   c86d0:	e245 0834 a552 7f49 c210 03fd a5f6 3ef6     E.4.R.I........>
   c86e0:	4c28 dbbe 17f4 3412 c60a 2d4b 2ef0 f1bf     (L.....4..K-....
   c86f0:	c8f7 3c0c ed09 31fc 207b a710 d624 ea3c     ...<...1{ ..$.<.
   c8700:	1bcf 1c28 efd9 1f01 ecd4 391a 3a35 03d9     ..(........95:..
   c8710:	d9cd b634 ee03 d7e1 d823 f7f9 fae7 0a06     ..4.....#.......
   c8720:	04ba 043d 12cf a4ae 0915 29d2 cc25 d723     ..=........)%.#.
   c8730:	0011 e318 06ba 1581 40b5 3ccb 0b1d def8     .........@.<....
   c8740:	d01e cbbe 191c c055 bddf c507 cce2 88e4     ......U.........
   c8750:	c306 4c37 1b6f f254 eee1 d43a 2d6a 2521     ..7Lo.T...:.j-!%
   c8760:	f116 5eef fe50 e2f0 b4a8 20f1 2639 4432     ...^P...... 9&2D
   c8770:	e82c d3f3 7b31 21f8 3f3b 440a 351f 0408     ,...1{.!;?.D.5..
   c8780:	2dbe 4112 fe7f c44f 2024 b4ba 4ee3 1601     .-.A..O.$ ...N..
   c8790:	f528 e303 0830 d6e6 e814 4639 2edd f6ff     (...0.....9F....
   c87a0:	23b7 11fd e4de 130a 42e1 3e06 a025 930f     .#.......B.>%...
   c87b0:	60f9 d5f7 d206 053b 15f7 3aff 36ed fda6     .`....;....:.6..
   c87c0:	22ee 0a78 5bfc bfe8 1154 3fac 1142 a5ea     ."x..[..T..?B...
   c87d0:	24f9 dbe5 f6eb de08 dc17 bee7 9847 c0d6     .$..........G...
   c87e0:	d7f3 fbb9 e49b 7213 04de 076f d411 3a35     .......r..o...5:
   c87f0:	ff10 7f86 d2e3 c125 0c71 2001 a8ed e439     ......%.q.. ..9.
   c8800:	fb47 14d4 fd13 4bfb cc46 fcd5 2736 a5fe     G......KF...6'..
   c8810:	1bfe 1de4 d8c7 fcab 18bc b1de 148f 5e1b     ...............^
   c8820:	3bfb a11d 2f3a fd25 f6f0 15f5 1ac5 03f1     .;..:/%.........
   c8830:	19fa f0b1 5456 f7af d123 fa4e eb16 c9e2     ....VT..#.N.....
   c8840:	0bc0 7f21 f002 0d04 26fa 3ee4 f504 0fe4     ..!......&.>....
   c8850:	fa3c 07d6 37e7 084a 0539 0523 d8f3 dd38     <....7J.9.#...8.
   c8860:	fc0e e5f5 1221 1ddb 3113 f5aa bff4 9fd9     ....!....1......
   c8870:	d608 f7d8 2dc4 16ea e5f6 e3f0 ef1b f0cc     .....-..........
   c8880:	051f eef9 2ff4 f8f5 45e0 0e3d e302 c6de     ...../...E=.....
   c8890:	cdb6 c833 e203 abe1 10f3 43f3 edf0 4d1e     ..3........C...M
   c88a0:	f49a af08 de27 9fed f831 c92e a1c7 17c3     ....'...1.......
   c88b0:	3dd9 a05c d2f8 f00b f6ea e514 fe09 6541     .=\...........Ae
   c88c0:	f1d9 dd12 32dc cc13 f59c 0c6a 18da 1dab     .....2....j.....
   c88d0:	f9c0 1b02 bb26 ef5f dd40 cbd4 1c1a f837     ....&._.@.....7.
   c88e0:	4be9 2541 e502 0181 c8f7 1bad d830 35e7     .KA%........0..5

000c88f0 <_ZN12_GLOBAL__N_1L13tensor_data37E>:
   c88f0:	2935 0000 3efd 0000 e6d8 ffff 0892 0000     5)...>..........
   c8900:	006f 0000 1a21 0000 fb1f ffff 09bb 0000     o...!...........
   c8910:	4408 0000 f0c5 ffff de46 ffff 2bbc 0000     .D......F....+..
   c8920:	b7fd ffff 24af 0000 0bdb 0000 2847 0000     .....$......G(..

000c8930 <_ZN12_GLOBAL__N_1L13tensor_data38E>:
   c8930:	6bf8 24b1 e33a 4a65 0cbe a623 7f4e 12bf     .k.$:.eJ..#.N...
   c8940:	ffe3 ebba 2cf0 811e d51d ceef c9ef 0dbf     .....,..........
   c8950:	dfe1 5220 2814 7f8f 09ed c74b b4ea 4ad0     .. R.(....K....J
   c8960:	a54e 0042 ddf7 7fe6 3ce3 3546 30f8 0e06     N.B......<F5.0..
   c8970:	e6ce 3bea 079b 89e6 0108 f82b 281c 7f6b     ...;......+..(k.
   c8980:	227f e7e8 18ae 4f26 fa07 6843 167a 049d     ."....&O..Chz...
   c8990:	e517 c7ce 04c1 cdfa d0d3 15df 3e55 f27f     ............U>..
   c89a0:	1ac5 bcdd cdfd 0ebb 2faa c7c3 d581 5807     ........./.....X
   c89b0:	2434 0a47 1133 0541 e345 ff24 e381 0bb5     4$G.3.A.E.$.....
   c89c0:	3bdd d51b e9e5 ec19 36e9 09d8 7f26 1c1e     .;.......6..&...
   c89d0:	3d59 32d8 e8e8 c62f d7b3 87ba bb81 5d14     Y=.2../........]
   c89e0:	002d 0d3a def0 6d0d 12a9 02e5 f6f6 7f3c     -.:....m......<.
   c89f0:	e3c5 07ff fe11 297f 20c8 f80b 47f1 74c3     .......). ...G.t
   c8a00:	2d12 321e 316e 7973 60cc bda8 4728 e581     .-.2n1sy.`..(G..
   c8a10:	7b8c f10a 01fc ff3b 21d5 fd7f 1397 37cc     .{....;..!.....7
   c8a20:	e6f8 cb81 cb58 d7a0 e3ea b6e9 b000 2dcc     ....X..........-
   c8a30:	f37a ef0f e624 ea25 09d6 307f 0b32 0ede     z...$.%....02...
   c8a40:	1706 a0e0 c8f1 847f e8fd 26d6 4028 3900     ...........&(@.9
   c8a50:	7816 d0f1 b333 caed 7fd5 f7e9 36e0 e5ef     .x..3........6..
   c8a60:	81b2 aa73 8926 e126 2f2e 7161 e716 e740     ..s.&.&../aq..@.
   c8a70:	57ea 0932 0806 ed19 fb36 eb62 df81 fdaf     .W2.....6.b.....
   c8a80:	1dc1 101c 1c46 2f40 3781 0dd1 10e7 e5c5     ....F.@/.7......
   c8a90:	a71a 0738 811d 0873 be0f a8cb ae33 becd     ..8...s.....3...
   c8aa0:	96ca 3d34 f023 d513 d40e fe4f 530a 7f58     ..4=#.....O..SX.
   c8ab0:	fe00 4a1b 0f31 81cf 1442 11d1 fc04 e2e9     ...J1...B.......
   c8ac0:	18f8 c718 f2e8 d708 34e9 f6d1 7f29 0418     .........4..)...
   c8ad0:	4bbc 1602 ad1c e201 150d 4610 fe0b 7fb2     .K.........F....
   c8ae0:	81f3 03d7 5cc7 c0fd d515 dc32 d922 e99b     .....\....2."...
   c8af0:	01d7 5b24 0a19 81dc 3783 f771 0549 e9cd     ..$[.....7q.I...
   c8b00:	6881 e7e5 18e4 bf8c e5d5 0201 bd06 3f90     .h.............?
   c8b10:	4a33 56c5 a48e f5ba fdd7 9109 177f 61f5     3J.V...........a
   c8b20:	1f7f ddc6 11c2 1e5c f2c7 2c3a 1b29 04ee     ......\...:,)...
   c8b30:	e1dc 027f 4de6 154e eaea 18fd 4307 2e3a     .....MN......C:.
   c8b40:	2b03 ccc7 29f3 297f fdf2 c018 7f68 2dd0     .+...).)....h..-
   c8b50:	eeab 0c65 c821 f35f 2881 cf1d 4132 d9d2     ..e.!._..(..2A..
   c8b60:	1902 0ad5 7fbf fae3 72e7 55fe 49c2 1a19     .........r.U.I..
   c8b70:	b8fa cc7f 0dd0 f5d4 120f 4bcf b202 2adc     ...........K...*
   c8b80:	035b dd4f b876 19d3 7fc8 ffbb dbaf e877     [.O.v.........w.
   c8b90:	323d 8d19 c2f7 4286 369b b681 82bc 4294     =2.....B.6.....B
   c8ba0:	17ba dbcc aeb4 0b42 d881 4e0e 0422 2e02     ......B....N"...
   c8bb0:	1e7f 9e0a 19b8 d50c e7dc a9e4 3e10 2121     .............>!!
   c8bc0:	ac59 cfc2 fafb eac5 ef3f ce03 af7f df3a     Y.......?.....:.
   c8bd0:	a9ef 7fd3 9f00 0d9b 0f0b 2f07 3fb5 00cf     .........../.?..
   c8be0:	c9a5 81d4 f9c8 47fb 822f 28d9 c5ea 65db     .......G/..(...e
   c8bf0:	32cd d920 e7df 7f2d b96d 795a 257c 0de0     .2 ...-.m.Zy|%..
   c8c00:	5217 6da3 9e7f c0de be70 c151 fbdc 4da6     .R.m....p.Q....M
   c8c10:	e1ee f20e e56a 1124 7ff8 89e0 4c1c 46d8     ....j.$......L.F
   c8c20:	d345 f9dd f346 ccd9 7ffe 25e9 98f5 11ae     E...F......%....
   c8c30:	1b07 81ef d4fb 8f77 0004 32df 3a36 2500     ......w....26:.%
   c8c40:	7fe4 26be d62a 4348 12d8 af26 3feb a066     ...&*.HC..&..?f.
   c8c50:	2c10 ffee 0081 c2b8 443a 1c1c dcd9 2104     .,......:D.....!
   c8c60:	d77f efd7 56d8 d3a4 e831 3cd9 c0ea 2205     .....V..1..<..."
   c8c70:	d3f6 3733 99dd f081 c2d5 b6d7 cf13 4313     ..37...........C
   c8c80:	6521 813e 6709 e554 e8fd cff3 9355 340a     !e>..gT.....U..4
   c8c90:	791a ed02 aef7 3b9c e7fc 7fdd 514f 400a     .y.....;....OQ.@
   c8ca0:	f0de 1c3c df3c 6163 f9b2 060c 3b7f f804     ..<.<.ca.....;..
   c8cb0:	157f 180b 7acb b9cb 34e1 09ab 65bc 28ec     .....z...4...e.(
   c8cc0:	e4c7 e1c6 a5b5 f44a e881 3e43 1a10 38f0     ......J...C>...8
   c8cd0:	ce32 133f c108 03ef ed1c e581 e116 2bda     2.?............+
   c8ce0:	0a3f 5981 2005 e354 dac2 a723 ba91 6d10     ?..Y. T...#....m
   c8cf0:	21f9 15f1 eeef 0aef bedb 703f 81d2 00d7     .!........?p....
   c8d00:	1bdb a54b 3fbe 7f05 a2e7 4135 f84a 6c03     ..K..?....5AJ..l
   c8d10:	324a 81f5 0bf3 e008 24f1 30df e916 b0a5     J2.......$.0....
   c8d20:	e100 ff01 b9bf 0ac2 f8bb e7d9 ff7f ef36     ..............6.
   c8d30:	0613 3de8 e093 b9f1 7f32 052b bc1f 74cc     ...=....2.+....t
   c8d40:	0aea ecf2 52b4 e014 813b b45c 4b4f 3783     .....R..;.\.OK.7
   c8d50:	6886 a2a3 d12d ac84 7a99 0561 ca81 3f32     .h..-....za...2?
   c8d60:	defd 9981 483c eb0d fce5 f233 1f16 330b     ....<H....3....3
   c8d70:	1431 d8ed 23b9 2916 46c3 f47f cbf3 028a     1....#.).F......
   c8d80:	9944 d632 9c11 7fe0 3ef8 4f51 3fea ffda     D.2......>QO.?..
   c8d90:	0f3a 217f ea6c 0878 141f 1eb4 46c3 1cbe     :..!l.x......F..
   c8da0:	1b02 bd56 b781 0b11 fceb a219 fbb0 2303     ..V............#
   c8db0:	a1c8 851b e94e 2506 10c5 ea81 7b3b 72cb     ....N..%....;{.r
   c8dc0:	120f ff2d 9d7e 0ece 6cda 25a9 c19f f07f     ..-.~....l.%....
   c8dd0:	fd93 c681 dc36 16de 0cb6 e393 bcd7 55cf     ....6..........U
   c8de0:	e860 d233 0c17 ed81 9cf5 0042 f409 f1ff     `.3.......B.....
   c8df0:	c402 7adb 512e b967 895d 7f48 9122 2cad     ...z.Qg.].H."..,
   c8e00:	d9d7 e17f df1e 83e0 141c 5e29 2c26 fd0b     ..........)^&,..
   c8e10:	ffd3 d414 c104 f01d ee1d 9c0c b79a c681     ................
   c8e20:	b78b 22e0 2e7f 1bf4 2311 3ff7 a5ca f8af     ...".....#.?....
   c8e30:	8108 7b37 e8e1 598d 0ff2 fc45 05af 44f6     ..7{...Y..E....D
   c8e40:	4877 52f2 2a00 7f14 1115 376c 1e71 e43c     wH.R.*....l7q.<.
   c8e50:	ffc5 e70b 831c b281 58fe dcd3 6ade ebb6     .........X...j..
   c8e60:	e968 e34d f3d8 fd81 8e15 cf08 f6e9 eb0d     h.M.............
   c8e70:	c009 1998 327f 2731 1789 ed95 d02b 12ac     .....21'....+...
   c8e80:	5815 c730 0068 8422 e17f ed20 b95e f813     .X0.h."... .^...
   c8e90:	d179 337f c001 2248 c6c8 d0a0 1428 0cc2     y..3..H"....(...
   c8ea0:	06f6 bc0c e63f 12db e01c e348 81ae 1afa     ....?.....H.....
   c8eb0:	e6cc f82c 1f1a d3c0 07f8 81b6 dfd7 ebf2     ..,.............
   c8ec0:	13ad c30e 0916 2081 224f f7be a5eb f1d0     ....... O"......
   c8ed0:	f7fb b3e8 0f7f 23c6 3329 f015 1a20 e8c9     .......#)3.. ...
   c8ee0:	bfdb 2d21 f0db 56f0 bbca c716 4efb 7f21     ..!-...V.....N!.
   c8ef0:	48ef f304 3dee 28a7 f0e2 fe3b 7fe2 1533     .H...=.(..;...3.
   c8f00:	47f3 c2c7 513b 05b5 3b3c 3547 0e81 52ca     .G..;Q..<;G5...R
   c8f10:	3e16 115b da81 f70d f119 f120 e3c2 ec0b     .>[....... .....
   c8f20:	16f1 ff2d ef7f 559b 1714 66a1 00f6 ce63     ..-....U...f..c.

000c8f30 <_ZN12_GLOBAL__N_1L13tensor_data39E>:
   c8f30:	0521 0000 0017 0000 10bb 0000 1956 0000     !...........V...
   c8f40:	1570 0000 f708 ffff 1029 0000 fb0a ffff     p.......).......
   c8f50:	f5ee ffff fd6e ffff 152a 0000 f658 ffff     ....n...*...X...
   c8f60:	11d7 0000 1a8c 0000 0b7d 0000 09de 0000     ........}.......
   c8f70:	fd76 ffff fdfd ffff f8a6 ffff 16e4 0000     v...............
   c8f80:	0bd9 0000 fbee ffff 0d32 0000 fcc1 ffff     ........2.......
   c8f90:	fbd9 ffff 0c67 0000 0839 0000 090a 0000     ....g...9.......
   c8fa0:	13b5 0000 0b08 0000 10ac 0000 040c 0000     ................
   c8fb0:	062a 0000 120f 0000 1536 0000 0f3e 0000     *.......6...>...
   c8fc0:	fde1 ffff 10c9 0000 0e03 0000 ee63 ffff     ............c...
   c8fd0:	fecc ffff 06ea 0000 0026 0000 08c1 0000     ........&.......
   c8fe0:	f9fc ffff 0275 0000 fa23 ffff 041d 0000     ....u...#.......
   c8ff0:	dd71 ffff 082d 0000 05fa 0000 f0ee ffff     q...-...........
   c9000:	2240 0000 f97e ffff 07ee 0000 0606 0000     @"..~...........
   c9010:	0504 0000 0be9 0000 fbd3 ffff f914 ffff     ................
   c9020:	0185 0000 0684 0000 0203 0000 14c9 0000     ................
   c9030:	1ca1 0000 1009 0000 1351 0000 13e1 0000     ........Q.......
   c9040:	1393 0000 fc8e ffff 0c34 0000 130f 0000     ........4.......
   c9050:	0e7b 0000 f932 ffff 1731 0000 21d4 0000     {...2...1....!..
   c9060:	0317 0000 f3b4 ffff 0253 0000 05d4 0000     ........S.......
   c9070:	3715 0000 07f7 0000 fe3e ffff f12d ffff     .7......>...-...
   c9080:	0613 0000 02db 0000 0a0d 0000 f745 ffff     ............E...
   c9090:	0f63 0000 feab ffff 0cc1 0000 05ff 0000     c...............
   c90a0:	ffc4 ffff ef04 ffff ff4c ffff 0747 0000     ........L...G...

000c90b0 <_ZN12_GLOBAL__N_1L13tensor_data40E>:
   c90b0:	3a1c ac23 0fb4 45fb dde4 9c89 7a9b 40cf     .:#....E.....z.@
   c90c0:	5627 00ff a9d9 1cd2 9649 6e05 b03d 0748     'V......I..n=.H.
   c90d0:	5fb8 c923 02e6 f3a4 c789 ba67 e448 679b     ._#.......g.H..g
   c90e0:	6581 01aa 5ee4 40fa aaae 25e2 5ef2 8526     .e...^.@...%.^&.
   c90f0:	8a4c 369f 923a 73ef 0dc0 64d6 aed0 f4e0     L..6:..s...d....
   c9100:	3a91 fb38 b3d7 c6bd 2e1e 3c1d 9a9d 2dbf     .:8........<...-
   c9110:	0c47 2950 bc1f 7afe 2727 39be a09b c022     G.P)...z''.9..".
   c9120:	dacd e8ee 5b69 c0b0 f41e c7e9 355b c7ed     ....i[......[5..
   c9130:	b2ab bdaf b72a 17de 5ff3 2700 0929 2dd5     ....*...._.')..-
   c9140:	95fb d606 9ffc a5c6 3228 1350 b748 e2e1     ........(2P.H...
   c9150:	f87c 5e08 5451 732f 0500 213e a44a fd7d     |..^QT/s..>!J.}.
   c9160:	64b9 36bf 0f28 2b81 cdd1 e940 18d9 012b     .d.6(..+..@...+.
   c9170:	b9fc 8ca7 05d2 fe42 d113 ccbc 4a2c 8eb4     ......B.....,J..
   c9180:	1e9e 1cff caa0 131a 44cd cbcf d8e4 18ab     .........D......
   c9190:	b82c fd2d 2daf 3bba e03e 446b ebbc 233a     ,.-..-.;>.kD..:#
   c91a0:	c2f6 63fd b0a7 b002 12df 6651 4a58 5ec5     ...c......QfXJ.^
   c91b0:	5265 adb1 18fb e641 2f1f beea 7f55 b199     eR....A../..U...
   c91c0:	68a7 307d 22b7 1d2f 554a 6856 dbc9 624b     .h}0."/.JUVh..Kb
   c91d0:	59ab a736 6362 4349 1861 c223 2561 6964     .Y6.bcICa.#.a%di
   c91e0:	4881 62dd 45b1 fead 4b6f 0c93 1d30 67d0     .H.b.E..oK..0..g
   c91f0:	1794 9c15 da9e c0a8 d4af 10ba 94b1 dbe5     ................
   c9200:	65d7 a2d9 2a05 b766 93a9 9b44 1aa4 dd9d     .e...*f...D.....
   c9210:	5305 d5c1 d5d4 ff52 6952 b1c4 cf81 bb4a     .S....R.Ri....J.
   c9220:	6333 acb1 8c46 9e64 8cd8 5b58 c8a3 df1f     3c..F.d...X[....
   c9230:	1c9c f659 0344 c7e7 4412 c295 68b4 971e     ..Y.D....D...h..
   c9240:	2250 b2c4 4c9c e18d 84e1 2f62 8b0e 1f7e     P"...L....b/..~.
   c9250:	3189 cbcb e96b 9887 6867 9294 56eb d4d1     .1..k...gh...V..
   c9260:	e375 787b 8960 2ff5 e88e be70 e05c 5beb     u.{x`../..p.\..[
   c9270:	20cc ac89 5f1d f821 f8bc b219 57e4 2ed6     . ..._!......W..
   c9280:	8c24 f928 7f37 b50e f6e5 4363 e565 8590     $.(.7.....cCe...
   c9290:	79a4 cddc eb23 49d3 9df9 2741 26b7 7678     .y..#..I..A'.&xv
   c92a0:	7892 fd48 127a 74d0 3081 cbe6 2fec 0647     .xH.z..t.0.../G.
   c92b0:	4dbd 444c ba74 e0cc f643 d0fa 7d6f 0003     .MLDt...C...o}..
   c92c0:	6e06 346c dcb1 e12b db6a 52b2 4c46 4701     .nl4..+.j..RFL.G
   c92d0:	cd53 3b3a bc6e 0c2a 409c a81e 2ad1 0a2b     S.:;n.*..@...*+.
   c92e0:	7056 bda3 df3b fe9b 785a 79e2 6fee 5904     Vp..;...Zx.y.o.Y
   c92f0:	e776 9a04 db87 923c 4b15 7822 bc37 7be6     v.....<..K"x7..{
   c9300:	5eac 5c13 7e87 1e65 2aad 9186 9bcc 38fe     .^.\.~e..*.....8
   c9310:	13a0 5350 ca85 3e0d 2b98 024b 4c88 d68d     ..PS...>.+K..L..
   c9320:	6f30 e7f3 9aac a9b1 f6ab 57f9 cf3a 0c6d     0o.........W:.m.
   c9330:	5e7f 36e6 98ff e9d1 c545 7565 20d2 abca     .^.6....E.eu. ..
   c9340:	e91b 95c6 fe5b 7af9 8ff8 db9c f7a7 9165     ....[..z......e.
   c9350:	274a 87c3 f362 c2df b228 edf4 6bc8 345d     J'..b...(....k]4
   c9360:	fa4f 32f2 9d47 c4f0 bf6e 6434 dba0 0df5     O..2G...n.4d....
   c9370:	d181 d43d 036b a7fa 22a1 48bc c90a c4a8     ..=.k....".H....
   c9380:	cf4c 77d7 25cb 1e5a 8844 9503 af10 c2d6     L..w.%Z.D.......
   c9390:	c4f3 988b 9b28 0390 4e8e 42d6 d6b7 f2b0     ....(....N.B....
   c93a0:	2e8f 7203 b2bd ad1b 6c29 a86a af22 935d     ...r....)lj.".].
   c93b0:	d2c4 f9a4 ee35 afe3 8154 9f72 9fe8 029b     ....5...T.r.....
   c93c0:	3803 c334 3461 cb59 92bd aa11 b9b8 f09f     .84.a4Y.........
   c93d0:	f6d1 6eac a59c b5d8 0fe0 f02f cfee 5ad1     ...n....../....Z
   c93e0:	4d1f e9e8 0e6a a7ea fcfa 19e9 e8af 5194     .M..j..........Q
   c93f0:	daf5 c010 14be 339c 4b1e 4a73 d658 f4fb     .......3.KsJX...
   c9400:	5328 2cfc c941 49e1 3e3e 41ca 6d99 d269     (S.,A..I>>.A.mi.
   c9410:	d5d7 410e 3316 194c 2702 353a 2b5d e1d9     ...A.3L..':5]+..
   c9420:	bef1 acbe 459e e30f bcb5 2acc 8736 29dd     .....E.....*6..)
   c9430:	b99e db64 fadd bab3 5565 fefb 311f e718     ..d.....eU...1..
   c9440:	cee4 c998 1292 4012 aff4 fe09 b7f6 4816     .......@.......H
   c9450:	4281 363c bf57 088e 2228 9138 be62 c804     .B<6W...("8.b...
   c9460:	d28a b050 b530 09a5 50b3 0318 0ea7 3417     ..P.0....P.....4
   c9470:	2398 98a5 53ca 8f81 9545 3d4b 16ed f03c     .#...S..E.K=..<.
   c9480:	0967 1cbd b7eb 4bce 6525 dbd5 a789 8beb     g......K%e......
   c9490:	1a36 8262 a86a 6821 1d5a 3015 14e9 f1f4     6.b.j.!hZ..0....
   c94a0:	6cb7 6b52 925c 305c e911 e952 373e 325c     .lRk\.\0..R.>7\2
   c94b0:	61cd 2df2 edfb 1341 9395 350e 6a3d f744     .a.-..A....5=jD.
   c94c0:	20f4 2b03 4605 11ac 19eb 50bf 3c2c ea0f     . .+.F.....P,<..
   c94d0:	4b5d aec9 fd65 b0d4 25b4 f737 bc23 bb43     ]K..e....%7.#.C.
   c94e0:	4992 d1ce e2e0 b849 6090 6354 3b0e 3207     .I....I..`Tc.;.2
   c94f0:	5d3d bf92 6c16 c1d6 8423 9e7a 2860 f693     =]...l..#.z.`(..
   c9500:	5c1e 61c8 be47 a8cb 5de8 5a85 0de9 ca7f     .\.aG....].Z....
   c9510:	eb4c 066c 5e6b 1ecf bba8 9a21 2600 05bd     L.l.k^....!..&..
   c9520:	eeab 5387 b00f f3c0 3cb5 d0e4 2a57 ed7c     ...S.....<..W*|.
   c9530:	02e0 7cd7 f32a d2fb 2a02 43f5 cfe0 4eef     ...|*....*.C...N
   c9540:	0234 7f37 f3c9 495b 6f1e 27d3 ce6e 5661     4.7...[I.o.'n.aV
   c9550:	0539 de1b dc28 4f4c 6f65 de40 0c37 5ceb     9...(.LOeo@.7..\
   c9560:	74d6 4bf1 c2f1 3f68 da1a c4e2 053a 176c     .t.K..h?....:.l.
   c9570:	20df ee1a ccb8 0e3a edc6 130b 17c8 e95e     . ....:.......^.
   c9580:	6133 1965 ee49 da13 d5e4 271e c8ce 6bc7     3ae.I......'...k
   c9590:	2e2f c154 125d da11 8e17 0f26 47fe 4b2e     /.T.].....&..G.K
   c95a0:	1f41 49e3 f76c c0e8 ad31 c10e b720 f7d4     A..Il...1... ...
   c95b0:	a1eb 0518 8d39 2e49 addc 5546 ff31 4429     ....9.I...FU1.)D
   c95c0:	3f98 f5df aee3 4df4 d512 d625 f7af c639     .?.....M..%...9.
   c95d0:	20bd a1ed bbbb 5199 d1d2 d966 2be9 dcfa     . .....Q..f..+..
   c95e0:	1a49 45f5 c657 4e81 d4d2 df14 752f 9ce1     I..EW..N..../u..
   c95f0:	c3d3 3d61 a23b fb11 39fe b6e6 7303 2eeb     ..a=;....9...s..
   c9600:	d49f a1d9 2cfe dbcf e6d6 1f4a b54f d450     .....,....J.O.P.
   c9610:	62d5 1f7b 4923 a8af 7560 1e7a b84d d5f8     .b{.#I..`uz.M...
   c9620:	0981 bee9 8bf8 9a4f a91c a3d0 9eab 121a     ......O.........
   c9630:	41ff f70e f19c c621 ae9a f23d e1a9 0f4d     .A....!...=...M.
   c9640:	de7f 1b73 b7bc 52ba 0140 e6be 99ed c3b3     ..s....R@.......
   c9650:	220c b2f0 4f94 30fb ca83 d055 bde6 ccca     ."...O.0..U.....
   c9660:	4bd4 0395 a4d9 d8b9 eaed 5a56 a8e3 0b81     .K........VZ....
   c9670:	562b dec9 56d6 9dd5 61b5 b95b 2645 9aac     +V...V...a[.E&..
   c9680:	d50f 9ad2 eda3 0114 e622 c34a 998c b691     ........".J.....
   c9690:	0fc5 a7ea b1e3 fea0 2233 40f4 58d2 da8b     ........3".@.X..
   c96a0:	b3d8 bbc7 cdc1 d454 932a 51a3 cdf1 a95d     ......T.*..Q..].
   c96b0:	11f4 7193 bb50 6361 30d2 b84e 54c5 d981     ...qP.ac.0N..T..
   c96c0:	501f dde3 e683 0794 bd69 0faa 5ac6 2069     .P......i....Zi 
   c96d0:	ccaa 050c 5eea 3885 2138 c045 ea9a be99     .....^.88!E.....
   c96e0:	2af2 3e57 88d0 013a 5629 b8d5 e21e 3c07     .*W>..:.)V.....<
   c96f0:	19ed cd3e c4fa 0b4c 0448 ab28 cf49 c498     ..>...L.H.(.I...
   c9700:	1adb 95f1 c559 8902 9966 8e5b 112b a645     ....Y...f.[.+.E.
   c9710:	51ef d69e 20e0 5bd2 d91b ea59 5ae1 c522     .Q... .[..Y..Z".
   c9720:	4113 35c5 f613 f0c6 fc8a b8e1 2ad7 a831     .A.5.........*1.
   c9730:	dd3b 27e4 c018 2aea 57cb b9d4 0a61 9f95     ;..'...*.W..a...
   c9740:	9d0b 81f1 11b7 1b1f 49ad cbb1 5a5f 403e     .........I.._Z>@
   c9750:	1fcb 41af a8c5 ea07 cdd9 21fc ad9c a863     ...A.......!..c.
   c9760:	f9c7 b63a 2045 57cc 6308 37dd c6a3 d33a     ..:.E .W.c.7..:.
   c9770:	8150 ef92 123c 9d8d 25c5 aead 62fd 211e     P...<....%...b.!
   c9780:	4916 d49b 3bac 2914 e8fd 972a 8bf0 9222     .I...;.)..*...".
   c9790:	57e5 cc72 d011 b5c4 138b c26e 23ea b859     .Wr.......n..#Y.
   c97a0:	0c3f 95d2 fcd1 27d3 1d42 4284 e99b 6d48     ?......'B..B..Hm
   c97b0:	19f5 98a6 d16a 55b4 5c97 6600 481d eeea     ....j..U.\.f.H..
   c97c0:	d8c6 4f8e b30b 045b 0a41 76d3 faa2 85f8     ...O..[.A..v....
   c97d0:	4648 52a7 4f6f 12c7 d266 d70e 524c de7b     HF.RoO..f...LR{.
   c97e0:	a227 75c2 bbb4 7b20 f439 ee28 3355 9971     '..u.. {9.(.U3q.
   c97f0:	f14a 5bb1 e0a1 1cca 2034 3839 36e3 6c94     J..[....4 98.6.l
   c9800:	1e64 e85c b946 6e4d 1436 df97 45e7 da72     d.\.F.Mn6....Er.
   c9810:	fe68 5ec3 f576 0fa5 3b14 5d1a 3f10 7fbc     h..^v....;.].?..
   c9820:	cea2 8f68 0c32 be4c 04bd 15f2 deea 8755     ..h.2.L.......U.
   c9830:	acf6 35e8 134f 2347 c9cf fe0d b5e3 a9fb     ...5O.G#........
   c9840:	d0ee 1f7f 982f e550 63ac 09b2 b901 03d2     ..../.P..c......
   c9850:	5523 c744 1455 0ca0 a364 e5ac 0d24 d6dd     #UD.U...d...$...
   c9860:	f852 bd5f 4efe ad1c 93d2 0745 4ddc 4244     R._..N....E..MDB
   c9870:	5317 b916 491a 12c6 b3aa 67d9 cdf3 b820     .S...I.....g.. .
   c9880:	5808 e34d 142d 9ac5 0761 b39d cb39 4418     .XM.-...a...9..D
   c9890:	5a3f a75e c6dd dca7 5add a90e b0ce 9cac     ?Z^......Z......
   c98a0:	dedd 98b2 2fd8 cb57 1944 e84a 9ec4 f955     ...../W.D.J...U.
   c98b0:	12a1 6356 a88f 1490 1cf3 06d3 4cb2 3581     ..Vc.........L.5
   c98c0:	8a34 a8f6 c22f c791 c1da 4e3c d10a 2fe9     4.../.....<N.../
   c98d0:	22d3 f8c7 c1f7 fee5 9bd6 f2cd 59a5 4f5e     ."...........Y^O
   c98e0:	55d1 d7f1 b085 1700 20cd 48b3 bade db54     .U....... .H..T.
   c98f0:	dcfb 033e a2cf 377b 1b34 3df8 32df afea     ..>...{74..=.2..
   c9900:	0fb6 5eda 682d 6817 46da 48ca b4ea bae1     ...^-h.h.F.H....
   c9910:	72cb 3533 ce34 d5c6 1d02 0eca dc42 c97f     .r354.......B...
   c9920:	0ed4 58ad 64d5 3d1a 6d6e 53d6 f4c2 37ff     ...X.d.=nm.S...7
   c9930:	b452 f8b6 7333 f3cc 7525 0ec6 d8b5 e73d     R...3s..%u....=.
   c9940:	d270 fdb9 6338 5c07 5d33 3c74 4bc4 6768     p...8c.\3]t<.Khg
   c9950:	07d7 d20f 0d9b 0e2e 8714 893a 5592 d745     ..........:..UE.
   c9960:	1a15 0811 6937 e730 bf16 cab7 539d 73f0     ....7i0......S.s
   c9970:	c14c eb67 58f2 b04e 1560 a55d f59b 5a81     L.g..XN.`.]....Z
   c9980:	54fa efcd 75a4 0831 fd1b ee13 3bd9 8258     .T...u1......;X.
   c9990:	a663 f40d 5364 69ac 095b cf19 ea96 f8aa     c...dS.i[.......
   c99a0:	0092 a58e 81d0 9261 b5da aedc c6ff 59aa     ......a........Y
   c99b0:	6103 697a f347 749d 9c0a 59bb 0820 d006     .aziG..t...Y ...
   c99c0:	29f1 5aac f47f 2af0 3edc d3cb 7d60 f067     .).Z...*.>..`}g.
   c99d0:	dc77 f4fe cf1b b7bb 66fa 38be 54dc cc2f     w........f.8.T/.
   c99e0:	cf96 ee28 57d2 df6d e03e f3e8 3177 f23c     ..(..Wm.>...w1<.
   c99f0:	039b 76cf ae4f 28f5 8603 deff b824 53ef     ...vO..(....$..S
   c9a00:	d44b bf3b bebd d2e8 5ab8 f0d3 c7c1 5d4c     K.;......Z....L]
   c9a10:	08ef 4dfa 0608 28d1 4503 3934 41b9 c93e     ...M...(.E49.A>.
   c9a20:	06e0 2fde 4b35 4715 db4a d9d1 323c 2dc1     .../5K.GJ...<2.-
   c9a30:	cbbe 5749 55df 50cf 7fe3 033e cdfb d8d8     ..IW.U.P..>.....
   c9a40:	1cec f9ca 050f bbd0 e633 097c 4bc9 38ca     ........3.|..K.8
   c9a50:	bdcb 46c0 2908 372c 5711 1df0 270f c021     ...F.),7.W...'!.
   c9a60:	06c9 48f1 384c 3913 78cd f6eb 43f9 5167     ...HL8.9.x...CgQ
   c9a70:	a844 f5f3 964b d060 e427 ffa0 b9d0 df1b     D...K.`.'.......
   c9a80:	045f acd1 c625 523c defb 2523 f00e d2c8     _...%.<R..#%....
   c9a90:	29e1 6a23 5ef5 5f81 0668 95da 2af1 0271     .)#j.^._h....*q.
   c9aa0:	3319 e74f 5b59 183f fa57 e7c0 6b05 89a8     .3O.Y[?.W....k..
   c9ab0:	db2a da8c ccf6 211c c78c b3a2 1be4 2fdf     *......!......./
   c9ac0:	0e60 f8c9 d3ec 9df7 0611 6355 34d0 e426     `.........Uc.4&.
   c9ad0:	2035 6e84 dbd6 f2fc 5ba3 f2d8 4484 c248     5 .n.....[...DH.
   c9ae0:	8828 8602 31dd 9e4d 4382 2acc b753 8136     (....1M..C.*S.6.
   c9af0:	a068 601c 3462 cca8 2d21 33da 9b3a ac6d     h..`b4..!-.3:.m.
   c9b00:	baf3 5633 3666 9e84 d757 01dc a91a 9688     ..3Vf6..W.......
   c9b10:	6714 960f f41e 8b1f af10 a4f7 0ca1 073e     .g............>.
   c9b20:	a8b8 0651 9d8c d438 0565 6529 1955 9339     ..Q...8.e.)eU.9.
   c9b30:	7c97 50de 6314 0699 b643 4aa9 bc49 a921     .|.P.c..C..JI.!.
   c9b40:	49c2 6105 536c b40d bb36 7858 20d5 2ff1     .I.alS..6.Xx. ./
   c9b50:	19ee d3e6 522e 7ee6 da8e 4a04 7470 0fea     .....R.~...Jpt..
   c9b60:	035c 079c e042 4512 355a 5f19 ed38 900a     \...B..EZ5._8...
   c9b70:	03bf db65 36b8 7443 1998 1d7f c146 5a01     ..e..6Ct....F..Z
   c9b80:	41c4 c73b 0b3e d0a0 1dab b355 4430 51f5     .A;.>.....U.0D.Q
   c9b90:	f61b 1a30 0deb a912 dbda b0db f849 f5c4     ..0.........I...
   c9ba0:	535a 61a8 d227 b7b6 c141 deb3 5de0 21cb     ZS.a'...A....].!
   c9bb0:	71a9 086d aaf1 ef26 c850 2bf9 42bb 108f     .qm...&.P..+.B..
   c9bc0:	42d2 281f ffbe 5d4c f821 13bd 6677 25c7     .B.(..L]!...wf.%
   c9bd0:	bb51 2ba4 f64d dae8 81eb aaf6 fed4 480d     Q..+M..........H
   c9be0:	db06 c820 9622 5fb9 2dfe d1c8 05a3 c0c3     .. .".._.-......
   c9bf0:	b2c0 ceb8 563a 092d 17bf 301e 3658 a1aa     ....:V-....0X6..
   c9c00:	6056 022d c3fb bf67 2ffc 10ed e04c 2d09     V`-...g../..L..-
   c9c10:	e803 1e1a d1ae f34f a1e9 b9c2 694b e1d1     ......O.....Ki..
   c9c20:	5fb5 d6af f59c aa4c 3456 03ea a7db 4630     ._....L.V4....0F
   c9c30:	5a6a 3f1f 3a58 b961 811b 10b8 d038 e3fe     jZ.?X:a.....8...
   c9c40:	2d2e 1252 c74e 2430 2362 9b31 4c09 b2b8     .-R.N.0$b#1..L..
   c9c50:	6b21 d63d f5ba a85c d1af c133 acac 0d51     !k=...\...3...Q.
   c9c60:	2df7 1901 d3e2 ff58 554c bfd1 46e8 3b31     .-....X.LU...F1;
   c9c70:	1b43 5c31 7327 a9eb 6906 1a9e 5b15 f631     C.1\'s...i...[1.
   c9c80:	e6ad 38c3 a912 f6f3 1906 6524 81f5 986f     ...8......$e..o.
   c9c90:	a20f bb42 208e db6c d343 35d4 5ef3 ab2e     ..B.. l.C..5.^..
   c9ca0:	f1f5 bc93 51e0 9777 50b9 e224 d4ca 5090     .....Qw..P$....P

000c9cb0 <_ZN12_GLOBAL__N_1L13tensor_data41E>:
   c9cb0:	ffea ffff 01b9 0000 fec5 ffff fe09 ffff     ................
   c9cc0:	010a 0000 01c9 0000 0191 0000 fe2c ffff     ............,...
   c9cd0:	00ab 0000 fe00 ffff fdc7 ffff 01ca 0000     ................
   c9ce0:	06a0 0000 008c 0000 015e 0000 fcdf ffff     ........^.......
   c9cf0:	fe63 ffff 0044 0000 0020 0000 01ce 0000     c...D... .......
   c9d00:	fef4 ffff fd56 ffff 059b 0000 0001 0000     ....V...........
   c9d10:	01b6 0000 0244 0000 fe2a ffff fdf7 ffff     ....D...*.......
   c9d20:	01ae 0000 01bf 0000 00fd 0000 fe3f ffff     ............?...

000c9d30 <_ZN12_GLOBAL__N_1L13tensor_data42E>:
   c9d30:	e3e2 d4d8 f971 0d79 ae34 b6af dc66 f17f     ....q.y.4...f...
   c9d40:	1cad 0964 e45c da7b 6ed1 9e0d 9ab1 1928     ..d.\.{..n....(.
   c9d50:	7f59 b8aa 690a cc0d a048 3caa 05a6 4c1e     Y....i..H..<...L
   c9d60:	5eaa 4e64 03bc 32e0 f96c aab3 5e42 936e     .^dN...2l...B^n.

000c9d70 <_ZN12_GLOBAL__N_1L13tensor_data43E>:
   c9d70:	8116 0000 77c4 ffff                         .....w..

000c9d78 <_ZN12_GLOBAL__N_1L17tensor_dimension0E>:
   c9d78:	0004 0000 0001 0000 0030 0000 0030 0000     ........0...0...
   c9d88:	0001 0000                                   ....

000c9d8c <_ZN12_GLOBAL__N_1L17tensor_dimension1E>:
   c9d8c:	0002 0000 0004 0000 0002 0000               ............

000c9d98 <_ZN12_GLOBAL__N_1L17tensor_dimension2E>:
   c9d98:	0004 0000 0010 0000 0003 0000 0003 0000     ................
   c9da8:	0001 0000                                   ....

000c9dac <_ZN12_GLOBAL__N_1L17tensor_dimension3E>:
   c9dac:	0001 0000 0010 0000                         ........

000c9db4 <_ZN12_GLOBAL__N_1L17tensor_dimension4E>:
   c9db4:	0004 0000 0001 0000 0003 0000 0003 0000     ................
   c9dc4:	0010 0000                                   ....

000c9dc8 <_ZN12_GLOBAL__N_1L17tensor_dimension5E>:
   c9dc8:	0001 0000 0010 0000                         ........

000c9dd0 <_ZN12_GLOBAL__N_1L17tensor_dimension6E>:
   c9dd0:	0004 0000 0008 0000 0001 0000 0001 0000     ................
   c9de0:	0010 0000                                   ....

000c9de4 <_ZN12_GLOBAL__N_1L17tensor_dimension7E>:
   c9de4:	0001 0000 0008 0000                         ........

000c9dec <_ZN12_GLOBAL__N_1L17tensor_dimension8E>:
   c9dec:	0004 0000 0030 0000 0001 0000 0001 0000     ....0...........
   c9dfc:	0008 0000                                   ....

000c9e00 <_ZN12_GLOBAL__N_1L17tensor_dimension9E>:
   c9e00:	0001 0000 0030 0000                         ....0...

000c9e08 <_ZN12_GLOBAL__N_1L18tensor_dimension10E>:
   c9e08:	0004 0000 0001 0000 0003 0000 0003 0000     ................
   c9e18:	0030 0000                                   0...

000c9e1c <_ZN12_GLOBAL__N_1L18tensor_dimension11E>:
   c9e1c:	0001 0000 0030 0000                         ....0...

000c9e24 <_ZN12_GLOBAL__N_1L18tensor_dimension12E>:
   c9e24:	0004 0000 0008 0000 0001 0000 0001 0000     ................
   c9e34:	0030 0000                                   0...

000c9e38 <_ZN12_GLOBAL__N_1L18tensor_dimension13E>:
   c9e38:	0001 0000 0008 0000                         ........

000c9e40 <_ZN12_GLOBAL__N_1L18tensor_dimension14E>:
   c9e40:	0004 0000 0030 0000 0001 0000 0001 0000     ....0...........
   c9e50:	0008 0000                                   ....

000c9e54 <_ZN12_GLOBAL__N_1L18tensor_dimension15E>:
   c9e54:	0001 0000 0030 0000                         ....0...

000c9e5c <_ZN12_GLOBAL__N_1L18tensor_dimension16E>:
   c9e5c:	0004 0000 0001 0000 0003 0000 0003 0000     ................
   c9e6c:	0030 0000                                   0...

000c9e70 <_ZN12_GLOBAL__N_1L18tensor_dimension17E>:
   c9e70:	0001 0000 0030 0000                         ....0...

000c9e78 <_ZN12_GLOBAL__N_1L18tensor_dimension18E>:
   c9e78:	0004 0000 0008 0000 0001 0000 0001 0000     ................
   c9e88:	0030 0000                                   0...

000c9e8c <_ZN12_GLOBAL__N_1L18tensor_dimension19E>:
   c9e8c:	0001 0000 0008 0000                         ........

000c9e94 <_ZN12_GLOBAL__N_1L18tensor_dimension20E>:
   c9e94:	0004 0000 0030 0000 0001 0000 0001 0000     ....0...........
   c9ea4:	0008 0000                                   ....

000c9ea8 <_ZN12_GLOBAL__N_1L18tensor_dimension21E>:
   c9ea8:	0001 0000 0030 0000                         ....0...

000c9eb0 <_ZN12_GLOBAL__N_1L18tensor_dimension22E>:
   c9eb0:	0004 0000 0001 0000 0003 0000 0003 0000     ................
   c9ec0:	0030 0000                                   0...

000c9ec4 <_ZN12_GLOBAL__N_1L18tensor_dimension23E>:
   c9ec4:	0001 0000 0030 0000                         ....0...

000c9ecc <_ZN12_GLOBAL__N_1L18tensor_dimension24E>:
   c9ecc:	0004 0000 0010 0000 0001 0000 0001 0000     ................
   c9edc:	0030 0000                                   0...

000c9ee0 <_ZN12_GLOBAL__N_1L18tensor_dimension25E>:
   c9ee0:	0001 0000 0010 0000                         ........

000c9ee8 <_ZN12_GLOBAL__N_1L18tensor_dimension26E>:
   c9ee8:	0004 0000 0060 0000 0001 0000 0001 0000     ....`...........
   c9ef8:	0010 0000                                   ....

000c9efc <_ZN12_GLOBAL__N_1L18tensor_dimension27E>:
   c9efc:	0001 0000 0060 0000                         ....`...

000c9f04 <_ZN12_GLOBAL__N_1L18tensor_dimension28E>:
   c9f04:	0004 0000 0001 0000 0003 0000 0003 0000     ................
   c9f14:	0060 0000                                   `...

000c9f18 <_ZN12_GLOBAL__N_1L18tensor_dimension29E>:
   c9f18:	0001 0000 0060 0000                         ....`...

000c9f20 <_ZN12_GLOBAL__N_1L18tensor_dimension30E>:
   c9f20:	0004 0000 0010 0000 0001 0000 0001 0000     ................
   c9f30:	0060 0000                                   `...

000c9f34 <_ZN12_GLOBAL__N_1L18tensor_dimension31E>:
   c9f34:	0001 0000 0010 0000                         ........

000c9f3c <_ZN12_GLOBAL__N_1L18tensor_dimension32E>:
   c9f3c:	0004 0000 0060 0000 0001 0000 0001 0000     ....`...........
   c9f4c:	0010 0000                                   ....

000c9f50 <_ZN12_GLOBAL__N_1L18tensor_dimension33E>:
   c9f50:	0001 0000 0060 0000                         ....`...

000c9f58 <_ZN12_GLOBAL__N_1L18tensor_dimension34E>:
   c9f58:	0004 0000 0001 0000 0003 0000 0003 0000     ................
   c9f68:	0060 0000                                   `...

000c9f6c <_ZN12_GLOBAL__N_1L18tensor_dimension35E>:
   c9f6c:	0001 0000 0060 0000                         ....`...

000c9f74 <_ZN12_GLOBAL__N_1L18tensor_dimension36E>:
   c9f74:	0004 0000 0010 0000 0001 0000 0001 0000     ................
   c9f84:	0060 0000                                   `...

000c9f88 <_ZN12_GLOBAL__N_1L18tensor_dimension37E>:
   c9f88:	0001 0000 0010 0000                         ........

000c9f90 <_ZN12_GLOBAL__N_1L18tensor_dimension38E>:
   c9f90:	0004 0000 0060 0000 0001 0000 0001 0000     ....`...........
   c9fa0:	0010 0000                                   ....

000c9fa4 <_ZN12_GLOBAL__N_1L18tensor_dimension39E>:
   c9fa4:	0001 0000 0060 0000                         ....`...

000c9fac <_ZN12_GLOBAL__N_1L18tensor_dimension40E>:
   c9fac:	0004 0000 0020 0000 0001 0000 0001 0000     .... ...........
   c9fbc:	0060 0000                                   `...

000c9fc0 <_ZN12_GLOBAL__N_1L18tensor_dimension41E>:
   c9fc0:	0001 0000 0020 0000                         .... ...

000c9fc8 <_ZN12_GLOBAL__N_1L18tensor_dimension42E>:
   c9fc8:	0004 0000 0002 0000 0001 0000 0001 0000     ................
   c9fd8:	0020 0000                                    ...

000c9fdc <_ZN12_GLOBAL__N_1L18tensor_dimension43E>:
   c9fdc:	0001 0000 0002 0000                         ........

000c9fe4 <_ZN12_GLOBAL__N_1L18tensor_dimension44E>:
   c9fe4:	0004 0000 0001 0000 0018 0000 0018 0000     ................
   c9ff4:	0010 0000                                   ....

000c9ff8 <_ZN12_GLOBAL__N_1L18tensor_dimension45E>:
   c9ff8:	0004 0000 0001 0000 0018 0000 0018 0000     ................
   ca008:	0010 0000                                   ....

000ca00c <_ZN12_GLOBAL__N_1L18tensor_dimension46E>:
   ca00c:	0004 0000 0001 0000 0018 0000 0018 0000     ................
   ca01c:	0008 0000                                   ....

000ca020 <_ZN12_GLOBAL__N_1L18tensor_dimension47E>:
   ca020:	0004 0000 0001 0000 0018 0000 0018 0000     ................
   ca030:	0030 0000                                   0...

000ca034 <_ZN12_GLOBAL__N_1L18tensor_dimension48E>:
   ca034:	0004 0000 0001 0000 0019 0000 0019 0000     ................
   ca044:	0030 0000                                   0...

000ca048 <_ZN12_GLOBAL__N_1L18tensor_dimension49E>:
   ca048:	0004 0000 0001 0000 000c 0000 000c 0000     ................
   ca058:	0030 0000                                   0...

000ca05c <_ZN12_GLOBAL__N_1L18tensor_dimension50E>:
   ca05c:	0004 0000 0001 0000 000c 0000 000c 0000     ................
   ca06c:	0008 0000                                   ....

000ca070 <_ZN12_GLOBAL__N_1L18tensor_dimension51E>:
   ca070:	0004 0000 0001 0000 000c 0000 000c 0000     ................
   ca080:	0030 0000                                   0...

000ca084 <_ZN12_GLOBAL__N_1L18tensor_dimension52E>:
   ca084:	0004 0000 0001 0000 000c 0000 000c 0000     ................
   ca094:	0030 0000                                   0...

000ca098 <_ZN12_GLOBAL__N_1L18tensor_dimension53E>:
   ca098:	0004 0000 0001 0000 000c 0000 000c 0000     ................
   ca0a8:	0008 0000                                   ....

000ca0ac <_ZN12_GLOBAL__N_1L18tensor_dimension54E>:
   ca0ac:	0004 0000 0001 0000 000c 0000 000c 0000     ................
   ca0bc:	0008 0000                                   ....

000ca0c0 <_ZN12_GLOBAL__N_1L18tensor_dimension55E>:
   ca0c0:	0004 0000 0001 0000 000c 0000 000c 0000     ................
   ca0d0:	0030 0000                                   0...

000ca0d4 <_ZN12_GLOBAL__N_1L18tensor_dimension56E>:
   ca0d4:	0004 0000 0001 0000 000d 0000 000d 0000     ................
   ca0e4:	0030 0000                                   0...

000ca0e8 <_ZN12_GLOBAL__N_1L18tensor_dimension57E>:
   ca0e8:	0004 0000 0001 0000 0006 0000 0006 0000     ................
   ca0f8:	0030 0000                                   0...

000ca0fc <_ZN12_GLOBAL__N_1L18tensor_dimension58E>:
   ca0fc:	0004 0000 0001 0000 0006 0000 0006 0000     ................
   ca10c:	0010 0000                                   ....

000ca110 <_ZN12_GLOBAL__N_1L18tensor_dimension59E>:
   ca110:	0004 0000 0001 0000 0006 0000 0006 0000     ................
   ca120:	0060 0000                                   `...

000ca124 <_ZN12_GLOBAL__N_1L18tensor_dimension60E>:
   ca124:	0004 0000 0001 0000 0006 0000 0006 0000     ................
   ca134:	0060 0000                                   `...

000ca138 <_ZN12_GLOBAL__N_1L18tensor_dimension61E>:
   ca138:	0004 0000 0001 0000 0006 0000 0006 0000     ................
   ca148:	0010 0000                                   ....

000ca14c <_ZN12_GLOBAL__N_1L18tensor_dimension62E>:
   ca14c:	0004 0000 0001 0000 0006 0000 0006 0000     ................
   ca15c:	0010 0000                                   ....

000ca160 <_ZN12_GLOBAL__N_1L18tensor_dimension63E>:
   ca160:	0004 0000 0001 0000 0006 0000 0006 0000     ................
   ca170:	0060 0000                                   `...

000ca174 <_ZN12_GLOBAL__N_1L18tensor_dimension64E>:
   ca174:	0004 0000 0001 0000 0006 0000 0006 0000     ................
   ca184:	0060 0000                                   `...

000ca188 <_ZN12_GLOBAL__N_1L18tensor_dimension65E>:
   ca188:	0004 0000 0001 0000 0006 0000 0006 0000     ................
   ca198:	0010 0000                                   ....

000ca19c <_ZN12_GLOBAL__N_1L18tensor_dimension66E>:
   ca19c:	0004 0000 0001 0000 0006 0000 0006 0000     ................
   ca1ac:	0010 0000                                   ....

000ca1b0 <_ZN12_GLOBAL__N_1L18tensor_dimension67E>:
   ca1b0:	0004 0000 0001 0000 0006 0000 0006 0000     ................
   ca1c0:	0060 0000                                   `...

000ca1c4 <_ZN12_GLOBAL__N_1L18tensor_dimension68E>:
   ca1c4:	0004 0000 0001 0000 0006 0000 0006 0000     ................
   ca1d4:	0020 0000                                    ...

000ca1d8 <_ZN12_GLOBAL__N_1L18tensor_dimension69E>:
   ca1d8:	0004 0000 0001 0000 0006 0000 0006 0000     ................
   ca1e8:	0002 0000                                   ....

000ca1ec <_ZN12_GLOBAL__N_1L18tensor_dimension70E>:
   ca1ec:	0004 0000 0001 0000 0006 0000 0006 0000     ................
   ca1fc:	0002 0000                                   ....

000ca200 <_ZN12_GLOBAL__N_1L6quant0E>:
   ca200:	1430 000c 1148 000c 0000 0000               0...H.......

000ca20c <_ZN12_GLOBAL__N_1L6quant2E>:
   ca20c:	2308 000c 1150 000c 0000 0000               .#..P.......

000ca218 <_ZN12_GLOBAL__N_1L6quant3E>:
   ca218:	2d74 000c 1194 000c 0000 0000               t-..........

000ca224 <_ZN12_GLOBAL__N_1L6quant4E>:
   ca224:	2f08 000c 11d8 000c 0003 0000               ./..........

000ca230 <_ZN12_GLOBAL__N_1L6quant5E>:
   ca230:	2f9c 000c 121c 000c 0000 0000               ./..........

000ca23c <_ZN12_GLOBAL__N_1L6quant6E>:
   ca23c:	3030 000c 1260 000c 0000 0000               00..`.......

000ca248 <_ZN12_GLOBAL__N_1L6quant7E>:
   ca248:	305c 000c 1284 000c 0000 0000               \0..........

000ca254 <_ZN12_GLOBAL__N_1L6quant8E>:
   ca254:	3080 000c 12a8 000c 0000 0000               .0..........

000ca260 <_ZN12_GLOBAL__N_1L6quant9E>:
   ca260:	3144 000c 136c 000c 0000 0000               D1..l.......

000ca26c <_ZN12_GLOBAL__N_1L7inputs0E>:
   ca26c:	0003 0000 0000 0000 0002 0000 0003 0000     ................

000ca27c <_ZN12_GLOBAL__N_1L7inputs1E>:
   ca27c:	0003 0000 002c 0000 0004 0000 0005 0000     ....,...........

000ca28c <_ZN12_GLOBAL__N_1L7inputs2E>:
   ca28c:	0003 0000 002d 0000 0006 0000 0007 0000     ....-...........

000ca29c <_ZN12_GLOBAL__N_1L7inputs3E>:
   ca29c:	0003 0000 002e 0000 0008 0000 0009 0000     ................

000ca2ac <_ZN12_GLOBAL__N_1L7inputs4E>:
   ca2ac:	0002 0000 002f 0000 0001 0000               ..../.......

000ca2b8 <_ZN12_GLOBAL__N_1L7inputs5E>:
   ca2b8:	0003 0000 0030 0000 000a 0000 000b 0000     ....0...........

000ca2c8 <_ZN12_GLOBAL__N_1L7inputs6E>:
   ca2c8:	0003 0000 0031 0000 000c 0000 000d 0000     ....1...........

000ca2d8 <_ZN12_GLOBAL__N_1L7inputs7E>:
   ca2d8:	0003 0000 0032 0000 000e 0000 000f 0000     ....2...........

000ca2e8 <_ZN12_GLOBAL__N_1L7inputs8E>:
   ca2e8:	0003 0000 0033 0000 0010 0000 0011 0000     ....3...........

000ca2f8 <_ZN12_GLOBAL__N_1L7inputs9E>:
   ca2f8:	0003 0000 0034 0000 0012 0000 0013 0000     ....4...........

000ca308 <_ZN12_GLOBAL__N_1L7opdata0E>:
   ca308:	0001 0000 0002 0000 0002 0000 0003 0000     ................
   ca318:	0001 0000 0001 0000                         ........

000ca320 <_ZN12_GLOBAL__N_1L7opdata1E>:
   ca320:	0001 0000 0001 0000 0001 0000 0001 0000     ................
   ca330:	0003 0000 0001 0000 0001 0000               ............

000ca33c <_ZN12_GLOBAL__N_1L7opdata2E>:
   ca33c:	0001 0000 0001 0000 0001 0000 0000 0000     ................
   ca34c:	0001 0000 0001 0000                         ........

000ca354 <_ZN12_GLOBAL__N_1L7opdata3E>:
   ca354:	0001 0000 0001 0000 0001 0000 0003 0000     ................
   ca364:	0001 0000 0001 0000                         ........

000ca36c <_ZN12_GLOBAL__N_1L7opdata5E>:
   ca36c:	0002 0000 0002 0000 0002 0000 0001 0000     ................
   ca37c:	0003 0000 0001 0000 0001 0000               ............

000ca388 <_ZN12_GLOBAL__N_1L7opdata6E>:
   ca388:	0001 0000 0001 0000 0001 0000 0000 0000     ................
   ca398:	0001 0000 0001 0000                         ........

000ca3a0 <_ZN12_GLOBAL__N_1L7opdata7E>:
   ca3a0:	0001 0000 0001 0000 0001 0000 0003 0000     ................
   ca3b0:	0001 0000 0001 0000                         ........

000ca3b8 <_ZN12_GLOBAL__N_1L7opdata8E>:
   ca3b8:	0001 0000 0001 0000 0001 0000 0001 0000     ................
   ca3c8:	0003 0000 0001 0000 0001 0000               ............

000ca3d4 <_ZN12_GLOBAL__N_1L7opdata9E>:
   ca3d4:	0001 0000 0001 0000 0001 0000 0000 0000     ................
   ca3e4:	0001 0000 0001 0000                         ........

000ca3ec <_ZN12_GLOBAL__N_1L7quant10E>:
   ca3ec:	36b0 000c 1438 000c 0003 0000               .6..8.......

000ca3f8 <_ZN12_GLOBAL__N_1L7quant11E>:
   ca3f8:	3774 000c 14fc 000c 0000 0000               t7..........

000ca404 <_ZN12_GLOBAL__N_1L7quant12E>:
   ca404:	3838 000c 15c0 000c 0000 0000               88..........

000ca410 <_ZN12_GLOBAL__N_1L7quant13E>:
   ca410:	385c 000c 15e4 000c 0000 0000               \8..........

000ca41c <_ZN12_GLOBAL__N_1L7quant14E>:
   ca41c:	3880 000c 1608 000c 0000 0000               .8..........

000ca428 <_ZN12_GLOBAL__N_1L7quant15E>:
   ca428:	3944 000c 16cc 000c 0000 0000               D9..........

000ca434 <_ZN12_GLOBAL__N_1L7quant16E>:
   ca434:	3a08 000c 1790 000c 0003 0000               .:..........

000ca440 <_ZN12_GLOBAL__N_1L7quant17E>:
   ca440:	3acc 000c 1854 000c 0000 0000               .:..T.......

000ca44c <_ZN12_GLOBAL__N_1L7quant18E>:
   ca44c:	3b90 000c 1918 000c 0000 0000               .;..........

000ca458 <_ZN12_GLOBAL__N_1L7quant19E>:
   ca458:	3bb4 000c 193c 000c 0000 0000               .;..<.......

000ca464 <_ZN12_GLOBAL__N_1L7quant20E>:
   ca464:	3bd8 000c 1960 000c 0000 0000               .;..`.......

000ca470 <_ZN12_GLOBAL__N_1L7quant21E>:
   ca470:	3c9c 000c 1a24 000c 0000 0000               .<..$.......

000ca47c <_ZN12_GLOBAL__N_1L7quant22E>:
   ca47c:	3d60 000c 1ae8 000c 0003 0000               `=..........

000ca488 <_ZN12_GLOBAL__N_1L7quant23E>:
   ca488:	3e24 000c 1bac 000c 0000 0000               $>..........

000ca494 <_ZN12_GLOBAL__N_1L7quant24E>:
   ca494:	3ee8 000c 1c70 000c 0000 0000               .>..p.......

000ca4a0 <_ZN12_GLOBAL__N_1L7quant25E>:
   ca4a0:	3f2c 000c 1cb4 000c 0000 0000               ,?..........

000ca4ac <_ZN12_GLOBAL__N_1L7quant26E>:
   ca4ac:	3f70 000c 1cf8 000c 0000 0000               p?..........

000ca4b8 <_ZN12_GLOBAL__N_1L7quant27E>:
   ca4b8:	40f4 000c 1e7c 000c 0000 0000               .@..|.......

000ca4c4 <_ZN12_GLOBAL__N_1L7quant28E>:
   ca4c4:	4278 000c 2000 000c 0003 0000               xB... ......

000ca4d0 <_ZN12_GLOBAL__N_1L7quant29E>:
   ca4d0:	43fc 000c 2184 000c 0000 0000               .C...!......

000ca4dc <_ZN12_GLOBAL__N_1L7quant30E>:
   ca4dc:	4580 000c 234c 000c 0000 0000               .E..L#......

000ca4e8 <_ZN12_GLOBAL__N_1L7quant31E>:
   ca4e8:	45c4 000c 2390 000c 0000 0000               .E...#......

000ca4f4 <_ZN12_GLOBAL__N_1L7quant32E>:
   ca4f4:	4608 000c 23d4 000c 0000 0000               .F...#......

000ca500 <_ZN12_GLOBAL__N_1L7quant33E>:
   ca500:	478c 000c 2558 000c 0000 0000               .G..X%......

000ca50c <_ZN12_GLOBAL__N_1L7quant34E>:
   ca50c:	4910 000c 26dc 000c 0003 0000               .I...&......

000ca518 <_ZN12_GLOBAL__N_1L7quant35E>:
   ca518:	4a94 000c 2860 000c 0000 0000               .J..`(......

000ca524 <_ZN12_GLOBAL__N_1L7quant36E>:
   ca524:	4c18 000c 29e4 000c 0000 0000               .L...)......

000ca530 <_ZN12_GLOBAL__N_1L7quant37E>:
   ca530:	4c5c 000c 2a28 000c 0000 0000               \L..(*......

000ca53c <_ZN12_GLOBAL__N_1L7quant38E>:
   ca53c:	4ca0 000c 2a6c 000c 0000 0000               .L..l*......

000ca548 <_ZN12_GLOBAL__N_1L7quant39E>:
   ca548:	4e24 000c 2bf0 000c 0000 0000               $N...+......

000ca554 <_ZN12_GLOBAL__N_1L7quant40E>:
   ca554:	4fa8 000c 2db8 000c 0000 0000               .O...-......

000ca560 <_ZN12_GLOBAL__N_1L7quant41E>:
   ca560:	502c 000c 2e3c 000c 0000 0000               ,P..<.......

000ca56c <_ZN12_GLOBAL__N_1L7quant42E>:
   ca56c:	50b0 000c 2ec0 000c 0000 0000               .P..........

000ca578 <_ZN12_GLOBAL__N_1L7quant43E>:
   ca578:	50bc 000c 2ecc 000c 0000 0000               .P..........

000ca584 <_ZN12_GLOBAL__N_1L7quant44E>:
   ca584:	50c8 000c 2ed8 000c 0000 0000               .P..........

000ca590 <_ZN12_GLOBAL__N_1L7quant45E>:
   ca590:	50d0 000c 2ee0 000c 0000 0000               .P..........

000ca59c <_ZN12_GLOBAL__N_1L7quant46E>:
   ca59c:	50d8 000c 2ee8 000c 0000 0000               .P..........

000ca5a8 <_ZN12_GLOBAL__N_1L7quant47E>:
   ca5a8:	50e0 000c 2ef0 000c 0000 0000               .P..........

000ca5b4 <_ZN12_GLOBAL__N_1L7quant48E>:
   ca5b4:	50e8 000c 2ef8 000c 0000 0000               .P..........

000ca5c0 <_ZN12_GLOBAL__N_1L7quant49E>:
   ca5c0:	50f0 000c 2f00 000c 0000 0000               .P.../......

000ca5cc <_ZN12_GLOBAL__N_1L7quant50E>:
   ca5cc:	50f8 000c 2f4c 000c 0000 0000               .P..L/......

000ca5d8 <_ZN12_GLOBAL__N_1L7quant51E>:
   ca5d8:	5100 000c 2f54 000c 0000 0000               .Q..T/......

000ca5e4 <_ZN12_GLOBAL__N_1L7quant52E>:
   ca5e4:	5108 000c 2f5c 000c 0000 0000               .Q..\/......

000ca5f0 <_ZN12_GLOBAL__N_1L7quant53E>:
   ca5f0:	5110 000c 2f64 000c 0000 0000               .Q..d/......

000ca5fc <_ZN12_GLOBAL__N_1L7quant54E>:
   ca5fc:	5118 000c 2f6c 000c 0000 0000               .Q..l/......

000ca608 <_ZN12_GLOBAL__N_1L7quant55E>:
   ca608:	5120 000c 2f74 000c 0000 0000                Q..t/......

000ca614 <_ZN12_GLOBAL__N_1L7quant56E>:
   ca614:	5128 000c 2f7c 000c 0000 0000               (Q..|/......

000ca620 <_ZN12_GLOBAL__N_1L7quant57E>:
   ca620:	5130 000c 2f84 000c 0000 0000               0Q.../......

000ca62c <_ZN12_GLOBAL__N_1L7quant58E>:
   ca62c:	5138 000c 2f8c 000c 0000 0000               8Q.../......

000ca638 <_ZN12_GLOBAL__N_1L7quant59E>:
   ca638:	5140 000c 2f94 000c 0000 0000               @Q.../......

000ca644 <_ZN12_GLOBAL__N_1L7quant60E>:
   ca644:	5148 000c 2fe0 000c 0000 0000               HQ.../......

000ca650 <_ZN12_GLOBAL__N_1L7quant61E>:
   ca650:	5150 000c 2fe8 000c 0000 0000               PQ.../......

000ca65c <_ZN12_GLOBAL__N_1L7quant62E>:
   ca65c:	5158 000c 2ff0 000c 0000 0000               XQ.../......

000ca668 <_ZN12_GLOBAL__N_1L7quant63E>:
   ca668:	5160 000c 2ff8 000c 0000 0000               `Q.../......

000ca674 <_ZN12_GLOBAL__N_1L7quant64E>:
   ca674:	5168 000c 3000 000c 0000 0000               hQ...0......

000ca680 <_ZN12_GLOBAL__N_1L7quant65E>:
   ca680:	5170 000c 3008 000c 0000 0000               pQ...0......

000ca68c <_ZN12_GLOBAL__N_1L7quant66E>:
   ca68c:	5178 000c 3010 000c 0000 0000               xQ...0......

000ca698 <_ZN12_GLOBAL__N_1L7quant67E>:
   ca698:	5180 000c 3018 000c 0000 0000               .Q...0......

000ca6a4 <_ZN12_GLOBAL__N_1L7quant68E>:
   ca6a4:	5188 000c 3020 000c 0000 0000               .Q.. 0......

000ca6b0 <_ZN12_GLOBAL__N_1L7quant69E>:
   ca6b0:	5190 000c 3028 000c 0000 0000               .Q..(0......

000ca6bc <_ZN12_GLOBAL__N_1L7quant70E>:
   ca6bc:	5198 000c 3054 000c 0000 0000               .Q..T0......

000ca6c8 <_ZN12_GLOBAL__N_1L8inputs10E>:
   ca6c8:	0002 0000 0032 0000 0035 0000               ....2...5...

000ca6d4 <_ZN12_GLOBAL__N_1L8inputs11E>:
   ca6d4:	0003 0000 0036 0000 0014 0000 0015 0000     ....6...........

000ca6e4 <_ZN12_GLOBAL__N_1L8inputs12E>:
   ca6e4:	0002 0000 0037 0000 0001 0000               ....7.......

000ca6f0 <_ZN12_GLOBAL__N_1L8inputs13E>:
   ca6f0:	0003 0000 0038 0000 0016 0000 0017 0000     ....8...........

000ca700 <_ZN12_GLOBAL__N_1L8inputs14E>:
   ca700:	0003 0000 0039 0000 0018 0000 0019 0000     ....9...........

000ca710 <_ZN12_GLOBAL__N_1L8inputs15E>:
   ca710:	0003 0000 003a 0000 001a 0000 001b 0000     ....:...........

000ca720 <_ZN12_GLOBAL__N_1L8inputs16E>:
   ca720:	0003 0000 003b 0000 001c 0000 001d 0000     ....;...........

000ca730 <_ZN12_GLOBAL__N_1L8inputs17E>:
   ca730:	0003 0000 003c 0000 001e 0000 001f 0000     ....<...........

000ca740 <_ZN12_GLOBAL__N_1L8inputs18E>:
   ca740:	0002 0000 003a 0000 003d 0000               ....:...=...

000ca74c <_ZN12_GLOBAL__N_1L8inputs19E>:
   ca74c:	0003 0000 003e 0000 0020 0000 0021 0000     ....>... ...!...

000ca75c <_ZN12_GLOBAL__N_1L8inputs20E>:
   ca75c:	0003 0000 003f 0000 0022 0000 0023 0000     ....?..."...#...

000ca76c <_ZN12_GLOBAL__N_1L8inputs21E>:
   ca76c:	0003 0000 0040 0000 0024 0000 0025 0000     ....@...$...%...

000ca77c <_ZN12_GLOBAL__N_1L8inputs22E>:
   ca77c:	0002 0000 003e 0000 0041 0000               ....>...A...

000ca788 <_ZN12_GLOBAL__N_1L8inputs23E>:
   ca788:	0003 0000 0042 0000 0026 0000 0027 0000     ....B...&...'...

000ca798 <_ZN12_GLOBAL__N_1L8inputs24E>:
   ca798:	0003 0000 0043 0000 0028 0000 0029 0000     ....C...(...)...

000ca7a8 <_ZN12_GLOBAL__N_1L8inputs25E>:
   ca7a8:	0003 0000 0044 0000 002a 0000 002b 0000     ....D...*...+...

000ca7b8 <_ZN12_GLOBAL__N_1L8inputs26E>:
   ca7b8:	0001 0000 0045 0000                         ....E...

000ca7c0 <_ZN12_GLOBAL__N_1L8nodeDataE>:
   ca7c0:	a26c 000c aaac 000c a308 000c 0000 0000     l...............
   ca7d0:	a27c 000c aab4 000c a320 000c 0001 0000     |....... .......
   ca7e0:	a28c 000c aabc 000c a33c 000c 0000 0000     ........<.......
   ca7f0:	a29c 000c aac4 000c a354 000c 0000 0000     ........T.......
   ca800:	a2ac 000c aacc 000c 0000 0000 0002 0000     ................
   ca810:	a2b8 000c aad4 000c a36c 000c 0001 0000     ........l.......
   ca820:	a2c8 000c aadc 000c a388 000c 0000 0000     ................
   ca830:	a2d8 000c aae4 000c a3a0 000c 0000 0000     ................
   ca840:	a2e8 000c aaec 000c a3b8 000c 0001 0000     ................
   ca850:	a2f8 000c aaf4 000c a3d4 000c 0000 0000     ................
   ca860:	a6c8 000c aafc 000c a970 000c 0003 0000     ........p.......
   ca870:	a6d4 000c ab04 000c a974 000c 0000 0000     ........t.......
   ca880:	a6e4 000c ab0c 000c 0000 0000 0002 0000     ................
   ca890:	a6f0 000c ab14 000c a98c 000c 0001 0000     ................
   ca8a0:	a700 000c ab1c 000c a9a8 000c 0000 0000     ................
   ca8b0:	a710 000c ab24 000c a9c0 000c 0000 0000     ....$...........
   ca8c0:	a720 000c ab2c 000c a9d8 000c 0001 0000      ...,...........
   ca8d0:	a730 000c ab34 000c a9f4 000c 0000 0000     0...4...........
   ca8e0:	a740 000c ab3c 000c aa0c 000c 0003 0000     @...<...........
   ca8f0:	a74c 000c ab44 000c aa10 000c 0000 0000     L...D...........
   ca900:	a75c 000c ab4c 000c aa28 000c 0001 0000     \...L...(.......
   ca910:	a76c 000c ab54 000c aa44 000c 0000 0000     l...T...D.......
   ca920:	a77c 000c ab5c 000c aa5c 000c 0003 0000     |...\...\.......
   ca930:	a788 000c ab64 000c aa60 000c 0000 0000     ....d...`.......
   ca940:	a798 000c ab6c 000c aa78 000c 0000 0000     ....l...x.......
   ca950:	a7a8 000c ab74 000c aa90 000c 0000 0000     ....t...........
   ca960:	a7b8 000c ab7c 000c aaa8 000c 0004 0000     ....|...........

000ca970 <_ZN12_GLOBAL__N_1L8opdata10E>:
   ca970:	0000 0000                                   ....

000ca974 <_ZN12_GLOBAL__N_1L8opdata11E>:
   ca974:	0001 0000 0001 0000 0001 0000 0003 0000     ................
   ca984:	0001 0000 0001 0000                         ........

000ca98c <_ZN12_GLOBAL__N_1L8opdata13E>:
   ca98c:	0002 0000 0002 0000 0002 0000 0001 0000     ................
   ca99c:	0003 0000 0001 0000 0001 0000               ............

000ca9a8 <_ZN12_GLOBAL__N_1L8opdata14E>:
   ca9a8:	0001 0000 0001 0000 0001 0000 0000 0000     ................
   ca9b8:	0001 0000 0001 0000                         ........

000ca9c0 <_ZN12_GLOBAL__N_1L8opdata15E>:
   ca9c0:	0001 0000 0001 0000 0001 0000 0003 0000     ................
   ca9d0:	0001 0000 0001 0000                         ........

000ca9d8 <_ZN12_GLOBAL__N_1L8opdata16E>:
   ca9d8:	0001 0000 0001 0000 0001 0000 0001 0000     ................
   ca9e8:	0003 0000 0001 0000 0001 0000               ............

000ca9f4 <_ZN12_GLOBAL__N_1L8opdata17E>:
   ca9f4:	0001 0000 0001 0000 0001 0000 0000 0000     ................
   caa04:	0001 0000 0001 0000                         ........

000caa0c <_ZN12_GLOBAL__N_1L8opdata18E>:
   caa0c:	0000 0000                                   ....

000caa10 <_ZN12_GLOBAL__N_1L8opdata19E>:
   caa10:	0001 0000 0001 0000 0001 0000 0003 0000     ................
   caa20:	0001 0000 0001 0000                         ........

000caa28 <_ZN12_GLOBAL__N_1L8opdata20E>:
   caa28:	0001 0000 0001 0000 0001 0000 0001 0000     ................
   caa38:	0003 0000 0001 0000 0001 0000               ............

000caa44 <_ZN12_GLOBAL__N_1L8opdata21E>:
   caa44:	0001 0000 0001 0000 0001 0000 0000 0000     ................
   caa54:	0001 0000 0001 0000                         ........

000caa5c <_ZN12_GLOBAL__N_1L8opdata22E>:
   caa5c:	0000 0000                                   ....

000caa60 <_ZN12_GLOBAL__N_1L8opdata23E>:
   caa60:	0001 0000 0001 0000 0001 0000 0003 0000     ................
   caa70:	0001 0000 0001 0000                         ........

000caa78 <_ZN12_GLOBAL__N_1L8opdata24E>:
   caa78:	0002 0000 0001 0000 0001 0000 0001 0000     ................
   caa88:	0001 0000 0001 0000                         ........

000caa90 <_ZN12_GLOBAL__N_1L8opdata25E>:
   caa90:	0002 0000 0001 0000 0001 0000 0000 0000     ................
   caaa0:	0001 0000 0001 0000                         ........

000caaa8 <_ZN12_GLOBAL__N_1L8opdata26E>:
   caaa8:	0000 3f80                                   ...?

000caaac <_ZN12_GLOBAL__N_1L8outputs0E>:
   caaac:	0001 0000 002c 0000                         ....,...

000caab4 <_ZN12_GLOBAL__N_1L8outputs1E>:
   caab4:	0001 0000 002d 0000                         ....-...

000caabc <_ZN12_GLOBAL__N_1L8outputs2E>:
   caabc:	0001 0000 002e 0000                         ........

000caac4 <_ZN12_GLOBAL__N_1L8outputs3E>:
   caac4:	0001 0000 002f 0000                         ..../...

000caacc <_ZN12_GLOBAL__N_1L8outputs4E>:
   caacc:	0001 0000 0030 0000                         ....0...

000caad4 <_ZN12_GLOBAL__N_1L8outputs5E>:
   caad4:	0001 0000 0031 0000                         ....1...

000caadc <_ZN12_GLOBAL__N_1L8outputs6E>:
   caadc:	0001 0000 0032 0000                         ....2...

000caae4 <_ZN12_GLOBAL__N_1L8outputs7E>:
   caae4:	0001 0000 0033 0000                         ....3...

000caaec <_ZN12_GLOBAL__N_1L8outputs8E>:
   caaec:	0001 0000 0034 0000                         ....4...

000caaf4 <_ZN12_GLOBAL__N_1L8outputs9E>:
   caaf4:	0001 0000 0035 0000                         ....5...

000caafc <_ZN12_GLOBAL__N_1L9outputs10E>:
   caafc:	0001 0000 0036 0000                         ....6...

000cab04 <_ZN12_GLOBAL__N_1L9outputs11E>:
   cab04:	0001 0000 0037 0000                         ....7...

000cab0c <_ZN12_GLOBAL__N_1L9outputs12E>:
   cab0c:	0001 0000 0038 0000                         ....8...

000cab14 <_ZN12_GLOBAL__N_1L9outputs13E>:
   cab14:	0001 0000 0039 0000                         ....9...

000cab1c <_ZN12_GLOBAL__N_1L9outputs14E>:
   cab1c:	0001 0000 003a 0000                         ....:...

000cab24 <_ZN12_GLOBAL__N_1L9outputs15E>:
   cab24:	0001 0000 003b 0000                         ....;...

000cab2c <_ZN12_GLOBAL__N_1L9outputs16E>:
   cab2c:	0001 0000 003c 0000                         ....<...

000cab34 <_ZN12_GLOBAL__N_1L9outputs17E>:
   cab34:	0001 0000 003d 0000                         ....=...

000cab3c <_ZN12_GLOBAL__N_1L9outputs18E>:
   cab3c:	0001 0000 003e 0000                         ....>...

000cab44 <_ZN12_GLOBAL__N_1L9outputs19E>:
   cab44:	0001 0000 003f 0000                         ....?...

000cab4c <_ZN12_GLOBAL__N_1L9outputs20E>:
   cab4c:	0001 0000 0040 0000                         ....@...

000cab54 <_ZN12_GLOBAL__N_1L9outputs21E>:
   cab54:	0001 0000 0041 0000                         ....A...

000cab5c <_ZN12_GLOBAL__N_1L9outputs22E>:
   cab5c:	0001 0000 0042 0000                         ....B...

000cab64 <_ZN12_GLOBAL__N_1L9outputs23E>:
   cab64:	0001 0000 0043 0000                         ....C...

000cab6c <_ZN12_GLOBAL__N_1L9outputs24E>:
   cab6c:	0001 0000 0044 0000                         ....D...

000cab74 <_ZN12_GLOBAL__N_1L9outputs25E>:
   cab74:	0001 0000 0045 0000                         ....E...

000cab7c <_ZN12_GLOBAL__N_1L9outputs26E>:
   cab7c:	0001 0000 0046 0000 6625 6500 7078 6e6f     ....F...%f.expon
   cab8c:	6e65 2074 3d3e 3020 4900 746e 6765 7265     ent >= 0.Integer
   cab9c:	7954 6570 6720 6d65 6c6d 776f 3a70 523a     Type gemmlowp::R
   cabac:	756f 646e 6e69 4467 7669 6469 4265 5079     oundingDivideByP
   cabbc:	544f 4928 746e 6765 7265 7954 6570 202c     OT(IntegerType, 
   cabcc:	6e69 2974 5b20 6977 6874 4920 746e 6765     int) [with Integ
   cabdc:	7265 7954 6570 3d20 6c20 6e6f 2067 6e69     erType = long in
   cabec:	5d74 2f00 6f68 656d 6b2f 6c75 7574 2f6c     t]./home/kultul/
   cabfc:	6f43 6564 775f 726f 736b 6170 6563 502f     Code_workspace/P
   cac0c:	7261 6974 6c63 5f65 6f49 572f 6c61 796c     article_Io/Wally
   cac1c:	465f 4d4f 4d4f 2f4c 696c 2f62 6157 6c6c     _FOMOML/lib/Wall
   cac2c:	5f79 6168 646e 6973 6e67 6554 7473 6d5f     y_handsignTest_m
   cac3c:	6c75 6974 6c70 4f65 6a62 6365 7374 695f     ultipleObjects_i
   cac4c:	666e 7265 6e65 6963 676e 732f 6372 652f     nferencing/src/e
   cac5c:	6764 2d65 6d69 7570 736c 2d65 6473 2f6b     dge-impulse-sdk/
   cac6c:	6874 7269 5f64 6170 7472 2f79 6567 6d6d     third_party/gemm
   cac7c:	6f6c 7077 662f 7869 6465 6f70 6e69 2f74     lowp/fixedpoint/
   cac8c:	6966 6578 7064 696f 746e 682e 6500 7078     fixedpoint.h.exp
   cac9c:	6e6f 6e65 2074 3d3c 3320 0031 682f 6d6f     onent <= 31./hom
   cacac:	2f65 756b 746c 6c75 432f 646f 5f65 6f77     e/kultul/Code_wo
   cacbc:	6b72 7073 6361 2f65 6150 7472 6369 656c     rkspace/Particle
   caccc:	495f 2f6f 6157 6c6c 5f79 4f46 4f4d 4c4d     _Io/Wally_FOMOML
   cacdc:	6c2f 6269 572f 6c61 796c 685f 6e61 7364     /lib/Wally_hands
   cacec:	6769 546e 7365 5f74 756d 746c 7069 656c     ignTest_multiple
   cacfc:	624f 656a 7463 5f73 6e69 6566 6572 636e     Objects_inferenc
   cad0c:	6e69 2f67 7273 2f63 6465 6567 692d 706d     ing/src/edge-imp
   cad1c:	6c75 6573 732d 6b64 742f 6e65 6f73 6672     ulse-sdk/tensorf
   cad2c:	6f6c 2f77 696c 6574 6d2f 6369 6f72 6b2f     low/lite/micro/k
   cad3c:	7265 656e 736c 642f 7065 6874 6977 6573     ernels/depthwise
   cad4c:	635f 6e6f 2e76 7063 0070 7325 253a 2064     _conv.cpp.%s:%d 
   cad5c:	7325 7720 7361 6e20 746f 7420 7572 2e65     %s was not true.
   cad6c:	6900 706e 7475 2120 203d 756e 6c6c 7470     .input != nullpt
   cad7c:	0072 6966 746c 7265 2120 203d 756e 6c6c     r.filter != null
   cad8c:	7470 0072 756f 7074 7475 2120 203d 756e     ptr.output != nu
   cad9c:	6c6c 7470 0072 7325 253a 2064 7325 2120     llptr.%s:%d %s !
   cadac:	203d 7325 2820 6425 2120 203d 6425 0029     = %s (%d != %d).
   cadbc:	546b 4c66 7469 4165 6666 6e69 5165 6175     kTfLiteAffineQua
   cadcc:	746e 7a69 7461 6f69 006e 6966 746c 7265     ntization.filter
   caddc:	3e2d 7571 6e61 6974 617a 6974 6e6f 742e     ->quantization.t
   cadec:	7079 0065 6661 6966 656e 715f 6175 746e     ype.affine_quant
   cadfc:	7a69 7461 6f69 006e 6661 6966 656e 715f     ization.affine_q
   cae0c:	6175 746e 7a69 7461 6f69 2d6e 733e 6163     uantization->sca
   cae1c:	656c 6100 6666 6e69 5f65 7571 6e61 6974     le.affine_quanti
   cae2c:	617a 6974 6e6f 3e2d 657a 6f72 705f 696f     zation->zero_poi
   cae3c:	746e 6100 6666 6e69 5f65 7571 6e61 6974     nt.affine_quanti
   cae4c:	617a 6974 6e6f 3e2d 6373 6c61 2d65 733e     zation->scale->s
   cae5c:	7a69 2065 3d3d 3120 7c20 207c 6661 6966     ize == 1 || affi
   cae6c:	656e 715f 6175 746e 7a69 7461 6f69 2d6e     ne_quantization-
   cae7c:	733e 6163 656c 3e2d 6973 657a 3d20 203d     >scale->size == 
   cae8c:	6966 746c 7265 3e2d 6964 736d 3e2d 6164     filter->dims->da
   cae9c:	6174 6b5b 6544 7470 7768 7369 4365 6e6f     ta[kDepthwiseCon
   caeac:	5176 6175 746e 7a69 6465 6944 656d 736e     vQuantizedDimens
   caebc:	6f69 5d6e 6100 6666 6e69 5f65 7571 6e61     ion].affine_quan
   caecc:	6974 617a 6974 6e6f 3e2d 657a 6f72 705f     tization->zero_p
   caedc:	696f 746e 3e2d 6973 657a 6100 6666 6e69     oint->size.affin
   caeec:	5f65 7571 6e61 6974 617a 6974 6e6f 3e2d     e_quantization->
   caefc:	6373 6c61 2d65 733e 7a69 0065 7954 6570     scale->size.Type
   caf0c:	2520 2073 2528 2964 6e20 746f 7320 7075      %s (%d) not sup
   caf1c:	6f70 7472 6465 002e 8b1d 000b 0000 0000     ported..........
   caf2c:	900d 000b 92c1 000b 0000 0000 0000 0000     ................
	...
   caf44:	682f 6d6f 2f65 756b 746c 6c75 432f 646f     /home/kultul/Cod
   caf54:	5f65 6f77 6b72 7073 6361 2f65 6150 7472     e_workspace/Part
   caf64:	6369 656c 495f 2f6f 6157 6c6c 5f79 4f46     icle_Io/Wally_FO
   caf74:	4f4d 4c4d 6c2f 6269 572f 6c61 796c 685f     MOML/lib/Wally_h
   caf84:	6e61 7364 6769 546e 7365 5f74 756d 746c     andsignTest_mult
   caf94:	7069 656c 624f 656a 7463 5f73 6e69 6566     ipleObjects_infe
   cafa4:	6572 636e 6e69 2f67 7273 2f63 6465 6567     rencing/src/edge
   cafb4:	692d 706d 6c75 6573 732d 6b64 742f 6e65     -impulse-sdk/ten
   cafc4:	6f73 6672 6f6c 2f77 696c 6574 6d2f 6369     sorflow/lite/mic
   cafd4:	6f72 6b2f 7265 656e 736c 642f 7065 6874     ro/kernels/depth
   cafe4:	6977 6573 635f 6e6f 5f76 6f63 6d6d 6e6f     wise_conv_common
   caff4:	632e 7070 6800 7361 625f 6169 2073 7c7c     .cpp.has_bias ||
   cb004:	6e20 646f 2d65 693e 706e 7475 2d73 733e      node->inputs->s
   cb014:	7a69 2065 3d3d 3220 6e00 646f 2d65 6f3e     ize == 2.node->o
   cb024:	7475 7570 7374 3e2d 6973 657a 0000 0000     utputs->size....

000cb034 <_ZN6tflite24kDepthwiseConvBiasTensorE>:
   cb034:	0002 0000                                   ....

000cb038 <_ZN6tflite25kDepthwiseConvInputTensorE>:
   cb038:	0000 0000                                   ....

000cb03c <_ZN6tflite26kDepthwiseConvOutputTensorE>:
   cb03c:	0000 0000                                   ....

000cb040 <_ZN6tflite27kDepthwiseConvWeightsTensorE>:
   cb040:	0001 0000                                   ....

000cb044 <_ZN6tflite32kDepthwiseConvQuantizedDimensionE>:
   cb044:	0003 0000 b6dd 000b 0000 0000 b6f1 000b     ................
   cb054:	964d 000b 0000 0000 0000 0000 0000 0000     M...............
   cb064:	0000 0000 682f 6d6f 2f65 756b 746c 6c75     ..../home/kultul
   cb074:	432f 646f 5f65 6f77 6b72 7073 6361 2f65     /Code_workspace/
   cb084:	6150 7472 6369 656c 495f 2f6f 6157 6c6c     Particle_Io/Wall
   cb094:	5f79 4f46 4f4d 4c4d 6c2f 6269 572f 6c61     y_FOMOML/lib/Wal
   cb0a4:	796c 685f 6e61 7364 6769 546e 7365 5f74     ly_handsignTest_
   cb0b4:	756d 746c 7069 656c 624f 656a 7463 5f73     multipleObjects_
   cb0c4:	6e69 6566 6572 636e 6e69 2f67 7273 2f63     inferencing/src/
   cb0d4:	6465 6567 692d 706d 6c75 6573 732d 6b64     edge-impulse-sdk
   cb0e4:	742f 6e65 6f73 6672 6f6c 2f77 696c 6574     /tensorflow/lite
   cb0f4:	6d2f 6369 6f72 6b2f 7265 656e 736c 702f     /micro/kernels/p
   cb104:	6461 632e 7070 4e00 6d75 6e49 7570 7374     ad.cpp.NumInputs
   cb114:	6e28 646f 2965 3d20 203d 2032 7c7c 4e20     (node) == 2 || N
   cb124:	6d75 6e49 7570 7374 6e28 646f 2965 3d20     umInputs(node) =
   cb134:	203d 0033 754e 4f6d 7475 7570 7374 6e28     = 3.NumOutputs(n
   cb144:	646f 2965 7000 6461 6964 676e 2073 3d21     ode).paddings !=
   cb154:	6e20 6c75 706c 7274 6f00 7475 7570 2d74      nullptr.output-
   cb164:	743e 7079 0065 6e69 7570 2d74 743e 7079     >type.input->typ
   cb174:	0065 754e 446d 6d69 6e65 6973 6e6f 2873     e.NumDimensions(
   cb184:	6e69 7570 2974 3c20 203d 6572 6566 6572     input) <= refere
   cb194:	636e 5f65 706f 3a73 503a 6461 654b 6e72     nce_ops::PadKern
   cb1a4:	6c65 614d 4478 6d69 6e65 6973 6e6f 6f43     elMaxDimensionCo
   cb1b4:	6e75 2874 0029 6f63 736e 6174 746e 765f     unt().constant_v
   cb1c4:	6c61 6575 2d73 743e 7079 0065 754e 456d     alues->type.NumE
   cb1d4:	656c 656d 746e 2873 6f63 736e 6174 746e     lements(constant
   cb1e4:	765f 6c61 6575 2973 6f00 7475 7570 2d74     _values).output-
   cb1f4:	643e 6d69 2d73 733e 7a69 2065 202a 0032     >dims->size * 2.
   cb204:	6547 5474 6e65 6f73 5372 6168 6570 7028     GetTensorShape(p
   cb214:	6461 6964 676e 2973 462e 616c 5374 7a69     addings).FlatSiz
   cb224:	2865 0029 7349 6f43 736e 6174 746e 6554     e().IsConstantTe
   cb234:	736e 726f 7028 6461 6964 676e 2973 6500     nsor(paddings).e
   cb244:	7078 6365 6574 5f64 6964 006d 756f 7074     xpected_dim.outp
   cb254:	7475 645f 6d69 6f00 7475 7570 2d74 703e     ut_dim.output->p
   cb264:	7261 6d61 2e73 657a 6f72 705f 696f 746e     arams.zero_point
   cb274:	3e20 203d 7473 3a64 6e3a 6d75 7265 6369      >= std::numeric
   cb284:	6c5f 6d69 7469 3c73 6975 746e 5f38 3e74     _limits<uint8_t>
   cb294:	3a3a 696d 286e 0029 756f 7074 7475 3e2d     ::min().output->
   cb2a4:	6170 6172 736d 7a2e 7265 5f6f 6f70 6e69     params.zero_poin
   cb2b4:	2074 3d3c 7320 6474 3a3a 756e 656d 6972     t <= std::numeri
   cb2c4:	5f63 696c 696d 7374 753c 6e69 3874 745f     c_limits<uint8_t
   cb2d4:	3a3e 6d3a 7861 2928 6f00 7475 7570 2d74     >::max().output-
   cb2e4:	703e 7261 6d61 2e73 657a 6f72 705f 696f     >params.zero_poi
   cb2f4:	746e 3e20 203d 7473 3a64 6e3a 6d75 7265     nt >= std::numer
   cb304:	6369 6c5f 6d69 7469 3c73 6e69 3874 745f     ic_limits<int8_t
   cb314:	3a3e 6d3a 6e69 2928 6f00 7475 7570 2d74     >::min().output-
   cb324:	703e 7261 6d61 2e73 657a 6f72 705f 696f     >params.zero_poi
   cb334:	746e 3c20 203d 7473 3a64 6e3a 6d75 7265     nt <= std::numer
   cb344:	6369 6c5f 6d69 7469 3c73 6e69 3874 745f     ic_limits<int8_t
   cb354:	3a3e 6d3a 7861 2928 6300 6e6f 7473 6e61     >::max().constan
   cb364:	5f74 6176 756c 7365 3e2d 6170 6172 736d     t_values->params
   cb374:	7a2e 7265 5f6f 6f70 6e69 0074 756f 7074     .zero_point.outp
   cb384:	7475 3e2d 6170 6172 736d 7a2e 7265 5f6f     ut->params.zero_
   cb394:	6f70 6e69 0074 7473 7461 6369 635f 7361     point.static_cas
   cb3a4:	3c74 6f64 6275 656c 283e 6f63 736e 6174     t<double>(consta
   cb3b4:	746e 765f 6c61 6575 2d73 703e 7261 6d61     nt_values->param
   cb3c4:	2e73 6373 6c61 2965 7300 6174 6974 5f63     s.scale).static_
   cb3d4:	6163 7473 643c 756f 6c62 3e65 6f28 7475     cast<double>(out
   cb3e4:	7570 2d74 703e 7261 6d61 2e73 6373 6c61     put->params.scal
   cb3f4:	2965 5400 7079 2065 7325 6e20 746f 6320     e).Type %s not c
   cb404:	7275 6572 746e 796c 7320 7075 6f70 7472     urrently support
   cb414:	6465 6220 2079 6150 2e64 0000 9745 000b     ed by Pad...E...
   cb424:	0000 0000 9759 000b a0b9 000b 0000 0000     ....Y...........
	...
   cb440:	682f 6d6f 2f65 756b 746c 6c75 432f 646f     /home/kultul/Cod
   cb450:	5f65 6f77 6b72 7073 6361 2f65 6150 7472     e_workspace/Part
   cb460:	6369 656c 495f 2f6f 6157 6c6c 5f79 4f46     icle_Io/Wally_FO
   cb470:	4f4d 4c4d 6c2f 6269 572f 6c61 796c 685f     MOML/lib/Wally_h
   cb480:	6e61 7364 6769 546e 7365 5f74 756d 746c     andsignTest_mult
   cb490:	7069 656c 624f 656a 7463 5f73 6e69 6566     ipleObjects_infe
   cb4a0:	6572 636e 6e69 2f67 7273 2f63 6465 6567     rencing/src/edge
   cb4b0:	692d 706d 6c75 6573 732d 6b64 742f 6e65     -impulse-sdk/ten
   cb4c0:	6f73 6672 6f6c 2f77 696c 6574 6d2f 6369     sorflow/lite/mic
   cb4d0:	6f72 6b2f 7265 656e 736c 632f 6e6f 2e76     ro/kernels/conv.
   cb4e0:	7063 0070 682f 6d6f 2f65 756b 746c 6c75     cpp./home/kultul
   cb4f0:	432f 646f 5f65 6f77 6b72 7073 6361 2f65     /Code_workspace/
   cb500:	6150 7472 6369 656c 495f 2f6f 6157 6c6c     Particle_Io/Wall
   cb510:	5f79 4f46 4f4d 4c4d 6c2f 6269 572f 6c61     y_FOMOML/lib/Wal
   cb520:	796c 685f 6e61 7364 6769 546e 7365 5f74     ly_handsignTest_
   cb530:	756d 746c 7069 656c 624f 656a 7463 5f73     multipleObjects_
   cb540:	6e69 6566 6572 636e 6e69 2f67 7273 2f63     inferencing/src/
   cb550:	6465 6567 692d 706d 6c75 6573 732d 6b64     edge-impulse-sdk
   cb560:	742f 6e65 6f73 6672 6f6c 2f77 696c 6574     /tensorflow/lite
   cb570:	6d2f 6369 6f72 6b2f 7265 656e 736c 632f     /micro/kernels/c
   cb580:	6e6f 2e76 7063 2070 7948 7262 6469 6d20     onv.cpp Hybrid m
   cb590:	646f 6c65 2073 7261 2065 6f6e 2074 7573     odels are not su
   cb5a0:	7070 726f 6574 2064 6e6f 5420 4c46 7469     pported on TFLit
   cb5b0:	2065 694d 7263 2e6f 0000 0000 a22d 000b     e Micro.....-...
   cb5c0:	0000 0000 a70d 000b a8cd 000b 0000 0000     ................
	...
   cb5dc:	682f 6d6f 2f65 756b 746c 6c75 432f 646f     /home/kultul/Cod
   cb5ec:	5f65 6f77 6b72 7073 6361 2f65 6150 7472     e_workspace/Part
   cb5fc:	6369 656c 495f 2f6f 6157 6c6c 5f79 4f46     icle_Io/Wally_FO
   cb60c:	4f4d 4c4d 6c2f 6269 572f 6c61 796c 685f     MOML/lib/Wally_h
   cb61c:	6e61 7364 6769 546e 7365 5f74 756d 746c     andsignTest_mult
   cb62c:	7069 656c 624f 656a 7463 5f73 6e69 6566     ipleObjects_infe
   cb63c:	6572 636e 6e69 2f67 7273 2f63 6465 6567     rencing/src/edge
   cb64c:	692d 706d 6c75 6573 732d 6b64 742f 6e65     -impulse-sdk/ten
   cb65c:	6f73 6672 6f6c 2f77 696c 6574 6d2f 6369     sorflow/lite/mic
   cb66c:	6f72 6b2f 7265 656e 736c 612f 6464 632e     ro/kernels/add.c
   cb67c:	7070 6900 706e 7475 2031 3d21 6e20 6c75     pp.input1 != nul
   cb68c:	706c 7274 6900 706e 7475 2032 3d21 6e20     lptr.input2 != n
   cb69c:	6c75 706c 7274 0000 a9f1 000b 0000 0000     ullptr..........
   cb6ac:	ac09 000b b2d9 000b 0000 0000 0000 0000     ................
	...
   cb6c4:	682f 6d6f 2f65 756b 746c 6c75 432f 646f     /home/kultul/Cod
   cb6d4:	5f65 6f77 6b72 7073 6361 2f65 6150 7472     e_workspace/Part
   cb6e4:	6369 656c 495f 2f6f 6157 6c6c 5f79 4f46     icle_Io/Wally_FO
   cb6f4:	4f4d 4c4d 6c2f 6269 572f 6c61 796c 685f     MOML/lib/Wally_h
   cb704:	6e61 7364 6769 546e 7365 5f74 756d 746c     andsignTest_mult
   cb714:	7069 656c 624f 656a 7463 5f73 6e69 6566     ipleObjects_infe
   cb724:	6572 636e 6e69 2f67 7273 2f63 6465 6567     rencing/src/edge
   cb734:	692d 706d 6c75 6573 732d 6b64 742f 6e65     -impulse-sdk/ten
   cb744:	6f73 6672 6f6c 2f77 696c 6574 6d2f 6369     sorflow/lite/mic
   cb754:	6f72 6b2f 7265 656e 736c 632f 6e6f 5f76     ro/kernels/conv_
   cb764:	6f63 6d6d 6e6f 632e 7070 0000               common.cpp..

000cb770 <_ZN6tflite15kConvBiasTensorE>:
   cb770:	0002 0000                                   ....

000cb774 <_ZN6tflite16kConvInputTensorE>:
   cb774:	0000 0000                                   ....

000cb778 <_ZN6tflite17kConvOutputTensorE>:
   cb778:	0000 0000                                   ....

000cb77c <_ZN6tflite18kConvWeightsTensorE>:
   cb77c:	0001 0000                                   ....

000cb780 <_ZN6tflite23kConvQuantizedDimensionE>:
   cb780:	0000 0000 682f 6d6f 2f65 756b 746c 6c75     ..../home/kultul
   cb790:	432f 646f 5f65 6f77 6b72 7073 6361 2f65     /Code_workspace/
   cb7a0:	6150 7472 6369 656c 495f 2f6f 6157 6c6c     Particle_Io/Wall
   cb7b0:	5f79 4f46 4f4d 4c4d 6c2f 6269 572f 6c61     y_FOMOML/lib/Wal
   cb7c0:	796c 685f 6e61 7364 6769 546e 7365 5f74     ly_handsignTest_
   cb7d0:	756d 746c 7069 656c 624f 656a 7463 5f73     multipleObjects_
   cb7e0:	6e69 6566 6572 636e 6e69 2f67 7273 2f63     inferencing/src/
   cb7f0:	6465 6567 692d 706d 6c75 6573 732d 6b64     edge-impulse-sdk
   cb800:	742f 6e65 6f73 6672 6f6c 2f77 696c 6574     /tensorflow/lite
   cb810:	6d2f 6369 6f72 6b2f 7265 656e 736c 732f     /micro/kernels/s
   cb820:	666f 6d74 7861 635f 6d6f 6f6d 2e6e 7063     oftmax_common.cp
   cb830:	0070 754e 496d 706e 7475 2873 6f6e 6564     p.NumInputs(node
   cb840:	0029 754e 446d 6d69 6e65 6973 6e6f 2873     ).NumDimensions(
   cb850:	6e69 7570 2974 3e20 203d 0031 6f6e 6564     input) >= 1.node
   cb860:	3e2d 7375 7265 645f 7461 2061 3d21 6e20     ->user_data != n
   cb870:	6c75 706c 7274 7200 7761 655f 7078 6c5f     ullptr.raw_exp_l
   cb880:	7475 2120 203d 756e 6c6c 7470 0072 6e6f     ut != nullptr.on
   cb890:	5f65 766f 7265 6f5f 656e 705f 756c 5f73     e_over_one_plus_
   cb8a0:	5f78 756c 2074 3d21 6e20 6c75 706c 7274     x_lut != nullptr
   cb8b0:	6900 706e 7475 3e2d 7974 6570 3d20 203d     .input->type == 
   cb8c0:	546b 4c66 7469 4965 746e 2038 7c7c 6920     kTfLiteInt8 || i
   cb8d0:	706e 7475 3e2d 7974 6570 3d20 203d 546b     nput->type == kT
   cb8e0:	4c66 7469 4965 746e 3631 2500 3a73 6425     fLiteInt16.%s:%d
   cb8f0:	2520 2073 6f6e 2074 656e 7261 2520 2073      %s not near %s 
   cb900:	2528 2066 3d21 2520 2966 3100 662e 2f20     (%f != %f).1.f /
   cb910:	3320 3732 3836 6f00 7475 7570 2d74 703e      32768.output->p
   cb920:	7261 6d61 2e73 6373 6c61 0065 332d 3732     arams.scale.-327
   cb930:	3836 3100 662e 2f20 3620 3535 3633 2500     68.1.f / 65536.%
   cb940:	3a73 6425 2520 2073 3d21 2520 2073 2528     s:%d %s != %s (%
   cb950:	2073 3d21 2520 2973 6b00 6654 694c 6574     s != %s).kTfLite
   cb960:	6e49 3874 2d00 3231 0038 756f 7074 7475     Int8.-128.output
   cb970:	3e2d 6170 6172 736d 732e 6163 656c 3d20     ->params.scale =
   cb980:	203d 2e31 2066 202f 3532 0036 546b 4c66     = 1.f / 256.kTfL
   cb990:	7469 4665 6f6c 7461 3233 2f00 6f68 656d     iteFloat32./home
   cb9a0:	6b2f 6c75 7574 2f6c 6f43 6564 775f 726f     /kultul/Code_wor
   cb9b0:	736b 6170 6563 502f 7261 6974 6c63 5f65     kspace/Particle_
   cb9c0:	6f49 572f 6c61 796c 465f 4d4f 4d4f 2f4c     Io/Wally_FOMOML/
   cb9d0:	696c 2f62 6157 6c6c 5f79 6168 646e 6973     lib/Wally_handsi
   cb9e0:	6e67 6554 7473 6d5f 6c75 6974 6c70 4f65     gnTest_multipleO
   cb9f0:	6a62 6365 7374 695f 666e 7265 6e65 6963     bjects_inferenci
   cba00:	676e 732f 6372 652f 6764 2d65 6d69 7570     ng/src/edge-impu
   cba10:	736c 2d65 6473 2f6b 6574 736e 726f 6c66     lse-sdk/tensorfl
   cba20:	776f 6c2f 7469 2f65 656b 6e72 6c65 2f73     ow/lite/kernels/
   cba30:	656b 6e72 6c65 755f 6974 5f6c 696c 6574     kernel_util_lite
   cba40:	632e 7070 6900 706e 7475 705f 6f72 7564     .cpp.input_produ
   cba50:	7463 735f 6163 656c 3e20 203d 0030 6373     ct_scale >= 0.sc
   cba60:	6c61 5f65 6964 6666 2f20 6f20 7475 7570     ale_diff / outpu
   cba70:	5f74 6373 6c61 2065 3d3c 3020 302e 0032     t_scale <= 0.02.
   cba80:	6166 736c 0065 6e69 7570 2d74 713e 6175     false.input->qua
   cba90:	746e 7a69 7461 6f69 2e6e 7974 6570 6600     ntization.type.f
   cbaa0:	6c69 6574 2d72 743e 7079 0065 756e 5f6d     ilter->type.num_
   cbab0:	6863 6e61 656e 736c 6600 6c69 6574 2d72     channels.filter-
   cbac0:	643e 6d69 2d73 643e 7461 5b61 6661 6966     >dims->data[affi
   cbad0:	656e 715f 6175 746e 7a69 7461 6f69 2d6e     ne_quantization-
   cbae0:	713e 6175 746e 7a69 6465 645f 6d69 6e65     >quantized_dimen
   cbaf0:	6973 6e6f 005d 0000                         sion]...

000cbaf8 <_ZTVN5spark12NetworkClassE>:
	...
   cbb00:	c615 000b c61f 000b c629 000b c633 000b     ........)...3...
   cbb10:	c63d 000b c649 000b c655 000b c65d 000b     =...I...U...]...
   cbb20:	c665 000b c671 000b c679 000b c683 000b     e...q...y.......
   cbb30:	c68d 000b                                   ....

000cbb34 <_ZTVN5spark9WiFiClassE>:
	...
   cbb3c:	c7d7 000b c7cd 000b c7c3 000b c779 000b     ............y...
   cbb4c:	c7b7 000b c7ab 000b c655 000b c65d 000b     ........U...]...
   cbb5c:	c79f 000b c797 000b c78d 000b c783 000b     ................
   cbb6c:	c68d 000b                                   ....

000cbb70 <_ZTV7TwoWire>:
	...
   cbb78:	c7f5 000b c83f 000b c817 000b c7f7 000b     ....?...........
   cbb88:	c81f 000b c827 000b c82f 000b c837 000b     ....'.../...7...

000cbb98 <_ZTV11USARTSerial>:
	...
   cbba0:	c8b3 000b c91f 000b c8f7 000b d215 000b     ................
   cbbb0:	c8c7 000b c8e3 000b c8d5 000b c8f1 000b     ................
   cbbc0:	c8b5 000b c8b9 000b                         ........

000cbbc8 <_ZTV9USBSerial>:
	...
   cbbd0:	c95b 000b c9c3 000b c999 000b d215 000b     [...............
   cbbe0:	c98b 000b c95d 000b c96d 000b c9bd 000b     ....]...m.......
   cbbf0:	c97d 000b c955 000b                         }...U...

000cbbf8 <_ZTV9IPAddress>:
	...
   cbc00:	ca79 000b ca69 000b ca6b 000b               y...i...k...

000cbc0c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   cbc14:	cb59 000b cb5f 000b cb9d 000b cb6d 000b     Y..._.......m...
   cbc24:	cb5b 000b 5925 252d 2d6d 6425 2554 3a48     [...%Y-%m-%dT%H:
   cbc34:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.
   cbc44:	7061 0070                                   app.

000cbc48 <_ZTVN5spark13EthernetClassE>:
	...
   cbc50:	d37b 000b d371 000b d367 000b d35d 000b     {...q...g...]...
   cbc60:	d351 000b d345 000b c655 000b c65d 000b     Q...E...U...]...
   cbc70:	d339 000b d331 000b d327 000b d31d 000b     9...1...'.......
   cbc80:	c68d 000b                                   ....

000cbc84 <_ZSt7nothrow>:
   cbc84:	0000 0000                                   ....

000cbc88 <halF>:
   cbc88:	0000 3f00 0000 bf00                         ...?....

000cbc90 <ln2HI>:
   cbc90:	7180 3f31 7180 bf31                         .q1?.q1.

000cbc98 <ln2LO>:
   cbc98:	f7d1 3717 f7d1 b717 4552 4e45 2054 616d     ...7....REENT ma
   cbca8:	6c6c 636f 7320 6375 6563 6465 6465 2f00     lloc succeeded./
   cbcb8:	6e6d 2f74 6f77 6b72 7073 6361 2f65 6f77     mnt/workspace/wo
   cbcc8:	6b72 7073 6361 2f65 4347 2d43 3031 702d     rkspace/GCC-10-p
   cbcd8:	7069 6c65 6e69 2f65 656a 6b6e 6e69 2d73     ipeline/jenkins-
   cbce8:	4347 2d43 3031 702d 7069 6c65 6e69 2d65     GCC-10-pipeline-
   cbcf8:	3834 325f 3230 3130 3231 5f34 3631 3630     48_20201124_1606
   cbd08:	3831 3630 3134 732f 6372 6e2f 7765 696c     180641/src/newli
   cbd18:	2f62 656e 6c77 6269 6c2f 6269 2f63 7473     b/newlib/libc/st
   cbd28:	6c64 6269 722f 6e61 2e64 0063 666e 6900     dlib/rand.c.nf.i
   cbd38:	696e 7974 6100 006e                         nity.an.

000cbd40 <fpi.1>:
   cbd40:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   cbd50:	0000 0000                                   ....

000cbd54 <fpinan.0>:
   cbd54:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   cbd64:	0000 0000                                   ....

000cbd68 <tinytens>:
   cbd68:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   cbd78:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   cbd88:	6f43 64ac 0628 1168                         Co.d(.h.

000cbd90 <_ctype_>:
   cbd90:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   cbda0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   cbdb0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   cbdc0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   cbdd0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   cbde0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   cbdf0:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   cbe00:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   cbe10:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000cbe94 <__sf_fake_stderr>:
	...

000cbeb4 <__sf_fake_stdin>:
	...

000cbed4 <__sf_fake_stdout>:
	...
   cbef4:	6142 6c6c 636f 7320 6375 6563 6465 6465     Balloc succeeded
   cbf04:	2f00 6e6d 2f74 6f77 6b72 7073 6361 2f65     ./mnt/workspace/
   cbf14:	6f77 6b72 7073 6361 2f65 4347 2d43 3031     workspace/GCC-10
   cbf24:	702d 7069 6c65 6e69 2f65 656a 6b6e 6e69     -pipeline/jenkin
   cbf34:	2d73 4347 2d43 3031 702d 7069 6c65 6e69     s-GCC-10-pipelin
   cbf44:	2d65 3834 325f 3230 3130 3231 5f34 3631     e-48_20201124_16
   cbf54:	3630 3831 3630 3134 732f 6372 6e2f 7765     06180641/src/new
   cbf64:	696c 2f62 656e 6c77 6269 6c2f 6269 2f63     lib/newlib/libc/
   cbf74:	7473 6c64 6269 672f 7464 616f 672d 7465     stdlib/gdtoa-get
   cbf84:	6568 2e78 0063 0000                         hex.c...

000cbf8c <_C_numeric_locale>:
   cbf8c:	b41d 000c 0df1 000c a2b0 2003 0043 4f50     ........... C.PO
   cbf9c:	4953 0058 6d2f 746e 772f 726f 736b 6170     SIX./mnt/workspa
   cbfac:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   cbfbc:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   cbfcc:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   cbfdc:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   cbfec:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   cbffc:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   cc00c:	6362 732f 6474 696c 2f62 706d 6572 2e63     bc/stdlib/mprec.
   cc01c:	0063 0000                                   c...

000cc020 <__mprec_bigtens>:
   cc020:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   cc030:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   cc040:	bf3c 7f73 4fdd 7515                         <.s..O.u

000cc048 <__mprec_tens>:
   cc048:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   cc058:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   cc068:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   cc078:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   cc088:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   cc098:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   cc0a8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   cc0b8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   cc0c8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   cc0d8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   cc0e8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   cc0f8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   cc108:	9db4 79d9 7843 44ea                         ...yCx.D

000cc110 <p05.0>:
   cc110:	0005 0000 0019 0000 007d 0000               ........}...

000cc11c <link_const_variable_data_end>:
   cc11c:	000b8091 	.word	0x000b8091
   cc120:	000b844d 	.word	0x000b844d
   cc124:	000bc765 	.word	0x000bc765
   cc128:	000bc7e1 	.word	0x000bc7e1
   cc12c:	000bd1e5 	.word	0x000bd1e5
   cc130:	000bd1f1 	.word	0x000bd1f1
   cc134:	000bd205 	.word	0x000bd205
   cc138:	000bd2e9 	.word	0x000bd2e9
   cc13c:	000bd2f9 	.word	0x000bd2f9
   cc140:	000bd385 	.word	0x000bd385

000cc144 <link_constructors_end>:
	...
